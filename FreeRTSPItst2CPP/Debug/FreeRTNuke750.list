
FreeRTNuke750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800c208  0800c208  0001c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c35c  0800c35c  0001c35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c360  0800c360  0001c360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  0800c364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000043d4  24000108  0800c46c  00020108  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240044dc  0800c46c  000244dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002686f  00000000  00000000  00020136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004895  00000000  00000000  000469a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c50  00000000  00000000  0004b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a88  00000000  00000000  0004ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dd06  00000000  00000000  0004e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023e11  00000000  00000000  0008c61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187506  00000000  00000000  000b042f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00237935  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fb4  00000000  00000000  00237988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000108 	.word	0x24000108
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c1f0 	.word	0x0800c1f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400010c 	.word	0x2400010c
 80002dc:	0800c1f0 	.word	0x0800c1f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
 80006a4:	615a      	str	r2, [r3, #20]
 80006a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <MX_ADC1_Init+0xe8>)
 80006aa:	4a31      	ldr	r2, [pc, #196]	; (8000770 <MX_ADC1_Init+0xec>)
 80006ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006ae:	4b2f      	ldr	r3, [pc, #188]	; (800076c <MX_ADC1_Init+0xe8>)
 80006b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006b6:	4b2d      	ldr	r3, [pc, #180]	; (800076c <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <MX_ADC1_Init+0xe8>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_ADC1_Init+0xe8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_ADC1_Init+0xe8>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC1_Init+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC1_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000706:	4819      	ldr	r0, [pc, #100]	; (800076c <MX_ADC1_Init+0xe8>)
 8000708:	f001 fe76 	bl	80023f8 <HAL_ADC_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000712:	f000 fd9b 	bl	800124c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <MX_ADC1_Init+0xe8>)
 8000722:	f002 fc8d 	bl	8003040 <HAL_ADCEx_MultiModeConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800072c:	f000 fd8e 	bl	800124c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_ADC1_Init+0xf0>)
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2306      	movs	r3, #6
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000740:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000742:	2304      	movs	r3, #4
 8000744:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC1_Init+0xe8>)
 8000754:	f001 fff2 	bl	800273c <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075e:	f000 fd75 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	24000124 	.word	0x24000124
 8000770:	40022000 	.word	0x40022000
 8000774:	4fb80000 	.word	0x4fb80000

08000778 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a25      	ldr	r2, [pc, #148]	; (800082c <HAL_ADC_MspInit+0xb4>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d144      	bne.n	8000824 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 800079c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007a0:	4a23      	ldr	r2, [pc, #140]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 80007ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b0:	f003 0320 	and.w	r3, r3, #32
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_ADC_MspInit+0xb8>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    PA5     ------> ADC1_INP19
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007f4:	233c      	movs	r3, #60	; 0x3c
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <HAL_ADC_MspInit+0xbc>)
 8000808:	f002 fdd8 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800080c:	2310      	movs	r3, #16
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <HAL_ADC_MspInit+0xc0>)
 8000820:	f002 fdcc 	bl	80033bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40022000 	.word	0x40022000
 8000830:	58024400 	.word	0x58024400
 8000834:	58020000 	.word	0x58020000
 8000838:	58020800 	.word	0x58020800

0800083c <clampValLimit>:
//Clamps the intended PWM output value using limit status info.
//Checks using bitwise shifts if bit 0 (Lim Right) is set or bit 1 (Lim Left)
//if they are set, it checks if val is positive.
//if they do, we clamp the output to zero.
int32_t clampValLimit(int32_t val, uint8_t axis)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
	uint8_t is_positive = (val>0)?1:0;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	bfcc      	ite	gt
 800084e:	2301      	movgt	r3, #1
 8000850:	2300      	movle	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	73fb      	strb	r3, [r7, #15]

	uint8_t mask = 1<< (is_positive + 2*axis);
 8000856:	7bfa      	ldrb	r2, [r7, #15]
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	2201      	movs	r2, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	73bb      	strb	r3, [r7, #14]

	if(limit_status & mask)
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <clampValLimit+0x4c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	4013      	ands	r3, r2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <clampValLimit+0x3e>
	{
		val=0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
	}
	return val;
 800087a:	687b      	ldr	r3, [r7, #4]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	24000189 	.word	0x24000189

0800088c <applyLimitToCurrentPWM>:

void applyLimitToCurrentPWM()
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<4;++i)
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	e015      	b.n	80008c4 <applyLimitToCurrentPWM+0x38>
	{
		uint8_t mask = 1<<i;
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2201      	movs	r2, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	71bb      	strb	r3, [r7, #6]
		if(mask&limit_status)
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <applyLimitToCurrentPWM+0x4c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	4013      	ands	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d005      	beq.n	80008be <applyLimitToCurrentPWM+0x32>
		{
//			(*Tim8_CCRArray[i]) = 0;
			(*Tim8_CCRArray[i]) = 0;
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4a09      	ldr	r2, [pc, #36]	; (80008dc <applyLimitToCurrentPWM+0x50>)
 80008b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0;i<4;++i)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	3301      	adds	r3, #1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d9e6      	bls.n	8000898 <applyLimitToCurrentPWM+0xc>
		}
	}
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	24000189 	.word	0x24000189
 80008dc:	24000000 	.word	0x24000000

080008e0 <readPin>:
		{LOCK_GPIO_Port, LOCK_Pin}
};


uint8_t readPin(uint8_t id)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	 if ((LimitPinArray[id].pPort->IDR & LimitPinArray[id].pin) != 0x00U)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <readPin+0x38>)
 80008ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <readPin+0x38>)
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	889b      	ldrh	r3, [r3, #4]
 80008fe:	4013      	ands	r3, r2
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <readPin+0x28>
	 {
		 return 0;
 8000904:	2300      	movs	r3, #0
 8000906:	e000      	b.n	800090a <readPin+0x2a>
	 }
	 return 1;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	24000070 	.word	0x24000070

0800091c <updateLimit>:

void setPower(uint8_t axis, int32_t val);

//Read limit switches and update limit_status variable. Limit PWM accordingly.
uint8_t updateLimit()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af02      	add	r7, sp, #8
	uint8_t left = readPin(0);
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff ffdc 	bl	80008e0 <readPin>
 8000928:	4603      	mov	r3, r0
 800092a:	71bb      	strb	r3, [r7, #6]
	uint8_t right = readPin(1);
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff ffd7 	bl	80008e0 <readPin>
 8000932:	4603      	mov	r3, r0
 8000934:	717b      	strb	r3, [r7, #5]
	uint8_t extreme = readPin(2);
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff ffd2 	bl	80008e0 <readPin>
 800093c:	4603      	mov	r3, r0
 800093e:	713b      	strb	r3, [r7, #4]
	uint8_t limit_y_up = readPin(3);
 8000940:	2003      	movs	r0, #3
 8000942:	f7ff ffcd 	bl	80008e0 <readPin>
 8000946:	4603      	mov	r3, r0
 8000948:	70fb      	strb	r3, [r7, #3]

	printf("l %i r %i x %i y\n", (uint16_t)left, (uint16_t)right, (uint16_t)extreme, limit_y_up);
 800094a:	79b9      	ldrb	r1, [r7, #6]
 800094c:	797a      	ldrb	r2, [r7, #5]
 800094e:	7938      	ldrb	r0, [r7, #4]
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	4603      	mov	r3, r0
 8000956:	4824      	ldr	r0, [pc, #144]	; (80009e8 <updateLimit+0xcc>)
 8000958:	f00a fd68 	bl	800b42c <iprintf>

	if(right && left)
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <updateLimit+0x50>
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <updateLimit+0x50>
	{
		return LIMIT_CENTER;
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	e038      	b.n	80009de <updateLimit+0xc2>
	}

	uint8_t new_status=0;
 800096c:	2300      	movs	r3, #0
 800096e:	71fb      	strb	r3, [r7, #7]

	if(left) new_status = LIMIT_LEFT;
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <updateLimit+0x60>
 8000976:	2301      	movs	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e004      	b.n	8000986 <updateLimit+0x6a>
	else if(right) new_status = LIMIT_RIGHT;
 800097c:	797b      	ldrb	r3, [r7, #5]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <updateLimit+0x6a>
 8000982:	2302      	movs	r3, #2
 8000984:	71fb      	strb	r3, [r7, #7]

	if(extreme&&left)new_status |= LIMIT_MAXLEFT;
 8000986:	793b      	ldrb	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <updateLimit+0x7e>
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <updateLimit+0x7e>
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	71fb      	strb	r3, [r7, #7]
	if(extreme&&right)new_status |= LIMIT_MAXRIGHT;
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <updateLimit+0x92>
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <updateLimit+0x92>
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	71fb      	strb	r3, [r7, #7]

	if(limit_y_up)new_status |= LIMIT_Y_UP;
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d003      	beq.n	80009bc <updateLimit+0xa0>
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f043 0308 	orr.w	r3, r3, #8
 80009ba:	71fb      	strb	r3, [r7, #7]


	//SOFT LIMIT: Maybe add here...

	limit_status= new_status;
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <updateLimit+0xd0>)
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	7013      	strb	r3, [r2, #0]

	applyLimitToCurrentPWM();
 80009c2:	f7ff ff63 	bl	800088c <applyLimitToCurrentPWM>

	if(limit_status&LIMIT_LEFT)
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <updateLimit+0xd0>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d004      	beq.n	80009de <updateLimit+0xc2>
		setPower(0, 12000);
 80009d4:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 f865 	bl	8000aa8 <setPower>

}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	0800c214 	.word	0x0800c214
 80009ec:	24000189 	.word	0x24000189

080009f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <vApplicationGetIdleTaskMemory+0x2c>)
 8000a00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <vApplicationGetIdleTaskMemory+0x30>)
 8000a06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	24000190 	.word	0x24000190
 8000a20:	24000244 	.word	0x24000244

08000a24 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	updateLimit();
 8000a2a:	f7ff ff77 	bl	800091c <updateLimit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_FREERTOS_Init+0x34>)
 8000a30:	1d3c      	adds	r4, r7, #4
 8000a32:	461d      	mov	r5, r3
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f009 f8d8 	bl	8009bfa <osThreadCreate>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <MX_FREERTOS_Init+0x38>)
 8000a4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bdb0      	pop	{r4, r5, r7, pc}
 8000a58:	0800c228 	.word	0x0800c228
 8000a5c:	2400018c 	.word	0x2400018c

08000a60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */


  uint32_t cnt=0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
	//  if(HAL_GPIO_ReadPin(K1_GPIO_Port, K1_Pin))
	//	  printf("k1 ");

//	  HAL_GPIO_TogglePin(B0_GPIO_Port, B0_Pin);

	  printf("%i %i %i\n", (int32_t)((int16_t)TIM3->CNT), (int32_t)((int16_t)TIM4->CNT), TIM5->CNT);
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <StartDefaultTask+0x38>)
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <StartDefaultTask+0x3c>)
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <StartDefaultTask+0x40>)
 8000a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <StartDefaultTask+0x44>)
 8000a82:	f00a fcd3 	bl	800b42c <iprintf>
	  cnt++;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
	  osDelay(5000);
 8000a8c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a90:	f009 f8ff 	bl	8009c92 <osDelay>
  {
 8000a94:	e7ea      	b.n	8000a6c <StartDefaultTask+0xc>
 8000a96:	bf00      	nop
 8000a98:	40000400 	.word	0x40000400
 8000a9c:	40000800 	.word	0x40000800
 8000aa0:	40000c00 	.word	0x40000c00
 8000aa4:	0800c244 	.word	0x0800c244

08000aa8 <setPower>:

//Set power to the PWM registers.
//If it is positive, the even registers are set.
//If negative, the odds receive the PWM.
void setPower(uint8_t axis, int32_t val)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
	uint8_t id_base = 2*axis;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]

	if(val>=0)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db13      	blt.n	8000ae8 <setPower+0x40>
	{
		val = clampValLimit(val, axis);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6838      	ldr	r0, [r7, #0]
 8000ac6:	f7ff feb9 	bl	800083c <clampValLimit>
 8000aca:	6038      	str	r0, [r7, #0]
		(*Tim8_CCRArray[id_base])=0;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <setPower+0x74>)
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
		(*Tim8_CCRArray[id_base+1])= val;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <setPower+0x74>)
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	601a      	str	r2, [r3, #0]
	{
		val = clampValLimit(val, axis);
		(*Tim8_CCRArray[id_base])=-val;
		(*Tim8_CCRArray[id_base+1])=0;
	}
}
 8000ae6:	e014      	b.n	8000b12 <setPower+0x6a>
		val = clampValLimit(val, axis);
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4619      	mov	r1, r3
 8000aec:	6838      	ldr	r0, [r7, #0]
 8000aee:	f7ff fea5 	bl	800083c <clampValLimit>
 8000af2:	6038      	str	r0, [r7, #0]
		(*Tim8_CCRArray[id_base])=-val;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	4259      	negs	r1, r3
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <setPower+0x74>)
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	460a      	mov	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
		(*Tim8_CCRArray[id_base+1])=0;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	3301      	adds	r3, #1
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <setPower+0x74>)
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	24000000 	.word	0x24000000

08000b20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == K1_Pin)
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b30:	d135      	bne.n	8000b9e <HAL_GPIO_EXTI_Callback+0x7e>
	{
		GPIO_PinState pstate = HAL_GPIO_ReadPin(K1_GPIO_Port, K1_Pin);
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	4859      	ldr	r0, [pc, #356]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x17c>)
 8000b38:	f002 fdf0 	bl	800371c <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73bb      	strb	r3, [r7, #14]


		for(uint16_t id=0;id<4;++id)
 8000b40:	2300      	movs	r3, #0
 8000b42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b44:	e016      	b.n	8000b74 <HAL_GPIO_EXTI_Callback+0x54>
		{
			uint32_t pwr=0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
			if(pstate && id==button_motor_pwm_id) pwr=6000;
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d008      	beq.n	8000b62 <HAL_GPIO_EXTI_Callback+0x42>
 8000b50:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x180>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d102      	bne.n	8000b62 <HAL_GPIO_EXTI_Callback+0x42>
 8000b5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8000b60:	623b      	str	r3, [r7, #32]
			(*Tim8_CCRArray[id])=pwr;
 8000b62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b64:	4a4f      	ldr	r2, [pc, #316]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x184>)
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	6a3a      	ldr	r2, [r7, #32]
 8000b6c:	601a      	str	r2, [r3, #0]
		for(uint16_t id=0;id<4;++id)
 8000b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b70:	3301      	adds	r3, #1
 8000b72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d9e5      	bls.n	8000b46 <HAL_GPIO_EXTI_Callback+0x26>
		}

		if(pstate)button_motor_pwm_id= (button_motor_pwm_id+1)%4;
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 8089 	beq.w	8000c94 <HAL_GPIO_EXTI_Callback+0x174>
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x180>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	425a      	negs	r2, r3
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	f002 0203 	and.w	r2, r2, #3
 8000b92:	bf58      	it	pl
 8000b94:	4253      	negpl	r3, r2
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x180>)
 8000b9a:	701a      	strb	r2, [r3, #0]
			updateLimit();

			printf("limit          %04X\n", limit_status);
		}
	}
}
 8000b9c:	e07a      	b.n	8000c94 <HAL_GPIO_EXTI_Callback+0x174>
		CtlPin* myCtlPin=0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
		int i=0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
		for(i=0;i<8;++i) //Todo: Opt this by using a lookup table from PIN->CtlPinArray
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	e017      	b.n	8000bdc <HAL_GPIO_EXTI_Callback+0xbc>
			if(GPIO_Pin == CtlPinArray[i].pin)
 8000bac:	493e      	ldr	r1, [pc, #248]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x188>)
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	3304      	adds	r3, #4
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	88fa      	ldrh	r2, [r7, #6]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d108      	bne.n	8000bd6 <HAL_GPIO_EXTI_Callback+0xb6>
				myCtlPin = &CtlPinArray[i];
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x188>)
 8000bd0:	4413      	add	r3, r2
 8000bd2:	61fb      	str	r3, [r7, #28]
				break;
 8000bd4:	e005      	b.n	8000be2 <HAL_GPIO_EXTI_Callback+0xc2>
		for(i=0;i<8;++i) //Todo: Opt this by using a lookup table from PIN->CtlPinArray
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	dde4      	ble.n	8000bac <HAL_GPIO_EXTI_Callback+0x8c>
		if(myCtlPin)
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d030      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x12a>
			GPIO_PinState pstate = HAL_GPIO_ReadPin(myCtlPin->pPort, GPIO_Pin);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	88fa      	ldrh	r2, [r7, #6]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 fd93 	bl	800371c <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	73fb      	strb	r3, [r7, #15]
			uint16_t pwm=4000;
 8000bfa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000bfe:	82fb      	strh	r3, [r7, #22]
			if(pstate) pwm=0;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_GPIO_EXTI_Callback+0xea>
 8000c06:	2300      	movs	r3, #0
 8000c08:	82fb      	strh	r3, [r7, #22]
			if(myCtlPin->x)
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00a      	beq.n	8000c2a <HAL_GPIO_EXTI_Callback+0x10a>
				setPower(0, myCtlPin->x*pwm);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	8afb      	ldrh	r3, [r7, #22]
 8000c1e:	fb02 f303 	mul.w	r3, r2, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff ff3f 	bl	8000aa8 <setPower>
			if(myCtlPin->y)
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00a      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x12a>
				setPower(1, myCtlPin->y*pwm);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	8afb      	ldrh	r3, [r7, #22]
 8000c3e:	fb02 f303 	mul.w	r3, r2, r3
 8000c42:	4619      	mov	r1, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ff2f 	bl	8000aa8 <setPower>
		FullPin* myfullpin=0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
		for(i=0;i<4;i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	e010      	b.n	8000c76 <HAL_GPIO_EXTI_Callback+0x156>
			if(GPIO_Pin == LimitPinArray[i].pin)
 8000c54:	4a15      	ldr	r2, [pc, #84]	; (8000cac <HAL_GPIO_EXTI_Callback+0x18c>)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	889b      	ldrh	r3, [r3, #4]
 8000c5e:	88fa      	ldrh	r2, [r7, #6]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d105      	bne.n	8000c70 <HAL_GPIO_EXTI_Callback+0x150>
				myfullpin=&LimitPinArray[i];
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_GPIO_EXTI_Callback+0x18c>)
 8000c6a:	4413      	add	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
				break;
 8000c6e:	e005      	b.n	8000c7c <HAL_GPIO_EXTI_Callback+0x15c>
		for(i=0;i<4;i++)
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	3301      	adds	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	ddeb      	ble.n	8000c54 <HAL_GPIO_EXTI_Callback+0x134>
		if(myfullpin)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d008      	beq.n	8000c94 <HAL_GPIO_EXTI_Callback+0x174>
			updateLimit();
 8000c82:	f7ff fe4b 	bl	800091c <updateLimit>
			printf("limit          %04X\n", limit_status);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x190>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x194>)
 8000c90:	f00a fbcc 	bl	800b42c <iprintf>
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	58020800 	.word	0x58020800
 8000ca0:	24000188 	.word	0x24000188
 8000ca4:	24000000 	.word	0x24000000
 8000ca8:	24000010 	.word	0x24000010
 8000cac:	24000070 	.word	0x24000070
 8000cb0:	24000189 	.word	0x24000189
 8000cb4:	0800c250 	.word	0x0800c250

08000cb8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PC12   ------> SPI3_MOSI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cce:	4b9d      	ldr	r3, [pc, #628]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a9b      	ldr	r2, [pc, #620]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b99      	ldr	r3, [pc, #612]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b95      	ldr	r3, [pc, #596]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a94      	ldr	r2, [pc, #592]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b91      	ldr	r3, [pc, #580]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	4b8e      	ldr	r3, [pc, #568]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	4a8c      	ldr	r2, [pc, #560]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1a:	4b8a      	ldr	r3, [pc, #552]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b86      	ldr	r3, [pc, #536]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	4a85      	ldr	r2, [pc, #532]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d38:	4b82      	ldr	r3, [pc, #520]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b7f      	ldr	r3, [pc, #508]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a7d      	ldr	r2, [pc, #500]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b7b      	ldr	r3, [pc, #492]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d64:	4b77      	ldr	r3, [pc, #476]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	4a76      	ldr	r2, [pc, #472]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d74:	4b73      	ldr	r3, [pc, #460]	; (8000f44 <MX_GPIO_Init+0x28c>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	4870      	ldr	r0, [pc, #448]	; (8000f48 <MX_GPIO_Init+0x290>)
 8000d88:	f002 fce0 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSSLCD_GPIO_Port, CSSLCD_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d92:	486d      	ldr	r0, [pc, #436]	; (8000f48 <MX_GPIO_Init+0x290>)
 8000d94:	f002 fcda 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSSF1_GPIO_Port, CSSF1_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2140      	movs	r1, #64	; 0x40
 8000d9c:	486b      	ldr	r0, [pc, #428]	; (8000f4c <MX_GPIO_Init+0x294>)
 8000d9e:	f002 fcd5 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSSF0_GPIO_Port, CSSF0_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	486a      	ldr	r0, [pc, #424]	; (8000f50 <MX_GPIO_Init+0x298>)
 8000da8:	f002 fcd0 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dac:	2308      	movs	r3, #8
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4861      	ldr	r0, [pc, #388]	; (8000f48 <MX_GPIO_Init+0x290>)
 8000dc4:	f002 fafa 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = K1_Pin|CT5_Pin;
 8000dc8:	f242 0320 	movw	r3, #8224	; 0x2020
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dce:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	485d      	ldr	r0, [pc, #372]	; (8000f54 <MX_GPIO_Init+0x29c>)
 8000de0:	f002 faec 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CT7_Pin|CT4_Pin|CT6_Pin|CT2_Pin;
 8000de4:	f240 4307 	movw	r3, #1031	; 0x407
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dea:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df0:	2302      	movs	r3, #2
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4855      	ldr	r0, [pc, #340]	; (8000f50 <MX_GPIO_Init+0x298>)
 8000dfc:	f002 fade 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CT1_Pin|CT3_Pin|CT0_Pin;
 8000e00:	f248 1380 	movw	r3, #33152	; 0x8180
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e06:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	484c      	ldr	r0, [pc, #304]	; (8000f48 <MX_GPIO_Init+0x290>)
 8000e18:	f002 fad0 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSSLCD_Pin;
 8000e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e26:	2302      	movs	r3, #2
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSSLCD_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	4844      	ldr	r0, [pc, #272]	; (8000f48 <MX_GPIO_Init+0x290>)
 8000e36:	f002 fac1 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LOCK_Pin|P54_Pin;
 8000e3a:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e40:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e46:	2302      	movs	r3, #2
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4841      	ldr	r0, [pc, #260]	; (8000f58 <MX_GPIO_Init+0x2a0>)
 8000e52:	f002 fab3 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e68:	2306      	movs	r3, #6
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4838      	ldr	r0, [pc, #224]	; (8000f54 <MX_GPIO_Init+0x29c>)
 8000e74:	f002 faa2 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = P55_Pin|P53_Pin;
 8000e78:	2318      	movs	r3, #24
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e7c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e82:	2302      	movs	r3, #2
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482f      	ldr	r0, [pc, #188]	; (8000f4c <MX_GPIO_Init+0x294>)
 8000e8e:	f002 fa95 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSSF1_Pin;
 8000e92:	2340      	movs	r3, #64	; 0x40
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSSF1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4828      	ldr	r0, [pc, #160]	; (8000f4c <MX_GPIO_Init+0x294>)
 8000eaa:	f002 fa87 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSSF0_Pin;
 8000eae:	2340      	movs	r3, #64	; 0x40
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSSF0_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4822      	ldr	r0, [pc, #136]	; (8000f50 <MX_GPIO_Init+0x298>)
 8000ec6:	f002 fa79 	bl	80033bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2105      	movs	r1, #5
 8000ece:	2006      	movs	r0, #6
 8000ed0:	f002 fa4c 	bl	800336c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f002 fa63 	bl	80033a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	2007      	movs	r0, #7
 8000ee0:	f002 fa44 	bl	800336c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f002 fa5b 	bl	80033a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	2008      	movs	r0, #8
 8000ef0:	f002 fa3c 	bl	800336c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ef4:	2008      	movs	r0, #8
 8000ef6:	f002 fa53 	bl	80033a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	2009      	movs	r0, #9
 8000f00:	f002 fa34 	bl	800336c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f04:	2009      	movs	r0, #9
 8000f06:	f002 fa4b 	bl	80033a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	200a      	movs	r0, #10
 8000f10:	f002 fa2c 	bl	800336c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f14:	200a      	movs	r0, #10
 8000f16:	f002 fa43 	bl	80033a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	2017      	movs	r0, #23
 8000f20:	f002 fa24 	bl	800336c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f24:	2017      	movs	r0, #23
 8000f26:	f002 fa3b 	bl	80033a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f002 fa1c 	bl	800336c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f34:	2028      	movs	r0, #40	; 0x28
 8000f36:	f002 fa33 	bl	80033a0 <HAL_NVIC_EnableIRQ>

}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	; 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58021000 	.word	0x58021000
 8000f4c:	58020c00 	.word	0x58020c00
 8000f50:	58020400 	.word	0x58020400
 8000f54:	58020800 	.word	0x58020800
 8000f58:	58020000 	.word	0x58020000

08000f5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f84:	e000      	b.n	8000f88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f9      	beq.n	8000f86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_write>:

#undef FLASH_LATENCY_0
#define FLASH_LATENCY_0 FLASH_LATENCY_4 //HACK IT!

int _write(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;++i)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <_write+0x26>
	{
		ITM_SendChar( (*ptr++));
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffc9 	bl	8000f5c <ITM_SendChar>
	for(int i=0;i<len;++i)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf1      	blt.n	8000fbc <_write+0x12>
	}
	return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f001 f811 	bl	8002010 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f002 fbe0 	bl	80037b4 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <main+0xf0>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <main+0xf0>)
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <main+0xf0>)
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <main+0xf4>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <main+0xf4>)
 8001014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <main+0xf4>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001026:	bf00      	nop
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <main+0xf4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001034:	d1f8      	bne.n	8001028 <main+0x44>


  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <main+0xf8>)
 8001038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <main+0xf8>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <main+0xf8>)
 8001048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <main+0xf4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <main+0xf4>)
 800105e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <main+0xf4>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <main+0xf0>)
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <main+0xf0>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	62d3      	str	r3, [r2, #44]	; 0x2c
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <main+0xf0>)
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001086:	bf00      	nop
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <main+0xf4>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001094:	d1f8      	bne.n	8001088 <main+0xa4>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f000 f825 	bl	80010e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800109a:	f000 f88d 	bl	80011b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109e:	f7ff fe0b 	bl	8000cb8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010a2:	f000 fe6b 	bl	8001d7c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80010a6:	f7ff faed 	bl	8000684 <MX_ADC1_Init>
  MX_TIM3_Init();
 80010aa:	f000 fb77 	bl	800179c <MX_TIM3_Init>
  MX_TIM4_Init();
 80010ae:	f000 fbcf 	bl	8001850 <MX_TIM4_Init>
  MX_TIM5_Init();
 80010b2:	f000 fc27 	bl	8001904 <MX_TIM5_Init>
  MX_TIM8_Init();
 80010b6:	f000 fc7f 	bl	80019b8 <MX_TIM8_Init>
  MX_SPI4_Init();
 80010ba:	f000 f8cd 	bl	8001258 <MX_SPI4_Init>
  MX_USART3_UART_Init();
 80010be:	f000 feab 	bl	8001e18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("starting kernel...\n");
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <main+0xfc>)
 80010c4:	f00a fa38 	bl	800b538 <puts>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010c8:	f7ff fcac 	bl	8000a24 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010cc:	f008 fd8e 	bl	8009bec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <main+0xec>
 80010d2:	bf00      	nop
 80010d4:	58000400 	.word	0x58000400
 80010d8:	58024800 	.word	0x58024800
 80010dc:	58024400 	.word	0x58024400
 80010e0:	0800c268 	.word	0x0800c268

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09c      	sub	sp, #112	; 0x70
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	224c      	movs	r2, #76	; 0x4c
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00a f8fd 	bl	800b2f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2220      	movs	r2, #32
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00a f8f7 	bl	800b2f2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001104:	2002      	movs	r0, #2
 8001106:	f002 fb55 	bl	80037b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800110a:	bf00      	nop
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <SystemClock_Config+0xcc>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001118:	d1f8      	bne.n	800110c <SystemClock_Config+0x28>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <SystemClock_Config+0xd0>)
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <SystemClock_Config+0xd0>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112a:	2301      	movs	r3, #1
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001138:	2302      	movs	r3, #2
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800113c:	2305      	movs	r3, #5
 800113e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001144:	2302      	movs	r3, #2
 8001146:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001148:	2302      	movs	r3, #2
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800114c:	2302      	movs	r3, #2
 800114e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001150:	2308      	movs	r3, #8
 8001152:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001154:	2300      	movs	r3, #0
 8001156:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fb61 	bl	8003828 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800116c:	f000 f86e 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	233f      	movs	r3, #63	; 0x3f
 8001172:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2303      	movs	r3, #3
 8001176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800117c:	2308      	movs	r3, #8
 800117e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001184:	2340      	movs	r3, #64	; 0x40
 8001186:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800118e:	2340      	movs	r3, #64	; 0x40
 8001190:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2104      	movs	r1, #4
 8001196:	4618      	mov	r0, r3
 8001198:	f002 ffa0 	bl	80040dc <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011a2:	f000 f853 	bl	800124c <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3770      	adds	r7, #112	; 0x70
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	58024800 	.word	0x58024800
 80011b4:	58024400 	.word	0x58024400

080011b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0b0      	sub	sp, #192	; 0xc0
 80011bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	22c0      	movs	r2, #192	; 0xc0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00a f894 	bl	800b2f2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <PeriphCommonClock_Config+0x6c>)
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80011d4:	2305      	movs	r3, #5
 80011d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 40;
 80011d8:	2328      	movs	r3, #40	; 0x28
 80011da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80011fa:	2301      	movs	r3, #1
 80011fc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 80011fe:	2308      	movs	r3, #8
 8001200:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fb34 	bl	8004878 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8001216:	f000 f819 	bl	800124c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	37c0      	adds	r7, #192	; 0xc0
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	00082003 	.word	0x00082003

08001228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123a:	f000 ff25 	bl	8002088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40010000 	.word	0x40010000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MX_SPI4_Init+0x98>)
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <MX_SPI4_Init+0x9c>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <MX_SPI4_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_SPI4_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_SPI4_Init+0x98>)
 8001270:	2203      	movs	r2, #3
 8001272:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_SPI4_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_SPI4_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_SPI4_Init+0x98>)
 8001282:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001286:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_SPI4_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_SPI4_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_SPI4_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_SPI4_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_SPI4_Init+0x98>)
 80012de:	f005 ffc9 	bl	8007274 <HAL_SPI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_SPI4_Init+0x94>
  {
    Error_Handler();
 80012e8:	f7ff ffb0 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	24000444 	.word	0x24000444
 80012f4:	40013400 	.word	0x40013400

080012f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12d      	bne.n	8001376 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800131c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 8001322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800132c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	4a11      	ldr	r2, [pc, #68]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001366:	2305      	movs	r3, #5
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_SPI_MspInit+0x90>)
 8001372:	f002 f823 	bl	80033bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40013400 	.word	0x40013400
 8001384:	58024400 	.word	0x58024400
 8001388:	58021000 	.word	0x58021000

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_MspInit+0x38>)
 8001394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_MspInit+0x38>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_MspInit+0x38>)
 80013a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	210f      	movs	r1, #15
 80013b4:	f06f 0001 	mvn.w	r0, #1
 80013b8:	f001 ffd8 	bl	800336c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	58024400 	.word	0x58024400

080013c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	d844      	bhi.n	8001460 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80013d6:	2200      	movs	r2, #0
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	2019      	movs	r0, #25
 80013dc:	f001 ffc6 	bl	800336c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013e0:	2019      	movs	r0, #25
 80013e2:	f001 ffdd 	bl	80033a0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <HAL_InitTick+0xb0>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_InitTick+0xb4>)
 80013ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <HAL_InitTick+0xb4>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_InitTick+0xb4>)
 80013fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140a:	f107 020c 	add.w	r2, r7, #12
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f003 f9ed 	bl	80047f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800141a:	f003 f9d5 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 800141e:	4603      	mov	r3, r0
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <HAL_InitTick+0xb8>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	3b01      	subs	r3, #1
 8001430:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_InitTick+0xbc>)
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_InitTick+0xc0>)
 8001436:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0xbc>)
 800143a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800143e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_InitTick+0xbc>)
 8001442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001444:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_InitTick+0xbc>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_InitTick+0xbc>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <HAL_InitTick+0xbc>)
 8001454:	f006 f84d 	bl	80074f2 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d107      	bne.n	800146e <HAL_InitTick+0xa6>
 800145e:	e001      	b.n	8001464 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e005      	b.n	8001470 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <HAL_InitTick+0xbc>)
 8001466:	f006 f8a5 	bl	80075b4 <HAL_TIM_Base_Start_IT>
 800146a:	4603      	mov	r3, r0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3738      	adds	r7, #56	; 0x38
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	24000098 	.word	0x24000098
 800147c:	58024400 	.word	0x58024400
 8001480:	431bde83 	.word	0x431bde83
 8001484:	240004cc 	.word	0x240004cc
 8001488:	40010000 	.word	0x40010000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CT7_Pin);
 80014bc:	2001      	movs	r0, #1
 80014be:	f002 f95e 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CT4_Pin);
 80014ca:	2002      	movs	r0, #2
 80014cc:	f002 f957 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CT6_Pin);
 80014d8:	2004      	movs	r0, #4
 80014da:	f002 f950 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P55_Pin);
 80014e6:	2008      	movs	r0, #8
 80014e8:	f002 f949 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P53_Pin);
 80014f4:	2010      	movs	r0, #16
 80014f6:	f002 f942 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}

080014fe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CT5_Pin);
 8001502:	2020      	movs	r0, #32
 8001504:	f002 f93b 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CT1_Pin);
 8001508:	2080      	movs	r0, #128	; 0x80
 800150a:	f002 f938 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CT3_Pin);
 800150e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001512:	f002 f934 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001516:	f44f 7000 	mov.w	r0, #512	; 0x200
 800151a:	f002 f930 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <TIM1_UP_IRQHandler+0x10>)
 800152a:	f006 fb55 	bl	8007bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240004cc 	.word	0x240004cc

08001538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CT2_Pin);
 800153c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001540:	f002 f91d 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOCK_Pin);
 8001544:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001548:	f002 f919 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(P54_Pin);
 800154c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001550:	f002 f915 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(K1_Pin);
 8001554:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001558:	f002 f911 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CT0_Pin);
 800155c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001560:	f002 f90d 	bl	800377e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800156e:	f006 fb33 	bl	8007bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	24000600 	.word	0x24000600

0800157c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e00a      	b.n	80015a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158e:	f3af 8000 	nop.w
 8001592:	4601      	mov	r1, r0
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	60ba      	str	r2, [r7, #8]
 800159a:	b2ca      	uxtb	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbf0      	blt.n	800158e <_read+0x12>
  }

  return len;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015de:	605a      	str	r2, [r3, #4]
  return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_isatty>:

int _isatty(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f009 fd2c 	bl	800b0ac <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	24080000 	.word	0x24080000
 8001680:	00000400 	.word	0x00000400
 8001684:	24000518 	.word	0x24000518
 8001688:	240044e0 	.word	0x240044e0

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <SystemInit+0xe4>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a36      	ldr	r2, [pc, #216]	; (8001770 <SystemInit+0xe4>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016a0:	4b34      	ldr	r3, [pc, #208]	; (8001774 <SystemInit+0xe8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	d807      	bhi.n	80016bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <SystemInit+0xe8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 030f 	bic.w	r3, r3, #15
 80016b4:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <SystemInit+0xe8>)
 80016b6:	f043 0307 	orr.w	r3, r3, #7
 80016ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016bc:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <SystemInit+0xec>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <SystemInit+0xec>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <SystemInit+0xec>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <SystemInit+0xec>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4929      	ldr	r1, [pc, #164]	; (8001778 <SystemInit+0xec>)
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <SystemInit+0xf0>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <SystemInit+0xe8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <SystemInit+0xe8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 030f 	bic.w	r3, r3, #15
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <SystemInit+0xe8>)
 80016f0:	f043 0307 	orr.w	r3, r3, #7
 80016f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <SystemInit+0xec>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <SystemInit+0xec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <SystemInit+0xec>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <SystemInit+0xec>)
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <SystemInit+0xf4>)
 800170c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <SystemInit+0xec>)
 8001710:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <SystemInit+0xf8>)
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <SystemInit+0xec>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <SystemInit+0xfc>)
 8001718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <SystemInit+0xec>)
 800171c:	2200      	movs	r2, #0
 800171e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <SystemInit+0xec>)
 8001722:	4a19      	ldr	r2, [pc, #100]	; (8001788 <SystemInit+0xfc>)
 8001724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <SystemInit+0xec>)
 8001728:	2200      	movs	r2, #0
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <SystemInit+0xec>)
 800172e:	4a16      	ldr	r2, [pc, #88]	; (8001788 <SystemInit+0xfc>)
 8001730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <SystemInit+0xec>)
 8001734:	2200      	movs	r2, #0
 8001736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <SystemInit+0xec>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <SystemInit+0xec>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <SystemInit+0xec>)
 8001746:	2200      	movs	r2, #0
 8001748:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <SystemInit+0x100>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <SystemInit+0x104>)
 8001750:	4013      	ands	r3, r2
 8001752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001756:	d202      	bcs.n	800175e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <SystemInit+0x108>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <SystemInit+0x10c>)
 8001760:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001764:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	52002000 	.word	0x52002000
 8001778:	58024400 	.word	0x58024400
 800177c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001780:	02020200 	.word	0x02020200
 8001784:	01ff0000 	.word	0x01ff0000
 8001788:	01010280 	.word	0x01010280
 800178c:	5c001000 	.word	0x5c001000
 8001790:	ffff0000 	.word	0xffff0000
 8001794:	51008108 	.word	0x51008108
 8001798:	52004000 	.word	0x52004000

0800179c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2224      	movs	r2, #36	; 0x24
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f009 fda1 	bl	800b2f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	463b      	mov	r3, r7
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <MX_TIM3_Init+0xac>)
 80017bc:	4a23      	ldr	r2, [pc, #140]	; (800184c <MX_TIM3_Init+0xb0>)
 80017be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <MX_TIM3_Init+0xac>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_TIM3_Init+0xac>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <MX_TIM3_Init+0xac>)
 80017ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_TIM3_Init+0xac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_TIM3_Init+0xac>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017e0:	2303      	movs	r3, #3
 80017e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017e8:	2301      	movs	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017f8:	2301      	movs	r3, #1
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	480f      	ldr	r0, [pc, #60]	; (8001848 <MX_TIM3_Init+0xac>)
 800180c:	f006 f8b0 	bl	8007970 <HAL_TIM_Encoder_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001816:	f7ff fd19 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001822:	463b      	mov	r3, r7
 8001824:	4619      	mov	r1, r3
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <MX_TIM3_Init+0xac>)
 8001828:	f006 ffc8 	bl	80087bc <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001832:	f7ff fd0b 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

   HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001836:	213c      	movs	r1, #60	; 0x3c
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <MX_TIM3_Init+0xac>)
 800183a:	f006 f93f 	bl	8007abc <HAL_TIM_Encoder_Start>

  /* USER CODE END TIM3_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	; 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2400051c 	.word	0x2400051c
 800184c:	40000400 	.word	0x40000400

08001850 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2224      	movs	r2, #36	; 0x24
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f009 fd47 	bl	800b2f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <MX_TIM4_Init+0xac>)
 8001870:	4a23      	ldr	r2, [pc, #140]	; (8001900 <MX_TIM4_Init+0xb0>)
 8001872:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <MX_TIM4_Init+0xac>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <MX_TIM4_Init+0xac>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <MX_TIM4_Init+0xac>)
 8001882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001886:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_TIM4_Init+0xac>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <MX_TIM4_Init+0xac>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001894:	2303      	movs	r3, #3
 8001896:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4619      	mov	r1, r3
 80018be:	480f      	ldr	r0, [pc, #60]	; (80018fc <MX_TIM4_Init+0xac>)
 80018c0:	f006 f856 	bl	8007970 <HAL_TIM_Encoder_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80018ca:	f7ff fcbf 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018d6:	463b      	mov	r3, r7
 80018d8:	4619      	mov	r1, r3
 80018da:	4808      	ldr	r0, [pc, #32]	; (80018fc <MX_TIM4_Init+0xac>)
 80018dc:	f006 ff6e 	bl	80087bc <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018e6:	f7ff fcb1 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80018ea:	213c      	movs	r1, #60	; 0x3c
 80018ec:	4803      	ldr	r0, [pc, #12]	; (80018fc <MX_TIM4_Init+0xac>)
 80018ee:	f006 f8e5 	bl	8007abc <HAL_TIM_Encoder_Start>

  /* USER CODE END TIM4_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	3730      	adds	r7, #48	; 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	24000568 	.word	0x24000568
 8001900:	40000800 	.word	0x40000800

08001904 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	2224      	movs	r2, #36	; 0x24
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f009 fced 	bl	800b2f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <MX_TIM5_Init+0xac>)
 8001924:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <MX_TIM5_Init+0xb0>)
 8001926:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_TIM5_Init+0xac>)
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_TIM5_Init+0xac>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_TIM5_Init+0xac>)
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_TIM5_Init+0xac>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_TIM5_Init+0xac>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001948:	2303      	movs	r3, #3
 800194a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001950:	2301      	movs	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001960:	2301      	movs	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	480f      	ldr	r0, [pc, #60]	; (80019b0 <MX_TIM5_Init+0xac>)
 8001974:	f005 fffc 	bl	8007970 <HAL_TIM_Encoder_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800197e:	f7ff fc65 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	4619      	mov	r1, r3
 800198e:	4808      	ldr	r0, [pc, #32]	; (80019b0 <MX_TIM5_Init+0xac>)
 8001990:	f006 ff14 	bl	80087bc <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800199a:	f7ff fc57 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800199e:	213c      	movs	r1, #60	; 0x3c
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <MX_TIM5_Init+0xac>)
 80019a2:	f006 f88b 	bl	8007abc <HAL_TIM_Encoder_Start>

  /* USER CODE END TIM5_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	3730      	adds	r7, #48	; 0x30
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	240005b4 	.word	0x240005b4
 80019b4:	40000c00 	.word	0x40000c00

080019b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	222c      	movs	r2, #44	; 0x2c
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f009 fc84 	bl	800b2f2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019ea:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <MX_TIM8_Init+0x160>)
 80019ec:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <MX_TIM8_Init+0x164>)
 80019ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019f0:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <MX_TIM8_Init+0x160>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b48      	ldr	r3, [pc, #288]	; (8001b18 <MX_TIM8_Init+0x160>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000;
 80019fc:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <MX_TIM8_Init+0x160>)
 80019fe:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001a02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a04:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a0a:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a16:	4840      	ldr	r0, [pc, #256]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001a18:	f005 fe44 	bl	80076a4 <HAL_TIM_PWM_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001a22:	f7ff fc13 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4837      	ldr	r0, [pc, #220]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001a3a:	f006 febf 	bl	80087bc <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a44:	f7ff fc02 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a48:	2360      	movs	r3, #96	; 0x60
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482a      	ldr	r0, [pc, #168]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001a6e:	f006 f9d3 	bl	8007e18 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a78:	f7ff fbe8 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a80:	2204      	movs	r2, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4824      	ldr	r0, [pc, #144]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001a86:	f006 f9c7 	bl	8007e18 <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001a90:	f7ff fbdc 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a98:	2208      	movs	r2, #8
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481e      	ldr	r0, [pc, #120]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001a9e:	f006 f9bb 	bl	8007e18 <HAL_TIM_PWM_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001aa8:	f7ff fbd0 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab0:	220c      	movs	r2, #12
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4818      	ldr	r0, [pc, #96]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001ab6:	f006 f9af 	bl	8007e18 <HAL_TIM_PWM_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001ac0:	f7ff fbc4 	bl	800124c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001adc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001afa:	f006 feed 	bl	80088d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 8001b04:	f7ff fba2 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <MX_TIM8_Init+0x160>)
 8001b0a:	f000 f8e9 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 8001b0e:	bf00      	nop
 8001b10:	3758      	adds	r7, #88	; 0x58
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	24000600 	.word	0x24000600
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	; 0x38
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	; (8001c78 <HAL_TIM_Encoder_MspInit+0x158>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d12e      	bne.n	8001ba0 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b42:	4b4e      	ldr	r3, [pc, #312]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b48:	4a4c      	ldr	r2, [pc, #304]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b70:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b7e:	23c0      	movs	r3, #192	; 0xc0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	4839      	ldr	r0, [pc, #228]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x160>)
 8001b9a:	f001 fc0f 	bl	80033bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001b9e:	e067      	b.n	8001c70 <HAL_TIM_Encoder_MspInit+0x150>
  else if(tim_encoderHandle->Instance==TIM4)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a37      	ldr	r2, [pc, #220]	; (8001c84 <HAL_TIM_Encoder_MspInit+0x164>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12f      	bne.n	8001c0a <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb0:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001be6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4821      	ldr	r0, [pc, #132]	; (8001c88 <HAL_TIM_Encoder_MspInit+0x168>)
 8001c04:	f001 fbda 	bl	80033bc <HAL_GPIO_Init>
}
 8001c08:	e032      	b.n	8001c70 <HAL_TIM_Encoder_MspInit+0x150>
  else if(tim_encoderHandle->Instance==TIM5)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_TIM_Encoder_MspInit+0x16c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d12d      	bne.n	8001c70 <HAL_TIM_Encoder_MspInit+0x150>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c50:	2303      	movs	r3, #3
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c60:	2302      	movs	r3, #2
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x160>)
 8001c6c:	f001 fba6 	bl	80033bc <HAL_GPIO_Init>
}
 8001c70:	bf00      	nop
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	58020000 	.word	0x58020000
 8001c84:	40000800 	.word	0x40000800
 8001c88:	58020c00 	.word	0x58020c00
 8001c8c:	40000c00 	.word	0x40000c00

08001c90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x48>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d116      	bne.n	8001cd0 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_TIM_PWM_MspInit+0x4c>)
 8001ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_TIM_PWM_MspInit+0x4c>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_TIM_PWM_MspInit+0x4c>)
 8001cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 15, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	202b      	movs	r0, #43	; 0x2b
 8001cc6:	f001 fb51 	bl	800336c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001cca:	202b      	movs	r0, #43	; 0x2b
 8001ccc:	f001 fb68 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40010400 	.word	0x40010400
 8001cdc:	58024400 	.word	0x58024400

08001ce0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_TIM_MspPostInit+0x8c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d12f      	bne.n	8001d62 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_TIM_MspPostInit+0x90>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_TIM_MspPostInit+0x90>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_TIM_MspPostInit+0x90>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d20:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <HAL_TIM_MspPostInit+0x94>)
 8001d3e:	f001 fb3d 	bl	80033bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001d42:	2100      	movs	r1, #0
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <HAL_TIM_MspPostInit+0x98>)
 8001d46:	f005 fd05 	bl	8007754 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	480a      	ldr	r0, [pc, #40]	; (8001d78 <HAL_TIM_MspPostInit+0x98>)
 8001d4e:	f005 fd01 	bl	8007754 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001d52:	2108      	movs	r1, #8
 8001d54:	4808      	ldr	r0, [pc, #32]	; (8001d78 <HAL_TIM_MspPostInit+0x98>)
 8001d56:	f005 fcfd 	bl	8007754 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001d5a:	210c      	movs	r1, #12
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <HAL_TIM_MspPostInit+0x98>)
 8001d5e:	f005 fcf9 	bl	8007754 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40010400 	.word	0x40010400
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58020800 	.word	0x58020800
 8001d78:	24000600 	.word	0x24000600

08001d7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <MX_USART1_UART_Init+0x94>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d88:	4a22      	ldr	r2, [pc, #136]	; (8001e14 <MX_USART1_UART_Init+0x98>)
 8001d8a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001da0:	220c      	movs	r2, #12
 8001da2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc2:	4812      	ldr	r0, [pc, #72]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dc4:	f006 fe24 	bl	8008a10 <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001dce:	f7ff fa3d 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dd6:	f007 fe26 	bl	8009a26 <HAL_UARTEx_SetTxFifoThreshold>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001de0:	f7ff fa34 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de4:	2100      	movs	r1, #0
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001de8:	f007 fe5b 	bl	8009aa2 <HAL_UARTEx_SetRxFifoThreshold>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001df2:	f7ff fa2b 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART1_UART_Init+0x90>)
 8001df8:	f007 fddc 	bl	80099b4 <HAL_UARTEx_DisableFifoMode>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001e02:	f7ff fa23 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2400064c 	.word	0x2400064c
 8001e10:	40011000 	.word	0x40011000
 8001e14:	0007a120 	.word	0x0007a120

08001e18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e1e:	4a23      	ldr	r2, [pc, #140]	; (8001eac <MX_USART3_UART_Init+0x94>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e24:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <MX_USART3_UART_Init+0x98>)
 8001e26:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e5e:	4812      	ldr	r0, [pc, #72]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e60:	f006 fdd6 	bl	8008a10 <HAL_UART_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001e6a:	f7ff f9ef 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e72:	f007 fdd8 	bl	8009a26 <HAL_UARTEx_SetTxFifoThreshold>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001e7c:	f7ff f9e6 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e80:	2100      	movs	r1, #0
 8001e82:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e84:	f007 fe0d 	bl	8009aa2 <HAL_UARTEx_SetRxFifoThreshold>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001e8e:	f7ff f9dd 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e94:	f007 fd8e 	bl	80099b4 <HAL_UARTEx_DisableFifoMode>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001e9e:	f7ff f9d5 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	240006e0 	.word	0x240006e0
 8001eac:	40004800 	.word	0x40004800
 8001eb0:	0007a120 	.word	0x0007a120

08001eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	; 0x30
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <HAL_UART_MspInit+0xf4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12f      	bne.n	8001f36 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001edc:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efa:	4a2c      	ldr	r2, [pc, #176]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001f24:	2304      	movs	r3, #4
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4820      	ldr	r0, [pc, #128]	; (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f30:	f001 fa44 	bl	80033bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f34:	e033      	b.n	8001f9e <HAL_UART_MspInit+0xea>
  else if(uartHandle->Instance==USART3)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_UART_MspInit+0x100>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d12e      	bne.n	8001f9e <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f46:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	4a11      	ldr	r2, [pc, #68]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_UART_MspInit+0xf8>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f8e:	2307      	movs	r3, #7
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <HAL_UART_MspInit+0x104>)
 8001f9a:	f001 fa0f 	bl	80033bc <HAL_GPIO_Init>
}
 8001f9e:	bf00      	nop
 8001fa0:	3730      	adds	r7, #48	; 0x30
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	58024400 	.word	0x58024400
 8001fb0:	58020400 	.word	0x58020400
 8001fb4:	40004800 	.word	0x40004800
 8001fb8:	58020c00 	.word	0x58020c00

08001fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc0:	f7ff fb64 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc6:	490d      	ldr	r1, [pc, #52]	; (8001ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fdc:	4c0a      	ldr	r4, [pc, #40]	; (8002008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fea:	f009 f95b 	bl	800b2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fee:	f7fe fff9 	bl	8000fe4 <main>
  bx  lr
 8001ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ff8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ffc:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8002000:	0800c364 	.word	0x0800c364
  ldr r2, =_sbss
 8002004:	24000108 	.word	0x24000108
  ldr r4, =_ebss
 8002008:	240044dc 	.word	0x240044dc

0800200c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC3_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002016:	2003      	movs	r0, #3
 8002018:	f001 f99d 	bl	8003356 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800201c:	f002 fa14 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_Init+0x68>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	4913      	ldr	r1, [pc, #76]	; (800207c <HAL_Init+0x6c>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_Init+0x68>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_Init+0x6c>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_Init+0x70>)
 8002052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002054:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <HAL_Init+0x74>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800205a:	200f      	movs	r0, #15
 800205c:	f7ff f9b4 	bl	80013c8 <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e002      	b.n	8002070 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800206a:	f7ff f98f 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024400 	.word	0x58024400
 800207c:	0800c284 	.word	0x0800c284
 8002080:	24000094 	.word	0x24000094
 8002084:	24000090 	.word	0x24000090

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	2400009c 	.word	0x2400009c
 80020ac:	24000774 	.word	0x24000774

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	24000774 	.word	0x24000774

080020c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetREVID+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0c1b      	lsrs	r3, r3, #16
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	5c001000 	.word	0x5c001000

080020e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	609a      	str	r2, [r3, #8]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3360      	adds	r3, #96	; 0x60
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	430b      	orrs	r3, r1
 8002176:	431a      	orrs	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	611a      	str	r2, [r3, #16]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	431a      	orrs	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]
  }
}
 80021e4:	bf00      	nop
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3330      	adds	r3, #48	; 0x30
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	4413      	add	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	211f      	movs	r1, #31
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	401a      	ands	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	0e9b      	lsrs	r3, r3, #26
 8002228:	f003 011f 	and.w	r1, r3, #31
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	431a      	orrs	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3314      	adds	r3, #20
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	0e5b      	lsrs	r3, r3, #25
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	0d1b      	lsrs	r3, r3, #20
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2107      	movs	r1, #7
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	401a      	ands	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	0d1b      	lsrs	r3, r3, #20
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	431a      	orrs	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b8:	43db      	mvns	r3, r3
 80022ba:	401a      	ands	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0318 	and.w	r3, r3, #24
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022c4:	40d9      	lsrs	r1, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	400b      	ands	r3, r1
 80022ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022ce:	431a      	orrs	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	000fffff 	.word	0x000fffff

080022e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <LL_ADC_DisableDeepPowerDown+0x20>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6093      	str	r3, [r2, #8]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	5fffffc0 	.word	0x5fffffc0

0800230c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800231c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002320:	d101      	bne.n	8002326 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <LL_ADC_EnableInternalRegulator+0x24>)
 8002342:	4013      	ands	r3, r2
 8002344:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	6fffffc0 	.word	0x6fffffc0

0800235c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002370:	d101      	bne.n	8002376 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <LL_ADC_IsEnabled+0x18>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <LL_ADC_IsEnabled+0x1a>
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d101      	bne.n	80023c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d101      	bne.n	80023e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e18f      	b.n	8002732 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7fe f9a9 	bl	8000778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff67 	bl	800230c <LL_ADC_IsDeepPowerDownEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff4d 	bl	80022e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff82 	bl	800235c <LL_ADC_IsInternalRegulatorEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d114      	bne.n	8002488 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff66 	bl	8002334 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002468:	4b87      	ldr	r3, [pc, #540]	; (8002688 <HAL_ADC_Init+0x290>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	4a87      	ldr	r2, [pc, #540]	; (800268c <HAL_ADC_Init+0x294>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800247a:	e002      	b.n	8002482 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3b01      	subs	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff65 	bl	800235c <LL_ADC_IsInternalRegulatorEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f043 0210 	orr.w	r2, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff76 	bl	80023aa <LL_ADC_REG_IsConversionOngoing>
 80024be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 8129 	bne.w	8002720 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 8125 	bne.w	8002720 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024de:	f043 0202 	orr.w	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff4a 	bl	8002384 <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d136      	bne.n	8002564 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a65      	ldr	r2, [pc, #404]	; (8002690 <HAL_ADC_Init+0x298>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <HAL_ADC_Init+0x112>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a63      	ldr	r2, [pc, #396]	; (8002694 <HAL_ADC_Init+0x29c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d10e      	bne.n	8002528 <HAL_ADC_Init+0x130>
 800250a:	4861      	ldr	r0, [pc, #388]	; (8002690 <HAL_ADC_Init+0x298>)
 800250c:	f7ff ff3a 	bl	8002384 <LL_ADC_IsEnabled>
 8002510:	4604      	mov	r4, r0
 8002512:	4860      	ldr	r0, [pc, #384]	; (8002694 <HAL_ADC_Init+0x29c>)
 8002514:	f7ff ff36 	bl	8002384 <LL_ADC_IsEnabled>
 8002518:	4603      	mov	r3, r0
 800251a:	4323      	orrs	r3, r4
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e008      	b.n	800253a <HAL_ADC_Init+0x142>
 8002528:	485b      	ldr	r0, [pc, #364]	; (8002698 <HAL_ADC_Init+0x2a0>)
 800252a:	f7ff ff2b 	bl	8002384 <LL_ADC_IsEnabled>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d012      	beq.n	8002564 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a53      	ldr	r2, [pc, #332]	; (8002690 <HAL_ADC_Init+0x298>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_ADC_Init+0x15a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a51      	ldr	r2, [pc, #324]	; (8002694 <HAL_ADC_Init+0x29c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Init+0x15e>
 8002552:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_ADC_Init+0x2a4>)
 8002554:	e000      	b.n	8002558 <HAL_ADC_Init+0x160>
 8002556:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_ADC_Init+0x2a8>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f7ff fdbe 	bl	80020e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002564:	f7ff fdb0 	bl	80020c8 <HAL_GetREVID>
 8002568:	4603      	mov	r3, r0
 800256a:	f241 0203 	movw	r2, #4099	; 0x1003
 800256e:	4293      	cmp	r3, r2
 8002570:	d914      	bls.n	800259c <HAL_ADC_Init+0x1a4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d110      	bne.n	800259c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7d5b      	ldrb	r3, [r3, #21]
 800257e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002584:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800258a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7f1b      	ldrb	r3, [r3, #28]
 8002590:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002592:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002594:	f043 030c 	orr.w	r3, r3, #12
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e00d      	b.n	80025b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7d5b      	ldrb	r3, [r3, #21]
 80025a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7f1b      	ldrb	r3, [r3, #28]
 80025b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7f1b      	ldrb	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	045b      	lsls	r3, r3, #17
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_ADC_Init+0x2ac>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	69b9      	ldr	r1, [r7, #24]
 80025fa:	430b      	orrs	r3, r1
 80025fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fed1 	bl	80023aa <LL_ADC_REG_IsConversionOngoing>
 8002608:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fede 	bl	80023d0 <LL_ADC_INJ_IsConversionOngoing>
 8002614:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d15f      	bne.n	80026dc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d15c      	bne.n	80026dc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7d1b      	ldrb	r3, [r3, #20]
 8002626:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_ADC_Init+0x2b0>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	430b      	orrs	r3, r1
 8002642:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800264a:	2b01      	cmp	r3, #1
 800264c:	d130      	bne.n	80026b0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_ADC_Init+0x2b4>)
 800265c:	4013      	ands	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002662:	3a01      	subs	r2, #1
 8002664:	0411      	lsls	r1, r2, #16
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800266a:	4311      	orrs	r1, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002670:	4311      	orrs	r1, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002676:	430a      	orrs	r2, r1
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	611a      	str	r2, [r3, #16]
 8002684:	e01c      	b.n	80026c0 <HAL_ADC_Init+0x2c8>
 8002686:	bf00      	nop
 8002688:	24000090 	.word	0x24000090
 800268c:	053e2d63 	.word	0x053e2d63
 8002690:	40022000 	.word	0x40022000
 8002694:	40022100 	.word	0x40022100
 8002698:	58026000 	.word	0x58026000
 800269c:	40022300 	.word	0x40022300
 80026a0:	58026300 	.word	0x58026300
 80026a4:	fff0c003 	.word	0xfff0c003
 80026a8:	ffffbffc 	.word	0xffffbffc
 80026ac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fb80 	bl	8002ddc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10c      	bne.n	80026fe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f023 010f 	bic.w	r1, r3, #15
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	1e5a      	subs	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
 80026fc:	e007      	b.n	800270e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 020f 	bic.w	r2, r2, #15
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
 800271e:	e007      	b.n	8002730 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0210 	orr.w	r2, r3, #16
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002730:	7ffb      	ldrb	r3, [r7, #31]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop

0800273c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b0a1      	sub	sp, #132	; 0x84
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a9d      	ldr	r2, [pc, #628]	; (80029cc <HAL_ADC_ConfigChannel+0x290>)
 8002756:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x2a>
 8002762:	2302      	movs	r3, #2
 8002764:	e321      	b.n	8002daa <HAL_ADC_ConfigChannel+0x66e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fe19 	bl	80023aa <LL_ADC_REG_IsConversionOngoing>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 8306 	bne.w	8002d8c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002788:	2b00      	cmp	r3, #0
 800278a:	d108      	bne.n	800279e <HAL_ADC_ConfigChannel+0x62>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2201      	movs	r2, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	e016      	b.n	80027cc <HAL_ADC_ConfigChannel+0x90>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e003      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80027ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2201      	movs	r2, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	69d1      	ldr	r1, [r2, #28]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f7ff fd02 	bl	80021f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fdda 	bl	80023aa <LL_ADC_REG_IsConversionOngoing>
 80027f6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fde7 	bl	80023d0 <LL_ADC_INJ_IsConversionOngoing>
 8002802:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 80b3 	bne.w	8002972 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800280c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 80af 	bne.w	8002972 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	461a      	mov	r2, r3
 8002822:	f7ff fd11 	bl	8002248 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002826:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_ADC_ConfigChannel+0x294>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800282e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002832:	d10b      	bne.n	800284c <HAL_ADC_ConfigChannel+0x110>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	e01d      	b.n	8002888 <HAL_ADC_ConfigChannel+0x14c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10b      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x136>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	e00a      	b.n	8002888 <HAL_ADC_ConfigChannel+0x14c>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d027      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6919      	ldr	r1, [r3, #16]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a0:	f7ff fc52 	bl	8002148 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6919      	ldr	r1, [r3, #16]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	7e5b      	ldrb	r3, [r3, #25]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d102      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x17e>
 80028b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028b8:	e000      	b.n	80028bc <HAL_ADC_ConfigChannel+0x180>
 80028ba:	2300      	movs	r3, #0
 80028bc:	461a      	mov	r2, r3
 80028be:	f7ff fc7c 	bl	80021ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6919      	ldr	r1, [r3, #16]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	7e1b      	ldrb	r3, [r3, #24]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x19c>
 80028d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028d6:	e000      	b.n	80028da <HAL_ADC_ConfigChannel+0x19e>
 80028d8:	2300      	movs	r3, #0
 80028da:	461a      	mov	r2, r3
 80028dc:	f7ff fc54 	bl	8002188 <LL_ADC_SetDataRightShift>
 80028e0:	e047      	b.n	8002972 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	069b      	lsls	r3, r3, #26
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d107      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002904:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800290c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	069b      	lsls	r3, r3, #26
 8002916:	429a      	cmp	r2, r3
 8002918:	d107      	bne.n	800292a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002928:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002930:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	069b      	lsls	r3, r3, #26
 800293a:	429a      	cmp	r2, r3
 800293c:	d107      	bne.n	800294e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800294c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	069b      	lsls	r3, r3, #26
 800295e:	429a      	cmp	r2, r3
 8002960:	d107      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002970:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fd04 	bl	8002384 <LL_ADC_IsEnabled>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 820d 	bne.w	8002d9e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	461a      	mov	r2, r3
 8002992:	f7ff fc85 	bl	80022a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <HAL_ADC_ConfigChannel+0x290>)
 800299c:	4293      	cmp	r3, r2
 800299e:	f040 8133 	bne.w	8002c08 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d110      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x298>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	3301      	adds	r3, #1
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2b09      	cmp	r3, #9
 80029c0:	bf94      	ite	ls
 80029c2:	2301      	movls	r3, #1
 80029c4:	2300      	movhi	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e01e      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x2cc>
 80029ca:	bf00      	nop
 80029cc:	47ff0000 	.word	0x47ff0000
 80029d0:	5c001000 	.word	0x5c001000
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80029e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	bf94      	ite	ls
 8002a02:	2301      	movls	r3, #1
 8002a04:	2300      	movhi	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d079      	beq.n	8002b00 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x2ec>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	069b      	lsls	r3, r3, #26
 8002a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a26:	e015      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x318>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	069b      	lsls	r3, r3, #26
 8002a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x338>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	e017      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x368>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e003      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	ea42 0103 	orr.w	r1, r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x38e>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	051b      	lsls	r3, r3, #20
 8002ac8:	e018      	b.n	8002afc <HAL_ADC_ConfigChannel+0x3c0>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afc:	430b      	orrs	r3, r1
 8002afe:	e07e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x3e0>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0e9b      	lsrs	r3, r3, #26
 8002b12:	3301      	adds	r3, #1
 8002b14:	069b      	lsls	r3, r3, #26
 8002b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1a:	e015      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x40c>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e003      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	069b      	lsls	r3, r3, #26
 8002b44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x42c>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	e017      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x45c>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	61bb      	str	r3, [r7, #24]
  return result;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002b80:	2320      	movs	r3, #32
 8002b82:	e003      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	ea42 0103 	orr.w	r1, r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x488>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b1e      	subs	r3, #30
 8002bbc:	051b      	lsls	r3, r3, #20
 8002bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	e01b      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x4c0>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
  return result;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3b1e      	subs	r3, #30
 8002bf6:	051b      	lsls	r3, r3, #20
 8002bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7ff fb20 	bl	8002248 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f280 80c6 	bge.w	8002d9e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a67      	ldr	r2, [pc, #412]	; (8002db4 <HAL_ADC_ConfigChannel+0x678>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_ADC_ConfigChannel+0x4ea>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a65      	ldr	r2, [pc, #404]	; (8002db8 <HAL_ADC_ConfigChannel+0x67c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x4ee>
 8002c26:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_ADC_ConfigChannel+0x680>)
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x4f0>
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_ADC_ConfigChannel+0x684>)
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fa7d 	bl	800212c <LL_ADC_GetCommonPathInternalCh>
 8002c32:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_ADC_ConfigChannel+0x678>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_ADC_ConfigChannel+0x50c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a5d      	ldr	r2, [pc, #372]	; (8002db8 <HAL_ADC_ConfigChannel+0x67c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d10e      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x52a>
 8002c48:	485a      	ldr	r0, [pc, #360]	; (8002db4 <HAL_ADC_ConfigChannel+0x678>)
 8002c4a:	f7ff fb9b 	bl	8002384 <LL_ADC_IsEnabled>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	4859      	ldr	r0, [pc, #356]	; (8002db8 <HAL_ADC_ConfigChannel+0x67c>)
 8002c52:	f7ff fb97 	bl	8002384 <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4323      	orrs	r3, r4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2301      	moveq	r3, #1
 8002c60:	2300      	movne	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e008      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x53c>
 8002c66:	4857      	ldr	r0, [pc, #348]	; (8002dc4 <HAL_ADC_ConfigChannel+0x688>)
 8002c68:	f7ff fb8c 	bl	8002384 <LL_ADC_IsEnabled>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf0c      	ite	eq
 8002c72:	2301      	moveq	r3, #1
 8002c74:	2300      	movne	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d07d      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a51      	ldr	r2, [pc, #324]	; (8002dc8 <HAL_ADC_ConfigChannel+0x68c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d130      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ac>
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d12b      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a4b      	ldr	r2, [pc, #300]	; (8002dc4 <HAL_ADC_ConfigChannel+0x688>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f040 8081 	bne.w	8002d9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a44      	ldr	r2, [pc, #272]	; (8002db4 <HAL_ADC_ConfigChannel+0x678>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_ADC_ConfigChannel+0x574>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_ADC_ConfigChannel+0x67c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x578>
 8002cb0:	4a42      	ldr	r2, [pc, #264]	; (8002dbc <HAL_ADC_ConfigChannel+0x680>)
 8002cb2:	e000      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x57a>
 8002cb4:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <HAL_ADC_ConfigChannel+0x684>)
 8002cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	f7ff fa21 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc4:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_ADC_ConfigChannel+0x690>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	4a41      	ldr	r2, [pc, #260]	; (8002dd0 <HAL_ADC_ConfigChannel+0x694>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cd8:	e002      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f9      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce6:	e05a      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <HAL_ADC_ConfigChannel+0x698>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d11e      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x5f4>
 8002cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d119      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_ADC_ConfigChannel+0x688>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d14b      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <HAL_ADC_ConfigChannel+0x678>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_ADC_ConfigChannel+0x5de>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <HAL_ADC_ConfigChannel+0x67c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x5e2>
 8002d1a:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_ADC_ConfigChannel+0x680>)
 8002d1c:	e000      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x5e4>
 8002d1e:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <HAL_ADC_ConfigChannel+0x684>)
 8002d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f7ff f9ec 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d2e:	e036      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_ADC_ConfigChannel+0x69c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d131      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x662>
 8002d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d12c      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <HAL_ADC_ConfigChannel+0x688>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d127      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <HAL_ADC_ConfigChannel+0x678>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x626>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <HAL_ADC_ConfigChannel+0x67c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x62a>
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <HAL_ADC_ConfigChannel+0x680>)
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x62c>
 8002d66:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <HAL_ADC_ConfigChannel+0x684>)
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f7ff f9c8 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
 8002d76:	e012      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f043 0220 	orr.w	r2, r3, #32
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d8a:	e008      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002da6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3784      	adds	r7, #132	; 0x84
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40022100 	.word	0x40022100
 8002dbc:	40022300 	.word	0x40022300
 8002dc0:	58026300 	.word	0x58026300
 8002dc4:	58026000 	.word	0x58026000
 8002dc8:	cb840000 	.word	0xcb840000
 8002dcc:	24000090 	.word	0x24000090
 8002dd0:	053e2d63 	.word	0x053e2d63
 8002dd4:	c7520000 	.word	0xc7520000
 8002dd8:	cfb80000 	.word	0xcfb80000

08002ddc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7a      	ldr	r2, [pc, #488]	; (8002fd4 <ADC_ConfigureBoostMode+0x1f8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <ADC_ConfigureBoostMode+0x1c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a79      	ldr	r2, [pc, #484]	; (8002fd8 <ADC_ConfigureBoostMode+0x1fc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d109      	bne.n	8002e0c <ADC_ConfigureBoostMode+0x30>
 8002df8:	4b78      	ldr	r3, [pc, #480]	; (8002fdc <ADC_ConfigureBoostMode+0x200>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e008      	b.n	8002e1e <ADC_ConfigureBoostMode+0x42>
 8002e0c:	4b74      	ldr	r3, [pc, #464]	; (8002fe0 <ADC_ConfigureBoostMode+0x204>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01c      	beq.n	8002e5c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e22:	f001 fc8b 	bl	800473c <HAL_RCC_GetHCLKFreq>
 8002e26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e30:	d010      	beq.n	8002e54 <ADC_ConfigureBoostMode+0x78>
 8002e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e36:	d873      	bhi.n	8002f20 <ADC_ConfigureBoostMode+0x144>
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3c:	d002      	beq.n	8002e44 <ADC_ConfigureBoostMode+0x68>
 8002e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e42:	d16d      	bne.n	8002f20 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	60fb      	str	r3, [r7, #12]
        break;
 8002e52:	e068      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	60fb      	str	r3, [r7, #12]
        break;
 8002e5a:	e064      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	f002 ff12 	bl	8005c8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002e68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e72:	d051      	beq.n	8002f18 <ADC_ConfigureBoostMode+0x13c>
 8002e74:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e78:	d854      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002e7a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e7e:	d047      	beq.n	8002f10 <ADC_ConfigureBoostMode+0x134>
 8002e80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e84:	d84e      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002e86:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e8a:	d03d      	beq.n	8002f08 <ADC_ConfigureBoostMode+0x12c>
 8002e8c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e90:	d848      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e96:	d033      	beq.n	8002f00 <ADC_ConfigureBoostMode+0x124>
 8002e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e9c:	d842      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002e9e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002ea2:	d029      	beq.n	8002ef8 <ADC_ConfigureBoostMode+0x11c>
 8002ea4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002ea8:	d83c      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002eaa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002eae:	d01a      	beq.n	8002ee6 <ADC_ConfigureBoostMode+0x10a>
 8002eb0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002eb4:	d836      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002eb6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002eba:	d014      	beq.n	8002ee6 <ADC_ConfigureBoostMode+0x10a>
 8002ebc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ec0:	d830      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec6:	d00e      	beq.n	8002ee6 <ADC_ConfigureBoostMode+0x10a>
 8002ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ecc:	d82a      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002ece:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ed2:	d008      	beq.n	8002ee6 <ADC_ConfigureBoostMode+0x10a>
 8002ed4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ed8:	d824      	bhi.n	8002f24 <ADC_ConfigureBoostMode+0x148>
 8002eda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ede:	d002      	beq.n	8002ee6 <ADC_ConfigureBoostMode+0x10a>
 8002ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ee4:	d11e      	bne.n	8002f24 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	60fb      	str	r3, [r7, #12]
        break;
 8002ef6:	e016      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
        break;
 8002efe:	e012      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	60fb      	str	r3, [r7, #12]
        break;
 8002f06:	e00e      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	60fb      	str	r3, [r7, #12]
        break;
 8002f0e:	e00a      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	09db      	lsrs	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
        break;
 8002f16:	e006      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	60fb      	str	r3, [r7, #12]
        break;
 8002f1e:	e002      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002f20:	bf00      	nop
 8002f22:	e000      	b.n	8002f26 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002f24:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f26:	f7ff f8cf 	bl	80020c8 <HAL_GetREVID>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d815      	bhi.n	8002f60 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <ADC_ConfigureBoostMode+0x208>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d908      	bls.n	8002f4e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f4c:	e03e      	b.n	8002fcc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f5c:	609a      	str	r2, [r3, #8]
}
 8002f5e:	e035      	b.n	8002fcc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <ADC_ConfigureBoostMode+0x20c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d808      	bhi.n	8002f80 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	e025      	b.n	8002fcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <ADC_ConfigureBoostMode+0x210>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d80a      	bhi.n	8002f9e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	e016      	b.n	8002fcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <ADC_ConfigureBoostMode+0x214>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d80a      	bhi.n	8002fbc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb8:	609a      	str	r2, [r3, #8]
}
 8002fba:	e007      	b.n	8002fcc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	40022100 	.word	0x40022100
 8002fdc:	40022300 	.word	0x40022300
 8002fe0:	58026300 	.word	0x58026300
 8002fe4:	01312d00 	.word	0x01312d00
 8002fe8:	005f5e10 	.word	0x005f5e10
 8002fec:	00bebc20 	.word	0x00bebc20
 8002ff0:	017d7840 	.word	0x017d7840

08002ff4 <LL_ADC_IsEnabled>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <LL_ADC_IsEnabled+0x18>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <LL_ADC_IsEnabled+0x1a>
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_ADC_REG_IsConversionOngoing>:
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d101      	bne.n	8003032 <LL_ADC_REG_IsConversionOngoing+0x18>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b09f      	sub	sp, #124	; 0x7c
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800305a:	2302      	movs	r3, #2
 800305c:	e0be      	b.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800306a:	2300      	movs	r3, #0
 800306c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5c      	ldr	r2, [pc, #368]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d102      	bne.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003078:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	e001      	b.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e09d      	b.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ffb9 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 80030a8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ffb3 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d17f      	bne.n	80031ba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d17c      	bne.n	80031ba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a47      	ldr	r2, [pc, #284]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80030d4:	4b45      	ldr	r3, [pc, #276]	; (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030d6:	e000      	b.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80030d8:	4b45      	ldr	r3, [pc, #276]	; (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d039      	beq.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a3a      	ldr	r2, [pc, #232]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a38      	ldr	r2, [pc, #224]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10e      	bne.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800310a:	4836      	ldr	r0, [pc, #216]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800310c:	f7ff ff72 	bl	8002ff4 <LL_ADC_IsEnabled>
 8003110:	4604      	mov	r4, r0
 8003112:	4835      	ldr	r0, [pc, #212]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003114:	f7ff ff6e 	bl	8002ff4 <LL_ADC_IsEnabled>
 8003118:	4603      	mov	r3, r0
 800311a:	4323      	orrs	r3, r4
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e008      	b.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003128:	4832      	ldr	r0, [pc, #200]	; (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800312a:	f7ff ff63 	bl	8002ff4 <LL_ADC_IsEnabled>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d047      	beq.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003144:	4013      	ands	r3, r2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	6811      	ldr	r1, [r2, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	6892      	ldr	r2, [r2, #8]
 800314e:	430a      	orrs	r2, r1
 8003150:	431a      	orrs	r2, r3
 8003152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003154:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003156:	e03a      	b.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003162:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10e      	bne.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003178:	481a      	ldr	r0, [pc, #104]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800317a:	f7ff ff3b 	bl	8002ff4 <LL_ADC_IsEnabled>
 800317e:	4604      	mov	r4, r0
 8003180:	4819      	ldr	r0, [pc, #100]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003182:	f7ff ff37 	bl	8002ff4 <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	4323      	orrs	r3, r4
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e008      	b.n	80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003196:	4817      	ldr	r0, [pc, #92]	; (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003198:	f7ff ff2c 	bl	8002ff4 <LL_ADC_IsEnabled>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031b6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031b8:	e009      	b.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80031cc:	e000      	b.n	80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031ce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80031dc:	4618      	mov	r0, r3
 80031de:	377c      	adds	r7, #124	; 0x7c
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40022100 	.word	0x40022100
 80031ec:	40022300 	.word	0x40022300
 80031f0:	58026300 	.word	0x58026300
 80031f4:	58026000 	.word	0x58026000
 80031f8:	fffff0e0 	.word	0xfffff0e0

080031fc <__NVIC_SetPriorityGrouping>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <__NVIC_SetPriorityGrouping+0x40>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003226:	4313      	orrs	r3, r2
 8003228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322a:	4a04      	ldr	r2, [pc, #16]	; (800323c <__NVIC_SetPriorityGrouping+0x40>)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	60d3      	str	r3, [r2, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00
 8003240:	05fa0000 	.word	0x05fa0000

08003244 <__NVIC_GetPriorityGrouping>:
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_EnableIRQ>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800326a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db0b      	blt.n	800328a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4907      	ldr	r1, [pc, #28]	; (8003298 <__NVIC_EnableIRQ+0x38>)
 800327a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2001      	movs	r0, #1
 8003282:	fa00 f202 	lsl.w	r2, r0, r2
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100

0800329c <__NVIC_SetPriority>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	db0a      	blt.n	80032c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	490c      	ldr	r1, [pc, #48]	; (80032e8 <__NVIC_SetPriority+0x4c>)
 80032b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	440b      	add	r3, r1
 80032c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032c4:	e00a      	b.n	80032dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4908      	ldr	r1, [pc, #32]	; (80032ec <__NVIC_SetPriority+0x50>)
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	3b04      	subs	r3, #4
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	440b      	add	r3, r1
 80032da:	761a      	strb	r2, [r3, #24]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <NVIC_EncodePriority>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f1c3 0307 	rsb	r3, r3, #7
 800330a:	2b04      	cmp	r3, #4
 800330c:	bf28      	it	cs
 800330e:	2304      	movcs	r3, #4
 8003310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3304      	adds	r3, #4
 8003316:	2b06      	cmp	r3, #6
 8003318:	d902      	bls.n	8003320 <NVIC_EncodePriority+0x30>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3b03      	subs	r3, #3
 800331e:	e000      	b.n	8003322 <NVIC_EncodePriority+0x32>
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	401a      	ands	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003338:	f04f 31ff 	mov.w	r1, #4294967295
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43d9      	mvns	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	4313      	orrs	r3, r2
}
 800334a:	4618      	mov	r0, r3
 800334c:	3724      	adds	r7, #36	; 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ff4c 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800337a:	f7ff ff63 	bl	8003244 <__NVIC_GetPriorityGrouping>
 800337e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	6978      	ldr	r0, [r7, #20]
 8003386:	f7ff ffb3 	bl	80032f0 <NVIC_EncodePriority>
 800338a:	4602      	mov	r2, r0
 800338c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ff82 	bl	800329c <__NVIC_SetPriority>
}
 8003398:	bf00      	nop
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff ff56 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <HAL_GPIO_Init+0x234>)
 80033cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ce:	e194      	b.n	80036fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8186 	beq.w	80036f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d005      	beq.n	8003400 <HAL_GPIO_Init+0x44>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d130      	bne.n	8003462 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003436:	2201      	movs	r2, #1
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0201 	and.w	r2, r3, #1
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b03      	cmp	r3, #3
 800346c:	d017      	beq.n	800349e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d123      	bne.n	80034f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80e0 	beq.w	80036f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_GPIO_Init+0x238>)
 8003536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800353a:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_GPIO_Init+0x238>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_GPIO_Init+0x238>)
 8003546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003552:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <HAL_GPIO_Init+0x23c>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a20      	ldr	r2, [pc, #128]	; (80035fc <HAL_GPIO_Init+0x240>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d052      	beq.n	8003624 <HAL_GPIO_Init+0x268>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_GPIO_Init+0x244>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_GPIO_Init+0x22e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <HAL_GPIO_Init+0x248>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <HAL_GPIO_Init+0x22a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_GPIO_Init+0x24c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d025      	beq.n	80035e2 <HAL_GPIO_Init+0x226>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_GPIO_Init+0x250>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <HAL_GPIO_Init+0x222>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_GPIO_Init+0x254>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x21e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_GPIO_Init+0x258>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x21a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_GPIO_Init+0x25c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x216>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_GPIO_Init+0x260>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x212>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a17      	ldr	r2, [pc, #92]	; (8003620 <HAL_GPIO_Init+0x264>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x20e>
 80035c6:	2309      	movs	r3, #9
 80035c8:	e02d      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035ca:	230a      	movs	r3, #10
 80035cc:	e02b      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035ce:	2308      	movs	r3, #8
 80035d0:	e029      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e027      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035d6:	2306      	movs	r3, #6
 80035d8:	e025      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035da:	2305      	movs	r3, #5
 80035dc:	e023      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035de:	2304      	movs	r3, #4
 80035e0:	e021      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035e2:	2303      	movs	r3, #3
 80035e4:	e01f      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e01d      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e01b      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035ee:	bf00      	nop
 80035f0:	58000080 	.word	0x58000080
 80035f4:	58024400 	.word	0x58024400
 80035f8:	58000400 	.word	0x58000400
 80035fc:	58020000 	.word	0x58020000
 8003600:	58020400 	.word	0x58020400
 8003604:	58020800 	.word	0x58020800
 8003608:	58020c00 	.word	0x58020c00
 800360c:	58021000 	.word	0x58021000
 8003610:	58021400 	.word	0x58021400
 8003614:	58021800 	.word	0x58021800
 8003618:	58021c00 	.word	0x58021c00
 800361c:	58022000 	.word	0x58022000
 8003620:	58022400 	.word	0x58022400
 8003624:	2300      	movs	r3, #0
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	f002 0203 	and.w	r2, r2, #3
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	4093      	lsls	r3, r2
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003636:	4938      	ldr	r1, [pc, #224]	; (8003718 <HAL_GPIO_Init+0x35c>)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	3302      	adds	r3, #2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800366a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	f47f ae63 	bne.w	80033d0 <HAL_GPIO_Init+0x14>
  }
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	3724      	adds	r7, #36	; 0x24
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	58000400 	.word	0x58000400

0800371c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
 8003738:	e001      	b.n	800373e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
 8003758:	4613      	mov	r3, r2
 800375a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800375c:	787b      	ldrb	r3, [r7, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003768:	e003      	b.n	8003772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800376a:	887b      	ldrh	r3, [r7, #2]
 800376c:	041a      	lsls	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd f9bb 	bl	8000b20 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_PWREx_ConfigSupply+0x70>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d00a      	beq.n	80037de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_PWREx_ConfigSupply+0x70>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e01f      	b.n	800381a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e01d      	b.n	800381a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_PWREx_ConfigSupply+0x70>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	490f      	ldr	r1, [pc, #60]	; (8003824 <HAL_PWREx_ConfigSupply+0x70>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037ee:	f7fe fc5f 	bl	80020b0 <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037f4:	e009      	b.n	800380a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037f6:	f7fe fc5b 	bl	80020b0 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003804:	d901      	bls.n	800380a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e007      	b.n	800381a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_PWREx_ConfigSupply+0x70>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003816:	d1ee      	bne.n	80037f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	58024800 	.word	0x58024800

08003828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f000 bc48 	b.w	80040cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8088 	beq.w	800395a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384a:	4b99      	ldr	r3, [pc, #612]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003854:	4b96      	ldr	r3, [pc, #600]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	2b10      	cmp	r3, #16
 800385e:	d007      	beq.n	8003870 <HAL_RCC_OscConfig+0x48>
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	2b18      	cmp	r3, #24
 8003864:	d111      	bne.n	800388a <HAL_RCC_OscConfig+0x62>
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d10c      	bne.n	800388a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	4b8f      	ldr	r3, [pc, #572]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d06d      	beq.n	8003958 <HAL_RCC_OscConfig+0x130>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d169      	bne.n	8003958 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f000 bc21 	b.w	80040cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x7a>
 8003894:	4b86      	ldr	r3, [pc, #536]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a85      	ldr	r2, [pc, #532]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 800389a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e02e      	b.n	8003900 <HAL_RCC_OscConfig+0xd8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x9c>
 80038aa:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a80      	ldr	r2, [pc, #512]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b7e      	ldr	r3, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7d      	ldr	r2, [pc, #500]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e01d      	b.n	8003900 <HAL_RCC_OscConfig+0xd8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0xc0>
 80038ce:	4b78      	ldr	r3, [pc, #480]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a77      	ldr	r2, [pc, #476]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a74      	ldr	r2, [pc, #464]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0xd8>
 80038e8:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a70      	ldr	r2, [pc, #448]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6d      	ldr	r2, [pc, #436]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d013      	beq.n	8003930 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fe fbd2 	bl	80020b0 <HAL_GetTick>
 800390c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7fe fbce 	bl	80020b0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e3d4      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0xe8>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fe fbbe 	bl	80020b0 <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fe fbba 	bl	80020b0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e3c0      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800394a:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x110>
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80ca 	beq.w	8003afc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003968:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003970:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003972:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_RCC_OscConfig+0x166>
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	2b18      	cmp	r3, #24
 8003982:	d156      	bne.n	8003a32 <HAL_RCC_OscConfig+0x20a>
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d151      	bne.n	8003a32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x17e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e392      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039a6:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 0219 	bic.w	r2, r3, #25
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	493f      	ldr	r1, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe fb7a 	bl	80020b0 <HAL_GetTick>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c0:	f7fe fb76 	bl	80020b0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e37c      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	f7fe fb73 	bl	80020c8 <HAL_GetREVID>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d817      	bhi.n	8003a1c <HAL_RCC_OscConfig+0x1f4>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d108      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1de>
 80039f4:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039fc:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a04:	e07a      	b.n	8003afc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	031b      	lsls	r3, r3, #12
 8003a14:	4926      	ldr	r1, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a1a:	e06f      	b.n	8003afc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	4921      	ldr	r1, [pc, #132]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	e064      	b.n	8003afc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d047      	beq.n	8003aca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0219 	bic.w	r2, r3, #25
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	491a      	ldr	r1, [pc, #104]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fb30 	bl	80020b0 <HAL_GetTick>
 8003a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fe fb2c 	bl	80020b0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e332      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a72:	f7fe fb29 	bl	80020c8 <HAL_GetREVID>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d819      	bhi.n	8003ab4 <HAL_RCC_OscConfig+0x28c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d108      	bne.n	8003a9a <HAL_RCC_OscConfig+0x272>
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a90:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a96:	6053      	str	r3, [r2, #4]
 8003a98:	e030      	b.n	8003afc <HAL_RCC_OscConfig+0x2d4>
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	031b      	lsls	r3, r3, #12
 8003aa8:	4901      	ldr	r1, [pc, #4]	; (8003ab0 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	604b      	str	r3, [r1, #4]
 8003aae:	e025      	b.n	8003afc <HAL_RCC_OscConfig+0x2d4>
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	4b9a      	ldr	r3, [pc, #616]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	4997      	ldr	r1, [pc, #604]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
 8003ac8:	e018      	b.n	8003afc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b95      	ldr	r3, [pc, #596]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a94      	ldr	r2, [pc, #592]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe faeb 	bl	80020b0 <HAL_GetTick>
 8003ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fe fae7 	bl	80020b0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e2ed      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003af0:	4b8b      	ldr	r3, [pc, #556]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a9 	beq.w	8003c5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0a:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b14:	4b82      	ldr	r3, [pc, #520]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d007      	beq.n	8003b30 <HAL_RCC_OscConfig+0x308>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b18      	cmp	r3, #24
 8003b24:	d13a      	bne.n	8003b9c <HAL_RCC_OscConfig+0x374>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d135      	bne.n	8003b9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b30:	4b7b      	ldr	r3, [pc, #492]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_OscConfig+0x320>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e2c1      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b48:	f7fe fabe 	bl	80020c8 <HAL_GetREVID>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d817      	bhi.n	8003b86 <HAL_RCC_OscConfig+0x35e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d108      	bne.n	8003b70 <HAL_RCC_OscConfig+0x348>
 8003b5e:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b66:	4a6e      	ldr	r2, [pc, #440]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b6c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b6e:	e075      	b.n	8003c5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b70:	4b6b      	ldr	r3, [pc, #428]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	069b      	lsls	r3, r3, #26
 8003b7e:	4968      	ldr	r1, [pc, #416]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b84:	e06a      	b.n	8003c5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b86:	4b66      	ldr	r3, [pc, #408]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	4962      	ldr	r1, [pc, #392]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b9a:	e05f      	b.n	8003c5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d042      	beq.n	8003c2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ba4:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a5d      	ldr	r2, [pc, #372]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fa7e 	bl	80020b0 <HAL_GetTick>
 8003bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fa7a 	bl	80020b0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e280      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bca:	4b55      	ldr	r3, [pc, #340]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bd6:	f7fe fa77 	bl	80020c8 <HAL_GetREVID>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d817      	bhi.n	8003c14 <HAL_RCC_OscConfig+0x3ec>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d108      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3d6>
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bf4:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bfa:	6053      	str	r3, [r2, #4]
 8003bfc:	e02e      	b.n	8003c5c <HAL_RCC_OscConfig+0x434>
 8003bfe:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	069b      	lsls	r3, r3, #26
 8003c0c:	4944      	ldr	r1, [pc, #272]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
 8003c12:	e023      	b.n	8003c5c <HAL_RCC_OscConfig+0x434>
 8003c14:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	493f      	ldr	r1, [pc, #252]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60cb      	str	r3, [r1, #12]
 8003c28:	e018      	b.n	8003c5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3c      	ldr	r2, [pc, #240]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fe fa3b 	bl	80020b0 <HAL_GetTick>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fa37 	bl	80020b0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e23d      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c50:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d036      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d019      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fe fa18 	bl	80020b0 <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fe fa14 	bl	80020b0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e21a      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x45c>
 8003ca2:	e018      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fe f9fe 	bl	80020b0 <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fe f9fa 	bl	80020b0 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e200      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d039      	beq.n	8003d56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01c      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cf6:	f7fe f9db 	bl	80020b0 <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cfe:	f7fe f9d7 	bl	80020b0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1dd      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_RCC_OscConfig+0x4f8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x4d6>
 8003d1c:	e01b      	b.n	8003d56 <HAL_RCC_OscConfig+0x52e>
 8003d1e:	bf00      	nop
 8003d20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d24:	4b9b      	ldr	r3, [pc, #620]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a9a      	ldr	r2, [pc, #616]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d30:	f7fe f9be 	bl	80020b0 <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d38:	f7fe f9ba 	bl	80020b0 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1c0      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d4a:	4b92      	ldr	r3, [pc, #584]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8081 	beq.w	8003e66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d64:	4b8c      	ldr	r3, [pc, #560]	; (8003f98 <HAL_RCC_OscConfig+0x770>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a8b      	ldr	r2, [pc, #556]	; (8003f98 <HAL_RCC_OscConfig+0x770>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fe f99e 	bl	80020b0 <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fe f99a 	bl	80020b0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1a0      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8a:	4b83      	ldr	r3, [pc, #524]	; (8003f98 <HAL_RCC_OscConfig+0x770>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x584>
 8003d9e:	4b7d      	ldr	r3, [pc, #500]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	4a7c      	ldr	r2, [pc, #496]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70
 8003daa:	e02d      	b.n	8003e08 <HAL_RCC_OscConfig+0x5e0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10c      	bne.n	8003dce <HAL_RCC_OscConfig+0x5a6>
 8003db4:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	4a76      	ldr	r2, [pc, #472]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc0:	4b74      	ldr	r3, [pc, #464]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	4a73      	ldr	r2, [pc, #460]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003dc6:	f023 0304 	bic.w	r3, r3, #4
 8003dca:	6713      	str	r3, [r2, #112]	; 0x70
 8003dcc:	e01c      	b.n	8003e08 <HAL_RCC_OscConfig+0x5e0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x5c8>
 8003dd6:	4b6f      	ldr	r3, [pc, #444]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
 8003de2:	4b6c      	ldr	r3, [pc, #432]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a6b      	ldr	r2, [pc, #428]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x5e0>
 8003df0:	4b68      	ldr	r3, [pc, #416]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	4a67      	ldr	r2, [pc, #412]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfc:	4b65      	ldr	r3, [pc, #404]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a64      	ldr	r2, [pc, #400]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003e02:	f023 0304 	bic.w	r3, r3, #4
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fe f94e 	bl	80020b0 <HAL_GetTick>
 8003e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e18:	f7fe f94a 	bl	80020b0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e14e      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e2e:	4b59      	ldr	r3, [pc, #356]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0ee      	beq.n	8003e18 <HAL_RCC_OscConfig+0x5f0>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fe f938 	bl	80020b0 <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fe f934 	bl	80020b0 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e138      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e5a:	4b4e      	ldr	r3, [pc, #312]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ee      	bne.n	8003e44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 812d 	beq.w	80040ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e70:	4b48      	ldr	r3, [pc, #288]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e78:	2b18      	cmp	r3, #24
 8003e7a:	f000 80bd 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	f040 809e 	bne.w	8003fc4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a41      	ldr	r2, [pc, #260]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe f90c 	bl	80020b0 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe f908 	bl	80020b0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e10e      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eae:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eba:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_OscConfig+0x774>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	4931      	ldr	r1, [pc, #196]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	025b      	lsls	r3, r3, #9
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efc:	3b01      	subs	r3, #1
 8003efe:	061b      	lsls	r3, r3, #24
 8003f00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f04:	4923      	ldr	r1, [pc, #140]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f0a:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	4a21      	ldr	r2, [pc, #132]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f16:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_RCC_OscConfig+0x778>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f22:	00d2      	lsls	r2, r2, #3
 8003f24:	491b      	ldr	r1, [pc, #108]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	f023 020c 	bic.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	4917      	ldr	r1, [pc, #92]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	f023 0202 	bic.w	r2, r3, #2
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	4912      	ldr	r1, [pc, #72]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <HAL_RCC_OscConfig+0x76c>)
 8003f84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fe f891 	bl	80020b0 <HAL_GetTick>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f90:	e011      	b.n	8003fb6 <HAL_RCC_OscConfig+0x78e>
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
 8003f98:	58024800 	.word	0x58024800
 8003f9c:	fffffc0c 	.word	0xfffffc0c
 8003fa0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe f884 	bl	80020b0 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e08a      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb6:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x77c>
 8003fc2:	e082      	b.n	80040ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a42      	ldr	r2, [pc, #264]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 8003fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe f86e 	bl	80020b0 <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fe f86a 	bl	80020b0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e070      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fea:	4b3a      	ldr	r3, [pc, #232]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x7b0>
 8003ff6:	e068      	b.n	80040ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ff8:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ffe:	4b35      	ldr	r3, [pc, #212]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2b01      	cmp	r3, #1
 800400a:	d031      	beq.n	8004070 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f003 0203 	and.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d12a      	bne.n	8004070 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d122      	bne.n	8004070 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d11a      	bne.n	8004070 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	0a5b      	lsrs	r3, r3, #9
 800403e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d111      	bne.n	8004070 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	0c1b      	lsrs	r3, r3, #16
 8004050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d108      	bne.n	8004070 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	0e1b      	lsrs	r3, r3, #24
 8004062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e02b      	b.n	80040cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004074:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	08db      	lsrs	r3, r3, #3
 800407a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800407e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d01f      	beq.n	80040ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	4a11      	ldr	r2, [pc, #68]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004096:	f7fe f80b 	bl	80020b0 <HAL_GetTick>
 800409a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800409c:	bf00      	nop
 800409e:	f7fe f807 	bl	80020b0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d0f9      	beq.n	800409e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 80040ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_RCC_OscConfig+0x8b0>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040b6:	00d2      	lsls	r2, r2, #3
 80040b8:	4906      	ldr	r1, [pc, #24]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_RCC_OscConfig+0x8ac>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3730      	adds	r7, #48	; 0x30
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	58024400 	.word	0x58024400
 80040d8:	ffff0007 	.word	0xffff0007

080040dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e19c      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b8a      	ldr	r3, [pc, #552]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d910      	bls.n	8004120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b87      	ldr	r3, [pc, #540]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 020f 	bic.w	r2, r3, #15
 8004106:	4985      	ldr	r1, [pc, #532]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b83      	ldr	r3, [pc, #524]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e184      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004138:	429a      	cmp	r2, r3
 800413a:	d908      	bls.n	800414e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800413c:	4b78      	ldr	r3, [pc, #480]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	4975      	ldr	r1, [pc, #468]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800414a:	4313      	orrs	r3, r2
 800414c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	4b70      	ldr	r3, [pc, #448]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004166:	429a      	cmp	r2, r3
 8004168:	d908      	bls.n	800417c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800416a:	4b6d      	ldr	r3, [pc, #436]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	496a      	ldr	r1, [pc, #424]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004178:	4313      	orrs	r3, r2
 800417a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	4b64      	ldr	r3, [pc, #400]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004194:	429a      	cmp	r2, r3
 8004196:	d908      	bls.n	80041aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004198:	4b61      	ldr	r3, [pc, #388]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	495e      	ldr	r1, [pc, #376]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d908      	bls.n	80041d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041c6:	4b56      	ldr	r3, [pc, #344]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4953      	ldr	r1, [pc, #332]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d908      	bls.n	8004206 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f4:	4b4a      	ldr	r3, [pc, #296]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f023 020f 	bic.w	r2, r3, #15
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4947      	ldr	r1, [pc, #284]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004202:	4313      	orrs	r3, r2
 8004204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d055      	beq.n	80042be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004212:	4b43      	ldr	r3, [pc, #268]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4940      	ldr	r1, [pc, #256]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004220:	4313      	orrs	r3, r2
 8004222:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d107      	bne.n	800423c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800422c:	4b3c      	ldr	r3, [pc, #240]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d121      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0f6      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b03      	cmp	r3, #3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004244:	4b36      	ldr	r3, [pc, #216]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d115      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0ea      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d107      	bne.n	800426c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800425c:	4b30      	ldr	r3, [pc, #192]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0de      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800426c:	4b2c      	ldr	r3, [pc, #176]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0d6      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800427c:	4b28      	ldr	r3, [pc, #160]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f023 0207 	bic.w	r2, r3, #7
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4925      	ldr	r1, [pc, #148]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428e:	f7fd ff0f 	bl	80020b0 <HAL_GetTick>
 8004292:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004294:	e00a      	b.n	80042ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004296:	f7fd ff0b 	bl	80020b0 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0be      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d1eb      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d208      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d214      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 020f 	bic.w	r2, r3, #15
 8004302:	4906      	ldr	r1, [pc, #24]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e086      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
 800431c:	52002000 	.word	0x52002000
 8004320:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800433c:	429a      	cmp	r2, r3
 800433e:	d208      	bcs.n	8004352 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004340:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4939      	ldr	r1, [pc, #228]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800434e:	4313      	orrs	r3, r2
 8004350:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d010      	beq.n	8004380 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	4b34      	ldr	r3, [pc, #208]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436a:	429a      	cmp	r2, r3
 800436c:	d208      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	492e      	ldr	r1, [pc, #184]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800437c:	4313      	orrs	r3, r2
 800437e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004398:	429a      	cmp	r2, r3
 800439a:	d208      	bcs.n	80043ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4922      	ldr	r1, [pc, #136]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d010      	beq.n	80043dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d208      	bcs.n	80043dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4917      	ldr	r1, [pc, #92]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043dc:	f000 f834 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	4912      	ldr	r1, [pc, #72]	; (8004438 <HAL_RCC_ClockConfig+0x35c>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
 80043f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <HAL_RCC_ClockConfig+0x35c>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_RCC_ClockConfig+0x360>)
 8004412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004414:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <HAL_RCC_ClockConfig+0x364>)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x368>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc ffd2 	bl	80013c8 <HAL_InitTick>
 8004424:	4603      	mov	r3, r0
 8004426:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400
 8004438:	0800c284 	.word	0x0800c284
 800443c:	24000094 	.word	0x24000094
 8004440:	24000090 	.word	0x24000090
 8004444:	24000098 	.word	0x24000098

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800444e:	4bb3      	ldr	r3, [pc, #716]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004456:	2b18      	cmp	r3, #24
 8004458:	f200 8155 	bhi.w	8004706 <HAL_RCC_GetSysClockFreq+0x2be>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <HAL_RCC_GetSysClockFreq+0x1c>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	080044c9 	.word	0x080044c9
 8004468:	08004707 	.word	0x08004707
 800446c:	08004707 	.word	0x08004707
 8004470:	08004707 	.word	0x08004707
 8004474:	08004707 	.word	0x08004707
 8004478:	08004707 	.word	0x08004707
 800447c:	08004707 	.word	0x08004707
 8004480:	08004707 	.word	0x08004707
 8004484:	080044ef 	.word	0x080044ef
 8004488:	08004707 	.word	0x08004707
 800448c:	08004707 	.word	0x08004707
 8004490:	08004707 	.word	0x08004707
 8004494:	08004707 	.word	0x08004707
 8004498:	08004707 	.word	0x08004707
 800449c:	08004707 	.word	0x08004707
 80044a0:	08004707 	.word	0x08004707
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	08004707 	.word	0x08004707
 80044ac:	08004707 	.word	0x08004707
 80044b0:	08004707 	.word	0x08004707
 80044b4:	08004707 	.word	0x08004707
 80044b8:	08004707 	.word	0x08004707
 80044bc:	08004707 	.word	0x08004707
 80044c0:	08004707 	.word	0x08004707
 80044c4:	080044fb 	.word	0x080044fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c8:	4b94      	ldr	r3, [pc, #592]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044d4:	4b91      	ldr	r3, [pc, #580]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	08db      	lsrs	r3, r3, #3
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	4a90      	ldr	r2, [pc, #576]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
 80044e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044e6:	e111      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044e8:	4b8d      	ldr	r3, [pc, #564]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ea:	61bb      	str	r3, [r7, #24]
      break;
 80044ec:	e10e      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044ee:	4b8d      	ldr	r3, [pc, #564]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f0:	61bb      	str	r3, [r7, #24]
      break;
 80044f2:	e10b      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044f4:	4b8c      	ldr	r3, [pc, #560]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044f6:	61bb      	str	r3, [r7, #24]
      break;
 80044f8:	e108      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044fa:	4b88      	ldr	r3, [pc, #544]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004504:	4b85      	ldr	r3, [pc, #532]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800450e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004510:	4b82      	ldr	r3, [pc, #520]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800451a:	4b80      	ldr	r3, [pc, #512]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80e1 	beq.w	8004700 <HAL_RCC_GetSysClockFreq+0x2b8>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b02      	cmp	r3, #2
 8004542:	f000 8083 	beq.w	800464c <HAL_RCC_GetSysClockFreq+0x204>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b02      	cmp	r3, #2
 800454a:	f200 80a1 	bhi.w	8004690 <HAL_RCC_GetSysClockFreq+0x248>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x114>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d056      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x1c0>
 800455a:	e099      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800455c:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02d      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004568:	4b6c      	ldr	r3, [pc, #432]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	4a6b      	ldr	r2, [pc, #428]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004592:	4b62      	ldr	r3, [pc, #392]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 80045aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045c2:	e087      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b51      	ldr	r3, [pc, #324]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004606:	e065      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b40      	ldr	r3, [pc, #256]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a02 	vldr	s12, [r7, #8]
 800462e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800464a:	e043      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004738 <HAL_RCC_GetSysClockFreq+0x2f0>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b2f      	ldr	r3, [pc, #188]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004672:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800468e:	e021      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2ec>
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b1e      	ldr	r3, [pc, #120]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046d4:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	0a5b      	lsrs	r3, r3, #9
 80046da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046de:	3301      	adds	r3, #1
 80046e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f8:	ee17 3a90 	vmov	r3, s15
 80046fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046fe:	e005      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
      break;
 8004704:	e002      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004708:	61bb      	str	r3, [r7, #24]
      break;
 800470a:	bf00      	nop
  }

  return sysclockfreq;
 800470c:	69bb      	ldr	r3, [r7, #24]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	; 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
 8004720:	03d09000 	.word	0x03d09000
 8004724:	003d0900 	.word	0x003d0900
 8004728:	017d7840 	.word	0x017d7840
 800472c:	46000000 	.word	0x46000000
 8004730:	4c742400 	.word	0x4c742400
 8004734:	4a742400 	.word	0x4a742400
 8004738:	4bbebc20 	.word	0x4bbebc20

0800473c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004742:	f7ff fe81 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_RCC_GetHCLKFreq+0x50>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490f      	ldr	r1, [pc, #60]	; (8004790 <HAL_RCC_GetHCLKFreq+0x54>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_RCC_GetHCLKFreq+0x50>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_GetHCLKFreq+0x54>)
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	fa22 f303 	lsr.w	r3, r2, r3
 8004776:	4a07      	ldr	r2, [pc, #28]	; (8004794 <HAL_RCC_GetHCLKFreq+0x58>)
 8004778:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <HAL_RCC_GetHCLKFreq+0x5c>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <HAL_RCC_GetHCLKFreq+0x58>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	58024400 	.word	0x58024400
 8004790:	0800c284 	.word	0x0800c284
 8004794:	24000094 	.word	0x24000094
 8004798:	24000090 	.word	0x24000090

0800479c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047a0:	f7ff ffcc 	bl	800473c <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4904      	ldr	r1, [pc, #16]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	58024400 	.word	0x58024400
 80047c4:	0800c284 	.word	0x0800c284

080047c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047cc:	f7ff ffb6 	bl	800473c <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4904      	ldr	r1, [pc, #16]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	58024400 	.word	0x58024400
 80047f0:	0800c284 	.word	0x0800c284

080047f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	223f      	movs	r2, #63	; 0x3f
 8004802:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004804:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <HAL_RCC_GetClockConfig+0x7c>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f003 0207 	and.w	r2, r3, #7
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <HAL_RCC_GetClockConfig+0x7c>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <HAL_RCC_GetClockConfig+0x7c>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_RCC_GetClockConfig+0x7c>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <HAL_RCC_GetClockConfig+0x7c>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_GetClockConfig+0x7c>)
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <HAL_RCC_GetClockConfig+0x7c>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_RCC_GetClockConfig+0x80>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 020f 	and.w	r2, r3, #15
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	58024400 	.word	0x58024400
 8004874:	52002000 	.word	0x52002000

08004878 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b0ca      	sub	sp, #296	; 0x128
 800487e:	af00      	add	r7, sp, #0
 8004880:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800488a:	2300      	movs	r3, #0
 800488c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800489c:	2500      	movs	r5, #0
 800489e:	ea54 0305 	orrs.w	r3, r4, r5
 80048a2:	d049      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ae:	d02f      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048b4:	d828      	bhi.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ba:	d01a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c0:	d822      	bhi.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ca:	d007      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048cc:	e01c      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ce:	4bb8      	ldr	r3, [pc, #736]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	4ab7      	ldr	r2, [pc, #732]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048da:	e01a      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e0:	3308      	adds	r3, #8
 80048e2:	2102      	movs	r1, #2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f002 fb61 	bl	8006fac <RCCEx_PLL2_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048f0:	e00f      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	3328      	adds	r3, #40	; 0x28
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f002 fc08 	bl	8007110 <RCCEx_PLL3_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800490e:	e000      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800491a:	4ba5      	ldr	r3, [pc, #660]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004928:	4aa1      	ldr	r2, [pc, #644]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800492a:	430b      	orrs	r3, r1
 800492c:	6513      	str	r3, [r2, #80]	; 0x50
 800492e:	e003      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004934:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004944:	f04f 0900 	mov.w	r9, #0
 8004948:	ea58 0309 	orrs.w	r3, r8, r9
 800494c:	d047      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	2b04      	cmp	r3, #4
 8004956:	d82a      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004975 	.word	0x08004975
 8004964:	08004983 	.word	0x08004983
 8004968:	08004999 	.word	0x08004999
 800496c:	080049b7 	.word	0x080049b7
 8004970:	080049b7 	.word	0x080049b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	4b8e      	ldr	r3, [pc, #568]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4a8d      	ldr	r2, [pc, #564]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800497a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004980:	e01a      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004986:	3308      	adds	r3, #8
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f002 fb0e 	bl	8006fac <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004996:	e00f      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499c:	3328      	adds	r3, #40	; 0x28
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f002 fbb5 	bl	8007110 <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049ac:	e004      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c0:	4b7b      	ldr	r3, [pc, #492]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c4:	f023 0107 	bic.w	r1, r3, #7
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	4a78      	ldr	r2, [pc, #480]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6513      	str	r3, [r2, #80]	; 0x50
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80049ea:	f04f 0b00 	mov.w	fp, #0
 80049ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80049f2:	d04c      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fe:	d030      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a04:	d829      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a06:	2bc0      	cmp	r3, #192	; 0xc0
 8004a08:	d02d      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a0c:	d825      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d018      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	d821      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d007      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004a1e:	e01c      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a20:	4b63      	ldr	r3, [pc, #396]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4a62      	ldr	r2, [pc, #392]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a2c:	e01c      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a32:	3308      	adds	r3, #8
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 fab8 	bl	8006fac <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a42:	e011      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a48:	3328      	adds	r3, #40	; 0x28
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f002 fb5f 	bl	8007110 <RCCEx_PLL3_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a70:	4b4f      	ldr	r3, [pc, #316]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a74:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	4a4c      	ldr	r2, [pc, #304]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6513      	str	r3, [r2, #80]	; 0x50
 8004a84:	e003      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004a9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004aa4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	d053      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aba:	d035      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ac0:	d82e      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ac2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ac6:	d031      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004acc:	d828      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad2:	d01a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad8:	d822      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae2:	d007      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ae4:	e01c      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae6:	4b32      	ldr	r3, [pc, #200]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af2:	e01c      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af8:	3308      	adds	r3, #8
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f002 fa55 	bl	8006fac <RCCEx_PLL2_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b08:	e011      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0e:	3328      	adds	r3, #40	; 0x28
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 fafc 	bl	8007110 <RCCEx_PLL3_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b1e:	e006      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b36:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b46:	4a1a      	ldr	r2, [pc, #104]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4c:	e003      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004b62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004b70:	460b      	mov	r3, r1
 8004b72:	4313      	orrs	r3, r2
 8004b74:	d056      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b82:	d038      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b88:	d831      	bhi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b8e:	d034      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b94:	d82b      	bhi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba0:	d825      	bhi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d006      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004ba6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004baa:	d00a      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004bac:	e01f      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb4:	4ba2      	ldr	r3, [pc, #648]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4aa1      	ldr	r2, [pc, #644]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bc0:	e01c      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f002 f9ee 	bl	8006fac <RCCEx_PLL2_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bd6:	e011      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bdc:	3328      	adds	r3, #40	; 0x28
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f002 fa95 	bl	8007110 <RCCEx_PLL3_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bec:	e006      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bf4:	e002      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bf6:	bf00      	nop
 8004bf8:	e000      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c04:	4b8e      	ldr	r3, [pc, #568]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c08:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c14:	4a8a      	ldr	r2, [pc, #552]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c16:	430b      	orrs	r3, r1
 8004c18:	6593      	str	r3, [r2, #88]	; 0x58
 8004c1a:	e003      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c34:	2300      	movs	r3, #0
 8004c36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4313      	orrs	r3, r2
 8004c42:	d03a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	2b30      	cmp	r3, #48	; 0x30
 8004c4c:	d01f      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c4e:	2b30      	cmp	r3, #48	; 0x30
 8004c50:	d819      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d00c      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d815      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d019      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d111      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c62:	4b77      	ldr	r3, [pc, #476]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	4a76      	ldr	r2, [pc, #472]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c6e:	e011      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c74:	3308      	adds	r3, #8
 8004c76:	2102      	movs	r1, #2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f002 f997 	bl	8006fac <RCCEx_PLL2_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c9c:	4b68      	ldr	r3, [pc, #416]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004caa:	4a65      	ldr	r2, [pc, #404]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cac:	430b      	orrs	r3, r1
 8004cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cb0:	e003      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004cc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	d051      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce4:	d035      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cea:	d82e      	bhi.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cf0:	d031      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004cf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cf6:	d828      	bhi.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfc:	d01a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d02:	d822      	bhi.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0c:	d007      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d0e:	e01c      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d10:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	4a4a      	ldr	r2, [pc, #296]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d1c:	e01c      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d22:	3308      	adds	r3, #8
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f002 f940 	bl	8006fac <RCCEx_PLL2_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d32:	e011      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d38:	3328      	adds	r3, #40	; 0x28
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f002 f9e7 	bl	8007110 <RCCEx_PLL3_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d48:	e006      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d50:	e002      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d60:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d64:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	4a34      	ldr	r2, [pc, #208]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6513      	str	r3, [r2, #80]	; 0x50
 8004d74:	e003      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d056      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da8:	d033      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dae:	d82c      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004db4:	d02f      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dba:	d826      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dc0:	d02b      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004dc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dc6:	d820      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dcc:	d012      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dd2:	d81a      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d022      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ddc:	d115      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de2:	3308      	adds	r3, #8
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f002 f8e0 	bl	8006fac <RCCEx_PLL2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004df2:	e015      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df8:	3328      	adds	r3, #40	; 0x28
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f002 f987 	bl	8007110 <RCCEx_PLL3_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e08:	e00a      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e10:	e006      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e12:	bf00      	nop
 8004e14:	e004      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e36:	4a02      	ldr	r2, [pc, #8]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6513      	str	r3, [r2, #80]	; 0x50
 8004e3c:	e006      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d055      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e78:	d033      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e7e:	d82c      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d02f      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8a:	d826      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e90:	d02b      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e96:	d820      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9c:	d012      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea2:	d81a      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d022      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eac:	d115      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f002 f878 	bl	8006fac <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e015      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec8:	3328      	adds	r3, #40	; 0x28
 8004eca:	2101      	movs	r1, #1
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f002 f91f 	bl	8007110 <RCCEx_PLL3_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ee0:	e006      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ef8:	4ba3      	ldr	r3, [pc, #652]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f08:	4a9f      	ldr	r2, [pc, #636]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f0e:	e003      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d037      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f42:	d00e      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f48:	d816      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d018      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f52:	d111      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f54:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4a8b      	ldr	r2, [pc, #556]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f60:	e00f      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f66:	3308      	adds	r3, #8
 8004f68:	2101      	movs	r1, #1
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 f81e 	bl	8006fac <RCCEx_PLL2_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f76:	e004      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f7e:	e000      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f8a:	4b7f      	ldr	r3, [pc, #508]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4a7b      	ldr	r2, [pc, #492]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	6513      	str	r3, [r2, #80]	; 0x50
 8004f9e:	e003      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	d039      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d81c      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004fd2:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd8:	08005015 	.word	0x08005015
 8004fdc:	08004fe9 	.word	0x08004fe9
 8004fe0:	08004ff7 	.word	0x08004ff7
 8004fe4:	08005015 	.word	0x08005015
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe8:	4b67      	ldr	r3, [pc, #412]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4a66      	ldr	r2, [pc, #408]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ff4:	e00f      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	2102      	movs	r1, #2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f001 ffd4 	bl	8006fac <RCCEx_PLL2_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800500a:	e004      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800501e:	4b5a      	ldr	r3, [pc, #360]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	f023 0103 	bic.w	r1, r3, #3
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502c:	4a56      	ldr	r2, [pc, #344]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800502e:	430b      	orrs	r3, r1
 8005030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005032:	e003      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005048:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800504c:	2300      	movs	r3, #0
 800504e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005052:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005056:	460b      	mov	r3, r1
 8005058:	4313      	orrs	r3, r2
 800505a:	f000 809f 	beq.w	800519c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800505e:	4b4b      	ldr	r3, [pc, #300]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a4a      	ldr	r2, [pc, #296]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005068:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800506a:	f7fd f821 	bl	80020b0 <HAL_GetTick>
 800506e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005072:	e00b      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005074:	f7fd f81c 	bl	80020b0 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	; 0x64
 8005082:	d903      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800508a:	e005      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800508c:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ed      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800509c:	2b00      	cmp	r3, #0
 800509e:	d179      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050a0:	4b39      	ldr	r3, [pc, #228]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050ac:	4053      	eors	r3, r2
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d015      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b6:	4b34      	ldr	r3, [pc, #208]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c2:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	4a30      	ldr	r2, [pc, #192]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ce:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	4a2d      	ldr	r2, [pc, #180]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050da:	4a2b      	ldr	r2, [pc, #172]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ee:	d118      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fc ffde 	bl	80020b0 <HAL_GetTick>
 80050f4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f8:	e00d      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fa:	f7fc ffd9 	bl	80020b0 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005104:	1ad2      	subs	r2, r2, r3
 8005106:	f241 3388 	movw	r3, #5000	; 0x1388
 800510a:	429a      	cmp	r2, r3
 800510c:	d903      	bls.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005114:	e005      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005116:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0eb      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005126:	2b00      	cmp	r3, #0
 8005128:	d129      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800512a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513a:	d10e      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005148:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800514c:	091a      	lsrs	r2, r3, #4
 800514e:	4b10      	ldr	r3, [pc, #64]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005150:	4013      	ands	r3, r2
 8005152:	4a0d      	ldr	r2, [pc, #52]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005154:	430b      	orrs	r3, r1
 8005156:	6113      	str	r3, [r2, #16]
 8005158:	e005      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005160:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005164:	6113      	str	r3, [r2, #16]
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005168:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005176:	4a04      	ldr	r2, [pc, #16]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005178:	430b      	orrs	r3, r1
 800517a:	6713      	str	r3, [r2, #112]	; 0x70
 800517c:	e00e      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800517e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005182:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005186:	e009      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005188:	58024400 	.word	0x58024400
 800518c:	58024800 	.word	0x58024800
 8005190:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005198:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800519c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f002 0301 	and.w	r3, r2, #1
 80051a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f000 8089 	beq.w	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c4:	2b28      	cmp	r3, #40	; 0x28
 80051c6:	d86b      	bhi.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080052a9 	.word	0x080052a9
 80051d4:	080052a1 	.word	0x080052a1
 80051d8:	080052a1 	.word	0x080052a1
 80051dc:	080052a1 	.word	0x080052a1
 80051e0:	080052a1 	.word	0x080052a1
 80051e4:	080052a1 	.word	0x080052a1
 80051e8:	080052a1 	.word	0x080052a1
 80051ec:	080052a1 	.word	0x080052a1
 80051f0:	08005275 	.word	0x08005275
 80051f4:	080052a1 	.word	0x080052a1
 80051f8:	080052a1 	.word	0x080052a1
 80051fc:	080052a1 	.word	0x080052a1
 8005200:	080052a1 	.word	0x080052a1
 8005204:	080052a1 	.word	0x080052a1
 8005208:	080052a1 	.word	0x080052a1
 800520c:	080052a1 	.word	0x080052a1
 8005210:	0800528b 	.word	0x0800528b
 8005214:	080052a1 	.word	0x080052a1
 8005218:	080052a1 	.word	0x080052a1
 800521c:	080052a1 	.word	0x080052a1
 8005220:	080052a1 	.word	0x080052a1
 8005224:	080052a1 	.word	0x080052a1
 8005228:	080052a1 	.word	0x080052a1
 800522c:	080052a1 	.word	0x080052a1
 8005230:	080052a9 	.word	0x080052a9
 8005234:	080052a1 	.word	0x080052a1
 8005238:	080052a1 	.word	0x080052a1
 800523c:	080052a1 	.word	0x080052a1
 8005240:	080052a1 	.word	0x080052a1
 8005244:	080052a1 	.word	0x080052a1
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052a1 	.word	0x080052a1
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052a1 	.word	0x080052a1
 8005258:	080052a1 	.word	0x080052a1
 800525c:	080052a1 	.word	0x080052a1
 8005260:	080052a1 	.word	0x080052a1
 8005264:	080052a1 	.word	0x080052a1
 8005268:	080052a1 	.word	0x080052a1
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080052a9 	.word	0x080052a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005278:	3308      	adds	r3, #8
 800527a:	2101      	movs	r1, #1
 800527c:	4618      	mov	r0, r3
 800527e:	f001 fe95 	bl	8006fac <RCCEx_PLL2_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005288:	e00f      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528e:	3328      	adds	r3, #40	; 0x28
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f001 ff3c 	bl	8007110 <RCCEx_PLL3_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800529e:	e004      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80052a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052b2:	4bbf      	ldr	r3, [pc, #764]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c0:	4abb      	ldr	r2, [pc, #748]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052c2:	430b      	orrs	r3, r1
 80052c4:	6553      	str	r3, [r2, #84]	; 0x54
 80052c6:	e003      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f002 0302 	and.w	r3, r2, #2
 80052dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80052e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80052ea:	460b      	mov	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d041      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f6:	2b05      	cmp	r3, #5
 80052f8:	d824      	bhi.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	0800534d 	.word	0x0800534d
 8005304:	08005319 	.word	0x08005319
 8005308:	0800532f 	.word	0x0800532f
 800530c:	0800534d 	.word	0x0800534d
 8005310:	0800534d 	.word	0x0800534d
 8005314:	0800534d 	.word	0x0800534d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531c:	3308      	adds	r3, #8
 800531e:	2101      	movs	r1, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f001 fe43 	bl	8006fac <RCCEx_PLL2_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800532c:	e00f      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005332:	3328      	adds	r3, #40	; 0x28
 8005334:	2101      	movs	r1, #1
 8005336:	4618      	mov	r0, r3
 8005338:	f001 feea 	bl	8007110 <RCCEx_PLL3_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005356:	4b96      	ldr	r3, [pc, #600]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f023 0107 	bic.w	r1, r3, #7
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005364:	4a92      	ldr	r2, [pc, #584]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005366:	430b      	orrs	r3, r1
 8005368:	6553      	str	r3, [r2, #84]	; 0x54
 800536a:	e003      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005370:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f002 0304 	and.w	r3, r2, #4
 8005380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800538a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800538e:	460b      	mov	r3, r1
 8005390:	4313      	orrs	r3, r2
 8005392:	d044      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539c:	2b05      	cmp	r3, #5
 800539e:	d825      	bhi.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80053a0:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053f5 	.word	0x080053f5
 80053ac:	080053c1 	.word	0x080053c1
 80053b0:	080053d7 	.word	0x080053d7
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	080053f5 	.word	0x080053f5
 80053bc:	080053f5 	.word	0x080053f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c4:	3308      	adds	r3, #8
 80053c6:	2101      	movs	r1, #1
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 fdef 	bl	8006fac <RCCEx_PLL2_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053d4:	e00f      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053da:	3328      	adds	r3, #40	; 0x28
 80053dc:	2101      	movs	r1, #1
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 fe96 	bl	8007110 <RCCEx_PLL3_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053ea:	e004      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053f2:	e000      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80053f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053fe:	4b6c      	ldr	r3, [pc, #432]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	f023 0107 	bic.w	r1, r3, #7
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800540e:	4a68      	ldr	r2, [pc, #416]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005410:	430b      	orrs	r3, r1
 8005412:	6593      	str	r3, [r2, #88]	; 0x58
 8005414:	e003      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800541a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f002 0320 	and.w	r3, r2, #32
 800542a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800542e:	2300      	movs	r3, #0
 8005430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d055      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800544a:	d033      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800544c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005450:	d82c      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d02f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d826      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800545e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005462:	d02b      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005464:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005468:	d820      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800546a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800546e:	d012      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005474:	d81a      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d022      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800547a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547e:	d115      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005484:	3308      	adds	r3, #8
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f001 fd8f 	bl	8006fac <RCCEx_PLL2_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005494:	e015      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549a:	3328      	adds	r3, #40	; 0x28
 800549c:	2102      	movs	r1, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fe36 	bl	8007110 <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054aa:	e00a      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054b2:	e006      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ca:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	4a35      	ldr	r2, [pc, #212]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6553      	str	r3, [r2, #84]	; 0x54
 80054e0:	e003      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80054f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054fa:	2300      	movs	r3, #0
 80054fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005500:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d058      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005512:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005516:	d033      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005518:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800551c:	d82c      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005522:	d02f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005528:	d826      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800552a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800552e:	d02b      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005534:	d820      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553a:	d012      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800553c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005540:	d81a      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d022      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554a:	d115      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005550:	3308      	adds	r3, #8
 8005552:	2100      	movs	r1, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f001 fd29 	bl	8006fac <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005560:	e015      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005566:	3328      	adds	r3, #40	; 0x28
 8005568:	2102      	movs	r1, #2
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fdd0 	bl	8007110 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005576:	e00a      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800557e:	e006      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005580:	bf00      	nop
 8005582:	e004      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005584:	bf00      	nop
 8005586:	e002      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005588:	bf00      	nop
 800558a:	e000      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800558c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10e      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a6:	4a02      	ldr	r2, [pc, #8]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6593      	str	r3, [r2, #88]	; 0x58
 80055ac:	e006      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80055c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d055      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80055e8:	d033      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80055ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80055ee:	d82c      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f4:	d02f      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fa:	d826      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005600:	d02b      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005602:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005606:	d820      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560c:	d012      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800560e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005612:	d81a      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d022      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800561c:	d115      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005622:	3308      	adds	r3, #8
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fcc0 	bl	8006fac <RCCEx_PLL2_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005632:	e015      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005638:	3328      	adds	r3, #40	; 0x28
 800563a:	2102      	movs	r1, #2
 800563c:	4618      	mov	r0, r3
 800563e:	f001 fd67 	bl	8007110 <RCCEx_PLL3_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005648:	e00a      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005650:	e006      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005652:	bf00      	nop
 8005654:	e004      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800565e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005668:	4ba1      	ldr	r3, [pc, #644]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005674:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005678:	4a9d      	ldr	r2, [pc, #628]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800567a:	430b      	orrs	r3, r1
 800567c:	6593      	str	r3, [r2, #88]	; 0x58
 800567e:	e003      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f002 0308 	and.w	r3, r2, #8
 8005694:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005698:	2300      	movs	r3, #0
 800569a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800569e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	d01e      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ba:	3328      	adds	r3, #40	; 0x28
 80056bc:	2102      	movs	r1, #2
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fd26 	bl	8007110 <RCCEx_PLL3_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056d0:	4b87      	ldr	r3, [pc, #540]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e0:	4a83      	ldr	r2, [pc, #524]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056e2:	430b      	orrs	r3, r1
 80056e4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f002 0310 	and.w	r3, r2, #16
 80056f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80056fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005700:	460b      	mov	r3, r1
 8005702:	4313      	orrs	r3, r2
 8005704:	d01e      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800570e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005712:	d10c      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005718:	3328      	adds	r3, #40	; 0x28
 800571a:	2102      	movs	r1, #2
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fcf7 	bl	8007110 <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800572e:	4b70      	ldr	r3, [pc, #448]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800573e:	4a6c      	ldr	r2, [pc, #432]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005740:	430b      	orrs	r3, r1
 8005742:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800575a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d03e      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800576c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005770:	d022      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005776:	d81b      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005780:	d00b      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005782:	e015      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005788:	3308      	adds	r3, #8
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fc0d 	bl	8006fac <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005798:	e00f      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579e:	3328      	adds	r3, #40	; 0x28
 80057a0:	2102      	movs	r1, #2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 fcb4 	bl	8007110 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057ae:	e004      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057c2:	4b4b      	ldr	r3, [pc, #300]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057d2:	4a47      	ldr	r2, [pc, #284]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6593      	str	r3, [r2, #88]	; 0x58
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80057ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80057f0:	2300      	movs	r3, #0
 80057f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d03b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800580a:	d01f      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800580c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005810:	d818      	bhi.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005816:	d003      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800581c:	d007      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800581e:	e011      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	4a32      	ldr	r2, [pc, #200]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800582a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800582c:	e00f      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	3328      	adds	r3, #40	; 0x28
 8005834:	2101      	movs	r1, #1
 8005836:	4618      	mov	r0, r3
 8005838:	f001 fc6a 	bl	8007110 <RCCEx_PLL3_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005842:	e004      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800584a:	e000      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800584c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005868:	430b      	orrs	r3, r1
 800586a:	6553      	str	r3, [r2, #84]	; 0x54
 800586c:	e003      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005872:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005882:	673b      	str	r3, [r7, #112]	; 0x70
 8005884:	2300      	movs	r3, #0
 8005886:	677b      	str	r3, [r7, #116]	; 0x74
 8005888:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800588c:	460b      	mov	r3, r1
 800588e:	4313      	orrs	r3, r2
 8005890:	d034      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d007      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a4:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058b0:	e00e      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	3308      	adds	r3, #8
 80058b8:	2102      	movs	r1, #2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fb76 	bl	8006fac <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058c6:	e003      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e6:	4a02      	ldr	r2, [pc, #8]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80058ee:	bf00      	nop
 80058f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005908:	66bb      	str	r3, [r7, #104]	; 0x68
 800590a:	2300      	movs	r3, #0
 800590c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800590e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005912:	460b      	mov	r3, r1
 8005914:	4313      	orrs	r3, r2
 8005916:	d00c      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591c:	3328      	adds	r3, #40	; 0x28
 800591e:	2102      	movs	r1, #2
 8005920:	4618      	mov	r0, r3
 8005922:	f001 fbf5 	bl	8007110 <RCCEx_PLL3_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800593e:	663b      	str	r3, [r7, #96]	; 0x60
 8005940:	2300      	movs	r3, #0
 8005942:	667b      	str	r3, [r7, #100]	; 0x64
 8005944:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005948:	460b      	mov	r3, r1
 800594a:	4313      	orrs	r3, r2
 800594c:	d038      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595a:	d018      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800595c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005960:	d811      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005966:	d014      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d80b      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005976:	d106      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005978:	4bc3      	ldr	r3, [pc, #780]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4ac2      	ldr	r2, [pc, #776]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800597e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005984:	e008      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800598c:	e004      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a0:	4bb9      	ldr	r3, [pc, #740]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b0:	4ab5      	ldr	r2, [pc, #724]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059b2:	430b      	orrs	r3, r1
 80059b4:	6553      	str	r3, [r2, #84]	; 0x54
 80059b6:	e003      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80059cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80059ce:	2300      	movs	r3, #0
 80059d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059dc:	4baa      	ldr	r3, [pc, #680]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ea:	4aa7      	ldr	r2, [pc, #668]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80059fc:	653b      	str	r3, [r7, #80]	; 0x50
 80059fe:	2300      	movs	r3, #0
 8005a00:	657b      	str	r3, [r7, #84]	; 0x54
 8005a02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005a06:	460b      	mov	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a0c:	4b9e      	ldr	r3, [pc, #632]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a1c:	4a9a      	ldr	r2, [pc, #616]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a30:	2300      	movs	r3, #0
 8005a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a3e:	4b92      	ldr	r3, [pc, #584]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a42:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4c:	4a8e      	ldr	r2, [pc, #568]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a60:	2300      	movs	r3, #0
 8005a62:	647b      	str	r3, [r7, #68]	; 0x44
 8005a64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a6e:	4b86      	ldr	r3, [pc, #536]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	4a85      	ldr	r2, [pc, #532]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a78:	6113      	str	r3, [r2, #16]
 8005a7a:	4b83      	ldr	r3, [pc, #524]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a7c:	6919      	ldr	r1, [r3, #16]
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a86:	4a80      	ldr	r2, [pc, #512]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005aa8:	4b77      	ldr	r3, [pc, #476]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab6:	4a74      	ldr	r2, [pc, #464]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aca:	2300      	movs	r3, #0
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ace:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ad8:	4b6b      	ldr	r3, [pc, #428]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae8:	4a67      	ldr	r2, [pc, #412]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aea:	430b      	orrs	r3, r1
 8005aec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	2100      	movs	r1, #0
 8005af8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005b04:	460b      	mov	r3, r1
 8005b06:	4313      	orrs	r3, r2
 8005b08:	d011      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0e:	3308      	adds	r3, #8
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fa4a 	bl	8006fac <RCCEx_PLL2_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	2100      	movs	r1, #0
 8005b38:	6239      	str	r1, [r7, #32]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b44:	460b      	mov	r3, r1
 8005b46:	4313      	orrs	r3, r2
 8005b48:	d011      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4e:	3308      	adds	r3, #8
 8005b50:	2101      	movs	r1, #1
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fa2a 	bl	8006fac <RCCEx_PLL2_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	2100      	movs	r1, #0
 8005b78:	61b9      	str	r1, [r7, #24]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d011      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8e:	3308      	adds	r3, #8
 8005b90:	2102      	movs	r1, #2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fa0a 	bl	8006fac <RCCEx_PLL2_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005baa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	6139      	str	r1, [r7, #16]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	d011      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bce:	3328      	adds	r3, #40	; 0x28
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 fa9c 	bl	8007110 <RCCEx_PLL3_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c04:	460b      	mov	r3, r1
 8005c06:	4313      	orrs	r3, r2
 8005c08:	d011      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0e:	3328      	adds	r3, #40	; 0x28
 8005c10:	2101      	movs	r1, #1
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fa7c 	bl	8007110 <RCCEx_PLL3_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	2100      	movs	r1, #0
 8005c38:	6039      	str	r1, [r7, #0]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	607b      	str	r3, [r7, #4]
 8005c40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c44:	460b      	mov	r3, r1
 8005c46:	4313      	orrs	r3, r2
 8005c48:	d011      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4e:	3328      	adds	r3, #40	; 0x28
 8005c50:	2102      	movs	r1, #2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 fa5c 	bl	8007110 <RCCEx_PLL3_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005c6e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005c82:	46bd      	mov	sp, r7
 8005c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c88:	58024400 	.word	0x58024400

08005c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b090      	sub	sp, #64	; 0x40
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c9a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	f040 8094 	bne.w	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005ca4:	4b9e      	ldr	r3, [pc, #632]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	f200 8087 	bhi.w	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005cd1 	.word	0x08005cd1
 8005cc0:	08005cf9 	.word	0x08005cf9
 8005cc4:	08005d21 	.word	0x08005d21
 8005cc8:	08005dbd 	.word	0x08005dbd
 8005ccc:	08005d49 	.word	0x08005d49
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cd0:	4b93      	ldr	r3, [pc, #588]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cdc:	d108      	bne.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 f810 	bl	8006d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cec:	f000 bd45 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf4:	f000 bd41 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cf8:	4b89      	ldr	r3, [pc, #548]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d04:	d108      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d06:	f107 0318 	add.w	r3, r7, #24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fd54 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d14:	f000 bd31 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d1c:	f000 bd2d 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d20:	4b7f      	ldr	r3, [pc, #508]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d2c:	d108      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d2e:	f107 030c 	add.w	r3, r7, #12
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fe94 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d3c:	f000 bd1d 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d44:	f000 bd19 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d48:	4b75      	ldr	r3, [pc, #468]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d52:	4b73      	ldr	r3, [pc, #460]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d64:	4b6e      	ldr	r3, [pc, #440]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	08db      	lsrs	r3, r3, #3
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	4a6d      	ldr	r2, [pc, #436]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d76:	e01f      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d78:	4b69      	ldr	r3, [pc, #420]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d84:	d106      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d8c:	d102      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d8e:	4b66      	ldr	r3, [pc, #408]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d92:	e011      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d94:	4b62      	ldr	r3, [pc, #392]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da0:	d106      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da8:	d102      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005daa:	4b60      	ldr	r3, [pc, #384]	; (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dae:	e003      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005db4:	f000 bce1 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005db8:	f000 bcdf 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005dbc:	4b5c      	ldr	r3, [pc, #368]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dc0:	f000 bcdb 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dc8:	f000 bcd7 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	f040 80ad 	bne.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005dda:	4b51      	ldr	r3, [pc, #324]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dde:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005de2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dea:	d056      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	f200 8090 	bhi.w	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	2bc0      	cmp	r3, #192	; 0xc0
 8005dfa:	f000 8088 	beq.w	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2bc0      	cmp	r3, #192	; 0xc0
 8005e02:	f200 8088 	bhi.w	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	2b80      	cmp	r3, #128	; 0x80
 8005e0a:	d032      	beq.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	f200 8081 	bhi.w	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d014      	beq.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005e20:	e079      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e22:	4b3f      	ldr	r3, [pc, #252]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e2e:	d108      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 ff67 	bl	8006d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e3e:	f000 bc9c 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e46:	f000 bc98 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e4a:	4b35      	ldr	r3, [pc, #212]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e56:	d108      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e58:	f107 0318 	add.w	r3, r7, #24
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fcab 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e66:	f000 bc88 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e6e:	f000 bc84 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e72:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7e:	d108      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fdeb 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e8e:	f000 bc74 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e96:	f000 bc70 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e9a:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ea2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ea4:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d10c      	bne.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d109      	bne.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eb6:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	08db      	lsrs	r3, r3, #3
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec8:	e01f      	b.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed6:	d106      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ede:	d102      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ee0:	4b11      	ldr	r3, [pc, #68]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee4:	e011      	b.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef2:	d106      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005efa:	d102      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005f06:	f000 bc38 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f0a:	f000 bc36 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f0e:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f12:	f000 bc32 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f1a:	f000 bc2e 	b.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f1e:	bf00      	nop
 8005f20:	58024400 	.word	0x58024400
 8005f24:	03d09000 	.word	0x03d09000
 8005f28:	003d0900 	.word	0x003d0900
 8005f2c:	017d7840 	.word	0x017d7840
 8005f30:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f38:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	f040 809c 	bne.w	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005f42:	4b9e      	ldr	r3, [pc, #632]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005f4a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f52:	d054      	beq.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f5a:	f200 808b 	bhi.w	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f64:	f000 8083 	beq.w	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f6e:	f200 8081 	bhi.w	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f78:	d02f      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f80:	d878      	bhi.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f8e:	d012      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005f90:	e070      	b.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f92:	4b8a      	ldr	r3, [pc, #552]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 feaf 	bl	8006d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fae:	e3e4      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fb4:	e3e1      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fb6:	4b81      	ldr	r3, [pc, #516]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fc4:	f107 0318 	add.w	r3, r7, #24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fbf5 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fd2:	e3d2      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fd8:	e3cf      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fda:	4b78      	ldr	r3, [pc, #480]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe6:	d107      	bne.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fd37 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff6:	e3c0      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ffc:	e3bd      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006006:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006008:	4b6c      	ldr	r3, [pc, #432]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b04      	cmp	r3, #4
 8006012:	d10c      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800601a:	4b68      	ldr	r3, [pc, #416]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	08db      	lsrs	r3, r3, #3
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	4a66      	ldr	r2, [pc, #408]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006026:	fa22 f303 	lsr.w	r3, r2, r3
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800602c:	e01e      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800602e:	4b63      	ldr	r3, [pc, #396]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800603a:	d106      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006042:	d102      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006044:	4b5f      	ldr	r3, [pc, #380]	; (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006048:	e010      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800604a:	4b5c      	ldr	r3, [pc, #368]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006056:	d106      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605e:	d102      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006060:	4b59      	ldr	r3, [pc, #356]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006064:	e002      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800606a:	e386      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800606c:	e385      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800606e:	4b57      	ldr	r3, [pc, #348]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006072:	e382      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006078:	e37f      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800607a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800607e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006082:	430b      	orrs	r3, r1
 8006084:	f040 80a7 	bne.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006088:	4b4c      	ldr	r3, [pc, #304]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006090:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006098:	d055      	beq.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060a0:	f200 8096 	bhi.w	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060aa:	f000 8084 	beq.w	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060b4:	f200 808c 	bhi.w	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060be:	d030      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060c6:	f200 8083 	bhi.w	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d6:	d012      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80060d8:	e07a      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060da:	4b38      	ldr	r3, [pc, #224]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060e6:	d107      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fe0b 	bl	8006d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060f6:	e340      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060fc:	e33d      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060fe:	4b2f      	ldr	r3, [pc, #188]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800610a:	d107      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800610c:	f107 0318 	add.w	r3, r7, #24
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fb51 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800611a:	e32e      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006120:	e32b      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006122:	4b26      	ldr	r3, [pc, #152]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800612a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800612e:	d107      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006130:	f107 030c 	add.w	r3, r7, #12
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fc93 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800613e:	e31c      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006144:	e319      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006146:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800614e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006150:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b04      	cmp	r3, #4
 800615a:	d10c      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006162:	4b16      	ldr	r3, [pc, #88]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	08db      	lsrs	r3, r3, #3
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800616e:	fa22 f303 	lsr.w	r3, r2, r3
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006174:	e01e      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006176:	4b11      	ldr	r3, [pc, #68]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006182:	d106      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800618a:	d102      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006190:	e010      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006192:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800619e:	d106      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061a6:	d102      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ac:	e002      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80061b2:	e2e2      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061b4:	e2e1      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80061b6:	4b05      	ldr	r3, [pc, #20]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ba:	e2de      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061bc:	58024400 	.word	0x58024400
 80061c0:	03d09000 	.word	0x03d09000
 80061c4:	003d0900 	.word	0x003d0900
 80061c8:	017d7840 	.word	0x017d7840
 80061cc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061d4:	e2d1      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80061d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061da:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80061de:	430b      	orrs	r3, r1
 80061e0:	f040 809c 	bne.w	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80061e4:	4b93      	ldr	r3, [pc, #588]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80061ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f4:	d054      	beq.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061fc:	f200 808b 	bhi.w	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006206:	f000 8083 	beq.w	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006210:	f200 8081 	bhi.w	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621a:	d02f      	beq.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006222:	d878      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006230:	d012      	beq.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006232:	e070      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006234:	4b7f      	ldr	r3, [pc, #508]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006240:	d107      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fd5e 	bl	8006d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006250:	e293      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006256:	e290      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006258:	4b76      	ldr	r3, [pc, #472]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006264:	d107      	bne.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006266:	f107 0318 	add.w	r3, r7, #24
 800626a:	4618      	mov	r0, r3
 800626c:	f000 faa4 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006274:	e281      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800627a:	e27e      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800627c:	4b6d      	ldr	r3, [pc, #436]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006288:	d107      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fbe6 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006298:	e26f      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800629e:	e26c      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062a0:	4b64      	ldr	r3, [pc, #400]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062aa:	4b62      	ldr	r3, [pc, #392]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d10c      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062bc:	4b5d      	ldr	r3, [pc, #372]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	08db      	lsrs	r3, r3, #3
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	4a5c      	ldr	r2, [pc, #368]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
 80062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ce:	e01e      	b.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062d0:	4b58      	ldr	r3, [pc, #352]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062dc:	d106      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062e4:	d102      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062e6:	4b55      	ldr	r3, [pc, #340]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ea:	e010      	b.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062ec:	4b51      	ldr	r3, [pc, #324]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f8:	d106      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006300:	d102      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006302:	4b4f      	ldr	r3, [pc, #316]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006306:	e002      	b.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800630c:	e235      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800630e:	e234      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006310:	4b4c      	ldr	r3, [pc, #304]	; (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006314:	e231      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800631a:	e22e      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800631c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006320:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006324:	430b      	orrs	r3, r1
 8006326:	f040 808f 	bne.w	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800632a:	4b42      	ldr	r3, [pc, #264]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800632c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800633a:	d06b      	beq.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006342:	d874      	bhi.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800634a:	d056      	beq.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006352:	d86c      	bhi.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800635a:	d03b      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006362:	d864      	bhi.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800636a:	d021      	beq.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006372:	d85c      	bhi.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d004      	beq.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006382:	e054      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006384:	f7fe fa0a 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8006388:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800638a:	e1f6      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800638c:	4b29      	ldr	r3, [pc, #164]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006398:	d107      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639a:	f107 0318 	add.w	r3, r7, #24
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fa0a 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063a8:	e1e7      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ae:	e1e4      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063b0:	4b20      	ldr	r3, [pc, #128]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063bc:	d107      	bne.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063be:	f107 030c 	add.w	r3, r7, #12
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fb4c 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063cc:	e1d5      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d2:	e1d2      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063d4:	4b17      	ldr	r3, [pc, #92]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d109      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063e0:	4b14      	ldr	r3, [pc, #80]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	4a13      	ldr	r2, [pc, #76]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063f2:	e1c2      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f8:	e1bf      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80063fa:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006406:	d102      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800640c:	e1b5      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006412:	e1b2      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006420:	d102      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006422:	4b07      	ldr	r3, [pc, #28]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006426:	e1a8      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800642c:	e1a5      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006432:	e1a2      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006434:	58024400 	.word	0x58024400
 8006438:	03d09000 	.word	0x03d09000
 800643c:	003d0900 	.word	0x003d0900
 8006440:	017d7840 	.word	0x017d7840
 8006444:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006450:	430b      	orrs	r3, r1
 8006452:	d173      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006454:	4b9c      	ldr	r3, [pc, #624]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800645c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006464:	d02f      	beq.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800646c:	d863      	bhi.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647a:	d012      	beq.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800647c:	e05b      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800647e:	4b92      	ldr	r3, [pc, #584]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800648a:	d107      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800648c:	f107 0318 	add.w	r3, r7, #24
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f991 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800649a:	e16e      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064a0:	e16b      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064a2:	4b89      	ldr	r3, [pc, #548]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ae:	d107      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064b0:	f107 030c 	add.w	r3, r7, #12
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fad3 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064be:	e15c      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c4:	e159      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064c6:	4b80      	ldr	r3, [pc, #512]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064d0:	4b7d      	ldr	r3, [pc, #500]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d10c      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064e2:	4b79      	ldr	r3, [pc, #484]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	08db      	lsrs	r3, r3, #3
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	4a77      	ldr	r2, [pc, #476]	; (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80064ee:	fa22 f303 	lsr.w	r3, r2, r3
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064f4:	e01e      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064f6:	4b74      	ldr	r3, [pc, #464]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006502:	d106      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800650a:	d102      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800650c:	4b70      	ldr	r3, [pc, #448]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006510:	e010      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006512:	4b6d      	ldr	r3, [pc, #436]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651e:	d106      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006526:	d102      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006528:	4b6a      	ldr	r3, [pc, #424]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	e002      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006532:	e122      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006534:	e121      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800653a:	e11e      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800653c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006540:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006544:	430b      	orrs	r3, r1
 8006546:	d133      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006548:	4b5f      	ldr	r3, [pc, #380]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800654a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006550:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	d004      	beq.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655e:	d012      	beq.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006560:	e023      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006562:	4b59      	ldr	r3, [pc, #356]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800656e:	d107      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fbc7 	bl	8006d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800657e:	e0fc      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006584:	e0f9      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006586:	4b50      	ldr	r3, [pc, #320]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800658e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006592:	d107      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006594:	f107 0318 	add.w	r3, r7, #24
 8006598:	4618      	mov	r0, r3
 800659a:	f000 f90d 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065a2:	e0ea      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a8:	e0e7      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ae:	e0e4      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80065b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80065b8:	430b      	orrs	r3, r1
 80065ba:	f040 808d 	bne.w	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80065be:	4b42      	ldr	r3, [pc, #264]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ce:	d06b      	beq.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065d6:	d874      	bhi.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065de:	d056      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e6:	d86c      	bhi.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065ee:	d03b      	beq.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065f6:	d864      	bhi.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065fe:	d021      	beq.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d85c      	bhi.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006614:	d004      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006616:	e054      	b.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006618:	f000 f8b8 	bl	800678c <HAL_RCCEx_GetD3PCLK1Freq>
 800661c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800661e:	e0ac      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006620:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800662c:	d107      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662e:	f107 0318 	add.w	r3, r7, #24
 8006632:	4618      	mov	r0, r3
 8006634:	f000 f8c0 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800663c:	e09d      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006642:	e09a      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006644:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800664c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006650:	d107      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006652:	f107 030c 	add.w	r3, r7, #12
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fa02 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006660:	e08b      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006666:	e088      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006668:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b04      	cmp	r3, #4
 8006672:	d109      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006674:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	08db      	lsrs	r3, r3, #3
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	4a13      	ldr	r2, [pc, #76]	; (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006686:	e078      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800668c:	e075      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800668e:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d102      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066a0:	e06b      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a6:	e068      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b4:	d102      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ba:	e05e      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c0:	e05b      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c6:	e058      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066c8:	58024400 	.word	0x58024400
 80066cc:	03d09000 	.word	0x03d09000
 80066d0:	003d0900 	.word	0x003d0900
 80066d4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80066d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066dc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80066e0:	430b      	orrs	r3, r1
 80066e2:	d148      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80066e4:	4b27      	ldr	r3, [pc, #156]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f4:	d02a      	beq.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066fc:	d838      	bhi.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800670a:	d00d      	beq.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800670c:	e030      	b.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800670e:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800671a:	d102      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800671c:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006720:	e02b      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006726:	e028      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006728:	4b16      	ldr	r3, [pc, #88]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006734:	d107      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fae4 	bl	8006d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006744:	e019      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800674a:	e016      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800674c:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006758:	d107      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675a:	f107 0318 	add.w	r3, r7, #24
 800675e:	4618      	mov	r0, r3
 8006760:	f000 f82a 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006768:	e007      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800676e:	e004      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006774:	e001      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800677c:	4618      	mov	r0, r3
 800677e:	3740      	adds	r7, #64	; 0x40
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	58024400 	.word	0x58024400
 8006788:	017d7840 	.word	0x017d7840

0800678c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006790:	f7fd ffd4 	bl	800473c <HAL_RCC_GetHCLKFreq>
 8006794:	4602      	mov	r2, r0
 8006796:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	091b      	lsrs	r3, r3, #4
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	4904      	ldr	r1, [pc, #16]	; (80067b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80067a2:	5ccb      	ldrb	r3, [r1, r3]
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	58024400 	.word	0x58024400
 80067b4:	0800c284 	.word	0x0800c284

080067b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b089      	sub	sp, #36	; 0x24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067c0:	4ba1      	ldr	r3, [pc, #644]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80067ca:	4b9f      	ldr	r3, [pc, #636]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	0b1b      	lsrs	r3, r3, #12
 80067d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067d6:	4b9c      	ldr	r3, [pc, #624]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80067e2:	4b99      	ldr	r3, [pc, #612]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	08db      	lsrs	r3, r3, #3
 80067e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	fb02 f303 	mul.w	r3, r2, r3
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8111 	beq.w	8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b02      	cmp	r3, #2
 800680a:	f000 8083 	beq.w	8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b02      	cmp	r3, #2
 8006812:	f200 80a1 	bhi.w	8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d056      	beq.n	80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006822:	e099      	b.n	8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006824:	4b88      	ldr	r3, [pc, #544]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b00      	cmp	r3, #0
 800682e:	d02d      	beq.n	800688c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006830:	4b85      	ldr	r3, [pc, #532]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	08db      	lsrs	r3, r3, #3
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	4a84      	ldr	r2, [pc, #528]	; (8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
 8006840:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	ee07 3a90 	vmov	s15, r3
 8006848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685a:	4b7b      	ldr	r3, [pc, #492]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686a:	ed97 6a03 	vldr	s12, [r7, #12]
 800686e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800687e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006886:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800688a:	e087      	b.n	800699c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006896:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800689a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689e:	4b6a      	ldr	r3, [pc, #424]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80068b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ce:	e065      	b.n	800699c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e2:	4b59      	ldr	r3, [pc, #356]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006912:	e043      	b.n	800699c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006926:	4b48      	ldr	r3, [pc, #288]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006936:	ed97 6a03 	vldr	s12, [r7, #12]
 800693a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800693e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800694a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800694e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006956:	e021      	b.n	800699c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696a:	4b37      	ldr	r3, [pc, #220]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800697a:	ed97 6a03 	vldr	s12, [r7, #12]
 800697e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800698a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800698e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800699a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800699c:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	0a5b      	lsrs	r3, r3, #9
 80069a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069c2:	ee17 2a90 	vmov	r2, s15
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80069ca:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d4:	ee07 3a90 	vmov	s15, r3
 80069d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f0:	ee17 2a90 	vmov	r2, s15
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069f8:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	0e1b      	lsrs	r3, r3, #24
 80069fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a1e:	ee17 2a90 	vmov	r2, s15
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a26:	e008      	b.n	8006a3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	609a      	str	r2, [r3, #8]
}
 8006a3a:	bf00      	nop
 8006a3c:	3724      	adds	r7, #36	; 0x24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	58024400 	.word	0x58024400
 8006a4c:	03d09000 	.word	0x03d09000
 8006a50:	46000000 	.word	0x46000000
 8006a54:	4c742400 	.word	0x4c742400
 8006a58:	4a742400 	.word	0x4a742400
 8006a5c:	4bbebc20 	.word	0x4bbebc20

08006a60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b089      	sub	sp, #36	; 0x24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a68:	4ba1      	ldr	r3, [pc, #644]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a72:	4b9f      	ldr	r3, [pc, #636]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	0d1b      	lsrs	r3, r3, #20
 8006a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a7e:	4b9c      	ldr	r3, [pc, #624]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a8a:	4b99      	ldr	r3, [pc, #612]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	08db      	lsrs	r3, r3, #3
 8006a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8111 	beq.w	8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	f000 8083 	beq.w	8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	f200 80a1 	bhi.w	8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d056      	beq.n	8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006aca:	e099      	b.n	8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006acc:	4b88      	ldr	r3, [pc, #544]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d02d      	beq.n	8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ad8:	4b85      	ldr	r3, [pc, #532]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	08db      	lsrs	r3, r3, #3
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	4a84      	ldr	r2, [pc, #528]	; (8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b7b      	ldr	r3, [pc, #492]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b32:	e087      	b.n	8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b76:	e065      	b.n	8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b59      	ldr	r3, [pc, #356]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bba:	e043      	b.n	8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	4b48      	ldr	r3, [pc, #288]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bfe:	e021      	b.n	8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c12:	4b37      	ldr	r3, [pc, #220]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006c44:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	0a5b      	lsrs	r3, r3, #9
 8006c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6a:	ee17 2a90 	vmov	r2, s15
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c72:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	0c1b      	lsrs	r3, r3, #16
 8006c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c98:	ee17 2a90 	vmov	r2, s15
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ca0:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	0e1b      	lsrs	r3, r3, #24
 8006ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc6:	ee17 2a90 	vmov	r2, s15
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cce:	e008      	b.n	8006ce2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	609a      	str	r2, [r3, #8]
}
 8006ce2:	bf00      	nop
 8006ce4:	3724      	adds	r7, #36	; 0x24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	58024400 	.word	0x58024400
 8006cf4:	03d09000 	.word	0x03d09000
 8006cf8:	46000000 	.word	0x46000000
 8006cfc:	4c742400 	.word	0x4c742400
 8006d00:	4a742400 	.word	0x4a742400
 8006d04:	4bbebc20 	.word	0x4bbebc20

08006d08 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b089      	sub	sp, #36	; 0x24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d10:	4ba0      	ldr	r3, [pc, #640]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006d1a:	4b9e      	ldr	r3, [pc, #632]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	091b      	lsrs	r3, r3, #4
 8006d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d24:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006d26:	4b9b      	ldr	r3, [pc, #620]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d30:	4b98      	ldr	r3, [pc, #608]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d34:	08db      	lsrs	r3, r3, #3
 8006d36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	fb02 f303 	mul.w	r3, r2, r3
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d48:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8111 	beq.w	8006f76 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	f000 8083 	beq.w	8006e62 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	f200 80a1 	bhi.w	8006ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d056      	beq.n	8006e1e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006d70:	e099      	b.n	8006ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d72:	4b88      	ldr	r3, [pc, #544]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d02d      	beq.n	8006dda <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d7e:	4b85      	ldr	r3, [pc, #532]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	08db      	lsrs	r3, r3, #3
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	4a83      	ldr	r2, [pc, #524]	; (8006f98 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	ee07 3a90 	vmov	s15, r3
 8006da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da8:	4b7a      	ldr	r3, [pc, #488]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dbc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006dd8:	e087      	b.n	8006eea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dec:	4b69      	ldr	r3, [pc, #420]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e00:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e1c:	e065      	b.n	8006eea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e30:	4b58      	ldr	r3, [pc, #352]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e44:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e60:	e043      	b.n	8006eea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e74:	4b47      	ldr	r3, [pc, #284]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e88:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ea4:	e021      	b.n	8006eea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb8:	4b36      	ldr	r3, [pc, #216]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ecc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ee8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006eea:	4b2a      	ldr	r3, [pc, #168]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	0a5b      	lsrs	r3, r3, #9
 8006ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f10:	ee17 2a90 	vmov	r2, s15
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006f18:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3e:	ee17 2a90 	vmov	r2, s15
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006f46:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	0e1b      	lsrs	r3, r3, #24
 8006f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f6c:	ee17 2a90 	vmov	r2, s15
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006f74:	e008      	b.n	8006f88 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	609a      	str	r2, [r3, #8]
}
 8006f88:	bf00      	nop
 8006f8a:	3724      	adds	r7, #36	; 0x24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	58024400 	.word	0x58024400
 8006f98:	03d09000 	.word	0x03d09000
 8006f9c:	46000000 	.word	0x46000000
 8006fa0:	4c742400 	.word	0x4c742400
 8006fa4:	4a742400 	.word	0x4a742400
 8006fa8:	4bbebc20 	.word	0x4bbebc20

08006fac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fba:	4b53      	ldr	r3, [pc, #332]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d101      	bne.n	8006fca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e099      	b.n	80070fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fca:	4b4f      	ldr	r3, [pc, #316]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a4e      	ldr	r2, [pc, #312]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006fd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd6:	f7fb f86b 	bl	80020b0 <HAL_GetTick>
 8006fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fdc:	e008      	b.n	8006ff0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fde:	f7fb f867 	bl	80020b0 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e086      	b.n	80070fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ff0:	4b45      	ldr	r3, [pc, #276]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f0      	bne.n	8006fde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ffc:	4b42      	ldr	r3, [pc, #264]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	493f      	ldr	r1, [pc, #252]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 800700c:	4313      	orrs	r3, r2
 800700e:	628b      	str	r3, [r1, #40]	; 0x28
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	3b01      	subs	r3, #1
 8007020:	025b      	lsls	r3, r3, #9
 8007022:	b29b      	uxth	r3, r3
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	3b01      	subs	r3, #1
 800702c:	041b      	lsls	r3, r3, #16
 800702e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	3b01      	subs	r3, #1
 800703a:	061b      	lsls	r3, r3, #24
 800703c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007040:	4931      	ldr	r1, [pc, #196]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007042:	4313      	orrs	r3, r2
 8007044:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007046:	4b30      	ldr	r3, [pc, #192]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	492d      	ldr	r1, [pc, #180]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007054:	4313      	orrs	r3, r2
 8007056:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007058:	4b2b      	ldr	r3, [pc, #172]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	f023 0220 	bic.w	r2, r3, #32
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	4928      	ldr	r1, [pc, #160]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007066:	4313      	orrs	r3, r2
 8007068:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800706a:	4b27      	ldr	r3, [pc, #156]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	4a26      	ldr	r2, [pc, #152]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007070:	f023 0310 	bic.w	r3, r3, #16
 8007074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <RCCEx_PLL2_Config+0x160>)
 800707c:	4013      	ands	r3, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	69d2      	ldr	r2, [r2, #28]
 8007082:	00d2      	lsls	r2, r2, #3
 8007084:	4920      	ldr	r1, [pc, #128]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007086:	4313      	orrs	r3, r2
 8007088:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800708a:	4b1f      	ldr	r3, [pc, #124]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 800708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708e:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007090:	f043 0310 	orr.w	r3, r3, #16
 8007094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800709c:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	4a19      	ldr	r2, [pc, #100]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070a8:	e00f      	b.n	80070ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d106      	bne.n	80070be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070b0:	4b15      	ldr	r3, [pc, #84]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	4a14      	ldr	r2, [pc, #80]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070bc:	e005      	b.n	80070ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070be:	4b12      	ldr	r3, [pc, #72]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	4a11      	ldr	r2, [pc, #68]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070ca:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a0e      	ldr	r2, [pc, #56]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d6:	f7fa ffeb 	bl	80020b0 <HAL_GetTick>
 80070da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070dc:	e008      	b.n	80070f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070de:	f7fa ffe7 	bl	80020b0 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e006      	b.n	80070fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070f0:	4b05      	ldr	r3, [pc, #20]	; (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0f0      	beq.n	80070de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	58024400 	.word	0x58024400
 800710c:	ffff0007 	.word	0xffff0007

08007110 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800711e:	4b53      	ldr	r3, [pc, #332]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d101      	bne.n	800712e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e099      	b.n	8007262 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800712e:	4b4f      	ldr	r3, [pc, #316]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a4e      	ldr	r2, [pc, #312]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713a:	f7fa ffb9 	bl	80020b0 <HAL_GetTick>
 800713e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007140:	e008      	b.n	8007154 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007142:	f7fa ffb5 	bl	80020b0 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e086      	b.n	8007262 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007154:	4b45      	ldr	r3, [pc, #276]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007160:	4b42      	ldr	r3, [pc, #264]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	051b      	lsls	r3, r3, #20
 800716e:	493f      	ldr	r1, [pc, #252]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007170:	4313      	orrs	r3, r2
 8007172:	628b      	str	r3, [r1, #40]	; 0x28
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	3b01      	subs	r3, #1
 800717a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	3b01      	subs	r3, #1
 8007184:	025b      	lsls	r3, r3, #9
 8007186:	b29b      	uxth	r3, r3
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	3b01      	subs	r3, #1
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	061b      	lsls	r3, r3, #24
 80071a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071a4:	4931      	ldr	r1, [pc, #196]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071aa:	4b30      	ldr	r3, [pc, #192]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	492d      	ldr	r1, [pc, #180]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071bc:	4b2b      	ldr	r3, [pc, #172]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	4928      	ldr	r1, [pc, #160]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071ce:	4b27      	ldr	r3, [pc, #156]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	4a26      	ldr	r2, [pc, #152]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071da:	4b24      	ldr	r3, [pc, #144]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071de:	4b24      	ldr	r3, [pc, #144]	; (8007270 <RCCEx_PLL3_Config+0x160>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	69d2      	ldr	r2, [r2, #28]
 80071e6:	00d2      	lsls	r2, r2, #3
 80071e8:	4920      	ldr	r1, [pc, #128]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071ee:	4b1f      	ldr	r3, [pc, #124]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	4a1e      	ldr	r2, [pc, #120]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 80071f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007200:	4b1a      	ldr	r3, [pc, #104]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	4a19      	ldr	r2, [pc, #100]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800720a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800720c:	e00f      	b.n	800722e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d106      	bne.n	8007222 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007214:	4b15      	ldr	r3, [pc, #84]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a14      	ldr	r2, [pc, #80]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 800721a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800721e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007220:	e005      	b.n	800722e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007222:	4b12      	ldr	r3, [pc, #72]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	4a11      	ldr	r2, [pc, #68]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800722c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a0e      	ldr	r2, [pc, #56]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800723a:	f7fa ff39 	bl	80020b0 <HAL_GetTick>
 800723e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007240:	e008      	b.n	8007254 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007242:	f7fa ff35 	bl	80020b0 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e006      	b.n	8007262 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <RCCEx_PLL3_Config+0x15c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	58024400 	.word	0x58024400
 8007270:	ffff0007 	.word	0xffff0007

08007274 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e10f      	b.n	80074a6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a87      	ldr	r2, [pc, #540]	; (80074b0 <HAL_SPI_Init+0x23c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <HAL_SPI_Init+0x42>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a86      	ldr	r2, [pc, #536]	; (80074b4 <HAL_SPI_Init+0x240>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00a      	beq.n	80072b6 <HAL_SPI_Init+0x42>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a84      	ldr	r2, [pc, #528]	; (80074b8 <HAL_SPI_Init+0x244>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d005      	beq.n	80072b6 <HAL_SPI_Init+0x42>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2b0f      	cmp	r3, #15
 80072b0:	d901      	bls.n	80072b6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0f7      	b.n	80074a6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f900 	bl	80074bc <SPI_GetPacketSize>
 80072bc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a7b      	ldr	r2, [pc, #492]	; (80074b0 <HAL_SPI_Init+0x23c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00c      	beq.n	80072e2 <HAL_SPI_Init+0x6e>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a79      	ldr	r2, [pc, #484]	; (80074b4 <HAL_SPI_Init+0x240>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d007      	beq.n	80072e2 <HAL_SPI_Init+0x6e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a78      	ldr	r2, [pc, #480]	; (80074b8 <HAL_SPI_Init+0x244>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d002      	beq.n	80072e2 <HAL_SPI_Init+0x6e>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d811      	bhi.n	8007306 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072e6:	4a72      	ldr	r2, [pc, #456]	; (80074b0 <HAL_SPI_Init+0x23c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a70      	ldr	r2, [pc, #448]	; (80074b4 <HAL_SPI_Init+0x240>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_SPI_Init+0x8c>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a6f      	ldr	r2, [pc, #444]	; (80074b8 <HAL_SPI_Init+0x244>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d104      	bne.n	800730a <HAL_SPI_Init+0x96>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b10      	cmp	r3, #16
 8007304:	d901      	bls.n	800730a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e0cd      	b.n	80074a6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7f9 ffea 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0201 	bic.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007346:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007350:	d119      	bne.n	8007386 <HAL_SPI_Init+0x112>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800735a:	d103      	bne.n	8007364 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10c      	bne.n	8007386 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007374:	d107      	bne.n	8007386 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007384:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00f      	beq.n	80073b2 <HAL_SPI_Init+0x13e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b06      	cmp	r3, #6
 8007398:	d90b      	bls.n	80073b2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e007      	b.n	80073c2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	431a      	orrs	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d4:	ea42 0103 	orr.w	r1, r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007422:	ea42 0103 	orr.w	r1, r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d113      	bne.n	8007462 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800744c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007460:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40013000 	.word	0x40013000
 80074b4:	40003800 	.word	0x40003800
 80074b8:	40003c00 	.word	0x40003c00

080074bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	3301      	adds	r3, #1
 80074d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	3307      	adds	r3, #7
 80074da:	08db      	lsrs	r3, r3, #3
 80074dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e049      	b.n	8007598 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f841 	bl	80075a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2202      	movs	r2, #2
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3304      	adds	r3, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f000 fdad 	bl	8008090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d001      	beq.n	80075cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e054      	b.n	8007676 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0201 	orr.w	r2, r2, #1
 80075e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a26      	ldr	r2, [pc, #152]	; (8007684 <HAL_TIM_Base_Start_IT+0xd0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d022      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0x80>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f6:	d01d      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0x80>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a22      	ldr	r2, [pc, #136]	; (8007688 <HAL_TIM_Base_Start_IT+0xd4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d018      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0x80>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a21      	ldr	r2, [pc, #132]	; (800768c <HAL_TIM_Base_Start_IT+0xd8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d013      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0x80>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <HAL_TIM_Base_Start_IT+0xdc>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00e      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0x80>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <HAL_TIM_Base_Start_IT+0xe0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d009      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0x80>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <HAL_TIM_Base_Start_IT+0xe4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0x80>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1b      	ldr	r2, [pc, #108]	; (800769c <HAL_TIM_Base_Start_IT+0xe8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d115      	bne.n	8007660 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	4b19      	ldr	r3, [pc, #100]	; (80076a0 <HAL_TIM_Base_Start_IT+0xec>)
 800763c:	4013      	ands	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b06      	cmp	r3, #6
 8007644:	d015      	beq.n	8007672 <HAL_TIM_Base_Start_IT+0xbe>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800764c:	d011      	beq.n	8007672 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0201 	orr.w	r2, r2, #1
 800765c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800765e:	e008      	b.n	8007672 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0201 	orr.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	e000      	b.n	8007674 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40010000 	.word	0x40010000
 8007688:	40000400 	.word	0x40000400
 800768c:	40000800 	.word	0x40000800
 8007690:	40000c00 	.word	0x40000c00
 8007694:	40010400 	.word	0x40010400
 8007698:	40001800 	.word	0x40001800
 800769c:	40014000 	.word	0x40014000
 80076a0:	00010007 	.word	0x00010007

080076a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e049      	b.n	800774a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fa fae0 	bl	8001c90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f000 fcd4 	bl	8008090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d109      	bne.n	8007778 <HAL_TIM_PWM_Start+0x24>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	bf14      	ite	ne
 8007770:	2301      	movne	r3, #1
 8007772:	2300      	moveq	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	e03c      	b.n	80077f2 <HAL_TIM_PWM_Start+0x9e>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b04      	cmp	r3, #4
 800777c:	d109      	bne.n	8007792 <HAL_TIM_PWM_Start+0x3e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	e02f      	b.n	80077f2 <HAL_TIM_PWM_Start+0x9e>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b08      	cmp	r3, #8
 8007796:	d109      	bne.n	80077ac <HAL_TIM_PWM_Start+0x58>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e022      	b.n	80077f2 <HAL_TIM_PWM_Start+0x9e>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b0c      	cmp	r3, #12
 80077b0:	d109      	bne.n	80077c6 <HAL_TIM_PWM_Start+0x72>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	bf14      	ite	ne
 80077be:	2301      	movne	r3, #1
 80077c0:	2300      	moveq	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	e015      	b.n	80077f2 <HAL_TIM_PWM_Start+0x9e>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d109      	bne.n	80077e0 <HAL_TIM_PWM_Start+0x8c>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e008      	b.n	80077f2 <HAL_TIM_PWM_Start+0x9e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	bf14      	ite	ne
 80077ec:	2301      	movne	r3, #1
 80077ee:	2300      	moveq	r3, #0
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e0a1      	b.n	800793e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <HAL_TIM_PWM_Start+0xb6>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007808:	e023      	b.n	8007852 <HAL_TIM_PWM_Start+0xfe>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b04      	cmp	r3, #4
 800780e:	d104      	bne.n	800781a <HAL_TIM_PWM_Start+0xc6>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007818:	e01b      	b.n	8007852 <HAL_TIM_PWM_Start+0xfe>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b08      	cmp	r3, #8
 800781e:	d104      	bne.n	800782a <HAL_TIM_PWM_Start+0xd6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007828:	e013      	b.n	8007852 <HAL_TIM_PWM_Start+0xfe>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b0c      	cmp	r3, #12
 800782e:	d104      	bne.n	800783a <HAL_TIM_PWM_Start+0xe6>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007838:	e00b      	b.n	8007852 <HAL_TIM_PWM_Start+0xfe>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b10      	cmp	r3, #16
 800783e:	d104      	bne.n	800784a <HAL_TIM_PWM_Start+0xf6>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007848:	e003      	b.n	8007852 <HAL_TIM_PWM_Start+0xfe>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2201      	movs	r2, #1
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 ff88 	bl	8008770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a38      	ldr	r2, [pc, #224]	; (8007948 <HAL_TIM_PWM_Start+0x1f4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <HAL_TIM_PWM_Start+0x13e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a37      	ldr	r2, [pc, #220]	; (800794c <HAL_TIM_PWM_Start+0x1f8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00e      	beq.n	8007892 <HAL_TIM_PWM_Start+0x13e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a35      	ldr	r2, [pc, #212]	; (8007950 <HAL_TIM_PWM_Start+0x1fc>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_TIM_PWM_Start+0x13e>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a34      	ldr	r2, [pc, #208]	; (8007954 <HAL_TIM_PWM_Start+0x200>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_TIM_PWM_Start+0x13e>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a32      	ldr	r2, [pc, #200]	; (8007958 <HAL_TIM_PWM_Start+0x204>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d101      	bne.n	8007896 <HAL_TIM_PWM_Start+0x142>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <HAL_TIM_PWM_Start+0x144>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a25      	ldr	r2, [pc, #148]	; (8007948 <HAL_TIM_PWM_Start+0x1f4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d022      	beq.n	80078fc <HAL_TIM_PWM_Start+0x1a8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078be:	d01d      	beq.n	80078fc <HAL_TIM_PWM_Start+0x1a8>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a25      	ldr	r2, [pc, #148]	; (800795c <HAL_TIM_PWM_Start+0x208>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d018      	beq.n	80078fc <HAL_TIM_PWM_Start+0x1a8>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a24      	ldr	r2, [pc, #144]	; (8007960 <HAL_TIM_PWM_Start+0x20c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d013      	beq.n	80078fc <HAL_TIM_PWM_Start+0x1a8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a22      	ldr	r2, [pc, #136]	; (8007964 <HAL_TIM_PWM_Start+0x210>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00e      	beq.n	80078fc <HAL_TIM_PWM_Start+0x1a8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1a      	ldr	r2, [pc, #104]	; (800794c <HAL_TIM_PWM_Start+0x1f8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d009      	beq.n	80078fc <HAL_TIM_PWM_Start+0x1a8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <HAL_TIM_PWM_Start+0x214>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d004      	beq.n	80078fc <HAL_TIM_PWM_Start+0x1a8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a16      	ldr	r2, [pc, #88]	; (8007950 <HAL_TIM_PWM_Start+0x1fc>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d115      	bne.n	8007928 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	4b1a      	ldr	r3, [pc, #104]	; (800796c <HAL_TIM_PWM_Start+0x218>)
 8007904:	4013      	ands	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b06      	cmp	r3, #6
 800790c:	d015      	beq.n	800793a <HAL_TIM_PWM_Start+0x1e6>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007914:	d011      	beq.n	800793a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0201 	orr.w	r2, r2, #1
 8007924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007926:	e008      	b.n	800793a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0201 	orr.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e000      	b.n	800793c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000
 800794c:	40010400 	.word	0x40010400
 8007950:	40014000 	.word	0x40014000
 8007954:	40014400 	.word	0x40014400
 8007958:	40014800 	.word	0x40014800
 800795c:	40000400 	.word	0x40000400
 8007960:	40000800 	.word	0x40000800
 8007964:	40000c00 	.word	0x40000c00
 8007968:	40001800 	.word	0x40001800
 800796c:	00010007 	.word	0x00010007

08007970 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e08f      	b.n	8007aa4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d106      	bne.n	800799e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7fa f8c1 	bl	8001b20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2202      	movs	r2, #2
 80079a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6899      	ldr	r1, [r3, #8]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4b3e      	ldr	r3, [pc, #248]	; (8007aac <HAL_TIM_Encoder_Init+0x13c>)
 80079b2:	400b      	ands	r3, r1
 80079b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3304      	adds	r3, #4
 80079be:	4619      	mov	r1, r3
 80079c0:	4610      	mov	r0, r2
 80079c2:	f000 fb65 	bl	8008090 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4b31      	ldr	r3, [pc, #196]	; (8007ab0 <HAL_TIM_Encoder_Init+0x140>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	4313      	orrs	r3, r2
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4b2b      	ldr	r3, [pc, #172]	; (8007ab4 <HAL_TIM_Encoder_Init+0x144>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <HAL_TIM_Encoder_Init+0x148>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	021b      	lsls	r3, r3, #8
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	011a      	lsls	r2, r3, #4
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	031b      	lsls	r3, r3, #12
 8007a30:	4313      	orrs	r3, r2
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	4313      	orrs	r3, r2
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	fffebff8 	.word	0xfffebff8
 8007ab0:	fffffcfc 	.word	0xfffffcfc
 8007ab4:	fffff3f3 	.word	0xfffff3f3
 8007ab8:	ffff0f0f 	.word	0xffff0f0f

08007abc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007acc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ad4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007adc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d110      	bne.n	8007b0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d102      	bne.n	8007af8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007af2:	7b7b      	ldrb	r3, [r7, #13]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d001      	beq.n	8007afc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e069      	b.n	8007bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b0c:	e031      	b.n	8007b72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d110      	bne.n	8007b36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d102      	bne.n	8007b20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b1a:	7b3b      	ldrb	r3, [r7, #12]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d001      	beq.n	8007b24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e055      	b.n	8007bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b34:	e01d      	b.n	8007b72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d108      	bne.n	8007b4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d105      	bne.n	8007b4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b42:	7b7b      	ldrb	r3, [r7, #13]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d102      	bne.n	8007b4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b48:	7b3b      	ldrb	r3, [r7, #12]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d001      	beq.n	8007b52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e03e      	b.n	8007bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2202      	movs	r2, #2
 8007b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <HAL_TIM_Encoder_Start+0xc4>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d008      	beq.n	8007b90 <HAL_TIM_Encoder_Start+0xd4>
 8007b7e:	e00f      	b.n	8007ba0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2201      	movs	r2, #1
 8007b86:	2100      	movs	r1, #0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fdf1 	bl	8008770 <TIM_CCxChannelCmd>
      break;
 8007b8e:	e016      	b.n	8007bbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2201      	movs	r2, #1
 8007b96:	2104      	movs	r1, #4
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fde9 	bl	8008770 <TIM_CCxChannelCmd>
      break;
 8007b9e:	e00e      	b.n	8007bbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fde1 	bl	8008770 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	2104      	movs	r1, #4
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fdda 	bl	8008770 <TIM_CCxChannelCmd>
      break;
 8007bbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0201 	orr.w	r2, r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d122      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d11b      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0202 	mvn.w	r2, #2
 8007c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fa1a 	bl	8008054 <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa0c 	bl	8008040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa1d 	bl	8008068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d122      	bne.n	8007c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d11b      	bne.n	8007c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0204 	mvn.w	r2, #4
 8007c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f9f0 	bl	8008054 <HAL_TIM_IC_CaptureCallback>
 8007c74:	e005      	b.n	8007c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9e2 	bl	8008040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f9f3 	bl	8008068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d122      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d11b      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0208 	mvn.w	r2, #8
 8007cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f9c6 	bl	8008054 <HAL_TIM_IC_CaptureCallback>
 8007cc8:	e005      	b.n	8007cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f9b8 	bl	8008040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f9c9 	bl	8008068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d122      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b10      	cmp	r3, #16
 8007cf6:	d11b      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0210 	mvn.w	r2, #16
 8007d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2208      	movs	r2, #8
 8007d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f99c 	bl	8008054 <HAL_TIM_IC_CaptureCallback>
 8007d1c:	e005      	b.n	8007d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f98e 	bl	8008040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f99f 	bl	8008068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d10e      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d107      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0201 	mvn.w	r2, #1
 8007d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7f9 fa66 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b80      	cmp	r3, #128	; 0x80
 8007d68:	d10e      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d107      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fe30 	bl	80089e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d96:	d10e      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da2:	2b80      	cmp	r3, #128	; 0x80
 8007da4:	d107      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fe23 	bl	80089fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc0:	2b40      	cmp	r3, #64	; 0x40
 8007dc2:	d10e      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d107      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f94d 	bl	800807c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d10e      	bne.n	8007e0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	d107      	bne.n	8007e0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f06f 0220 	mvn.w	r2, #32
 8007e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fde3 	bl	80089d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e0ff      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b14      	cmp	r3, #20
 8007e42:	f200 80f0 	bhi.w	8008026 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08008027 	.word	0x08008027
 8007e54:	08008027 	.word	0x08008027
 8007e58:	08008027 	.word	0x08008027
 8007e5c:	08007ee1 	.word	0x08007ee1
 8007e60:	08008027 	.word	0x08008027
 8007e64:	08008027 	.word	0x08008027
 8007e68:	08008027 	.word	0x08008027
 8007e6c:	08007f23 	.word	0x08007f23
 8007e70:	08008027 	.word	0x08008027
 8007e74:	08008027 	.word	0x08008027
 8007e78:	08008027 	.word	0x08008027
 8007e7c:	08007f63 	.word	0x08007f63
 8007e80:	08008027 	.word	0x08008027
 8007e84:	08008027 	.word	0x08008027
 8007e88:	08008027 	.word	0x08008027
 8007e8c:	08007fa5 	.word	0x08007fa5
 8007e90:	08008027 	.word	0x08008027
 8007e94:	08008027 	.word	0x08008027
 8007e98:	08008027 	.word	0x08008027
 8007e9c:	08007fe5 	.word	0x08007fe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f98c 	bl	80081c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0208 	orr.w	r2, r2, #8
 8007eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0204 	bic.w	r2, r2, #4
 8007eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6999      	ldr	r1, [r3, #24]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	691a      	ldr	r2, [r3, #16]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	619a      	str	r2, [r3, #24]
      break;
 8007ede:	e0a5      	b.n	800802c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f9fc 	bl	80082e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6999      	ldr	r1, [r3, #24]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	021a      	lsls	r2, r3, #8
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	619a      	str	r2, [r3, #24]
      break;
 8007f20:	e084      	b.n	800802c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fa65 	bl	80083f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0208 	orr.w	r2, r2, #8
 8007f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0204 	bic.w	r2, r2, #4
 8007f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69d9      	ldr	r1, [r3, #28]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	61da      	str	r2, [r3, #28]
      break;
 8007f60:	e064      	b.n	800802c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 facd 	bl	8008508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69d9      	ldr	r1, [r3, #28]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	021a      	lsls	r2, r3, #8
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	61da      	str	r2, [r3, #28]
      break;
 8007fa2:	e043      	b.n	800802c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fb16 	bl	80085dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0208 	orr.w	r2, r2, #8
 8007fbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0204 	bic.w	r2, r2, #4
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fe2:	e023      	b.n	800802c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 fb5a 	bl	80086a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ffe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800800e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	021a      	lsls	r2, r3, #8
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008024:	e002      	b.n	800802c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	75fb      	strb	r3, [r7, #23]
      break;
 800802a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop

08008040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a40      	ldr	r2, [pc, #256]	; (80081a4 <TIM_Base_SetConfig+0x114>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d013      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ae:	d00f      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a3d      	ldr	r2, [pc, #244]	; (80081a8 <TIM_Base_SetConfig+0x118>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00b      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a3c      	ldr	r2, [pc, #240]	; (80081ac <TIM_Base_SetConfig+0x11c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d007      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a3b      	ldr	r2, [pc, #236]	; (80081b0 <TIM_Base_SetConfig+0x120>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a3a      	ldr	r2, [pc, #232]	; (80081b4 <TIM_Base_SetConfig+0x124>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d108      	bne.n	80080e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a2f      	ldr	r2, [pc, #188]	; (80081a4 <TIM_Base_SetConfig+0x114>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d01f      	beq.n	800812a <TIM_Base_SetConfig+0x9a>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f0:	d01b      	beq.n	800812a <TIM_Base_SetConfig+0x9a>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a2c      	ldr	r2, [pc, #176]	; (80081a8 <TIM_Base_SetConfig+0x118>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d017      	beq.n	800812a <TIM_Base_SetConfig+0x9a>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a2b      	ldr	r2, [pc, #172]	; (80081ac <TIM_Base_SetConfig+0x11c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d013      	beq.n	800812a <TIM_Base_SetConfig+0x9a>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a2a      	ldr	r2, [pc, #168]	; (80081b0 <TIM_Base_SetConfig+0x120>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d00f      	beq.n	800812a <TIM_Base_SetConfig+0x9a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a29      	ldr	r2, [pc, #164]	; (80081b4 <TIM_Base_SetConfig+0x124>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d00b      	beq.n	800812a <TIM_Base_SetConfig+0x9a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a28      	ldr	r2, [pc, #160]	; (80081b8 <TIM_Base_SetConfig+0x128>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d007      	beq.n	800812a <TIM_Base_SetConfig+0x9a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a27      	ldr	r2, [pc, #156]	; (80081bc <TIM_Base_SetConfig+0x12c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d003      	beq.n	800812a <TIM_Base_SetConfig+0x9a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a26      	ldr	r2, [pc, #152]	; (80081c0 <TIM_Base_SetConfig+0x130>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d108      	bne.n	800813c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4313      	orrs	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a10      	ldr	r2, [pc, #64]	; (80081a4 <TIM_Base_SetConfig+0x114>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d00f      	beq.n	8008188 <TIM_Base_SetConfig+0xf8>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a12      	ldr	r2, [pc, #72]	; (80081b4 <TIM_Base_SetConfig+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d00b      	beq.n	8008188 <TIM_Base_SetConfig+0xf8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a11      	ldr	r2, [pc, #68]	; (80081b8 <TIM_Base_SetConfig+0x128>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d007      	beq.n	8008188 <TIM_Base_SetConfig+0xf8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a10      	ldr	r2, [pc, #64]	; (80081bc <TIM_Base_SetConfig+0x12c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d003      	beq.n	8008188 <TIM_Base_SetConfig+0xf8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a0f      	ldr	r2, [pc, #60]	; (80081c0 <TIM_Base_SetConfig+0x130>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d103      	bne.n	8008190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	615a      	str	r2, [r3, #20]
}
 8008196:	bf00      	nop
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	40010000 	.word	0x40010000
 80081a8:	40000400 	.word	0x40000400
 80081ac:	40000800 	.word	0x40000800
 80081b0:	40000c00 	.word	0x40000c00
 80081b4:	40010400 	.word	0x40010400
 80081b8:	40014000 	.word	0x40014000
 80081bc:	40014400 	.word	0x40014400
 80081c0:	40014800 	.word	0x40014800

080081c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	f023 0201 	bic.w	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4b37      	ldr	r3, [pc, #220]	; (80082cc <TIM_OC1_SetConfig+0x108>)
 80081f0:	4013      	ands	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0303 	bic.w	r3, r3, #3
 80081fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f023 0302 	bic.w	r3, r3, #2
 800820c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a2d      	ldr	r2, [pc, #180]	; (80082d0 <TIM_OC1_SetConfig+0x10c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00f      	beq.n	8008240 <TIM_OC1_SetConfig+0x7c>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a2c      	ldr	r2, [pc, #176]	; (80082d4 <TIM_OC1_SetConfig+0x110>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00b      	beq.n	8008240 <TIM_OC1_SetConfig+0x7c>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a2b      	ldr	r2, [pc, #172]	; (80082d8 <TIM_OC1_SetConfig+0x114>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d007      	beq.n	8008240 <TIM_OC1_SetConfig+0x7c>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a2a      	ldr	r2, [pc, #168]	; (80082dc <TIM_OC1_SetConfig+0x118>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d003      	beq.n	8008240 <TIM_OC1_SetConfig+0x7c>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a29      	ldr	r2, [pc, #164]	; (80082e0 <TIM_OC1_SetConfig+0x11c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d10c      	bne.n	800825a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f023 0308 	bic.w	r3, r3, #8
 8008246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4313      	orrs	r3, r2
 8008250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f023 0304 	bic.w	r3, r3, #4
 8008258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a1c      	ldr	r2, [pc, #112]	; (80082d0 <TIM_OC1_SetConfig+0x10c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <TIM_OC1_SetConfig+0xbe>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a1b      	ldr	r2, [pc, #108]	; (80082d4 <TIM_OC1_SetConfig+0x110>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_OC1_SetConfig+0xbe>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1a      	ldr	r2, [pc, #104]	; (80082d8 <TIM_OC1_SetConfig+0x114>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d007      	beq.n	8008282 <TIM_OC1_SetConfig+0xbe>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a19      	ldr	r2, [pc, #100]	; (80082dc <TIM_OC1_SetConfig+0x118>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_OC1_SetConfig+0xbe>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a18      	ldr	r2, [pc, #96]	; (80082e0 <TIM_OC1_SetConfig+0x11c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d111      	bne.n	80082a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	4313      	orrs	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	621a      	str	r2, [r3, #32]
}
 80082c0:	bf00      	nop
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	fffeff8f 	.word	0xfffeff8f
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40014000 	.word	0x40014000
 80082dc:	40014400 	.word	0x40014400
 80082e0:	40014800 	.word	0x40014800

080082e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	f023 0210 	bic.w	r2, r3, #16
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4b34      	ldr	r3, [pc, #208]	; (80083e0 <TIM_OC2_SetConfig+0xfc>)
 8008310:	4013      	ands	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f023 0320 	bic.w	r3, r3, #32
 800832e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4313      	orrs	r3, r2
 800833a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a29      	ldr	r2, [pc, #164]	; (80083e4 <TIM_OC2_SetConfig+0x100>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_OC2_SetConfig+0x68>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a28      	ldr	r2, [pc, #160]	; (80083e8 <TIM_OC2_SetConfig+0x104>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d10d      	bne.n	8008368 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <TIM_OC2_SetConfig+0x100>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00f      	beq.n	8008390 <TIM_OC2_SetConfig+0xac>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a1d      	ldr	r2, [pc, #116]	; (80083e8 <TIM_OC2_SetConfig+0x104>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00b      	beq.n	8008390 <TIM_OC2_SetConfig+0xac>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a1c      	ldr	r2, [pc, #112]	; (80083ec <TIM_OC2_SetConfig+0x108>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d007      	beq.n	8008390 <TIM_OC2_SetConfig+0xac>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a1b      	ldr	r2, [pc, #108]	; (80083f0 <TIM_OC2_SetConfig+0x10c>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d003      	beq.n	8008390 <TIM_OC2_SetConfig+0xac>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a1a      	ldr	r2, [pc, #104]	; (80083f4 <TIM_OC2_SetConfig+0x110>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d113      	bne.n	80083b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800839e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	feff8fff 	.word	0xfeff8fff
 80083e4:	40010000 	.word	0x40010000
 80083e8:	40010400 	.word	0x40010400
 80083ec:	40014000 	.word	0x40014000
 80083f0:	40014400 	.word	0x40014400
 80083f4:	40014800 	.word	0x40014800

080083f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4b33      	ldr	r3, [pc, #204]	; (80084f0 <TIM_OC3_SetConfig+0xf8>)
 8008424:	4013      	ands	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0303 	bic.w	r3, r3, #3
 800842e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a28      	ldr	r2, [pc, #160]	; (80084f4 <TIM_OC3_SetConfig+0xfc>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d003      	beq.n	800845e <TIM_OC3_SetConfig+0x66>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a27      	ldr	r2, [pc, #156]	; (80084f8 <TIM_OC3_SetConfig+0x100>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d10d      	bne.n	800847a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a1d      	ldr	r2, [pc, #116]	; (80084f4 <TIM_OC3_SetConfig+0xfc>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d00f      	beq.n	80084a2 <TIM_OC3_SetConfig+0xaa>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <TIM_OC3_SetConfig+0x100>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00b      	beq.n	80084a2 <TIM_OC3_SetConfig+0xaa>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a1b      	ldr	r2, [pc, #108]	; (80084fc <TIM_OC3_SetConfig+0x104>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d007      	beq.n	80084a2 <TIM_OC3_SetConfig+0xaa>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a1a      	ldr	r2, [pc, #104]	; (8008500 <TIM_OC3_SetConfig+0x108>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d003      	beq.n	80084a2 <TIM_OC3_SetConfig+0xaa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a19      	ldr	r2, [pc, #100]	; (8008504 <TIM_OC3_SetConfig+0x10c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d113      	bne.n	80084ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	621a      	str	r2, [r3, #32]
}
 80084e4:	bf00      	nop
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	fffeff8f 	.word	0xfffeff8f
 80084f4:	40010000 	.word	0x40010000
 80084f8:	40010400 	.word	0x40010400
 80084fc:	40014000 	.word	0x40014000
 8008500:	40014400 	.word	0x40014400
 8008504:	40014800 	.word	0x40014800

08008508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <TIM_OC4_SetConfig+0xbc>)
 8008534:	4013      	ands	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800853e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	031b      	lsls	r3, r3, #12
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	4313      	orrs	r3, r2
 800855e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a19      	ldr	r2, [pc, #100]	; (80085c8 <TIM_OC4_SetConfig+0xc0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00f      	beq.n	8008588 <TIM_OC4_SetConfig+0x80>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a18      	ldr	r2, [pc, #96]	; (80085cc <TIM_OC4_SetConfig+0xc4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00b      	beq.n	8008588 <TIM_OC4_SetConfig+0x80>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a17      	ldr	r2, [pc, #92]	; (80085d0 <TIM_OC4_SetConfig+0xc8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d007      	beq.n	8008588 <TIM_OC4_SetConfig+0x80>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a16      	ldr	r2, [pc, #88]	; (80085d4 <TIM_OC4_SetConfig+0xcc>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC4_SetConfig+0x80>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a15      	ldr	r2, [pc, #84]	; (80085d8 <TIM_OC4_SetConfig+0xd0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d109      	bne.n	800859c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800858e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	019b      	lsls	r3, r3, #6
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	4313      	orrs	r3, r2
 800859a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	feff8fff 	.word	0xfeff8fff
 80085c8:	40010000 	.word	0x40010000
 80085cc:	40010400 	.word	0x40010400
 80085d0:	40014000 	.word	0x40014000
 80085d4:	40014400 	.word	0x40014400
 80085d8:	40014800 	.word	0x40014800

080085dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4b21      	ldr	r3, [pc, #132]	; (800868c <TIM_OC5_SetConfig+0xb0>)
 8008608:	4013      	ands	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800861c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	041b      	lsls	r3, r3, #16
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a18      	ldr	r2, [pc, #96]	; (8008690 <TIM_OC5_SetConfig+0xb4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d00f      	beq.n	8008652 <TIM_OC5_SetConfig+0x76>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a17      	ldr	r2, [pc, #92]	; (8008694 <TIM_OC5_SetConfig+0xb8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00b      	beq.n	8008652 <TIM_OC5_SetConfig+0x76>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a16      	ldr	r2, [pc, #88]	; (8008698 <TIM_OC5_SetConfig+0xbc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d007      	beq.n	8008652 <TIM_OC5_SetConfig+0x76>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a15      	ldr	r2, [pc, #84]	; (800869c <TIM_OC5_SetConfig+0xc0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d003      	beq.n	8008652 <TIM_OC5_SetConfig+0x76>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a14      	ldr	r2, [pc, #80]	; (80086a0 <TIM_OC5_SetConfig+0xc4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d109      	bne.n	8008666 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	621a      	str	r2, [r3, #32]
}
 8008680:	bf00      	nop
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	fffeff8f 	.word	0xfffeff8f
 8008690:	40010000 	.word	0x40010000
 8008694:	40010400 	.word	0x40010400
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800

080086a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4b22      	ldr	r3, [pc, #136]	; (8008758 <TIM_OC6_SetConfig+0xb4>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	021b      	lsls	r3, r3, #8
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	051b      	lsls	r3, r3, #20
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a19      	ldr	r2, [pc, #100]	; (800875c <TIM_OC6_SetConfig+0xb8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00f      	beq.n	800871c <TIM_OC6_SetConfig+0x78>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a18      	ldr	r2, [pc, #96]	; (8008760 <TIM_OC6_SetConfig+0xbc>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00b      	beq.n	800871c <TIM_OC6_SetConfig+0x78>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a17      	ldr	r2, [pc, #92]	; (8008764 <TIM_OC6_SetConfig+0xc0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d007      	beq.n	800871c <TIM_OC6_SetConfig+0x78>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a16      	ldr	r2, [pc, #88]	; (8008768 <TIM_OC6_SetConfig+0xc4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d003      	beq.n	800871c <TIM_OC6_SetConfig+0x78>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a15      	ldr	r2, [pc, #84]	; (800876c <TIM_OC6_SetConfig+0xc8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d109      	bne.n	8008730 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008722:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	029b      	lsls	r3, r3, #10
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	4313      	orrs	r3, r2
 800872e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	621a      	str	r2, [r3, #32]
}
 800874a:	bf00      	nop
 800874c:	371c      	adds	r7, #28
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	feff8fff 	.word	0xfeff8fff
 800875c:	40010000 	.word	0x40010000
 8008760:	40010400 	.word	0x40010400
 8008764:	40014000 	.word	0x40014000
 8008768:	40014400 	.word	0x40014400
 800876c:	40014800 	.word	0x40014800

08008770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	2201      	movs	r2, #1
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a1a      	ldr	r2, [r3, #32]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	43db      	mvns	r3, r3
 8008792:	401a      	ands	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1a      	ldr	r2, [r3, #32]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 031f 	and.w	r3, r3, #31
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	fa01 f303 	lsl.w	r3, r1, r3
 80087a8:	431a      	orrs	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	621a      	str	r2, [r3, #32]
}
 80087ae:	bf00      	nop
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e06d      	b.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a30      	ldr	r2, [pc, #192]	; (80088bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d004      	beq.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2f      	ldr	r2, [pc, #188]	; (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d108      	bne.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800880e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008820:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a20      	ldr	r2, [pc, #128]	; (80088bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d022      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008846:	d01d      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a1d      	ldr	r2, [pc, #116]	; (80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d018      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a1c      	ldr	r2, [pc, #112]	; (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d013      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a1a      	ldr	r2, [pc, #104]	; (80088cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d00e      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a15      	ldr	r2, [pc, #84]	; (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d009      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a16      	ldr	r2, [pc, #88]	; (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d004      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a15      	ldr	r2, [pc, #84]	; (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d10c      	bne.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800888a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	4313      	orrs	r3, r2
 8008894:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400
 80088c4:	40000400 	.word	0x40000400
 80088c8:	40000800 	.word	0x40000800
 80088cc:	40000c00 	.word	0x40000c00
 80088d0:	40001800 	.word	0x40001800
 80088d4:	40014000 	.word	0x40014000

080088d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e065      	b.n	80089c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	4313      	orrs	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	4313      	orrs	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	041b      	lsls	r3, r3, #16
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a16      	ldr	r2, [pc, #88]	; (80089cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d004      	beq.n	8008982 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a14      	ldr	r2, [pc, #80]	; (80089d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d115      	bne.n	80089ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	051b      	lsls	r3, r3, #20
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	4313      	orrs	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40010400 	.word	0x40010400

080089d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e042      	b.n	8008aa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d106      	bne.n	8008a3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7f9 fa3d 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2224      	movs	r2, #36	; 0x24
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0201 	bic.w	r2, r2, #1
 8008a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f82c 	bl	8008ab0 <UART_SetConfig>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e022      	b.n	8008aa8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fd88 	bl	8009580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fe0f 	bl	80096c4 <UART_CheckIdleState>
 8008aa6:	4603      	mov	r3, r0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab4:	b092      	sub	sp, #72	; 0x48
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4bbe      	ldr	r3, [pc, #760]	; (8008dd8 <UART_SetConfig+0x328>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	6812      	ldr	r2, [r2, #0]
 8008ae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4ab3      	ldr	r2, [pc, #716]	; (8008ddc <UART_SetConfig+0x32c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d004      	beq.n	8008b1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	4baf      	ldr	r3, [pc, #700]	; (8008de0 <UART_SetConfig+0x330>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	6812      	ldr	r2, [r2, #0]
 8008b2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b2c:	430b      	orrs	r3, r1
 8008b2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	f023 010f 	bic.w	r1, r3, #15
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4aa6      	ldr	r2, [pc, #664]	; (8008de4 <UART_SetConfig+0x334>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d177      	bne.n	8008c40 <UART_SetConfig+0x190>
 8008b50:	4ba5      	ldr	r3, [pc, #660]	; (8008de8 <UART_SetConfig+0x338>)
 8008b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b58:	2b28      	cmp	r3, #40	; 0x28
 8008b5a:	d86d      	bhi.n	8008c38 <UART_SetConfig+0x188>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <UART_SetConfig+0xb4>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008c09 	.word	0x08008c09
 8008b68:	08008c39 	.word	0x08008c39
 8008b6c:	08008c39 	.word	0x08008c39
 8008b70:	08008c39 	.word	0x08008c39
 8008b74:	08008c39 	.word	0x08008c39
 8008b78:	08008c39 	.word	0x08008c39
 8008b7c:	08008c39 	.word	0x08008c39
 8008b80:	08008c39 	.word	0x08008c39
 8008b84:	08008c11 	.word	0x08008c11
 8008b88:	08008c39 	.word	0x08008c39
 8008b8c:	08008c39 	.word	0x08008c39
 8008b90:	08008c39 	.word	0x08008c39
 8008b94:	08008c39 	.word	0x08008c39
 8008b98:	08008c39 	.word	0x08008c39
 8008b9c:	08008c39 	.word	0x08008c39
 8008ba0:	08008c39 	.word	0x08008c39
 8008ba4:	08008c19 	.word	0x08008c19
 8008ba8:	08008c39 	.word	0x08008c39
 8008bac:	08008c39 	.word	0x08008c39
 8008bb0:	08008c39 	.word	0x08008c39
 8008bb4:	08008c39 	.word	0x08008c39
 8008bb8:	08008c39 	.word	0x08008c39
 8008bbc:	08008c39 	.word	0x08008c39
 8008bc0:	08008c39 	.word	0x08008c39
 8008bc4:	08008c21 	.word	0x08008c21
 8008bc8:	08008c39 	.word	0x08008c39
 8008bcc:	08008c39 	.word	0x08008c39
 8008bd0:	08008c39 	.word	0x08008c39
 8008bd4:	08008c39 	.word	0x08008c39
 8008bd8:	08008c39 	.word	0x08008c39
 8008bdc:	08008c39 	.word	0x08008c39
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c29 	.word	0x08008c29
 8008be8:	08008c39 	.word	0x08008c39
 8008bec:	08008c39 	.word	0x08008c39
 8008bf0:	08008c39 	.word	0x08008c39
 8008bf4:	08008c39 	.word	0x08008c39
 8008bf8:	08008c39 	.word	0x08008c39
 8008bfc:	08008c39 	.word	0x08008c39
 8008c00:	08008c39 	.word	0x08008c39
 8008c04:	08008c31 	.word	0x08008c31
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0e:	e222      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c10:	2304      	movs	r3, #4
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c16:	e21e      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c18:	2308      	movs	r3, #8
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1e:	e21a      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c20:	2310      	movs	r3, #16
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e216      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c28:	2320      	movs	r3, #32
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e212      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c30:	2340      	movs	r3, #64	; 0x40
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e20e      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c38:	2380      	movs	r3, #128	; 0x80
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e20a      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a69      	ldr	r2, [pc, #420]	; (8008dec <UART_SetConfig+0x33c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d130      	bne.n	8008cac <UART_SetConfig+0x1fc>
 8008c4a:	4b67      	ldr	r3, [pc, #412]	; (8008de8 <UART_SetConfig+0x338>)
 8008c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	2b05      	cmp	r3, #5
 8008c54:	d826      	bhi.n	8008ca4 <UART_SetConfig+0x1f4>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <UART_SetConfig+0x1ac>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c75 	.word	0x08008c75
 8008c60:	08008c7d 	.word	0x08008c7d
 8008c64:	08008c85 	.word	0x08008c85
 8008c68:	08008c8d 	.word	0x08008c8d
 8008c6c:	08008c95 	.word	0x08008c95
 8008c70:	08008c9d 	.word	0x08008c9d
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c7a:	e1ec      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c7c:	2304      	movs	r3, #4
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c82:	e1e8      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c84:	2308      	movs	r3, #8
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8a:	e1e4      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c92:	e1e0      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c94:	2320      	movs	r3, #32
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e1dc      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e1d8      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008ca4:	2380      	movs	r3, #128	; 0x80
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e1d4      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a4f      	ldr	r2, [pc, #316]	; (8008df0 <UART_SetConfig+0x340>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d130      	bne.n	8008d18 <UART_SetConfig+0x268>
 8008cb6:	4b4c      	ldr	r3, [pc, #304]	; (8008de8 <UART_SetConfig+0x338>)
 8008cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	2b05      	cmp	r3, #5
 8008cc0:	d826      	bhi.n	8008d10 <UART_SetConfig+0x260>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <UART_SetConfig+0x218>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008ce1 	.word	0x08008ce1
 8008ccc:	08008ce9 	.word	0x08008ce9
 8008cd0:	08008cf1 	.word	0x08008cf1
 8008cd4:	08008cf9 	.word	0x08008cf9
 8008cd8:	08008d01 	.word	0x08008d01
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce6:	e1b6      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008ce8:	2304      	movs	r3, #4
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cee:	e1b2      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf6:	e1ae      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfe:	e1aa      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d00:	2320      	movs	r3, #32
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d06:	e1a6      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d08:	2340      	movs	r3, #64	; 0x40
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0e:	e1a2      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d10:	2380      	movs	r3, #128	; 0x80
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d16:	e19e      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a35      	ldr	r2, [pc, #212]	; (8008df4 <UART_SetConfig+0x344>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d130      	bne.n	8008d84 <UART_SetConfig+0x2d4>
 8008d22:	4b31      	ldr	r3, [pc, #196]	; (8008de8 <UART_SetConfig+0x338>)
 8008d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d826      	bhi.n	8008d7c <UART_SetConfig+0x2cc>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <UART_SetConfig+0x284>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d4d 	.word	0x08008d4d
 8008d38:	08008d55 	.word	0x08008d55
 8008d3c:	08008d5d 	.word	0x08008d5d
 8008d40:	08008d65 	.word	0x08008d65
 8008d44:	08008d6d 	.word	0x08008d6d
 8008d48:	08008d75 	.word	0x08008d75
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e180      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d54:	2304      	movs	r3, #4
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5a:	e17c      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d62:	e178      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d64:	2310      	movs	r3, #16
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6a:	e174      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d6c:	2320      	movs	r3, #32
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d72:	e170      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d7a:	e16c      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d82:	e168      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1b      	ldr	r2, [pc, #108]	; (8008df8 <UART_SetConfig+0x348>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d142      	bne.n	8008e14 <UART_SetConfig+0x364>
 8008d8e:	4b16      	ldr	r3, [pc, #88]	; (8008de8 <UART_SetConfig+0x338>)
 8008d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d838      	bhi.n	8008e0c <UART_SetConfig+0x35c>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <UART_SetConfig+0x2f0>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008db9 	.word	0x08008db9
 8008da4:	08008dc1 	.word	0x08008dc1
 8008da8:	08008dc9 	.word	0x08008dc9
 8008dac:	08008dd1 	.word	0x08008dd1
 8008db0:	08008dfd 	.word	0x08008dfd
 8008db4:	08008e05 	.word	0x08008e05
 8008db8:	2300      	movs	r3, #0
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dbe:	e14a      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008dc0:	2304      	movs	r3, #4
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc6:	e146      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008dc8:	2308      	movs	r3, #8
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dce:	e142      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008dd0:	2310      	movs	r3, #16
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd6:	e13e      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008dd8:	cfff69f3 	.word	0xcfff69f3
 8008ddc:	58000c00 	.word	0x58000c00
 8008de0:	11fff4ff 	.word	0x11fff4ff
 8008de4:	40011000 	.word	0x40011000
 8008de8:	58024400 	.word	0x58024400
 8008dec:	40004400 	.word	0x40004400
 8008df0:	40004800 	.word	0x40004800
 8008df4:	40004c00 	.word	0x40004c00
 8008df8:	40005000 	.word	0x40005000
 8008dfc:	2320      	movs	r3, #32
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e02:	e128      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008e04:	2340      	movs	r3, #64	; 0x40
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0a:	e124      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008e0c:	2380      	movs	r3, #128	; 0x80
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e12:	e120      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4acb      	ldr	r2, [pc, #812]	; (8009148 <UART_SetConfig+0x698>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d176      	bne.n	8008f0c <UART_SetConfig+0x45c>
 8008e1e:	4bcb      	ldr	r3, [pc, #812]	; (800914c <UART_SetConfig+0x69c>)
 8008e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e26:	2b28      	cmp	r3, #40	; 0x28
 8008e28:	d86c      	bhi.n	8008f04 <UART_SetConfig+0x454>
 8008e2a:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <UART_SetConfig+0x380>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008ed5 	.word	0x08008ed5
 8008e34:	08008f05 	.word	0x08008f05
 8008e38:	08008f05 	.word	0x08008f05
 8008e3c:	08008f05 	.word	0x08008f05
 8008e40:	08008f05 	.word	0x08008f05
 8008e44:	08008f05 	.word	0x08008f05
 8008e48:	08008f05 	.word	0x08008f05
 8008e4c:	08008f05 	.word	0x08008f05
 8008e50:	08008edd 	.word	0x08008edd
 8008e54:	08008f05 	.word	0x08008f05
 8008e58:	08008f05 	.word	0x08008f05
 8008e5c:	08008f05 	.word	0x08008f05
 8008e60:	08008f05 	.word	0x08008f05
 8008e64:	08008f05 	.word	0x08008f05
 8008e68:	08008f05 	.word	0x08008f05
 8008e6c:	08008f05 	.word	0x08008f05
 8008e70:	08008ee5 	.word	0x08008ee5
 8008e74:	08008f05 	.word	0x08008f05
 8008e78:	08008f05 	.word	0x08008f05
 8008e7c:	08008f05 	.word	0x08008f05
 8008e80:	08008f05 	.word	0x08008f05
 8008e84:	08008f05 	.word	0x08008f05
 8008e88:	08008f05 	.word	0x08008f05
 8008e8c:	08008f05 	.word	0x08008f05
 8008e90:	08008eed 	.word	0x08008eed
 8008e94:	08008f05 	.word	0x08008f05
 8008e98:	08008f05 	.word	0x08008f05
 8008e9c:	08008f05 	.word	0x08008f05
 8008ea0:	08008f05 	.word	0x08008f05
 8008ea4:	08008f05 	.word	0x08008f05
 8008ea8:	08008f05 	.word	0x08008f05
 8008eac:	08008f05 	.word	0x08008f05
 8008eb0:	08008ef5 	.word	0x08008ef5
 8008eb4:	08008f05 	.word	0x08008f05
 8008eb8:	08008f05 	.word	0x08008f05
 8008ebc:	08008f05 	.word	0x08008f05
 8008ec0:	08008f05 	.word	0x08008f05
 8008ec4:	08008f05 	.word	0x08008f05
 8008ec8:	08008f05 	.word	0x08008f05
 8008ecc:	08008f05 	.word	0x08008f05
 8008ed0:	08008efd 	.word	0x08008efd
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eda:	e0bc      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008edc:	2304      	movs	r3, #4
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee2:	e0b8      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eea:	e0b4      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008eec:	2310      	movs	r3, #16
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef2:	e0b0      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008ef4:	2320      	movs	r3, #32
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efa:	e0ac      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f02:	e0a8      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0a:	e0a4      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a8f      	ldr	r2, [pc, #572]	; (8009150 <UART_SetConfig+0x6a0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d130      	bne.n	8008f78 <UART_SetConfig+0x4c8>
 8008f16:	4b8d      	ldr	r3, [pc, #564]	; (800914c <UART_SetConfig+0x69c>)
 8008f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d826      	bhi.n	8008f70 <UART_SetConfig+0x4c0>
 8008f22:	a201      	add	r2, pc, #4	; (adr r2, 8008f28 <UART_SetConfig+0x478>)
 8008f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f28:	08008f41 	.word	0x08008f41
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	08008f51 	.word	0x08008f51
 8008f34:	08008f59 	.word	0x08008f59
 8008f38:	08008f61 	.word	0x08008f61
 8008f3c:	08008f69 	.word	0x08008f69
 8008f40:	2300      	movs	r3, #0
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f46:	e086      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4e:	e082      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f50:	2308      	movs	r3, #8
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f56:	e07e      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5e:	e07a      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f60:	2320      	movs	r3, #32
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f66:	e076      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f68:	2340      	movs	r3, #64	; 0x40
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6e:	e072      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f70:	2380      	movs	r3, #128	; 0x80
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f76:	e06e      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a75      	ldr	r2, [pc, #468]	; (8009154 <UART_SetConfig+0x6a4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d130      	bne.n	8008fe4 <UART_SetConfig+0x534>
 8008f82:	4b72      	ldr	r3, [pc, #456]	; (800914c <UART_SetConfig+0x69c>)
 8008f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b05      	cmp	r3, #5
 8008f8c:	d826      	bhi.n	8008fdc <UART_SetConfig+0x52c>
 8008f8e:	a201      	add	r2, pc, #4	; (adr r2, 8008f94 <UART_SetConfig+0x4e4>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fad 	.word	0x08008fad
 8008f98:	08008fb5 	.word	0x08008fb5
 8008f9c:	08008fbd 	.word	0x08008fbd
 8008fa0:	08008fc5 	.word	0x08008fc5
 8008fa4:	08008fcd 	.word	0x08008fcd
 8008fa8:	08008fd5 	.word	0x08008fd5
 8008fac:	2300      	movs	r3, #0
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb2:	e050      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008fb4:	2304      	movs	r3, #4
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fba:	e04c      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc2:	e048      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fca:	e044      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008fcc:	2320      	movs	r3, #32
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd2:	e040      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008fd4:	2340      	movs	r3, #64	; 0x40
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fda:	e03c      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008fdc:	2380      	movs	r3, #128	; 0x80
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe2:	e038      	b.n	8009056 <UART_SetConfig+0x5a6>
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a5b      	ldr	r2, [pc, #364]	; (8009158 <UART_SetConfig+0x6a8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d130      	bne.n	8009050 <UART_SetConfig+0x5a0>
 8008fee:	4b57      	ldr	r3, [pc, #348]	; (800914c <UART_SetConfig+0x69c>)
 8008ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d826      	bhi.n	8009048 <UART_SetConfig+0x598>
 8008ffa:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <UART_SetConfig+0x550>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009019 	.word	0x08009019
 8009004:	08009021 	.word	0x08009021
 8009008:	08009029 	.word	0x08009029
 800900c:	08009031 	.word	0x08009031
 8009010:	08009039 	.word	0x08009039
 8009014:	08009041 	.word	0x08009041
 8009018:	2302      	movs	r3, #2
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e01a      	b.n	8009056 <UART_SetConfig+0x5a6>
 8009020:	2304      	movs	r3, #4
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009026:	e016      	b.n	8009056 <UART_SetConfig+0x5a6>
 8009028:	2308      	movs	r3, #8
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902e:	e012      	b.n	8009056 <UART_SetConfig+0x5a6>
 8009030:	2310      	movs	r3, #16
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009036:	e00e      	b.n	8009056 <UART_SetConfig+0x5a6>
 8009038:	2320      	movs	r3, #32
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903e:	e00a      	b.n	8009056 <UART_SetConfig+0x5a6>
 8009040:	2340      	movs	r3, #64	; 0x40
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009046:	e006      	b.n	8009056 <UART_SetConfig+0x5a6>
 8009048:	2380      	movs	r3, #128	; 0x80
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904e:	e002      	b.n	8009056 <UART_SetConfig+0x5a6>
 8009050:	2380      	movs	r3, #128	; 0x80
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a3f      	ldr	r2, [pc, #252]	; (8009158 <UART_SetConfig+0x6a8>)
 800905c:	4293      	cmp	r3, r2
 800905e:	f040 80f8 	bne.w	8009252 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009062:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009066:	2b20      	cmp	r3, #32
 8009068:	dc46      	bgt.n	80090f8 <UART_SetConfig+0x648>
 800906a:	2b02      	cmp	r3, #2
 800906c:	f2c0 8082 	blt.w	8009174 <UART_SetConfig+0x6c4>
 8009070:	3b02      	subs	r3, #2
 8009072:	2b1e      	cmp	r3, #30
 8009074:	d87e      	bhi.n	8009174 <UART_SetConfig+0x6c4>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <UART_SetConfig+0x5cc>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	080090ff 	.word	0x080090ff
 8009080:	08009175 	.word	0x08009175
 8009084:	08009107 	.word	0x08009107
 8009088:	08009175 	.word	0x08009175
 800908c:	08009175 	.word	0x08009175
 8009090:	08009175 	.word	0x08009175
 8009094:	08009117 	.word	0x08009117
 8009098:	08009175 	.word	0x08009175
 800909c:	08009175 	.word	0x08009175
 80090a0:	08009175 	.word	0x08009175
 80090a4:	08009175 	.word	0x08009175
 80090a8:	08009175 	.word	0x08009175
 80090ac:	08009175 	.word	0x08009175
 80090b0:	08009175 	.word	0x08009175
 80090b4:	08009127 	.word	0x08009127
 80090b8:	08009175 	.word	0x08009175
 80090bc:	08009175 	.word	0x08009175
 80090c0:	08009175 	.word	0x08009175
 80090c4:	08009175 	.word	0x08009175
 80090c8:	08009175 	.word	0x08009175
 80090cc:	08009175 	.word	0x08009175
 80090d0:	08009175 	.word	0x08009175
 80090d4:	08009175 	.word	0x08009175
 80090d8:	08009175 	.word	0x08009175
 80090dc:	08009175 	.word	0x08009175
 80090e0:	08009175 	.word	0x08009175
 80090e4:	08009175 	.word	0x08009175
 80090e8:	08009175 	.word	0x08009175
 80090ec:	08009175 	.word	0x08009175
 80090f0:	08009175 	.word	0x08009175
 80090f4:	08009167 	.word	0x08009167
 80090f8:	2b40      	cmp	r3, #64	; 0x40
 80090fa:	d037      	beq.n	800916c <UART_SetConfig+0x6bc>
 80090fc:	e03a      	b.n	8009174 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80090fe:	f7fd fb45 	bl	800678c <HAL_RCCEx_GetD3PCLK1Freq>
 8009102:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009104:	e03c      	b.n	8009180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800910a:	4618      	mov	r0, r3
 800910c:	f7fd fb54 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009114:	e034      	b.n	8009180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009116:	f107 0318 	add.w	r3, r7, #24
 800911a:	4618      	mov	r0, r3
 800911c:	f7fd fca0 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009124:	e02c      	b.n	8009180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009126:	4b09      	ldr	r3, [pc, #36]	; (800914c <UART_SetConfig+0x69c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d016      	beq.n	8009160 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009132:	4b06      	ldr	r3, [pc, #24]	; (800914c <UART_SetConfig+0x69c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	08db      	lsrs	r3, r3, #3
 8009138:	f003 0303 	and.w	r3, r3, #3
 800913c:	4a07      	ldr	r2, [pc, #28]	; (800915c <UART_SetConfig+0x6ac>)
 800913e:	fa22 f303 	lsr.w	r3, r2, r3
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009144:	e01c      	b.n	8009180 <UART_SetConfig+0x6d0>
 8009146:	bf00      	nop
 8009148:	40011400 	.word	0x40011400
 800914c:	58024400 	.word	0x58024400
 8009150:	40007800 	.word	0x40007800
 8009154:	40007c00 	.word	0x40007c00
 8009158:	58000c00 	.word	0x58000c00
 800915c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009160:	4b9d      	ldr	r3, [pc, #628]	; (80093d8 <UART_SetConfig+0x928>)
 8009162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009164:	e00c      	b.n	8009180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009166:	4b9d      	ldr	r3, [pc, #628]	; (80093dc <UART_SetConfig+0x92c>)
 8009168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800916a:	e009      	b.n	8009180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800916c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009172:	e005      	b.n	8009180 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800917e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 81de 	beq.w	8009544 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	4a94      	ldr	r2, [pc, #592]	; (80093e0 <UART_SetConfig+0x930>)
 800918e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009192:	461a      	mov	r2, r3
 8009194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009196:	fbb3 f3f2 	udiv	r3, r3, r2
 800919a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	4613      	mov	r3, r2
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	4413      	add	r3, r2
 80091a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d305      	bcc.n	80091b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d903      	bls.n	80091c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80091be:	e1c1      	b.n	8009544 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c2:	2200      	movs	r2, #0
 80091c4:	60bb      	str	r3, [r7, #8]
 80091c6:	60fa      	str	r2, [r7, #12]
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	4a84      	ldr	r2, [pc, #528]	; (80093e0 <UART_SetConfig+0x930>)
 80091ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	2200      	movs	r2, #0
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	607a      	str	r2, [r7, #4]
 80091da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091e2:	f7f7 f8cd 	bl	8000380 <__aeabi_uldivmod>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4610      	mov	r0, r2
 80091ec:	4619      	mov	r1, r3
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	020b      	lsls	r3, r1, #8
 80091f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091fc:	0202      	lsls	r2, r0, #8
 80091fe:	6979      	ldr	r1, [r7, #20]
 8009200:	6849      	ldr	r1, [r1, #4]
 8009202:	0849      	lsrs	r1, r1, #1
 8009204:	2000      	movs	r0, #0
 8009206:	460c      	mov	r4, r1
 8009208:	4605      	mov	r5, r0
 800920a:	eb12 0804 	adds.w	r8, r2, r4
 800920e:	eb43 0905 	adc.w	r9, r3, r5
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	469a      	mov	sl, r3
 800921a:	4693      	mov	fp, r2
 800921c:	4652      	mov	r2, sl
 800921e:	465b      	mov	r3, fp
 8009220:	4640      	mov	r0, r8
 8009222:	4649      	mov	r1, r9
 8009224:	f7f7 f8ac 	bl	8000380 <__aeabi_uldivmod>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4613      	mov	r3, r2
 800922e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009236:	d308      	bcc.n	800924a <UART_SetConfig+0x79a>
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800923e:	d204      	bcs.n	800924a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009246:	60da      	str	r2, [r3, #12]
 8009248:	e17c      	b.n	8009544 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009250:	e178      	b.n	8009544 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800925a:	f040 80c5 	bne.w	80093e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800925e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009262:	2b20      	cmp	r3, #32
 8009264:	dc48      	bgt.n	80092f8 <UART_SetConfig+0x848>
 8009266:	2b00      	cmp	r3, #0
 8009268:	db7b      	blt.n	8009362 <UART_SetConfig+0x8b2>
 800926a:	2b20      	cmp	r3, #32
 800926c:	d879      	bhi.n	8009362 <UART_SetConfig+0x8b2>
 800926e:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <UART_SetConfig+0x7c4>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	080092ff 	.word	0x080092ff
 8009278:	08009307 	.word	0x08009307
 800927c:	08009363 	.word	0x08009363
 8009280:	08009363 	.word	0x08009363
 8009284:	0800930f 	.word	0x0800930f
 8009288:	08009363 	.word	0x08009363
 800928c:	08009363 	.word	0x08009363
 8009290:	08009363 	.word	0x08009363
 8009294:	0800931f 	.word	0x0800931f
 8009298:	08009363 	.word	0x08009363
 800929c:	08009363 	.word	0x08009363
 80092a0:	08009363 	.word	0x08009363
 80092a4:	08009363 	.word	0x08009363
 80092a8:	08009363 	.word	0x08009363
 80092ac:	08009363 	.word	0x08009363
 80092b0:	08009363 	.word	0x08009363
 80092b4:	0800932f 	.word	0x0800932f
 80092b8:	08009363 	.word	0x08009363
 80092bc:	08009363 	.word	0x08009363
 80092c0:	08009363 	.word	0x08009363
 80092c4:	08009363 	.word	0x08009363
 80092c8:	08009363 	.word	0x08009363
 80092cc:	08009363 	.word	0x08009363
 80092d0:	08009363 	.word	0x08009363
 80092d4:	08009363 	.word	0x08009363
 80092d8:	08009363 	.word	0x08009363
 80092dc:	08009363 	.word	0x08009363
 80092e0:	08009363 	.word	0x08009363
 80092e4:	08009363 	.word	0x08009363
 80092e8:	08009363 	.word	0x08009363
 80092ec:	08009363 	.word	0x08009363
 80092f0:	08009363 	.word	0x08009363
 80092f4:	08009355 	.word	0x08009355
 80092f8:	2b40      	cmp	r3, #64	; 0x40
 80092fa:	d02e      	beq.n	800935a <UART_SetConfig+0x8aa>
 80092fc:	e031      	b.n	8009362 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092fe:	f7fb fa4d 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8009302:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009304:	e033      	b.n	800936e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009306:	f7fb fa5f 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 800930a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800930c:	e02f      	b.n	800936e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009312:	4618      	mov	r0, r3
 8009314:	f7fd fa50 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800931c:	e027      	b.n	800936e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800931e:	f107 0318 	add.w	r3, r7, #24
 8009322:	4618      	mov	r0, r3
 8009324:	f7fd fb9c 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800932c:	e01f      	b.n	800936e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800932e:	4b2d      	ldr	r3, [pc, #180]	; (80093e4 <UART_SetConfig+0x934>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d009      	beq.n	800934e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800933a:	4b2a      	ldr	r3, [pc, #168]	; (80093e4 <UART_SetConfig+0x934>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	08db      	lsrs	r3, r3, #3
 8009340:	f003 0303 	and.w	r3, r3, #3
 8009344:	4a24      	ldr	r2, [pc, #144]	; (80093d8 <UART_SetConfig+0x928>)
 8009346:	fa22 f303 	lsr.w	r3, r2, r3
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800934c:	e00f      	b.n	800936e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800934e:	4b22      	ldr	r3, [pc, #136]	; (80093d8 <UART_SetConfig+0x928>)
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009352:	e00c      	b.n	800936e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009354:	4b21      	ldr	r3, [pc, #132]	; (80093dc <UART_SetConfig+0x92c>)
 8009356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009358:	e009      	b.n	800936e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800935a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009360:	e005      	b.n	800936e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800936c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800936e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 80e7 	beq.w	8009544 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	4a19      	ldr	r2, [pc, #100]	; (80093e0 <UART_SetConfig+0x930>)
 800937c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009380:	461a      	mov	r2, r3
 8009382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009384:	fbb3 f3f2 	udiv	r3, r3, r2
 8009388:	005a      	lsls	r2, r3, #1
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	085b      	lsrs	r3, r3, #1
 8009390:	441a      	add	r2, r3
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	fbb2 f3f3 	udiv	r3, r2, r3
 800939a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	2b0f      	cmp	r3, #15
 80093a0:	d916      	bls.n	80093d0 <UART_SetConfig+0x920>
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a8:	d212      	bcs.n	80093d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	f023 030f 	bic.w	r3, r3, #15
 80093b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	b29a      	uxth	r2, r3
 80093c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093c2:	4313      	orrs	r3, r2
 80093c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80093cc:	60da      	str	r2, [r3, #12]
 80093ce:	e0b9      	b.n	8009544 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80093d6:	e0b5      	b.n	8009544 <UART_SetConfig+0xa94>
 80093d8:	03d09000 	.word	0x03d09000
 80093dc:	003d0900 	.word	0x003d0900
 80093e0:	0800c294 	.word	0x0800c294
 80093e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80093e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	dc49      	bgt.n	8009484 <UART_SetConfig+0x9d4>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	db7c      	blt.n	80094ee <UART_SetConfig+0xa3e>
 80093f4:	2b20      	cmp	r3, #32
 80093f6:	d87a      	bhi.n	80094ee <UART_SetConfig+0xa3e>
 80093f8:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <UART_SetConfig+0x950>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	0800948b 	.word	0x0800948b
 8009404:	08009493 	.word	0x08009493
 8009408:	080094ef 	.word	0x080094ef
 800940c:	080094ef 	.word	0x080094ef
 8009410:	0800949b 	.word	0x0800949b
 8009414:	080094ef 	.word	0x080094ef
 8009418:	080094ef 	.word	0x080094ef
 800941c:	080094ef 	.word	0x080094ef
 8009420:	080094ab 	.word	0x080094ab
 8009424:	080094ef 	.word	0x080094ef
 8009428:	080094ef 	.word	0x080094ef
 800942c:	080094ef 	.word	0x080094ef
 8009430:	080094ef 	.word	0x080094ef
 8009434:	080094ef 	.word	0x080094ef
 8009438:	080094ef 	.word	0x080094ef
 800943c:	080094ef 	.word	0x080094ef
 8009440:	080094bb 	.word	0x080094bb
 8009444:	080094ef 	.word	0x080094ef
 8009448:	080094ef 	.word	0x080094ef
 800944c:	080094ef 	.word	0x080094ef
 8009450:	080094ef 	.word	0x080094ef
 8009454:	080094ef 	.word	0x080094ef
 8009458:	080094ef 	.word	0x080094ef
 800945c:	080094ef 	.word	0x080094ef
 8009460:	080094ef 	.word	0x080094ef
 8009464:	080094ef 	.word	0x080094ef
 8009468:	080094ef 	.word	0x080094ef
 800946c:	080094ef 	.word	0x080094ef
 8009470:	080094ef 	.word	0x080094ef
 8009474:	080094ef 	.word	0x080094ef
 8009478:	080094ef 	.word	0x080094ef
 800947c:	080094ef 	.word	0x080094ef
 8009480:	080094e1 	.word	0x080094e1
 8009484:	2b40      	cmp	r3, #64	; 0x40
 8009486:	d02e      	beq.n	80094e6 <UART_SetConfig+0xa36>
 8009488:	e031      	b.n	80094ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800948a:	f7fb f987 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 800948e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009490:	e033      	b.n	80094fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009492:	f7fb f999 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8009496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009498:	e02f      	b.n	80094fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fd f98a 	bl	80067b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094a8:	e027      	b.n	80094fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094aa:	f107 0318 	add.w	r3, r7, #24
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fd fad6 	bl	8006a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b8:	e01f      	b.n	80094fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094ba:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <UART_SetConfig+0xac0>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d009      	beq.n	80094da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094c6:	4b2a      	ldr	r3, [pc, #168]	; (8009570 <UART_SetConfig+0xac0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	08db      	lsrs	r3, r3, #3
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	4a28      	ldr	r2, [pc, #160]	; (8009574 <UART_SetConfig+0xac4>)
 80094d2:	fa22 f303 	lsr.w	r3, r2, r3
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094d8:	e00f      	b.n	80094fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80094da:	4b26      	ldr	r3, [pc, #152]	; (8009574 <UART_SetConfig+0xac4>)
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094de:	e00c      	b.n	80094fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094e0:	4b25      	ldr	r3, [pc, #148]	; (8009578 <UART_SetConfig+0xac8>)
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094e4:	e009      	b.n	80094fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094ec:	e005      	b.n	80094fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80094f8:	bf00      	nop
    }

    if (pclk != 0U)
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d021      	beq.n	8009544 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	4a1d      	ldr	r2, [pc, #116]	; (800957c <UART_SetConfig+0xacc>)
 8009506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800950a:	461a      	mov	r2, r3
 800950c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	441a      	add	r2, r3
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009522:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	2b0f      	cmp	r3, #15
 8009528:	d909      	bls.n	800953e <UART_SetConfig+0xa8e>
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009530:	d205      	bcs.n	800953e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	b29a      	uxth	r2, r3
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60da      	str	r2, [r3, #12]
 800953c:	e002      	b.n	8009544 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	2201      	movs	r2, #1
 8009548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2201      	movs	r2, #1
 8009550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2200      	movs	r2, #0
 8009558:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2200      	movs	r2, #0
 800955e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009560:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009564:	4618      	mov	r0, r3
 8009566:	3748      	adds	r7, #72	; 0x48
 8009568:	46bd      	mov	sp, r7
 800956a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800956e:	bf00      	nop
 8009570:	58024400 	.word	0x58024400
 8009574:	03d09000 	.word	0x03d09000
 8009578:	003d0900 	.word	0x003d0900
 800957c:	0800c294 	.word	0x0800c294

08009580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00a      	beq.n	8009632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00a      	beq.n	8009654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01a      	beq.n	8009696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800967e:	d10a      	bne.n	8009696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b098      	sub	sp, #96	; 0x60
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096d4:	f7f8 fcec 	bl	80020b0 <HAL_GetTick>
 80096d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d12f      	bne.n	8009748 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096f0:	2200      	movs	r2, #0
 80096f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f88e 	bl	8009818 <UART_WaitOnFlagUntilTimeout>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d022      	beq.n	8009748 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009716:	653b      	str	r3, [r7, #80]	; 0x50
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	461a      	mov	r2, r3
 800971e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009720:	647b      	str	r3, [r7, #68]	; 0x44
 8009722:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009728:	e841 2300 	strex	r3, r2, [r1]
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800972e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e6      	bne.n	8009702 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2220      	movs	r2, #32
 8009738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e063      	b.n	8009810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0304 	and.w	r3, r3, #4
 8009752:	2b04      	cmp	r3, #4
 8009754:	d149      	bne.n	80097ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009756:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975e:	2200      	movs	r2, #0
 8009760:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f857 	bl	8009818 <UART_WaitOnFlagUntilTimeout>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d03c      	beq.n	80097ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	623b      	str	r3, [r7, #32]
   return(result);
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800978e:	633b      	str	r3, [r7, #48]	; 0x30
 8009790:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e6      	bne.n	8009770 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f023 0301 	bic.w	r3, r3, #1
 80097b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3308      	adds	r3, #8
 80097c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097c2:	61fa      	str	r2, [r7, #28]
 80097c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	69b9      	ldr	r1, [r7, #24]
 80097c8:	69fa      	ldr	r2, [r7, #28]
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	617b      	str	r3, [r7, #20]
   return(result);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e5      	bne.n	80097a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e012      	b.n	8009810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3758      	adds	r7, #88	; 0x58
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	4613      	mov	r3, r2
 8009826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009828:	e049      	b.n	80098be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009830:	d045      	beq.n	80098be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009832:	f7f8 fc3d 	bl	80020b0 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	429a      	cmp	r2, r3
 8009840:	d302      	bcc.n	8009848 <UART_WaitOnFlagUntilTimeout+0x30>
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e048      	b.n	80098de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d031      	beq.n	80098be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b08      	cmp	r3, #8
 8009866:	d110      	bne.n	800988a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2208      	movs	r2, #8
 800986e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 f839 	bl	80098e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2208      	movs	r2, #8
 800987a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e029      	b.n	80098de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009898:	d111      	bne.n	80098be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 f81f 	bl	80098e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e00f      	b.n	80098de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69da      	ldr	r2, [r3, #28]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	4013      	ands	r3, r2
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	bf0c      	ite	eq
 80098ce:	2301      	moveq	r3, #1
 80098d0:	2300      	movne	r3, #0
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	461a      	mov	r2, r3
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d0a6      	beq.n	800982a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b095      	sub	sp, #84	; 0x54
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800990e:	643b      	str	r3, [r7, #64]	; 0x40
 8009910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800991c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1e6      	bne.n	80098f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3308      	adds	r3, #8
 8009928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	61fb      	str	r3, [r7, #28]
   return(result);
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	4b1e      	ldr	r3, [pc, #120]	; (80099b0 <UART_EndRxTransfer+0xc8>)
 8009936:	4013      	ands	r3, r2
 8009938:	64bb      	str	r3, [r7, #72]	; 0x48
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3308      	adds	r3, #8
 8009940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e5      	bne.n	8009922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995a:	2b01      	cmp	r3, #1
 800995c:	d118      	bne.n	8009990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	e853 3f00 	ldrex	r3, [r3]
 800996a:	60bb      	str	r3, [r7, #8]
   return(result);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	f023 0310 	bic.w	r3, r3, #16
 8009972:	647b      	str	r3, [r7, #68]	; 0x44
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	461a      	mov	r2, r3
 800997a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	6979      	ldr	r1, [r7, #20]
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	e841 2300 	strex	r3, r2, [r1]
 8009988:	613b      	str	r3, [r7, #16]
   return(result);
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1e6      	bne.n	800995e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2220      	movs	r2, #32
 8009994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80099a4:	bf00      	nop
 80099a6:	3754      	adds	r7, #84	; 0x54
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	effffffe 	.word	0xeffffffe

080099b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d101      	bne.n	80099ca <HAL_UARTEx_DisableFifoMode+0x16>
 80099c6:	2302      	movs	r3, #2
 80099c8:	e027      	b.n	8009a1a <HAL_UARTEx_DisableFifoMode+0x66>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2224      	movs	r2, #36	; 0x24
 80099d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0201 	bic.w	r2, r2, #1
 80099f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e02d      	b.n	8009a9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2224      	movs	r2, #36	; 0x24
 8009a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0201 	bic.w	r2, r2, #1
 8009a64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f850 	bl	8009b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e02d      	b.n	8009b16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2224      	movs	r2, #36	; 0x24
 8009ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0201 	bic.w	r2, r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f812 	bl	8009b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2220      	movs	r2, #32
 8009b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d108      	bne.n	8009b42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b40:	e031      	b.n	8009ba6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b42:	2310      	movs	r3, #16
 8009b44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b46:	2310      	movs	r3, #16
 8009b48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	0e5b      	lsrs	r3, r3, #25
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	0f5b      	lsrs	r3, r3, #29
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f003 0307 	and.w	r3, r3, #7
 8009b68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
 8009b6c:	7b3a      	ldrb	r2, [r7, #12]
 8009b6e:	4911      	ldr	r1, [pc, #68]	; (8009bb4 <UARTEx_SetNbDataToProcess+0x94>)
 8009b70:	5c8a      	ldrb	r2, [r1, r2]
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b76:	7b3a      	ldrb	r2, [r7, #12]
 8009b78:	490f      	ldr	r1, [pc, #60]	; (8009bb8 <UARTEx_SetNbDataToProcess+0x98>)
 8009b7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	7b7a      	ldrb	r2, [r7, #13]
 8009b8c:	4909      	ldr	r1, [pc, #36]	; (8009bb4 <UARTEx_SetNbDataToProcess+0x94>)
 8009b8e:	5c8a      	ldrb	r2, [r1, r2]
 8009b90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b94:	7b7a      	ldrb	r2, [r7, #13]
 8009b96:	4908      	ldr	r1, [pc, #32]	; (8009bb8 <UARTEx_SetNbDataToProcess+0x98>)
 8009b98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ba6:	bf00      	nop
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	0800c2ac 	.word	0x0800c2ac
 8009bb8:	0800c2b4 	.word	0x0800c2b4

08009bbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bce:	2b84      	cmp	r3, #132	; 0x84
 8009bd0:	d005      	beq.n	8009bde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009bd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4413      	add	r3, r2
 8009bda:	3303      	adds	r3, #3
 8009bdc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009bde:	68fb      	ldr	r3, [r7, #12]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009bf0:	f000 faf6 	bl	800a1e0 <vTaskStartScheduler>
  
  return osOK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bfc:	b089      	sub	sp, #36	; 0x24
 8009bfe:	af04      	add	r7, sp, #16
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d020      	beq.n	8009c4e <osThreadCreate+0x54>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01c      	beq.n	8009c4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685c      	ldr	r4, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681d      	ldr	r5, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691e      	ldr	r6, [r3, #16]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff ffc8 	bl	8009bbc <makeFreeRtosPriority>
 8009c2c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c36:	9202      	str	r2, [sp, #8]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	9100      	str	r1, [sp, #0]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	4632      	mov	r2, r6
 8009c40:	4629      	mov	r1, r5
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 f8ed 	bl	8009e22 <xTaskCreateStatic>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e01c      	b.n	8009c88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685c      	ldr	r4, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c5a:	b29e      	uxth	r6, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff ffaa 	bl	8009bbc <makeFreeRtosPriority>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	f107 030c 	add.w	r3, r7, #12
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	9200      	str	r2, [sp, #0]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	4632      	mov	r2, r6
 8009c76:	4629      	mov	r1, r5
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f000 f92f 	bl	8009edc <xTaskCreate>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d001      	beq.n	8009c88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c84:	2300      	movs	r3, #0
 8009c86:	e000      	b.n	8009c8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c88:	68fb      	ldr	r3, [r7, #12]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <osDelay+0x16>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	e000      	b.n	8009caa <osDelay+0x18>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fa64 	bl	800a178 <vTaskDelay>
  
  return osOK;
 8009cb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f103 0208 	add.w	r2, r3, #8
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f103 0208 	add.w	r2, r3, #8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f103 0208 	add.w	r2, r3, #8
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cee:	bf00      	nop
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b083      	sub	sp, #12
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689a      	ldr	r2, [r3, #8]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	601a      	str	r2, [r3, #0]
}
 8009d50:	bf00      	nop
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d72:	d103      	bne.n	8009d7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	e00c      	b.n	8009d96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	e002      	b.n	8009d8a <vListInsert+0x2e>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d2f6      	bcs.n	8009d84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	601a      	str	r2, [r3, #0]
}
 8009dc2:	bf00      	nop
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6892      	ldr	r2, [r2, #8]
 8009de4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6852      	ldr	r2, [r2, #4]
 8009dee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d103      	bne.n	8009e02 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	689a      	ldr	r2, [r3, #8]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	1e5a      	subs	r2, r3, #1
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b08e      	sub	sp, #56	; 0x38
 8009e26:	af04      	add	r7, sp, #16
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	607a      	str	r2, [r7, #4]
 8009e2e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <xTaskCreateStatic+0x46>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	61fb      	str	r3, [r7, #28]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e68:	23b4      	movs	r3, #180	; 0xb4
 8009e6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	2bb4      	cmp	r3, #180	; 0xb4
 8009e70:	d00a      	beq.n	8009e88 <xTaskCreateStatic+0x66>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	61bb      	str	r3, [r7, #24]
}
 8009e84:	bf00      	nop
 8009e86:	e7fe      	b.n	8009e86 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d01e      	beq.n	8009ece <xTaskCreateStatic+0xac>
 8009e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d01b      	beq.n	8009ece <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	9302      	str	r3, [sp, #8]
 8009eb0:	f107 0314 	add.w	r3, r7, #20
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 f851 	bl	8009f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ec8:	f000 f8ec 	bl	800a0a4 <prvAddNewTaskToReadyList>
 8009ecc:	e001      	b.n	8009ed2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ed2:	697b      	ldr	r3, [r7, #20]
	}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3728      	adds	r7, #40	; 0x28
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08c      	sub	sp, #48	; 0x30
 8009ee0:	af04      	add	r7, sp, #16
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	603b      	str	r3, [r7, #0]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009eec:	88fb      	ldrh	r3, [r7, #6]
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fef1 	bl	800acd8 <pvPortMalloc>
 8009ef6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00e      	beq.n	8009f1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009efe:	20b4      	movs	r0, #180	; 0xb4
 8009f00:	f000 feea 	bl	800acd8 <pvPortMalloc>
 8009f04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	631a      	str	r2, [r3, #48]	; 0x30
 8009f12:	e005      	b.n	8009f20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f14:	6978      	ldr	r0, [r7, #20]
 8009f16:	f000 ffab 	bl	800ae70 <vPortFree>
 8009f1a:	e001      	b.n	8009f20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d017      	beq.n	8009f56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f2e:	88fa      	ldrh	r2, [r7, #6]
 8009f30:	2300      	movs	r3, #0
 8009f32:	9303      	str	r3, [sp, #12]
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	9302      	str	r3, [sp, #8]
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f80f 	bl	8009f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f4a:	69f8      	ldr	r0, [r7, #28]
 8009f4c:	f000 f8aa 	bl	800a0a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f50:	2301      	movs	r3, #1
 8009f52:	61bb      	str	r3, [r7, #24]
 8009f54:	e002      	b.n	8009f5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f56:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f5c:	69bb      	ldr	r3, [r7, #24]
	}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3720      	adds	r7, #32
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009f80:	440b      	add	r3, r1
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	f023 0307 	bic.w	r3, r3, #7
 8009f8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f003 0307 	and.w	r3, r3, #7
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	617b      	str	r3, [r7, #20]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d01f      	beq.n	8009ff6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	e012      	b.n	8009fe2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	7819      	ldrb	r1, [r3, #0]
 8009fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	4413      	add	r3, r2
 8009fca:	3334      	adds	r3, #52	; 0x34
 8009fcc:	460a      	mov	r2, r1
 8009fce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d006      	beq.n	8009fea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	61fb      	str	r3, [r7, #28]
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	2b0f      	cmp	r3, #15
 8009fe6:	d9e9      	bls.n	8009fbc <prvInitialiseNewTask+0x54>
 8009fe8:	e000      	b.n	8009fec <prvInitialiseNewTask+0x84>
			{
				break;
 8009fea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ff4:	e003      	b.n	8009ffe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	2b06      	cmp	r3, #6
 800a002:	d901      	bls.n	800a008 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a004:	2306      	movs	r3, #6
 800a006:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a00c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a012:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	2200      	movs	r2, #0
 800a018:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	3304      	adds	r3, #4
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff fe6b 	bl	8009cfa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	3318      	adds	r3, #24
 800a028:	4618      	mov	r0, r3
 800a02a:	f7ff fe66 	bl	8009cfa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a032:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	f1c3 0207 	rsb	r2, r3, #7
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a042:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	334c      	adds	r3, #76	; 0x4c
 800a058:	2260      	movs	r2, #96	; 0x60
 800a05a:	2100      	movs	r1, #0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 f948 	bl	800b2f2 <memset>
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	4a0c      	ldr	r2, [pc, #48]	; (800a098 <prvInitialiseNewTask+0x130>)
 800a066:	651a      	str	r2, [r3, #80]	; 0x50
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <prvInitialiseNewTask+0x134>)
 800a06c:	655a      	str	r2, [r3, #84]	; 0x54
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	4a0b      	ldr	r2, [pc, #44]	; (800a0a0 <prvInitialiseNewTask+0x138>)
 800a072:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	69b8      	ldr	r0, [r7, #24]
 800a07a:	f000 fc1f 	bl	800a8bc <pxPortInitialiseStack>
 800a07e:	4602      	mov	r2, r0
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a08e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a090:	bf00      	nop
 800a092:	3720      	adds	r7, #32
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	0800c2dc 	.word	0x0800c2dc
 800a09c:	0800c2fc 	.word	0x0800c2fc
 800a0a0:	0800c2bc 	.word	0x0800c2bc

0800a0a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0ac:	f000 fd32 	bl	800ab14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0b0:	4b2a      	ldr	r3, [pc, #168]	; (800a15c <prvAddNewTaskToReadyList+0xb8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	4a29      	ldr	r2, [pc, #164]	; (800a15c <prvAddNewTaskToReadyList+0xb8>)
 800a0b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0ba:	4b29      	ldr	r3, [pc, #164]	; (800a160 <prvAddNewTaskToReadyList+0xbc>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d109      	bne.n	800a0d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0c2:	4a27      	ldr	r2, [pc, #156]	; (800a160 <prvAddNewTaskToReadyList+0xbc>)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0c8:	4b24      	ldr	r3, [pc, #144]	; (800a15c <prvAddNewTaskToReadyList+0xb8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d110      	bne.n	800a0f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0d0:	f000 facc 	bl	800a66c <prvInitialiseTaskLists>
 800a0d4:	e00d      	b.n	800a0f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0d6:	4b23      	ldr	r3, [pc, #140]	; (800a164 <prvAddNewTaskToReadyList+0xc0>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d109      	bne.n	800a0f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0de:	4b20      	ldr	r3, [pc, #128]	; (800a160 <prvAddNewTaskToReadyList+0xbc>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d802      	bhi.n	800a0f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0ec:	4a1c      	ldr	r2, [pc, #112]	; (800a160 <prvAddNewTaskToReadyList+0xbc>)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0f2:	4b1d      	ldr	r3, [pc, #116]	; (800a168 <prvAddNewTaskToReadyList+0xc4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	4a1b      	ldr	r2, [pc, #108]	; (800a168 <prvAddNewTaskToReadyList+0xc4>)
 800a0fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a100:	2201      	movs	r2, #1
 800a102:	409a      	lsls	r2, r3
 800a104:	4b19      	ldr	r3, [pc, #100]	; (800a16c <prvAddNewTaskToReadyList+0xc8>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4313      	orrs	r3, r2
 800a10a:	4a18      	ldr	r2, [pc, #96]	; (800a16c <prvAddNewTaskToReadyList+0xc8>)
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4a15      	ldr	r2, [pc, #84]	; (800a170 <prvAddNewTaskToReadyList+0xcc>)
 800a11c:	441a      	add	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3304      	adds	r3, #4
 800a122:	4619      	mov	r1, r3
 800a124:	4610      	mov	r0, r2
 800a126:	f7ff fdf5 	bl	8009d14 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a12a:	f000 fd23 	bl	800ab74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a12e:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <prvAddNewTaskToReadyList+0xc0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00e      	beq.n	800a154 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a136:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <prvAddNewTaskToReadyList+0xbc>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a140:	429a      	cmp	r2, r3
 800a142:	d207      	bcs.n	800a154 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a144:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <prvAddNewTaskToReadyList+0xd0>)
 800a146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	24000878 	.word	0x24000878
 800a160:	24000778 	.word	0x24000778
 800a164:	24000884 	.word	0x24000884
 800a168:	24000894 	.word	0x24000894
 800a16c:	24000880 	.word	0x24000880
 800a170:	2400077c 	.word	0x2400077c
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d017      	beq.n	800a1ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a18a:	4b13      	ldr	r3, [pc, #76]	; (800a1d8 <vTaskDelay+0x60>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00a      	beq.n	800a1a8 <vTaskDelay+0x30>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	60bb      	str	r3, [r7, #8]
}
 800a1a4:	bf00      	nop
 800a1a6:	e7fe      	b.n	800a1a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1a8:	f000 f884 	bl	800a2b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fb1e 	bl	800a7f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1b4:	f000 f88c 	bl	800a2d0 <xTaskResumeAll>
 800a1b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d107      	bne.n	800a1d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1c0:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <vTaskDelay+0x64>)
 800a1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	240008a0 	.word	0x240008a0
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08a      	sub	sp, #40	; 0x28
 800a1e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1ee:	463a      	mov	r2, r7
 800a1f0:	1d39      	adds	r1, r7, #4
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7f6 fbfa 	bl	80009f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	9202      	str	r2, [sp, #8]
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	2300      	movs	r3, #0
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	2300      	movs	r3, #0
 800a20c:	460a      	mov	r2, r1
 800a20e:	4921      	ldr	r1, [pc, #132]	; (800a294 <vTaskStartScheduler+0xb4>)
 800a210:	4821      	ldr	r0, [pc, #132]	; (800a298 <vTaskStartScheduler+0xb8>)
 800a212:	f7ff fe06 	bl	8009e22 <xTaskCreateStatic>
 800a216:	4603      	mov	r3, r0
 800a218:	4a20      	ldr	r2, [pc, #128]	; (800a29c <vTaskStartScheduler+0xbc>)
 800a21a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a21c:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <vTaskStartScheduler+0xbc>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a224:	2301      	movs	r3, #1
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	e001      	b.n	800a22e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d11b      	bne.n	800a26c <vTaskStartScheduler+0x8c>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	613b      	str	r3, [r7, #16]
}
 800a246:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a248:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <vTaskStartScheduler+0xc0>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	334c      	adds	r3, #76	; 0x4c
 800a24e:	4a15      	ldr	r2, [pc, #84]	; (800a2a4 <vTaskStartScheduler+0xc4>)
 800a250:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a252:	4b15      	ldr	r3, [pc, #84]	; (800a2a8 <vTaskStartScheduler+0xc8>)
 800a254:	f04f 32ff 	mov.w	r2, #4294967295
 800a258:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a25a:	4b14      	ldr	r3, [pc, #80]	; (800a2ac <vTaskStartScheduler+0xcc>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a260:	4b13      	ldr	r3, [pc, #76]	; (800a2b0 <vTaskStartScheduler+0xd0>)
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a266:	f000 fbb3 	bl	800a9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a26a:	e00e      	b.n	800a28a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a272:	d10a      	bne.n	800a28a <vTaskStartScheduler+0xaa>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60fb      	str	r3, [r7, #12]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <vTaskStartScheduler+0xa8>
}
 800a28a:	bf00      	nop
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	0800c27c 	.word	0x0800c27c
 800a298:	0800a63d 	.word	0x0800a63d
 800a29c:	2400089c 	.word	0x2400089c
 800a2a0:	24000778 	.word	0x24000778
 800a2a4:	240000a4 	.word	0x240000a4
 800a2a8:	24000898 	.word	0x24000898
 800a2ac:	24000884 	.word	0x24000884
 800a2b0:	2400087c 	.word	0x2400087c

0800a2b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2b8:	4b04      	ldr	r3, [pc, #16]	; (800a2cc <vTaskSuspendAll+0x18>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	4a03      	ldr	r2, [pc, #12]	; (800a2cc <vTaskSuspendAll+0x18>)
 800a2c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2c2:	bf00      	nop
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	240008a0 	.word	0x240008a0

0800a2d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2de:	4b41      	ldr	r3, [pc, #260]	; (800a3e4 <xTaskResumeAll+0x114>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10a      	bne.n	800a2fc <xTaskResumeAll+0x2c>
	__asm volatile
 800a2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	603b      	str	r3, [r7, #0]
}
 800a2f8:	bf00      	nop
 800a2fa:	e7fe      	b.n	800a2fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2fc:	f000 fc0a 	bl	800ab14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a300:	4b38      	ldr	r3, [pc, #224]	; (800a3e4 <xTaskResumeAll+0x114>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3b01      	subs	r3, #1
 800a306:	4a37      	ldr	r2, [pc, #220]	; (800a3e4 <xTaskResumeAll+0x114>)
 800a308:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a30a:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <xTaskResumeAll+0x114>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d161      	bne.n	800a3d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a312:	4b35      	ldr	r3, [pc, #212]	; (800a3e8 <xTaskResumeAll+0x118>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d05d      	beq.n	800a3d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a31a:	e02e      	b.n	800a37a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31c:	4b33      	ldr	r3, [pc, #204]	; (800a3ec <xTaskResumeAll+0x11c>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3318      	adds	r3, #24
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff fd50 	bl	8009dce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3304      	adds	r3, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff fd4b 	bl	8009dce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	2201      	movs	r2, #1
 800a33e:	409a      	lsls	r2, r3
 800a340:	4b2b      	ldr	r3, [pc, #172]	; (800a3f0 <xTaskResumeAll+0x120>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4313      	orrs	r3, r2
 800a346:	4a2a      	ldr	r2, [pc, #168]	; (800a3f0 <xTaskResumeAll+0x120>)
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4a27      	ldr	r2, [pc, #156]	; (800a3f4 <xTaskResumeAll+0x124>)
 800a358:	441a      	add	r2, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3304      	adds	r3, #4
 800a35e:	4619      	mov	r1, r3
 800a360:	4610      	mov	r0, r2
 800a362:	f7ff fcd7 	bl	8009d14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <xTaskResumeAll+0x128>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	429a      	cmp	r2, r3
 800a372:	d302      	bcc.n	800a37a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a374:	4b21      	ldr	r3, [pc, #132]	; (800a3fc <xTaskResumeAll+0x12c>)
 800a376:	2201      	movs	r2, #1
 800a378:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a37a:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <xTaskResumeAll+0x11c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1cc      	bne.n	800a31c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a388:	f000 fa12 	bl	800a7b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a38c:	4b1c      	ldr	r3, [pc, #112]	; (800a400 <xTaskResumeAll+0x130>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d010      	beq.n	800a3ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a398:	f000 f836 	bl	800a408 <xTaskIncrementTick>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d002      	beq.n	800a3a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a3a2:	4b16      	ldr	r3, [pc, #88]	; (800a3fc <xTaskResumeAll+0x12c>)
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f1      	bne.n	800a398 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a3b4:	4b12      	ldr	r3, [pc, #72]	; (800a400 <xTaskResumeAll+0x130>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3ba:	4b10      	ldr	r3, [pc, #64]	; (800a3fc <xTaskResumeAll+0x12c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d009      	beq.n	800a3d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <xTaskResumeAll+0x134>)
 800a3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3d6:	f000 fbcd 	bl	800ab74 <vPortExitCritical>

	return xAlreadyYielded;
 800a3da:	68bb      	ldr	r3, [r7, #8]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	240008a0 	.word	0x240008a0
 800a3e8:	24000878 	.word	0x24000878
 800a3ec:	24000838 	.word	0x24000838
 800a3f0:	24000880 	.word	0x24000880
 800a3f4:	2400077c 	.word	0x2400077c
 800a3f8:	24000778 	.word	0x24000778
 800a3fc:	2400088c 	.word	0x2400088c
 800a400:	24000888 	.word	0x24000888
 800a404:	e000ed04 	.word	0xe000ed04

0800a408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a412:	4b4e      	ldr	r3, [pc, #312]	; (800a54c <xTaskIncrementTick+0x144>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f040 808e 	bne.w	800a538 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a41c:	4b4c      	ldr	r3, [pc, #304]	; (800a550 <xTaskIncrementTick+0x148>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a424:	4a4a      	ldr	r2, [pc, #296]	; (800a550 <xTaskIncrementTick+0x148>)
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d120      	bne.n	800a472 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a430:	4b48      	ldr	r3, [pc, #288]	; (800a554 <xTaskIncrementTick+0x14c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00a      	beq.n	800a450 <xTaskIncrementTick+0x48>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	603b      	str	r3, [r7, #0]
}
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <xTaskIncrementTick+0x46>
 800a450:	4b40      	ldr	r3, [pc, #256]	; (800a554 <xTaskIncrementTick+0x14c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	4b40      	ldr	r3, [pc, #256]	; (800a558 <xTaskIncrementTick+0x150>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a3e      	ldr	r2, [pc, #248]	; (800a554 <xTaskIncrementTick+0x14c>)
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	4a3e      	ldr	r2, [pc, #248]	; (800a558 <xTaskIncrementTick+0x150>)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	4b3d      	ldr	r3, [pc, #244]	; (800a55c <xTaskIncrementTick+0x154>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3301      	adds	r3, #1
 800a46a:	4a3c      	ldr	r2, [pc, #240]	; (800a55c <xTaskIncrementTick+0x154>)
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	f000 f99f 	bl	800a7b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a472:	4b3b      	ldr	r3, [pc, #236]	; (800a560 <xTaskIncrementTick+0x158>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d348      	bcc.n	800a50e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a47c:	4b35      	ldr	r3, [pc, #212]	; (800a554 <xTaskIncrementTick+0x14c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d104      	bne.n	800a490 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a486:	4b36      	ldr	r3, [pc, #216]	; (800a560 <xTaskIncrementTick+0x158>)
 800a488:	f04f 32ff 	mov.w	r2, #4294967295
 800a48c:	601a      	str	r2, [r3, #0]
					break;
 800a48e:	e03e      	b.n	800a50e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a490:	4b30      	ldr	r3, [pc, #192]	; (800a554 <xTaskIncrementTick+0x14c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d203      	bcs.n	800a4b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4a8:	4a2d      	ldr	r2, [pc, #180]	; (800a560 <xTaskIncrementTick+0x158>)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4ae:	e02e      	b.n	800a50e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7ff fc8a 	bl	8009dce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d004      	beq.n	800a4cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	3318      	adds	r3, #24
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7ff fc81 	bl	8009dce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	4b23      	ldr	r3, [pc, #140]	; (800a564 <xTaskIncrementTick+0x15c>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	4a22      	ldr	r2, [pc, #136]	; (800a564 <xTaskIncrementTick+0x15c>)
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4a1f      	ldr	r2, [pc, #124]	; (800a568 <xTaskIncrementTick+0x160>)
 800a4ec:	441a      	add	r2, r3
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f7ff fc0d 	bl	8009d14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fe:	4b1b      	ldr	r3, [pc, #108]	; (800a56c <xTaskIncrementTick+0x164>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	429a      	cmp	r2, r3
 800a506:	d3b9      	bcc.n	800a47c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a50c:	e7b6      	b.n	800a47c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a50e:	4b17      	ldr	r3, [pc, #92]	; (800a56c <xTaskIncrementTick+0x164>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a514:	4914      	ldr	r1, [pc, #80]	; (800a568 <xTaskIncrementTick+0x160>)
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	440b      	add	r3, r1
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d901      	bls.n	800a52a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a526:	2301      	movs	r3, #1
 800a528:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a52a:	4b11      	ldr	r3, [pc, #68]	; (800a570 <xTaskIncrementTick+0x168>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d007      	beq.n	800a542 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a532:	2301      	movs	r3, #1
 800a534:	617b      	str	r3, [r7, #20]
 800a536:	e004      	b.n	800a542 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a538:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <xTaskIncrementTick+0x16c>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	4a0d      	ldr	r2, [pc, #52]	; (800a574 <xTaskIncrementTick+0x16c>)
 800a540:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a542:	697b      	ldr	r3, [r7, #20]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	240008a0 	.word	0x240008a0
 800a550:	2400087c 	.word	0x2400087c
 800a554:	24000830 	.word	0x24000830
 800a558:	24000834 	.word	0x24000834
 800a55c:	24000890 	.word	0x24000890
 800a560:	24000898 	.word	0x24000898
 800a564:	24000880 	.word	0x24000880
 800a568:	2400077c 	.word	0x2400077c
 800a56c:	24000778 	.word	0x24000778
 800a570:	2400088c 	.word	0x2400088c
 800a574:	24000888 	.word	0x24000888

0800a578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a578:	b480      	push	{r7}
 800a57a:	b087      	sub	sp, #28
 800a57c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a57e:	4b29      	ldr	r3, [pc, #164]	; (800a624 <vTaskSwitchContext+0xac>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a586:	4b28      	ldr	r3, [pc, #160]	; (800a628 <vTaskSwitchContext+0xb0>)
 800a588:	2201      	movs	r2, #1
 800a58a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a58c:	e044      	b.n	800a618 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a58e:	4b26      	ldr	r3, [pc, #152]	; (800a628 <vTaskSwitchContext+0xb0>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a594:	4b25      	ldr	r3, [pc, #148]	; (800a62c <vTaskSwitchContext+0xb4>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	fab3 f383 	clz	r3, r3
 800a5a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
 800a5a4:	f1c3 031f 	rsb	r3, r3, #31
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	4921      	ldr	r1, [pc, #132]	; (800a630 <vTaskSwitchContext+0xb8>)
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	607b      	str	r3, [r7, #4]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <vTaskSwitchContext+0x5a>
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4a14      	ldr	r2, [pc, #80]	; (800a630 <vTaskSwitchContext+0xb8>)
 800a5e0:	4413      	add	r3, r2
 800a5e2:	613b      	str	r3, [r7, #16]
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	605a      	str	r2, [r3, #4]
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d104      	bne.n	800a604 <vTaskSwitchContext+0x8c>
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	605a      	str	r2, [r3, #4]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	4a0a      	ldr	r2, [pc, #40]	; (800a634 <vTaskSwitchContext+0xbc>)
 800a60c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <vTaskSwitchContext+0xbc>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	334c      	adds	r3, #76	; 0x4c
 800a614:	4a08      	ldr	r2, [pc, #32]	; (800a638 <vTaskSwitchContext+0xc0>)
 800a616:	6013      	str	r3, [r2, #0]
}
 800a618:	bf00      	nop
 800a61a:	371c      	adds	r7, #28
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	240008a0 	.word	0x240008a0
 800a628:	2400088c 	.word	0x2400088c
 800a62c:	24000880 	.word	0x24000880
 800a630:	2400077c 	.word	0x2400077c
 800a634:	24000778 	.word	0x24000778
 800a638:	240000a4 	.word	0x240000a4

0800a63c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a644:	f000 f852 	bl	800a6ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a648:	4b06      	ldr	r3, [pc, #24]	; (800a664 <prvIdleTask+0x28>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d9f9      	bls.n	800a644 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a650:	4b05      	ldr	r3, [pc, #20]	; (800a668 <prvIdleTask+0x2c>)
 800a652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a660:	e7f0      	b.n	800a644 <prvIdleTask+0x8>
 800a662:	bf00      	nop
 800a664:	2400077c 	.word	0x2400077c
 800a668:	e000ed04 	.word	0xe000ed04

0800a66c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a672:	2300      	movs	r3, #0
 800a674:	607b      	str	r3, [r7, #4]
 800a676:	e00c      	b.n	800a692 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	4613      	mov	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4a12      	ldr	r2, [pc, #72]	; (800a6cc <prvInitialiseTaskLists+0x60>)
 800a684:	4413      	add	r3, r2
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fb17 	bl	8009cba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3301      	adds	r3, #1
 800a690:	607b      	str	r3, [r7, #4]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b06      	cmp	r3, #6
 800a696:	d9ef      	bls.n	800a678 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a698:	480d      	ldr	r0, [pc, #52]	; (800a6d0 <prvInitialiseTaskLists+0x64>)
 800a69a:	f7ff fb0e 	bl	8009cba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a69e:	480d      	ldr	r0, [pc, #52]	; (800a6d4 <prvInitialiseTaskLists+0x68>)
 800a6a0:	f7ff fb0b 	bl	8009cba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6a4:	480c      	ldr	r0, [pc, #48]	; (800a6d8 <prvInitialiseTaskLists+0x6c>)
 800a6a6:	f7ff fb08 	bl	8009cba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6aa:	480c      	ldr	r0, [pc, #48]	; (800a6dc <prvInitialiseTaskLists+0x70>)
 800a6ac:	f7ff fb05 	bl	8009cba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6b0:	480b      	ldr	r0, [pc, #44]	; (800a6e0 <prvInitialiseTaskLists+0x74>)
 800a6b2:	f7ff fb02 	bl	8009cba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6b6:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <prvInitialiseTaskLists+0x78>)
 800a6b8:	4a05      	ldr	r2, [pc, #20]	; (800a6d0 <prvInitialiseTaskLists+0x64>)
 800a6ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6bc:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <prvInitialiseTaskLists+0x7c>)
 800a6be:	4a05      	ldr	r2, [pc, #20]	; (800a6d4 <prvInitialiseTaskLists+0x68>)
 800a6c0:	601a      	str	r2, [r3, #0]
}
 800a6c2:	bf00      	nop
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	2400077c 	.word	0x2400077c
 800a6d0:	24000808 	.word	0x24000808
 800a6d4:	2400081c 	.word	0x2400081c
 800a6d8:	24000838 	.word	0x24000838
 800a6dc:	2400084c 	.word	0x2400084c
 800a6e0:	24000864 	.word	0x24000864
 800a6e4:	24000830 	.word	0x24000830
 800a6e8:	24000834 	.word	0x24000834

0800a6ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6f2:	e019      	b.n	800a728 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6f4:	f000 fa0e 	bl	800ab14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f8:	4b10      	ldr	r3, [pc, #64]	; (800a73c <prvCheckTasksWaitingTermination+0x50>)
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3304      	adds	r3, #4
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff fb62 	bl	8009dce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a70a:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <prvCheckTasksWaitingTermination+0x54>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3b01      	subs	r3, #1
 800a710:	4a0b      	ldr	r2, [pc, #44]	; (800a740 <prvCheckTasksWaitingTermination+0x54>)
 800a712:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a714:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <prvCheckTasksWaitingTermination+0x58>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3b01      	subs	r3, #1
 800a71a:	4a0a      	ldr	r2, [pc, #40]	; (800a744 <prvCheckTasksWaitingTermination+0x58>)
 800a71c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a71e:	f000 fa29 	bl	800ab74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f810 	bl	800a748 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a728:	4b06      	ldr	r3, [pc, #24]	; (800a744 <prvCheckTasksWaitingTermination+0x58>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1e1      	bne.n	800a6f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	2400084c 	.word	0x2400084c
 800a740:	24000878 	.word	0x24000878
 800a744:	24000860 	.word	0x24000860

0800a748 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	334c      	adds	r3, #76	; 0x4c
 800a754:	4618      	mov	r0, r3
 800a756:	f000 ff05 	bl	800b564 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a760:	2b00      	cmp	r3, #0
 800a762:	d108      	bne.n	800a776 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fb81 	bl	800ae70 <vPortFree>
				vPortFree( pxTCB );
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fb7e 	bl	800ae70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a774:	e018      	b.n	800a7a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d103      	bne.n	800a788 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fb75 	bl	800ae70 <vPortFree>
	}
 800a786:	e00f      	b.n	800a7a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d00a      	beq.n	800a7a8 <prvDeleteTCB+0x60>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	60fb      	str	r3, [r7, #12]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <prvDeleteTCB+0x5e>
	}
 800a7a8:	bf00      	nop
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <prvResetNextTaskUnblockTime+0x38>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <prvResetNextTaskUnblockTime+0x3c>)
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7c8:	e008      	b.n	800a7dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ca:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <prvResetNextTaskUnblockTime+0x38>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	4a04      	ldr	r2, [pc, #16]	; (800a7ec <prvResetNextTaskUnblockTime+0x3c>)
 800a7da:	6013      	str	r3, [r2, #0]
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	24000830 	.word	0x24000830
 800a7ec:	24000898 	.word	0x24000898

0800a7f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7fa:	4b29      	ldr	r3, [pc, #164]	; (800a8a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a800:	4b28      	ldr	r3, [pc, #160]	; (800a8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3304      	adds	r3, #4
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fae1 	bl	8009dce <uxListRemove>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10b      	bne.n	800a82a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a812:	4b24      	ldr	r3, [pc, #144]	; (800a8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	2201      	movs	r2, #1
 800a81a:	fa02 f303 	lsl.w	r3, r2, r3
 800a81e:	43da      	mvns	r2, r3
 800a820:	4b21      	ldr	r3, [pc, #132]	; (800a8a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4013      	ands	r3, r2
 800a826:	4a20      	ldr	r2, [pc, #128]	; (800a8a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a828:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a830:	d10a      	bne.n	800a848 <prvAddCurrentTaskToDelayedList+0x58>
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d007      	beq.n	800a848 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a838:	4b1a      	ldr	r3, [pc, #104]	; (800a8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	481a      	ldr	r0, [pc, #104]	; (800a8ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800a842:	f7ff fa67 	bl	8009d14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a846:	e026      	b.n	800a896 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4413      	add	r3, r2
 800a84e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a850:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d209      	bcs.n	800a874 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a860:	4b13      	ldr	r3, [pc, #76]	; (800a8b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3304      	adds	r3, #4
 800a86a:	4619      	mov	r1, r3
 800a86c:	4610      	mov	r0, r2
 800a86e:	f7ff fa75 	bl	8009d5c <vListInsert>
}
 800a872:	e010      	b.n	800a896 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a874:	4b0f      	ldr	r3, [pc, #60]	; (800a8b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	4b0a      	ldr	r3, [pc, #40]	; (800a8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3304      	adds	r3, #4
 800a87e:	4619      	mov	r1, r3
 800a880:	4610      	mov	r0, r2
 800a882:	f7ff fa6b 	bl	8009d5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a886:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d202      	bcs.n	800a896 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a890:	4a09      	ldr	r2, [pc, #36]	; (800a8b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6013      	str	r3, [r2, #0]
}
 800a896:	bf00      	nop
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	2400087c 	.word	0x2400087c
 800a8a4:	24000778 	.word	0x24000778
 800a8a8:	24000880 	.word	0x24000880
 800a8ac:	24000864 	.word	0x24000864
 800a8b0:	24000834 	.word	0x24000834
 800a8b4:	24000830 	.word	0x24000830
 800a8b8:	24000898 	.word	0x24000898

0800a8bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	3b04      	subs	r3, #4
 800a8cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3b04      	subs	r3, #4
 800a8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	f023 0201 	bic.w	r2, r3, #1
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3b04      	subs	r3, #4
 800a8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8ec:	4a0c      	ldr	r2, [pc, #48]	; (800a920 <pxPortInitialiseStack+0x64>)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3b14      	subs	r3, #20
 800a8f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3b04      	subs	r3, #4
 800a902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f06f 0202 	mvn.w	r2, #2
 800a90a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3b20      	subs	r3, #32
 800a910:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a912:	68fb      	ldr	r3, [r7, #12]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	0800a925 	.word	0x0800a925

0800a924 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a92e:	4b12      	ldr	r3, [pc, #72]	; (800a978 <prvTaskExitError+0x54>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a936:	d00a      	beq.n	800a94e <prvTaskExitError+0x2a>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	60fb      	str	r3, [r7, #12]
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <prvTaskExitError+0x28>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	60bb      	str	r3, [r7, #8]
}
 800a960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a962:	bf00      	nop
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0fc      	beq.n	800a964 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	240000a0 	.word	0x240000a0
 800a97c:	00000000 	.word	0x00000000

0800a980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a980:	4b07      	ldr	r3, [pc, #28]	; (800a9a0 <pxCurrentTCBConst2>)
 800a982:	6819      	ldr	r1, [r3, #0]
 800a984:	6808      	ldr	r0, [r1, #0]
 800a986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98a:	f380 8809 	msr	PSP, r0
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f04f 0000 	mov.w	r0, #0
 800a996:	f380 8811 	msr	BASEPRI, r0
 800a99a:	4770      	bx	lr
 800a99c:	f3af 8000 	nop.w

0800a9a0 <pxCurrentTCBConst2>:
 800a9a0:	24000778 	.word	0x24000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop

0800a9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9a8:	4808      	ldr	r0, [pc, #32]	; (800a9cc <prvPortStartFirstTask+0x24>)
 800a9aa:	6800      	ldr	r0, [r0, #0]
 800a9ac:	6800      	ldr	r0, [r0, #0]
 800a9ae:	f380 8808 	msr	MSP, r0
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8814 	msr	CONTROL, r0
 800a9ba:	b662      	cpsie	i
 800a9bc:	b661      	cpsie	f
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	df00      	svc	0
 800a9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9ca:	bf00      	nop
 800a9cc:	e000ed08 	.word	0xe000ed08

0800a9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9d6:	4b46      	ldr	r3, [pc, #280]	; (800aaf0 <xPortStartScheduler+0x120>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a46      	ldr	r2, [pc, #280]	; (800aaf4 <xPortStartScheduler+0x124>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d10a      	bne.n	800a9f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	613b      	str	r3, [r7, #16]
}
 800a9f2:	bf00      	nop
 800a9f4:	e7fe      	b.n	800a9f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a9f6:	4b3e      	ldr	r3, [pc, #248]	; (800aaf0 <xPortStartScheduler+0x120>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a3f      	ldr	r2, [pc, #252]	; (800aaf8 <xPortStartScheduler+0x128>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d10a      	bne.n	800aa16 <xPortStartScheduler+0x46>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	60fb      	str	r3, [r7, #12]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa16:	4b39      	ldr	r3, [pc, #228]	; (800aafc <xPortStartScheduler+0x12c>)
 800aa18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	22ff      	movs	r2, #255	; 0xff
 800aa26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	4b31      	ldr	r3, [pc, #196]	; (800ab00 <xPortStartScheduler+0x130>)
 800aa3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa3e:	4b31      	ldr	r3, [pc, #196]	; (800ab04 <xPortStartScheduler+0x134>)
 800aa40:	2207      	movs	r2, #7
 800aa42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa44:	e009      	b.n	800aa5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa46:	4b2f      	ldr	r3, [pc, #188]	; (800ab04 <xPortStartScheduler+0x134>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	4a2d      	ldr	r2, [pc, #180]	; (800ab04 <xPortStartScheduler+0x134>)
 800aa4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa5a:	78fb      	ldrb	r3, [r7, #3]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa62:	2b80      	cmp	r3, #128	; 0x80
 800aa64:	d0ef      	beq.n	800aa46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa66:	4b27      	ldr	r3, [pc, #156]	; (800ab04 <xPortStartScheduler+0x134>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f1c3 0307 	rsb	r3, r3, #7
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d00a      	beq.n	800aa88 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	60bb      	str	r3, [r7, #8]
}
 800aa84:	bf00      	nop
 800aa86:	e7fe      	b.n	800aa86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa88:	4b1e      	ldr	r3, [pc, #120]	; (800ab04 <xPortStartScheduler+0x134>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	4a1d      	ldr	r2, [pc, #116]	; (800ab04 <xPortStartScheduler+0x134>)
 800aa90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa92:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <xPortStartScheduler+0x134>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa9a:	4a1a      	ldr	r2, [pc, #104]	; (800ab04 <xPortStartScheduler+0x134>)
 800aa9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aaa6:	4b18      	ldr	r3, [pc, #96]	; (800ab08 <xPortStartScheduler+0x138>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a17      	ldr	r2, [pc, #92]	; (800ab08 <xPortStartScheduler+0x138>)
 800aaac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aab2:	4b15      	ldr	r3, [pc, #84]	; (800ab08 <xPortStartScheduler+0x138>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a14      	ldr	r2, [pc, #80]	; (800ab08 <xPortStartScheduler+0x138>)
 800aab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aabc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aabe:	f000 f8dd 	bl	800ac7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aac2:	4b12      	ldr	r3, [pc, #72]	; (800ab0c <xPortStartScheduler+0x13c>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aac8:	f000 f8fc 	bl	800acc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aacc:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <xPortStartScheduler+0x140>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a0f      	ldr	r2, [pc, #60]	; (800ab10 <xPortStartScheduler+0x140>)
 800aad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aad8:	f7ff ff66 	bl	800a9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aadc:	f7ff fd4c 	bl	800a578 <vTaskSwitchContext>
	prvTaskExitError();
 800aae0:	f7ff ff20 	bl	800a924 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	e000ed00 	.word	0xe000ed00
 800aaf4:	410fc271 	.word	0x410fc271
 800aaf8:	410fc270 	.word	0x410fc270
 800aafc:	e000e400 	.word	0xe000e400
 800ab00:	240008a4 	.word	0x240008a4
 800ab04:	240008a8 	.word	0x240008a8
 800ab08:	e000ed20 	.word	0xe000ed20
 800ab0c:	240000a0 	.word	0x240000a0
 800ab10:	e000ef34 	.word	0xe000ef34

0800ab14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	607b      	str	r3, [r7, #4]
}
 800ab2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab2e:	4b0f      	ldr	r3, [pc, #60]	; (800ab6c <vPortEnterCritical+0x58>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	4a0d      	ldr	r2, [pc, #52]	; (800ab6c <vPortEnterCritical+0x58>)
 800ab36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab38:	4b0c      	ldr	r3, [pc, #48]	; (800ab6c <vPortEnterCritical+0x58>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d10f      	bne.n	800ab60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <vPortEnterCritical+0x5c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	603b      	str	r3, [r7, #0]
}
 800ab5c:	bf00      	nop
 800ab5e:	e7fe      	b.n	800ab5e <vPortEnterCritical+0x4a>
	}
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	240000a0 	.word	0x240000a0
 800ab70:	e000ed04 	.word	0xe000ed04

0800ab74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab7a:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <vPortExitCritical+0x50>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10a      	bne.n	800ab98 <vPortExitCritical+0x24>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	607b      	str	r3, [r7, #4]
}
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab98:	4b0a      	ldr	r3, [pc, #40]	; (800abc4 <vPortExitCritical+0x50>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	4a09      	ldr	r2, [pc, #36]	; (800abc4 <vPortExitCritical+0x50>)
 800aba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aba2:	4b08      	ldr	r3, [pc, #32]	; (800abc4 <vPortExitCritical+0x50>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d105      	bne.n	800abb6 <vPortExitCritical+0x42>
 800abaa:	2300      	movs	r3, #0
 800abac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	240000a0 	.word	0x240000a0
	...

0800abd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abd0:	f3ef 8009 	mrs	r0, PSP
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	4b15      	ldr	r3, [pc, #84]	; (800ac30 <pxCurrentTCBConst>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	f01e 0f10 	tst.w	lr, #16
 800abe0:	bf08      	it	eq
 800abe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800abe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abea:	6010      	str	r0, [r2, #0]
 800abec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800abf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abf4:	f380 8811 	msr	BASEPRI, r0
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f7ff fcba 	bl	800a578 <vTaskSwitchContext>
 800ac04:	f04f 0000 	mov.w	r0, #0
 800ac08:	f380 8811 	msr	BASEPRI, r0
 800ac0c:	bc09      	pop	{r0, r3}
 800ac0e:	6819      	ldr	r1, [r3, #0]
 800ac10:	6808      	ldr	r0, [r1, #0]
 800ac12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac16:	f01e 0f10 	tst.w	lr, #16
 800ac1a:	bf08      	it	eq
 800ac1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac20:	f380 8809 	msr	PSP, r0
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	f3af 8000 	nop.w

0800ac30 <pxCurrentTCBConst>:
 800ac30:	24000778 	.word	0x24000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac34:	bf00      	nop
 800ac36:	bf00      	nop

0800ac38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	607b      	str	r3, [r7, #4]
}
 800ac50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac52:	f7ff fbd9 	bl	800a408 <xTaskIncrementTick>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d003      	beq.n	800ac64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac5c:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <SysTick_Handler+0x40>)
 800ac5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	2300      	movs	r3, #0
 800ac66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f383 8811 	msr	BASEPRI, r3
}
 800ac6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac70:	bf00      	nop
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	e000ed04 	.word	0xe000ed04

0800ac7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac80:	4b0b      	ldr	r3, [pc, #44]	; (800acb0 <vPortSetupTimerInterrupt+0x34>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac86:	4b0b      	ldr	r3, [pc, #44]	; (800acb4 <vPortSetupTimerInterrupt+0x38>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac8c:	4b0a      	ldr	r3, [pc, #40]	; (800acb8 <vPortSetupTimerInterrupt+0x3c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a0a      	ldr	r2, [pc, #40]	; (800acbc <vPortSetupTimerInterrupt+0x40>)
 800ac92:	fba2 2303 	umull	r2, r3, r2, r3
 800ac96:	099b      	lsrs	r3, r3, #6
 800ac98:	4a09      	ldr	r2, [pc, #36]	; (800acc0 <vPortSetupTimerInterrupt+0x44>)
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac9e:	4b04      	ldr	r3, [pc, #16]	; (800acb0 <vPortSetupTimerInterrupt+0x34>)
 800aca0:	2207      	movs	r2, #7
 800aca2:	601a      	str	r2, [r3, #0]
}
 800aca4:	bf00      	nop
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	e000e010 	.word	0xe000e010
 800acb4:	e000e018 	.word	0xe000e018
 800acb8:	24000090 	.word	0x24000090
 800acbc:	10624dd3 	.word	0x10624dd3
 800acc0:	e000e014 	.word	0xe000e014

0800acc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800acc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800acd4 <vPortEnableVFP+0x10>
 800acc8:	6801      	ldr	r1, [r0, #0]
 800acca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acce:	6001      	str	r1, [r0, #0]
 800acd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800acd2:	bf00      	nop
 800acd4:	e000ed88 	.word	0xe000ed88

0800acd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08a      	sub	sp, #40	; 0x28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ace4:	f7ff fae6 	bl	800a2b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ace8:	4b5b      	ldr	r3, [pc, #364]	; (800ae58 <pvPortMalloc+0x180>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acf0:	f000 f920 	bl	800af34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acf4:	4b59      	ldr	r3, [pc, #356]	; (800ae5c <pvPortMalloc+0x184>)
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4013      	ands	r3, r2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f040 8093 	bne.w	800ae28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01d      	beq.n	800ad44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad08:	2208      	movs	r2, #8
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d014      	beq.n	800ad44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f023 0307 	bic.w	r3, r3, #7
 800ad20:	3308      	adds	r3, #8
 800ad22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <pvPortMalloc+0x6c>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	617b      	str	r3, [r7, #20]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d06e      	beq.n	800ae28 <pvPortMalloc+0x150>
 800ad4a:	4b45      	ldr	r3, [pc, #276]	; (800ae60 <pvPortMalloc+0x188>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d869      	bhi.n	800ae28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad54:	4b43      	ldr	r3, [pc, #268]	; (800ae64 <pvPortMalloc+0x18c>)
 800ad56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad58:	4b42      	ldr	r3, [pc, #264]	; (800ae64 <pvPortMalloc+0x18c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad5e:	e004      	b.n	800ad6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d903      	bls.n	800ad7c <pvPortMalloc+0xa4>
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1f1      	bne.n	800ad60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad7c:	4b36      	ldr	r3, [pc, #216]	; (800ae58 <pvPortMalloc+0x180>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d050      	beq.n	800ae28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2208      	movs	r2, #8
 800ad8c:	4413      	add	r3, r2
 800ad8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	2308      	movs	r3, #8
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d91f      	bls.n	800ade8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ada8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4413      	add	r3, r2
 800adae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	f003 0307 	and.w	r3, r3, #7
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <pvPortMalloc+0xf8>
	__asm volatile
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	613b      	str	r3, [r7, #16]
}
 800adcc:	bf00      	nop
 800adce:	e7fe      	b.n	800adce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	1ad2      	subs	r2, r2, r3
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ade2:	69b8      	ldr	r0, [r7, #24]
 800ade4:	f000 f908 	bl	800aff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ade8:	4b1d      	ldr	r3, [pc, #116]	; (800ae60 <pvPortMalloc+0x188>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	4a1b      	ldr	r2, [pc, #108]	; (800ae60 <pvPortMalloc+0x188>)
 800adf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adf6:	4b1a      	ldr	r3, [pc, #104]	; (800ae60 <pvPortMalloc+0x188>)
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b1b      	ldr	r3, [pc, #108]	; (800ae68 <pvPortMalloc+0x190>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d203      	bcs.n	800ae0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae02:	4b17      	ldr	r3, [pc, #92]	; (800ae60 <pvPortMalloc+0x188>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a18      	ldr	r2, [pc, #96]	; (800ae68 <pvPortMalloc+0x190>)
 800ae08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	4b13      	ldr	r3, [pc, #76]	; (800ae5c <pvPortMalloc+0x184>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	431a      	orrs	r2, r3
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae1e:	4b13      	ldr	r3, [pc, #76]	; (800ae6c <pvPortMalloc+0x194>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	4a11      	ldr	r2, [pc, #68]	; (800ae6c <pvPortMalloc+0x194>)
 800ae26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae28:	f7ff fa52 	bl	800a2d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	f003 0307 	and.w	r3, r3, #7
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <pvPortMalloc+0x174>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	60fb      	str	r3, [r7, #12]
}
 800ae48:	bf00      	nop
 800ae4a:	e7fe      	b.n	800ae4a <pvPortMalloc+0x172>
	return pvReturn;
 800ae4c:	69fb      	ldr	r3, [r7, #28]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3728      	adds	r7, #40	; 0x28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	240044b4 	.word	0x240044b4
 800ae5c:	240044c8 	.word	0x240044c8
 800ae60:	240044b8 	.word	0x240044b8
 800ae64:	240044ac 	.word	0x240044ac
 800ae68:	240044bc 	.word	0x240044bc
 800ae6c:	240044c0 	.word	0x240044c0

0800ae70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d04d      	beq.n	800af1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae82:	2308      	movs	r3, #8
 800ae84:	425b      	negs	r3, r3
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	4413      	add	r3, r2
 800ae8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	4b24      	ldr	r3, [pc, #144]	; (800af28 <vPortFree+0xb8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4013      	ands	r3, r2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10a      	bne.n	800aeb4 <vPortFree+0x44>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	60fb      	str	r3, [r7, #12]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00a      	beq.n	800aed2 <vPortFree+0x62>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	60bb      	str	r3, [r7, #8]
}
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	4b14      	ldr	r3, [pc, #80]	; (800af28 <vPortFree+0xb8>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4013      	ands	r3, r2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d01e      	beq.n	800af1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d11a      	bne.n	800af1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	4b0e      	ldr	r3, [pc, #56]	; (800af28 <vPortFree+0xb8>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	43db      	mvns	r3, r3
 800aef2:	401a      	ands	r2, r3
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aef8:	f7ff f9dc 	bl	800a2b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <vPortFree+0xbc>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4413      	add	r3, r2
 800af06:	4a09      	ldr	r2, [pc, #36]	; (800af2c <vPortFree+0xbc>)
 800af08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af0a:	6938      	ldr	r0, [r7, #16]
 800af0c:	f000 f874 	bl	800aff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af10:	4b07      	ldr	r3, [pc, #28]	; (800af30 <vPortFree+0xc0>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	4a06      	ldr	r2, [pc, #24]	; (800af30 <vPortFree+0xc0>)
 800af18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af1a:	f7ff f9d9 	bl	800a2d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af1e:	bf00      	nop
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	240044c8 	.word	0x240044c8
 800af2c:	240044b8 	.word	0x240044b8
 800af30:	240044c4 	.word	0x240044c4

0800af34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800af3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af40:	4b27      	ldr	r3, [pc, #156]	; (800afe0 <prvHeapInit+0xac>)
 800af42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f003 0307 	and.w	r3, r3, #7
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00c      	beq.n	800af68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3307      	adds	r3, #7
 800af52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	4a1f      	ldr	r2, [pc, #124]	; (800afe0 <prvHeapInit+0xac>)
 800af64:	4413      	add	r3, r2
 800af66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af6c:	4a1d      	ldr	r2, [pc, #116]	; (800afe4 <prvHeapInit+0xb0>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af72:	4b1c      	ldr	r3, [pc, #112]	; (800afe4 <prvHeapInit+0xb0>)
 800af74:	2200      	movs	r2, #0
 800af76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	4413      	add	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af80:	2208      	movs	r2, #8
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	1a9b      	subs	r3, r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4a15      	ldr	r2, [pc, #84]	; (800afe8 <prvHeapInit+0xb4>)
 800af94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af96:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <prvHeapInit+0xb4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2200      	movs	r2, #0
 800af9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af9e:	4b12      	ldr	r3, [pc, #72]	; (800afe8 <prvHeapInit+0xb4>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2200      	movs	r2, #0
 800afa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afb4:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <prvHeapInit+0xb4>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	4a0a      	ldr	r2, [pc, #40]	; (800afec <prvHeapInit+0xb8>)
 800afc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4a09      	ldr	r2, [pc, #36]	; (800aff0 <prvHeapInit+0xbc>)
 800afca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afcc:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <prvHeapInit+0xc0>)
 800afce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afd2:	601a      	str	r2, [r3, #0]
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	240008ac 	.word	0x240008ac
 800afe4:	240044ac 	.word	0x240044ac
 800afe8:	240044b4 	.word	0x240044b4
 800afec:	240044bc 	.word	0x240044bc
 800aff0:	240044b8 	.word	0x240044b8
 800aff4:	240044c8 	.word	0x240044c8

0800aff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b000:	4b28      	ldr	r3, [pc, #160]	; (800b0a4 <prvInsertBlockIntoFreeList+0xac>)
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	e002      	b.n	800b00c <prvInsertBlockIntoFreeList+0x14>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d8f7      	bhi.n	800b006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	4413      	add	r3, r2
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d108      	bne.n	800b03a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	441a      	add	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	441a      	add	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d118      	bne.n	800b080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	429a      	cmp	r2, r3
 800b058:	d00d      	beq.n	800b076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	441a      	add	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	e008      	b.n	800b088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b076:	4b0c      	ldr	r3, [pc, #48]	; (800b0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	e003      	b.n	800b088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d002      	beq.n	800b096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b096:	bf00      	nop
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	240044ac 	.word	0x240044ac
 800b0a8:	240044b4 	.word	0x240044b4

0800b0ac <__errno>:
 800b0ac:	4b01      	ldr	r3, [pc, #4]	; (800b0b4 <__errno+0x8>)
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	240000a4 	.word	0x240000a4

0800b0b8 <std>:
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	b510      	push	{r4, lr}
 800b0bc:	4604      	mov	r4, r0
 800b0be:	e9c0 3300 	strd	r3, r3, [r0]
 800b0c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0c6:	6083      	str	r3, [r0, #8]
 800b0c8:	8181      	strh	r1, [r0, #12]
 800b0ca:	6643      	str	r3, [r0, #100]	; 0x64
 800b0cc:	81c2      	strh	r2, [r0, #14]
 800b0ce:	6183      	str	r3, [r0, #24]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	2208      	movs	r2, #8
 800b0d4:	305c      	adds	r0, #92	; 0x5c
 800b0d6:	f000 f90c 	bl	800b2f2 <memset>
 800b0da:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <std+0x38>)
 800b0dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b0de:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <std+0x3c>)
 800b0e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0e2:	4b05      	ldr	r3, [pc, #20]	; (800b0f8 <std+0x40>)
 800b0e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0e6:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <std+0x44>)
 800b0e8:	6224      	str	r4, [r4, #32]
 800b0ea:	6323      	str	r3, [r4, #48]	; 0x30
 800b0ec:	bd10      	pop	{r4, pc}
 800b0ee:	bf00      	nop
 800b0f0:	0800b63d 	.word	0x0800b63d
 800b0f4:	0800b65f 	.word	0x0800b65f
 800b0f8:	0800b697 	.word	0x0800b697
 800b0fc:	0800b6bb 	.word	0x0800b6bb

0800b100 <_cleanup_r>:
 800b100:	4901      	ldr	r1, [pc, #4]	; (800b108 <_cleanup_r+0x8>)
 800b102:	f000 b8af 	b.w	800b264 <_fwalk_reent>
 800b106:	bf00      	nop
 800b108:	0800b995 	.word	0x0800b995

0800b10c <__sfmoreglue>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	2268      	movs	r2, #104	; 0x68
 800b110:	1e4d      	subs	r5, r1, #1
 800b112:	4355      	muls	r5, r2
 800b114:	460e      	mov	r6, r1
 800b116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b11a:	f000 f913 	bl	800b344 <_malloc_r>
 800b11e:	4604      	mov	r4, r0
 800b120:	b140      	cbz	r0, 800b134 <__sfmoreglue+0x28>
 800b122:	2100      	movs	r1, #0
 800b124:	e9c0 1600 	strd	r1, r6, [r0]
 800b128:	300c      	adds	r0, #12
 800b12a:	60a0      	str	r0, [r4, #8]
 800b12c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b130:	f000 f8df 	bl	800b2f2 <memset>
 800b134:	4620      	mov	r0, r4
 800b136:	bd70      	pop	{r4, r5, r6, pc}

0800b138 <__sfp_lock_acquire>:
 800b138:	4801      	ldr	r0, [pc, #4]	; (800b140 <__sfp_lock_acquire+0x8>)
 800b13a:	f000 b8d8 	b.w	800b2ee <__retarget_lock_acquire_recursive>
 800b13e:	bf00      	nop
 800b140:	240044cd 	.word	0x240044cd

0800b144 <__sfp_lock_release>:
 800b144:	4801      	ldr	r0, [pc, #4]	; (800b14c <__sfp_lock_release+0x8>)
 800b146:	f000 b8d3 	b.w	800b2f0 <__retarget_lock_release_recursive>
 800b14a:	bf00      	nop
 800b14c:	240044cd 	.word	0x240044cd

0800b150 <__sinit_lock_acquire>:
 800b150:	4801      	ldr	r0, [pc, #4]	; (800b158 <__sinit_lock_acquire+0x8>)
 800b152:	f000 b8cc 	b.w	800b2ee <__retarget_lock_acquire_recursive>
 800b156:	bf00      	nop
 800b158:	240044ce 	.word	0x240044ce

0800b15c <__sinit_lock_release>:
 800b15c:	4801      	ldr	r0, [pc, #4]	; (800b164 <__sinit_lock_release+0x8>)
 800b15e:	f000 b8c7 	b.w	800b2f0 <__retarget_lock_release_recursive>
 800b162:	bf00      	nop
 800b164:	240044ce 	.word	0x240044ce

0800b168 <__sinit>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	4604      	mov	r4, r0
 800b16c:	f7ff fff0 	bl	800b150 <__sinit_lock_acquire>
 800b170:	69a3      	ldr	r3, [r4, #24]
 800b172:	b11b      	cbz	r3, 800b17c <__sinit+0x14>
 800b174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b178:	f7ff bff0 	b.w	800b15c <__sinit_lock_release>
 800b17c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b180:	6523      	str	r3, [r4, #80]	; 0x50
 800b182:	4b13      	ldr	r3, [pc, #76]	; (800b1d0 <__sinit+0x68>)
 800b184:	4a13      	ldr	r2, [pc, #76]	; (800b1d4 <__sinit+0x6c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	62a2      	str	r2, [r4, #40]	; 0x28
 800b18a:	42a3      	cmp	r3, r4
 800b18c:	bf04      	itt	eq
 800b18e:	2301      	moveq	r3, #1
 800b190:	61a3      	streq	r3, [r4, #24]
 800b192:	4620      	mov	r0, r4
 800b194:	f000 f820 	bl	800b1d8 <__sfp>
 800b198:	6060      	str	r0, [r4, #4]
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 f81c 	bl	800b1d8 <__sfp>
 800b1a0:	60a0      	str	r0, [r4, #8]
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 f818 	bl	800b1d8 <__sfp>
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	60e0      	str	r0, [r4, #12]
 800b1ac:	2104      	movs	r1, #4
 800b1ae:	6860      	ldr	r0, [r4, #4]
 800b1b0:	f7ff ff82 	bl	800b0b8 <std>
 800b1b4:	68a0      	ldr	r0, [r4, #8]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	2109      	movs	r1, #9
 800b1ba:	f7ff ff7d 	bl	800b0b8 <std>
 800b1be:	68e0      	ldr	r0, [r4, #12]
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	2112      	movs	r1, #18
 800b1c4:	f7ff ff78 	bl	800b0b8 <std>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	61a3      	str	r3, [r4, #24]
 800b1cc:	e7d2      	b.n	800b174 <__sinit+0xc>
 800b1ce:	bf00      	nop
 800b1d0:	0800c31c 	.word	0x0800c31c
 800b1d4:	0800b101 	.word	0x0800b101

0800b1d8 <__sfp>:
 800b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1da:	4607      	mov	r7, r0
 800b1dc:	f7ff ffac 	bl	800b138 <__sfp_lock_acquire>
 800b1e0:	4b1e      	ldr	r3, [pc, #120]	; (800b25c <__sfp+0x84>)
 800b1e2:	681e      	ldr	r6, [r3, #0]
 800b1e4:	69b3      	ldr	r3, [r6, #24]
 800b1e6:	b913      	cbnz	r3, 800b1ee <__sfp+0x16>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7ff ffbd 	bl	800b168 <__sinit>
 800b1ee:	3648      	adds	r6, #72	; 0x48
 800b1f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	d503      	bpl.n	800b200 <__sfp+0x28>
 800b1f8:	6833      	ldr	r3, [r6, #0]
 800b1fa:	b30b      	cbz	r3, 800b240 <__sfp+0x68>
 800b1fc:	6836      	ldr	r6, [r6, #0]
 800b1fe:	e7f7      	b.n	800b1f0 <__sfp+0x18>
 800b200:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b204:	b9d5      	cbnz	r5, 800b23c <__sfp+0x64>
 800b206:	4b16      	ldr	r3, [pc, #88]	; (800b260 <__sfp+0x88>)
 800b208:	60e3      	str	r3, [r4, #12]
 800b20a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b20e:	6665      	str	r5, [r4, #100]	; 0x64
 800b210:	f000 f86c 	bl	800b2ec <__retarget_lock_init_recursive>
 800b214:	f7ff ff96 	bl	800b144 <__sfp_lock_release>
 800b218:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b21c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b220:	6025      	str	r5, [r4, #0]
 800b222:	61a5      	str	r5, [r4, #24]
 800b224:	2208      	movs	r2, #8
 800b226:	4629      	mov	r1, r5
 800b228:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b22c:	f000 f861 	bl	800b2f2 <memset>
 800b230:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b234:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b238:	4620      	mov	r0, r4
 800b23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b23c:	3468      	adds	r4, #104	; 0x68
 800b23e:	e7d9      	b.n	800b1f4 <__sfp+0x1c>
 800b240:	2104      	movs	r1, #4
 800b242:	4638      	mov	r0, r7
 800b244:	f7ff ff62 	bl	800b10c <__sfmoreglue>
 800b248:	4604      	mov	r4, r0
 800b24a:	6030      	str	r0, [r6, #0]
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d1d5      	bne.n	800b1fc <__sfp+0x24>
 800b250:	f7ff ff78 	bl	800b144 <__sfp_lock_release>
 800b254:	230c      	movs	r3, #12
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	e7ee      	b.n	800b238 <__sfp+0x60>
 800b25a:	bf00      	nop
 800b25c:	0800c31c 	.word	0x0800c31c
 800b260:	ffff0001 	.word	0xffff0001

0800b264 <_fwalk_reent>:
 800b264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b268:	4606      	mov	r6, r0
 800b26a:	4688      	mov	r8, r1
 800b26c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b270:	2700      	movs	r7, #0
 800b272:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b276:	f1b9 0901 	subs.w	r9, r9, #1
 800b27a:	d505      	bpl.n	800b288 <_fwalk_reent+0x24>
 800b27c:	6824      	ldr	r4, [r4, #0]
 800b27e:	2c00      	cmp	r4, #0
 800b280:	d1f7      	bne.n	800b272 <_fwalk_reent+0xe>
 800b282:	4638      	mov	r0, r7
 800b284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b288:	89ab      	ldrh	r3, [r5, #12]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d907      	bls.n	800b29e <_fwalk_reent+0x3a>
 800b28e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b292:	3301      	adds	r3, #1
 800b294:	d003      	beq.n	800b29e <_fwalk_reent+0x3a>
 800b296:	4629      	mov	r1, r5
 800b298:	4630      	mov	r0, r6
 800b29a:	47c0      	blx	r8
 800b29c:	4307      	orrs	r7, r0
 800b29e:	3568      	adds	r5, #104	; 0x68
 800b2a0:	e7e9      	b.n	800b276 <_fwalk_reent+0x12>
	...

0800b2a4 <__libc_init_array>:
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	4d0d      	ldr	r5, [pc, #52]	; (800b2dc <__libc_init_array+0x38>)
 800b2a8:	4c0d      	ldr	r4, [pc, #52]	; (800b2e0 <__libc_init_array+0x3c>)
 800b2aa:	1b64      	subs	r4, r4, r5
 800b2ac:	10a4      	asrs	r4, r4, #2
 800b2ae:	2600      	movs	r6, #0
 800b2b0:	42a6      	cmp	r6, r4
 800b2b2:	d109      	bne.n	800b2c8 <__libc_init_array+0x24>
 800b2b4:	4d0b      	ldr	r5, [pc, #44]	; (800b2e4 <__libc_init_array+0x40>)
 800b2b6:	4c0c      	ldr	r4, [pc, #48]	; (800b2e8 <__libc_init_array+0x44>)
 800b2b8:	f000 ff9a 	bl	800c1f0 <_init>
 800b2bc:	1b64      	subs	r4, r4, r5
 800b2be:	10a4      	asrs	r4, r4, #2
 800b2c0:	2600      	movs	r6, #0
 800b2c2:	42a6      	cmp	r6, r4
 800b2c4:	d105      	bne.n	800b2d2 <__libc_init_array+0x2e>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2cc:	4798      	blx	r3
 800b2ce:	3601      	adds	r6, #1
 800b2d0:	e7ee      	b.n	800b2b0 <__libc_init_array+0xc>
 800b2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2d6:	4798      	blx	r3
 800b2d8:	3601      	adds	r6, #1
 800b2da:	e7f2      	b.n	800b2c2 <__libc_init_array+0x1e>
 800b2dc:	0800c35c 	.word	0x0800c35c
 800b2e0:	0800c35c 	.word	0x0800c35c
 800b2e4:	0800c35c 	.word	0x0800c35c
 800b2e8:	0800c360 	.word	0x0800c360

0800b2ec <__retarget_lock_init_recursive>:
 800b2ec:	4770      	bx	lr

0800b2ee <__retarget_lock_acquire_recursive>:
 800b2ee:	4770      	bx	lr

0800b2f0 <__retarget_lock_release_recursive>:
 800b2f0:	4770      	bx	lr

0800b2f2 <memset>:
 800b2f2:	4402      	add	r2, r0
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d100      	bne.n	800b2fc <memset+0xa>
 800b2fa:	4770      	bx	lr
 800b2fc:	f803 1b01 	strb.w	r1, [r3], #1
 800b300:	e7f9      	b.n	800b2f6 <memset+0x4>
	...

0800b304 <sbrk_aligned>:
 800b304:	b570      	push	{r4, r5, r6, lr}
 800b306:	4e0e      	ldr	r6, [pc, #56]	; (800b340 <sbrk_aligned+0x3c>)
 800b308:	460c      	mov	r4, r1
 800b30a:	6831      	ldr	r1, [r6, #0]
 800b30c:	4605      	mov	r5, r0
 800b30e:	b911      	cbnz	r1, 800b316 <sbrk_aligned+0x12>
 800b310:	f000 f984 	bl	800b61c <_sbrk_r>
 800b314:	6030      	str	r0, [r6, #0]
 800b316:	4621      	mov	r1, r4
 800b318:	4628      	mov	r0, r5
 800b31a:	f000 f97f 	bl	800b61c <_sbrk_r>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	d00a      	beq.n	800b338 <sbrk_aligned+0x34>
 800b322:	1cc4      	adds	r4, r0, #3
 800b324:	f024 0403 	bic.w	r4, r4, #3
 800b328:	42a0      	cmp	r0, r4
 800b32a:	d007      	beq.n	800b33c <sbrk_aligned+0x38>
 800b32c:	1a21      	subs	r1, r4, r0
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 f974 	bl	800b61c <_sbrk_r>
 800b334:	3001      	adds	r0, #1
 800b336:	d101      	bne.n	800b33c <sbrk_aligned+0x38>
 800b338:	f04f 34ff 	mov.w	r4, #4294967295
 800b33c:	4620      	mov	r0, r4
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	240044d4 	.word	0x240044d4

0800b344 <_malloc_r>:
 800b344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b348:	1ccd      	adds	r5, r1, #3
 800b34a:	f025 0503 	bic.w	r5, r5, #3
 800b34e:	3508      	adds	r5, #8
 800b350:	2d0c      	cmp	r5, #12
 800b352:	bf38      	it	cc
 800b354:	250c      	movcc	r5, #12
 800b356:	2d00      	cmp	r5, #0
 800b358:	4607      	mov	r7, r0
 800b35a:	db01      	blt.n	800b360 <_malloc_r+0x1c>
 800b35c:	42a9      	cmp	r1, r5
 800b35e:	d905      	bls.n	800b36c <_malloc_r+0x28>
 800b360:	230c      	movs	r3, #12
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	2600      	movs	r6, #0
 800b366:	4630      	mov	r0, r6
 800b368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36c:	4e2e      	ldr	r6, [pc, #184]	; (800b428 <_malloc_r+0xe4>)
 800b36e:	f000 fbc5 	bl	800bafc <__malloc_lock>
 800b372:	6833      	ldr	r3, [r6, #0]
 800b374:	461c      	mov	r4, r3
 800b376:	bb34      	cbnz	r4, 800b3c6 <_malloc_r+0x82>
 800b378:	4629      	mov	r1, r5
 800b37a:	4638      	mov	r0, r7
 800b37c:	f7ff ffc2 	bl	800b304 <sbrk_aligned>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	4604      	mov	r4, r0
 800b384:	d14d      	bne.n	800b422 <_malloc_r+0xde>
 800b386:	6834      	ldr	r4, [r6, #0]
 800b388:	4626      	mov	r6, r4
 800b38a:	2e00      	cmp	r6, #0
 800b38c:	d140      	bne.n	800b410 <_malloc_r+0xcc>
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	4631      	mov	r1, r6
 800b392:	4638      	mov	r0, r7
 800b394:	eb04 0803 	add.w	r8, r4, r3
 800b398:	f000 f940 	bl	800b61c <_sbrk_r>
 800b39c:	4580      	cmp	r8, r0
 800b39e:	d13a      	bne.n	800b416 <_malloc_r+0xd2>
 800b3a0:	6821      	ldr	r1, [r4, #0]
 800b3a2:	3503      	adds	r5, #3
 800b3a4:	1a6d      	subs	r5, r5, r1
 800b3a6:	f025 0503 	bic.w	r5, r5, #3
 800b3aa:	3508      	adds	r5, #8
 800b3ac:	2d0c      	cmp	r5, #12
 800b3ae:	bf38      	it	cc
 800b3b0:	250c      	movcc	r5, #12
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	f7ff ffa5 	bl	800b304 <sbrk_aligned>
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d02b      	beq.n	800b416 <_malloc_r+0xd2>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	442b      	add	r3, r5
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	e00e      	b.n	800b3e4 <_malloc_r+0xa0>
 800b3c6:	6822      	ldr	r2, [r4, #0]
 800b3c8:	1b52      	subs	r2, r2, r5
 800b3ca:	d41e      	bmi.n	800b40a <_malloc_r+0xc6>
 800b3cc:	2a0b      	cmp	r2, #11
 800b3ce:	d916      	bls.n	800b3fe <_malloc_r+0xba>
 800b3d0:	1961      	adds	r1, r4, r5
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	6025      	str	r5, [r4, #0]
 800b3d6:	bf18      	it	ne
 800b3d8:	6059      	strne	r1, [r3, #4]
 800b3da:	6863      	ldr	r3, [r4, #4]
 800b3dc:	bf08      	it	eq
 800b3de:	6031      	streq	r1, [r6, #0]
 800b3e0:	5162      	str	r2, [r4, r5]
 800b3e2:	604b      	str	r3, [r1, #4]
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	f104 060b 	add.w	r6, r4, #11
 800b3ea:	f000 fb8d 	bl	800bb08 <__malloc_unlock>
 800b3ee:	f026 0607 	bic.w	r6, r6, #7
 800b3f2:	1d23      	adds	r3, r4, #4
 800b3f4:	1af2      	subs	r2, r6, r3
 800b3f6:	d0b6      	beq.n	800b366 <_malloc_r+0x22>
 800b3f8:	1b9b      	subs	r3, r3, r6
 800b3fa:	50a3      	str	r3, [r4, r2]
 800b3fc:	e7b3      	b.n	800b366 <_malloc_r+0x22>
 800b3fe:	6862      	ldr	r2, [r4, #4]
 800b400:	42a3      	cmp	r3, r4
 800b402:	bf0c      	ite	eq
 800b404:	6032      	streq	r2, [r6, #0]
 800b406:	605a      	strne	r2, [r3, #4]
 800b408:	e7ec      	b.n	800b3e4 <_malloc_r+0xa0>
 800b40a:	4623      	mov	r3, r4
 800b40c:	6864      	ldr	r4, [r4, #4]
 800b40e:	e7b2      	b.n	800b376 <_malloc_r+0x32>
 800b410:	4634      	mov	r4, r6
 800b412:	6876      	ldr	r6, [r6, #4]
 800b414:	e7b9      	b.n	800b38a <_malloc_r+0x46>
 800b416:	230c      	movs	r3, #12
 800b418:	603b      	str	r3, [r7, #0]
 800b41a:	4638      	mov	r0, r7
 800b41c:	f000 fb74 	bl	800bb08 <__malloc_unlock>
 800b420:	e7a1      	b.n	800b366 <_malloc_r+0x22>
 800b422:	6025      	str	r5, [r4, #0]
 800b424:	e7de      	b.n	800b3e4 <_malloc_r+0xa0>
 800b426:	bf00      	nop
 800b428:	240044d0 	.word	0x240044d0

0800b42c <iprintf>:
 800b42c:	b40f      	push	{r0, r1, r2, r3}
 800b42e:	4b0a      	ldr	r3, [pc, #40]	; (800b458 <iprintf+0x2c>)
 800b430:	b513      	push	{r0, r1, r4, lr}
 800b432:	681c      	ldr	r4, [r3, #0]
 800b434:	b124      	cbz	r4, 800b440 <iprintf+0x14>
 800b436:	69a3      	ldr	r3, [r4, #24]
 800b438:	b913      	cbnz	r3, 800b440 <iprintf+0x14>
 800b43a:	4620      	mov	r0, r4
 800b43c:	f7ff fe94 	bl	800b168 <__sinit>
 800b440:	ab05      	add	r3, sp, #20
 800b442:	9a04      	ldr	r2, [sp, #16]
 800b444:	68a1      	ldr	r1, [r4, #8]
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 fbd9 	bl	800bc00 <_vfiprintf_r>
 800b44e:	b002      	add	sp, #8
 800b450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b454:	b004      	add	sp, #16
 800b456:	4770      	bx	lr
 800b458:	240000a4 	.word	0x240000a4

0800b45c <_puts_r>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	460e      	mov	r6, r1
 800b460:	4605      	mov	r5, r0
 800b462:	b118      	cbz	r0, 800b46c <_puts_r+0x10>
 800b464:	6983      	ldr	r3, [r0, #24]
 800b466:	b90b      	cbnz	r3, 800b46c <_puts_r+0x10>
 800b468:	f7ff fe7e 	bl	800b168 <__sinit>
 800b46c:	69ab      	ldr	r3, [r5, #24]
 800b46e:	68ac      	ldr	r4, [r5, #8]
 800b470:	b913      	cbnz	r3, 800b478 <_puts_r+0x1c>
 800b472:	4628      	mov	r0, r5
 800b474:	f7ff fe78 	bl	800b168 <__sinit>
 800b478:	4b2c      	ldr	r3, [pc, #176]	; (800b52c <_puts_r+0xd0>)
 800b47a:	429c      	cmp	r4, r3
 800b47c:	d120      	bne.n	800b4c0 <_puts_r+0x64>
 800b47e:	686c      	ldr	r4, [r5, #4]
 800b480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b482:	07db      	lsls	r3, r3, #31
 800b484:	d405      	bmi.n	800b492 <_puts_r+0x36>
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	0598      	lsls	r0, r3, #22
 800b48a:	d402      	bmi.n	800b492 <_puts_r+0x36>
 800b48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b48e:	f7ff ff2e 	bl	800b2ee <__retarget_lock_acquire_recursive>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	0719      	lsls	r1, r3, #28
 800b496:	d51d      	bpl.n	800b4d4 <_puts_r+0x78>
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	b1db      	cbz	r3, 800b4d4 <_puts_r+0x78>
 800b49c:	3e01      	subs	r6, #1
 800b49e:	68a3      	ldr	r3, [r4, #8]
 800b4a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	60a3      	str	r3, [r4, #8]
 800b4a8:	bb39      	cbnz	r1, 800b4fa <_puts_r+0x9e>
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	da38      	bge.n	800b520 <_puts_r+0xc4>
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	210a      	movs	r1, #10
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	f000 f906 	bl	800b6c4 <__swbuf_r>
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	d011      	beq.n	800b4e0 <_puts_r+0x84>
 800b4bc:	250a      	movs	r5, #10
 800b4be:	e011      	b.n	800b4e4 <_puts_r+0x88>
 800b4c0:	4b1b      	ldr	r3, [pc, #108]	; (800b530 <_puts_r+0xd4>)
 800b4c2:	429c      	cmp	r4, r3
 800b4c4:	d101      	bne.n	800b4ca <_puts_r+0x6e>
 800b4c6:	68ac      	ldr	r4, [r5, #8]
 800b4c8:	e7da      	b.n	800b480 <_puts_r+0x24>
 800b4ca:	4b1a      	ldr	r3, [pc, #104]	; (800b534 <_puts_r+0xd8>)
 800b4cc:	429c      	cmp	r4, r3
 800b4ce:	bf08      	it	eq
 800b4d0:	68ec      	ldreq	r4, [r5, #12]
 800b4d2:	e7d5      	b.n	800b480 <_puts_r+0x24>
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 f958 	bl	800b78c <__swsetup_r>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d0dd      	beq.n	800b49c <_puts_r+0x40>
 800b4e0:	f04f 35ff 	mov.w	r5, #4294967295
 800b4e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4e6:	07da      	lsls	r2, r3, #31
 800b4e8:	d405      	bmi.n	800b4f6 <_puts_r+0x9a>
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	059b      	lsls	r3, r3, #22
 800b4ee:	d402      	bmi.n	800b4f6 <_puts_r+0x9a>
 800b4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4f2:	f7ff fefd 	bl	800b2f0 <__retarget_lock_release_recursive>
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	bd70      	pop	{r4, r5, r6, pc}
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	da04      	bge.n	800b508 <_puts_r+0xac>
 800b4fe:	69a2      	ldr	r2, [r4, #24]
 800b500:	429a      	cmp	r2, r3
 800b502:	dc06      	bgt.n	800b512 <_puts_r+0xb6>
 800b504:	290a      	cmp	r1, #10
 800b506:	d004      	beq.n	800b512 <_puts_r+0xb6>
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	6022      	str	r2, [r4, #0]
 800b50e:	7019      	strb	r1, [r3, #0]
 800b510:	e7c5      	b.n	800b49e <_puts_r+0x42>
 800b512:	4622      	mov	r2, r4
 800b514:	4628      	mov	r0, r5
 800b516:	f000 f8d5 	bl	800b6c4 <__swbuf_r>
 800b51a:	3001      	adds	r0, #1
 800b51c:	d1bf      	bne.n	800b49e <_puts_r+0x42>
 800b51e:	e7df      	b.n	800b4e0 <_puts_r+0x84>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	250a      	movs	r5, #10
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	6022      	str	r2, [r4, #0]
 800b528:	701d      	strb	r5, [r3, #0]
 800b52a:	e7db      	b.n	800b4e4 <_puts_r+0x88>
 800b52c:	0800c2dc 	.word	0x0800c2dc
 800b530:	0800c2fc 	.word	0x0800c2fc
 800b534:	0800c2bc 	.word	0x0800c2bc

0800b538 <puts>:
 800b538:	4b02      	ldr	r3, [pc, #8]	; (800b544 <puts+0xc>)
 800b53a:	4601      	mov	r1, r0
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	f7ff bf8d 	b.w	800b45c <_puts_r>
 800b542:	bf00      	nop
 800b544:	240000a4 	.word	0x240000a4

0800b548 <cleanup_glue>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	460c      	mov	r4, r1
 800b54c:	6809      	ldr	r1, [r1, #0]
 800b54e:	4605      	mov	r5, r0
 800b550:	b109      	cbz	r1, 800b556 <cleanup_glue+0xe>
 800b552:	f7ff fff9 	bl	800b548 <cleanup_glue>
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b55e:	f000 bad9 	b.w	800bb14 <_free_r>
	...

0800b564 <_reclaim_reent>:
 800b564:	4b2c      	ldr	r3, [pc, #176]	; (800b618 <_reclaim_reent+0xb4>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4283      	cmp	r3, r0
 800b56a:	b570      	push	{r4, r5, r6, lr}
 800b56c:	4604      	mov	r4, r0
 800b56e:	d051      	beq.n	800b614 <_reclaim_reent+0xb0>
 800b570:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b572:	b143      	cbz	r3, 800b586 <_reclaim_reent+0x22>
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d14a      	bne.n	800b610 <_reclaim_reent+0xac>
 800b57a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b57c:	6819      	ldr	r1, [r3, #0]
 800b57e:	b111      	cbz	r1, 800b586 <_reclaim_reent+0x22>
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fac7 	bl	800bb14 <_free_r>
 800b586:	6961      	ldr	r1, [r4, #20]
 800b588:	b111      	cbz	r1, 800b590 <_reclaim_reent+0x2c>
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 fac2 	bl	800bb14 <_free_r>
 800b590:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b592:	b111      	cbz	r1, 800b59a <_reclaim_reent+0x36>
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fabd 	bl	800bb14 <_free_r>
 800b59a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b59c:	b111      	cbz	r1, 800b5a4 <_reclaim_reent+0x40>
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 fab8 	bl	800bb14 <_free_r>
 800b5a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b5a6:	b111      	cbz	r1, 800b5ae <_reclaim_reent+0x4a>
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fab3 	bl	800bb14 <_free_r>
 800b5ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b5b0:	b111      	cbz	r1, 800b5b8 <_reclaim_reent+0x54>
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f000 faae 	bl	800bb14 <_free_r>
 800b5b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b5ba:	b111      	cbz	r1, 800b5c2 <_reclaim_reent+0x5e>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 faa9 	bl	800bb14 <_free_r>
 800b5c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b5c4:	b111      	cbz	r1, 800b5cc <_reclaim_reent+0x68>
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 faa4 	bl	800bb14 <_free_r>
 800b5cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ce:	b111      	cbz	r1, 800b5d6 <_reclaim_reent+0x72>
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f000 fa9f 	bl	800bb14 <_free_r>
 800b5d6:	69a3      	ldr	r3, [r4, #24]
 800b5d8:	b1e3      	cbz	r3, 800b614 <_reclaim_reent+0xb0>
 800b5da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5dc:	4620      	mov	r0, r4
 800b5de:	4798      	blx	r3
 800b5e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5e2:	b1b9      	cbz	r1, 800b614 <_reclaim_reent+0xb0>
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5ea:	f7ff bfad 	b.w	800b548 <cleanup_glue>
 800b5ee:	5949      	ldr	r1, [r1, r5]
 800b5f0:	b941      	cbnz	r1, 800b604 <_reclaim_reent+0xa0>
 800b5f2:	3504      	adds	r5, #4
 800b5f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5f6:	2d80      	cmp	r5, #128	; 0x80
 800b5f8:	68d9      	ldr	r1, [r3, #12]
 800b5fa:	d1f8      	bne.n	800b5ee <_reclaim_reent+0x8a>
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 fa89 	bl	800bb14 <_free_r>
 800b602:	e7ba      	b.n	800b57a <_reclaim_reent+0x16>
 800b604:	680e      	ldr	r6, [r1, #0]
 800b606:	4620      	mov	r0, r4
 800b608:	f000 fa84 	bl	800bb14 <_free_r>
 800b60c:	4631      	mov	r1, r6
 800b60e:	e7ef      	b.n	800b5f0 <_reclaim_reent+0x8c>
 800b610:	2500      	movs	r5, #0
 800b612:	e7ef      	b.n	800b5f4 <_reclaim_reent+0x90>
 800b614:	bd70      	pop	{r4, r5, r6, pc}
 800b616:	bf00      	nop
 800b618:	240000a4 	.word	0x240000a4

0800b61c <_sbrk_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4d06      	ldr	r5, [pc, #24]	; (800b638 <_sbrk_r+0x1c>)
 800b620:	2300      	movs	r3, #0
 800b622:	4604      	mov	r4, r0
 800b624:	4608      	mov	r0, r1
 800b626:	602b      	str	r3, [r5, #0]
 800b628:	f7f5 fffa 	bl	8001620 <_sbrk>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_sbrk_r+0x1a>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_sbrk_r+0x1a>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	240044d8 	.word	0x240044d8

0800b63c <__sread>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	460c      	mov	r4, r1
 800b640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b644:	f000 fda0 	bl	800c188 <_read_r>
 800b648:	2800      	cmp	r0, #0
 800b64a:	bfab      	itete	ge
 800b64c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b64e:	89a3      	ldrhlt	r3, [r4, #12]
 800b650:	181b      	addge	r3, r3, r0
 800b652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b656:	bfac      	ite	ge
 800b658:	6563      	strge	r3, [r4, #84]	; 0x54
 800b65a:	81a3      	strhlt	r3, [r4, #12]
 800b65c:	bd10      	pop	{r4, pc}

0800b65e <__swrite>:
 800b65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b662:	461f      	mov	r7, r3
 800b664:	898b      	ldrh	r3, [r1, #12]
 800b666:	05db      	lsls	r3, r3, #23
 800b668:	4605      	mov	r5, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	4616      	mov	r6, r2
 800b66e:	d505      	bpl.n	800b67c <__swrite+0x1e>
 800b670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b674:	2302      	movs	r3, #2
 800b676:	2200      	movs	r2, #0
 800b678:	f000 f9c8 	bl	800ba0c <_lseek_r>
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b686:	81a3      	strh	r3, [r4, #12]
 800b688:	4632      	mov	r2, r6
 800b68a:	463b      	mov	r3, r7
 800b68c:	4628      	mov	r0, r5
 800b68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b692:	f000 b869 	b.w	800b768 <_write_r>

0800b696 <__sseek>:
 800b696:	b510      	push	{r4, lr}
 800b698:	460c      	mov	r4, r1
 800b69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b69e:	f000 f9b5 	bl	800ba0c <_lseek_r>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	bf15      	itete	ne
 800b6a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6b2:	81a3      	strheq	r3, [r4, #12]
 800b6b4:	bf18      	it	ne
 800b6b6:	81a3      	strhne	r3, [r4, #12]
 800b6b8:	bd10      	pop	{r4, pc}

0800b6ba <__sclose>:
 800b6ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6be:	f000 b8d3 	b.w	800b868 <_close_r>
	...

0800b6c4 <__swbuf_r>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	460e      	mov	r6, r1
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b118      	cbz	r0, 800b6d6 <__swbuf_r+0x12>
 800b6ce:	6983      	ldr	r3, [r0, #24]
 800b6d0:	b90b      	cbnz	r3, 800b6d6 <__swbuf_r+0x12>
 800b6d2:	f7ff fd49 	bl	800b168 <__sinit>
 800b6d6:	4b21      	ldr	r3, [pc, #132]	; (800b75c <__swbuf_r+0x98>)
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	d12b      	bne.n	800b734 <__swbuf_r+0x70>
 800b6dc:	686c      	ldr	r4, [r5, #4]
 800b6de:	69a3      	ldr	r3, [r4, #24]
 800b6e0:	60a3      	str	r3, [r4, #8]
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	071a      	lsls	r2, r3, #28
 800b6e6:	d52f      	bpl.n	800b748 <__swbuf_r+0x84>
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	b36b      	cbz	r3, 800b748 <__swbuf_r+0x84>
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	6820      	ldr	r0, [r4, #0]
 800b6f0:	1ac0      	subs	r0, r0, r3
 800b6f2:	6963      	ldr	r3, [r4, #20]
 800b6f4:	b2f6      	uxtb	r6, r6
 800b6f6:	4283      	cmp	r3, r0
 800b6f8:	4637      	mov	r7, r6
 800b6fa:	dc04      	bgt.n	800b706 <__swbuf_r+0x42>
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	4628      	mov	r0, r5
 800b700:	f000 f948 	bl	800b994 <_fflush_r>
 800b704:	bb30      	cbnz	r0, 800b754 <__swbuf_r+0x90>
 800b706:	68a3      	ldr	r3, [r4, #8]
 800b708:	3b01      	subs	r3, #1
 800b70a:	60a3      	str	r3, [r4, #8]
 800b70c:	6823      	ldr	r3, [r4, #0]
 800b70e:	1c5a      	adds	r2, r3, #1
 800b710:	6022      	str	r2, [r4, #0]
 800b712:	701e      	strb	r6, [r3, #0]
 800b714:	6963      	ldr	r3, [r4, #20]
 800b716:	3001      	adds	r0, #1
 800b718:	4283      	cmp	r3, r0
 800b71a:	d004      	beq.n	800b726 <__swbuf_r+0x62>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	07db      	lsls	r3, r3, #31
 800b720:	d506      	bpl.n	800b730 <__swbuf_r+0x6c>
 800b722:	2e0a      	cmp	r6, #10
 800b724:	d104      	bne.n	800b730 <__swbuf_r+0x6c>
 800b726:	4621      	mov	r1, r4
 800b728:	4628      	mov	r0, r5
 800b72a:	f000 f933 	bl	800b994 <_fflush_r>
 800b72e:	b988      	cbnz	r0, 800b754 <__swbuf_r+0x90>
 800b730:	4638      	mov	r0, r7
 800b732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b734:	4b0a      	ldr	r3, [pc, #40]	; (800b760 <__swbuf_r+0x9c>)
 800b736:	429c      	cmp	r4, r3
 800b738:	d101      	bne.n	800b73e <__swbuf_r+0x7a>
 800b73a:	68ac      	ldr	r4, [r5, #8]
 800b73c:	e7cf      	b.n	800b6de <__swbuf_r+0x1a>
 800b73e:	4b09      	ldr	r3, [pc, #36]	; (800b764 <__swbuf_r+0xa0>)
 800b740:	429c      	cmp	r4, r3
 800b742:	bf08      	it	eq
 800b744:	68ec      	ldreq	r4, [r5, #12]
 800b746:	e7ca      	b.n	800b6de <__swbuf_r+0x1a>
 800b748:	4621      	mov	r1, r4
 800b74a:	4628      	mov	r0, r5
 800b74c:	f000 f81e 	bl	800b78c <__swsetup_r>
 800b750:	2800      	cmp	r0, #0
 800b752:	d0cb      	beq.n	800b6ec <__swbuf_r+0x28>
 800b754:	f04f 37ff 	mov.w	r7, #4294967295
 800b758:	e7ea      	b.n	800b730 <__swbuf_r+0x6c>
 800b75a:	bf00      	nop
 800b75c:	0800c2dc 	.word	0x0800c2dc
 800b760:	0800c2fc 	.word	0x0800c2fc
 800b764:	0800c2bc 	.word	0x0800c2bc

0800b768 <_write_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d07      	ldr	r5, [pc, #28]	; (800b788 <_write_r+0x20>)
 800b76c:	4604      	mov	r4, r0
 800b76e:	4608      	mov	r0, r1
 800b770:	4611      	mov	r1, r2
 800b772:	2200      	movs	r2, #0
 800b774:	602a      	str	r2, [r5, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f7f5 fc17 	bl	8000faa <_write>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d102      	bne.n	800b786 <_write_r+0x1e>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	b103      	cbz	r3, 800b786 <_write_r+0x1e>
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	240044d8 	.word	0x240044d8

0800b78c <__swsetup_r>:
 800b78c:	4b32      	ldr	r3, [pc, #200]	; (800b858 <__swsetup_r+0xcc>)
 800b78e:	b570      	push	{r4, r5, r6, lr}
 800b790:	681d      	ldr	r5, [r3, #0]
 800b792:	4606      	mov	r6, r0
 800b794:	460c      	mov	r4, r1
 800b796:	b125      	cbz	r5, 800b7a2 <__swsetup_r+0x16>
 800b798:	69ab      	ldr	r3, [r5, #24]
 800b79a:	b913      	cbnz	r3, 800b7a2 <__swsetup_r+0x16>
 800b79c:	4628      	mov	r0, r5
 800b79e:	f7ff fce3 	bl	800b168 <__sinit>
 800b7a2:	4b2e      	ldr	r3, [pc, #184]	; (800b85c <__swsetup_r+0xd0>)
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	d10f      	bne.n	800b7c8 <__swsetup_r+0x3c>
 800b7a8:	686c      	ldr	r4, [r5, #4]
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7b0:	0719      	lsls	r1, r3, #28
 800b7b2:	d42c      	bmi.n	800b80e <__swsetup_r+0x82>
 800b7b4:	06dd      	lsls	r5, r3, #27
 800b7b6:	d411      	bmi.n	800b7dc <__swsetup_r+0x50>
 800b7b8:	2309      	movs	r3, #9
 800b7ba:	6033      	str	r3, [r6, #0]
 800b7bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7c0:	81a3      	strh	r3, [r4, #12]
 800b7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c6:	e03e      	b.n	800b846 <__swsetup_r+0xba>
 800b7c8:	4b25      	ldr	r3, [pc, #148]	; (800b860 <__swsetup_r+0xd4>)
 800b7ca:	429c      	cmp	r4, r3
 800b7cc:	d101      	bne.n	800b7d2 <__swsetup_r+0x46>
 800b7ce:	68ac      	ldr	r4, [r5, #8]
 800b7d0:	e7eb      	b.n	800b7aa <__swsetup_r+0x1e>
 800b7d2:	4b24      	ldr	r3, [pc, #144]	; (800b864 <__swsetup_r+0xd8>)
 800b7d4:	429c      	cmp	r4, r3
 800b7d6:	bf08      	it	eq
 800b7d8:	68ec      	ldreq	r4, [r5, #12]
 800b7da:	e7e6      	b.n	800b7aa <__swsetup_r+0x1e>
 800b7dc:	0758      	lsls	r0, r3, #29
 800b7de:	d512      	bpl.n	800b806 <__swsetup_r+0x7a>
 800b7e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7e2:	b141      	cbz	r1, 800b7f6 <__swsetup_r+0x6a>
 800b7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7e8:	4299      	cmp	r1, r3
 800b7ea:	d002      	beq.n	800b7f2 <__swsetup_r+0x66>
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f000 f991 	bl	800bb14 <_free_r>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	6363      	str	r3, [r4, #52]	; 0x34
 800b7f6:	89a3      	ldrh	r3, [r4, #12]
 800b7f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7fc:	81a3      	strh	r3, [r4, #12]
 800b7fe:	2300      	movs	r3, #0
 800b800:	6063      	str	r3, [r4, #4]
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	f043 0308 	orr.w	r3, r3, #8
 800b80c:	81a3      	strh	r3, [r4, #12]
 800b80e:	6923      	ldr	r3, [r4, #16]
 800b810:	b94b      	cbnz	r3, 800b826 <__swsetup_r+0x9a>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b81c:	d003      	beq.n	800b826 <__swsetup_r+0x9a>
 800b81e:	4621      	mov	r1, r4
 800b820:	4630      	mov	r0, r6
 800b822:	f000 f92b 	bl	800ba7c <__smakebuf_r>
 800b826:	89a0      	ldrh	r0, [r4, #12]
 800b828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b82c:	f010 0301 	ands.w	r3, r0, #1
 800b830:	d00a      	beq.n	800b848 <__swsetup_r+0xbc>
 800b832:	2300      	movs	r3, #0
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	6963      	ldr	r3, [r4, #20]
 800b838:	425b      	negs	r3, r3
 800b83a:	61a3      	str	r3, [r4, #24]
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	b943      	cbnz	r3, 800b852 <__swsetup_r+0xc6>
 800b840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b844:	d1ba      	bne.n	800b7bc <__swsetup_r+0x30>
 800b846:	bd70      	pop	{r4, r5, r6, pc}
 800b848:	0781      	lsls	r1, r0, #30
 800b84a:	bf58      	it	pl
 800b84c:	6963      	ldrpl	r3, [r4, #20]
 800b84e:	60a3      	str	r3, [r4, #8]
 800b850:	e7f4      	b.n	800b83c <__swsetup_r+0xb0>
 800b852:	2000      	movs	r0, #0
 800b854:	e7f7      	b.n	800b846 <__swsetup_r+0xba>
 800b856:	bf00      	nop
 800b858:	240000a4 	.word	0x240000a4
 800b85c:	0800c2dc 	.word	0x0800c2dc
 800b860:	0800c2fc 	.word	0x0800c2fc
 800b864:	0800c2bc 	.word	0x0800c2bc

0800b868 <_close_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d06      	ldr	r5, [pc, #24]	; (800b884 <_close_r+0x1c>)
 800b86c:	2300      	movs	r3, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	602b      	str	r3, [r5, #0]
 800b874:	f7f5 fe9f 	bl	80015b6 <_close>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_close_r+0x1a>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_close_r+0x1a>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	240044d8 	.word	0x240044d8

0800b888 <__sflush_r>:
 800b888:	898a      	ldrh	r2, [r1, #12]
 800b88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88e:	4605      	mov	r5, r0
 800b890:	0710      	lsls	r0, r2, #28
 800b892:	460c      	mov	r4, r1
 800b894:	d458      	bmi.n	800b948 <__sflush_r+0xc0>
 800b896:	684b      	ldr	r3, [r1, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dc05      	bgt.n	800b8a8 <__sflush_r+0x20>
 800b89c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dc02      	bgt.n	800b8a8 <__sflush_r+0x20>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8aa:	2e00      	cmp	r6, #0
 800b8ac:	d0f9      	beq.n	800b8a2 <__sflush_r+0x1a>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8b4:	682f      	ldr	r7, [r5, #0]
 800b8b6:	602b      	str	r3, [r5, #0]
 800b8b8:	d032      	beq.n	800b920 <__sflush_r+0x98>
 800b8ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	075a      	lsls	r2, r3, #29
 800b8c0:	d505      	bpl.n	800b8ce <__sflush_r+0x46>
 800b8c2:	6863      	ldr	r3, [r4, #4]
 800b8c4:	1ac0      	subs	r0, r0, r3
 800b8c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8c8:	b10b      	cbz	r3, 800b8ce <__sflush_r+0x46>
 800b8ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8cc:	1ac0      	subs	r0, r0, r3
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8d4:	6a21      	ldr	r1, [r4, #32]
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	47b0      	blx	r6
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	d106      	bne.n	800b8ee <__sflush_r+0x66>
 800b8e0:	6829      	ldr	r1, [r5, #0]
 800b8e2:	291d      	cmp	r1, #29
 800b8e4:	d82c      	bhi.n	800b940 <__sflush_r+0xb8>
 800b8e6:	4a2a      	ldr	r2, [pc, #168]	; (800b990 <__sflush_r+0x108>)
 800b8e8:	40ca      	lsrs	r2, r1
 800b8ea:	07d6      	lsls	r6, r2, #31
 800b8ec:	d528      	bpl.n	800b940 <__sflush_r+0xb8>
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	6062      	str	r2, [r4, #4]
 800b8f2:	04d9      	lsls	r1, r3, #19
 800b8f4:	6922      	ldr	r2, [r4, #16]
 800b8f6:	6022      	str	r2, [r4, #0]
 800b8f8:	d504      	bpl.n	800b904 <__sflush_r+0x7c>
 800b8fa:	1c42      	adds	r2, r0, #1
 800b8fc:	d101      	bne.n	800b902 <__sflush_r+0x7a>
 800b8fe:	682b      	ldr	r3, [r5, #0]
 800b900:	b903      	cbnz	r3, 800b904 <__sflush_r+0x7c>
 800b902:	6560      	str	r0, [r4, #84]	; 0x54
 800b904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b906:	602f      	str	r7, [r5, #0]
 800b908:	2900      	cmp	r1, #0
 800b90a:	d0ca      	beq.n	800b8a2 <__sflush_r+0x1a>
 800b90c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b910:	4299      	cmp	r1, r3
 800b912:	d002      	beq.n	800b91a <__sflush_r+0x92>
 800b914:	4628      	mov	r0, r5
 800b916:	f000 f8fd 	bl	800bb14 <_free_r>
 800b91a:	2000      	movs	r0, #0
 800b91c:	6360      	str	r0, [r4, #52]	; 0x34
 800b91e:	e7c1      	b.n	800b8a4 <__sflush_r+0x1c>
 800b920:	6a21      	ldr	r1, [r4, #32]
 800b922:	2301      	movs	r3, #1
 800b924:	4628      	mov	r0, r5
 800b926:	47b0      	blx	r6
 800b928:	1c41      	adds	r1, r0, #1
 800b92a:	d1c7      	bne.n	800b8bc <__sflush_r+0x34>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d0c4      	beq.n	800b8bc <__sflush_r+0x34>
 800b932:	2b1d      	cmp	r3, #29
 800b934:	d001      	beq.n	800b93a <__sflush_r+0xb2>
 800b936:	2b16      	cmp	r3, #22
 800b938:	d101      	bne.n	800b93e <__sflush_r+0xb6>
 800b93a:	602f      	str	r7, [r5, #0]
 800b93c:	e7b1      	b.n	800b8a2 <__sflush_r+0x1a>
 800b93e:	89a3      	ldrh	r3, [r4, #12]
 800b940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	e7ad      	b.n	800b8a4 <__sflush_r+0x1c>
 800b948:	690f      	ldr	r7, [r1, #16]
 800b94a:	2f00      	cmp	r7, #0
 800b94c:	d0a9      	beq.n	800b8a2 <__sflush_r+0x1a>
 800b94e:	0793      	lsls	r3, r2, #30
 800b950:	680e      	ldr	r6, [r1, #0]
 800b952:	bf08      	it	eq
 800b954:	694b      	ldreq	r3, [r1, #20]
 800b956:	600f      	str	r7, [r1, #0]
 800b958:	bf18      	it	ne
 800b95a:	2300      	movne	r3, #0
 800b95c:	eba6 0807 	sub.w	r8, r6, r7
 800b960:	608b      	str	r3, [r1, #8]
 800b962:	f1b8 0f00 	cmp.w	r8, #0
 800b966:	dd9c      	ble.n	800b8a2 <__sflush_r+0x1a>
 800b968:	6a21      	ldr	r1, [r4, #32]
 800b96a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b96c:	4643      	mov	r3, r8
 800b96e:	463a      	mov	r2, r7
 800b970:	4628      	mov	r0, r5
 800b972:	47b0      	blx	r6
 800b974:	2800      	cmp	r0, #0
 800b976:	dc06      	bgt.n	800b986 <__sflush_r+0xfe>
 800b978:	89a3      	ldrh	r3, [r4, #12]
 800b97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b97e:	81a3      	strh	r3, [r4, #12]
 800b980:	f04f 30ff 	mov.w	r0, #4294967295
 800b984:	e78e      	b.n	800b8a4 <__sflush_r+0x1c>
 800b986:	4407      	add	r7, r0
 800b988:	eba8 0800 	sub.w	r8, r8, r0
 800b98c:	e7e9      	b.n	800b962 <__sflush_r+0xda>
 800b98e:	bf00      	nop
 800b990:	20400001 	.word	0x20400001

0800b994 <_fflush_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	690b      	ldr	r3, [r1, #16]
 800b998:	4605      	mov	r5, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	b913      	cbnz	r3, 800b9a4 <_fflush_r+0x10>
 800b99e:	2500      	movs	r5, #0
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	b118      	cbz	r0, 800b9ae <_fflush_r+0x1a>
 800b9a6:	6983      	ldr	r3, [r0, #24]
 800b9a8:	b90b      	cbnz	r3, 800b9ae <_fflush_r+0x1a>
 800b9aa:	f7ff fbdd 	bl	800b168 <__sinit>
 800b9ae:	4b14      	ldr	r3, [pc, #80]	; (800ba00 <_fflush_r+0x6c>)
 800b9b0:	429c      	cmp	r4, r3
 800b9b2:	d11b      	bne.n	800b9ec <_fflush_r+0x58>
 800b9b4:	686c      	ldr	r4, [r5, #4]
 800b9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0ef      	beq.n	800b99e <_fflush_r+0xa>
 800b9be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9c0:	07d0      	lsls	r0, r2, #31
 800b9c2:	d404      	bmi.n	800b9ce <_fflush_r+0x3a>
 800b9c4:	0599      	lsls	r1, r3, #22
 800b9c6:	d402      	bmi.n	800b9ce <_fflush_r+0x3a>
 800b9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ca:	f7ff fc90 	bl	800b2ee <__retarget_lock_acquire_recursive>
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	f7ff ff59 	bl	800b888 <__sflush_r>
 800b9d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9d8:	07da      	lsls	r2, r3, #31
 800b9da:	4605      	mov	r5, r0
 800b9dc:	d4e0      	bmi.n	800b9a0 <_fflush_r+0xc>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	059b      	lsls	r3, r3, #22
 800b9e2:	d4dd      	bmi.n	800b9a0 <_fflush_r+0xc>
 800b9e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9e6:	f7ff fc83 	bl	800b2f0 <__retarget_lock_release_recursive>
 800b9ea:	e7d9      	b.n	800b9a0 <_fflush_r+0xc>
 800b9ec:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <_fflush_r+0x70>)
 800b9ee:	429c      	cmp	r4, r3
 800b9f0:	d101      	bne.n	800b9f6 <_fflush_r+0x62>
 800b9f2:	68ac      	ldr	r4, [r5, #8]
 800b9f4:	e7df      	b.n	800b9b6 <_fflush_r+0x22>
 800b9f6:	4b04      	ldr	r3, [pc, #16]	; (800ba08 <_fflush_r+0x74>)
 800b9f8:	429c      	cmp	r4, r3
 800b9fa:	bf08      	it	eq
 800b9fc:	68ec      	ldreq	r4, [r5, #12]
 800b9fe:	e7da      	b.n	800b9b6 <_fflush_r+0x22>
 800ba00:	0800c2dc 	.word	0x0800c2dc
 800ba04:	0800c2fc 	.word	0x0800c2fc
 800ba08:	0800c2bc 	.word	0x0800c2bc

0800ba0c <_lseek_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4d07      	ldr	r5, [pc, #28]	; (800ba2c <_lseek_r+0x20>)
 800ba10:	4604      	mov	r4, r0
 800ba12:	4608      	mov	r0, r1
 800ba14:	4611      	mov	r1, r2
 800ba16:	2200      	movs	r2, #0
 800ba18:	602a      	str	r2, [r5, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f7f5 fdf2 	bl	8001604 <_lseek>
 800ba20:	1c43      	adds	r3, r0, #1
 800ba22:	d102      	bne.n	800ba2a <_lseek_r+0x1e>
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	b103      	cbz	r3, 800ba2a <_lseek_r+0x1e>
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	240044d8 	.word	0x240044d8

0800ba30 <__swhatbuf_r>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	460e      	mov	r6, r1
 800ba34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba38:	2900      	cmp	r1, #0
 800ba3a:	b096      	sub	sp, #88	; 0x58
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	461d      	mov	r5, r3
 800ba40:	da08      	bge.n	800ba54 <__swhatbuf_r+0x24>
 800ba42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	602a      	str	r2, [r5, #0]
 800ba4a:	061a      	lsls	r2, r3, #24
 800ba4c:	d410      	bmi.n	800ba70 <__swhatbuf_r+0x40>
 800ba4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba52:	e00e      	b.n	800ba72 <__swhatbuf_r+0x42>
 800ba54:	466a      	mov	r2, sp
 800ba56:	f000 fba9 	bl	800c1ac <_fstat_r>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	dbf1      	blt.n	800ba42 <__swhatbuf_r+0x12>
 800ba5e:	9a01      	ldr	r2, [sp, #4]
 800ba60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba68:	425a      	negs	r2, r3
 800ba6a:	415a      	adcs	r2, r3
 800ba6c:	602a      	str	r2, [r5, #0]
 800ba6e:	e7ee      	b.n	800ba4e <__swhatbuf_r+0x1e>
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	2000      	movs	r0, #0
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	b016      	add	sp, #88	; 0x58
 800ba78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba7c <__smakebuf_r>:
 800ba7c:	898b      	ldrh	r3, [r1, #12]
 800ba7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba80:	079d      	lsls	r5, r3, #30
 800ba82:	4606      	mov	r6, r0
 800ba84:	460c      	mov	r4, r1
 800ba86:	d507      	bpl.n	800ba98 <__smakebuf_r+0x1c>
 800ba88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	6123      	str	r3, [r4, #16]
 800ba90:	2301      	movs	r3, #1
 800ba92:	6163      	str	r3, [r4, #20]
 800ba94:	b002      	add	sp, #8
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	ab01      	add	r3, sp, #4
 800ba9a:	466a      	mov	r2, sp
 800ba9c:	f7ff ffc8 	bl	800ba30 <__swhatbuf_r>
 800baa0:	9900      	ldr	r1, [sp, #0]
 800baa2:	4605      	mov	r5, r0
 800baa4:	4630      	mov	r0, r6
 800baa6:	f7ff fc4d 	bl	800b344 <_malloc_r>
 800baaa:	b948      	cbnz	r0, 800bac0 <__smakebuf_r+0x44>
 800baac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab0:	059a      	lsls	r2, r3, #22
 800bab2:	d4ef      	bmi.n	800ba94 <__smakebuf_r+0x18>
 800bab4:	f023 0303 	bic.w	r3, r3, #3
 800bab8:	f043 0302 	orr.w	r3, r3, #2
 800babc:	81a3      	strh	r3, [r4, #12]
 800babe:	e7e3      	b.n	800ba88 <__smakebuf_r+0xc>
 800bac0:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <__smakebuf_r+0x7c>)
 800bac2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bac4:	89a3      	ldrh	r3, [r4, #12]
 800bac6:	6020      	str	r0, [r4, #0]
 800bac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bacc:	81a3      	strh	r3, [r4, #12]
 800bace:	9b00      	ldr	r3, [sp, #0]
 800bad0:	6163      	str	r3, [r4, #20]
 800bad2:	9b01      	ldr	r3, [sp, #4]
 800bad4:	6120      	str	r0, [r4, #16]
 800bad6:	b15b      	cbz	r3, 800baf0 <__smakebuf_r+0x74>
 800bad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800badc:	4630      	mov	r0, r6
 800bade:	f000 fb77 	bl	800c1d0 <_isatty_r>
 800bae2:	b128      	cbz	r0, 800baf0 <__smakebuf_r+0x74>
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	f023 0303 	bic.w	r3, r3, #3
 800baea:	f043 0301 	orr.w	r3, r3, #1
 800baee:	81a3      	strh	r3, [r4, #12]
 800baf0:	89a0      	ldrh	r0, [r4, #12]
 800baf2:	4305      	orrs	r5, r0
 800baf4:	81a5      	strh	r5, [r4, #12]
 800baf6:	e7cd      	b.n	800ba94 <__smakebuf_r+0x18>
 800baf8:	0800b101 	.word	0x0800b101

0800bafc <__malloc_lock>:
 800bafc:	4801      	ldr	r0, [pc, #4]	; (800bb04 <__malloc_lock+0x8>)
 800bafe:	f7ff bbf6 	b.w	800b2ee <__retarget_lock_acquire_recursive>
 800bb02:	bf00      	nop
 800bb04:	240044cc 	.word	0x240044cc

0800bb08 <__malloc_unlock>:
 800bb08:	4801      	ldr	r0, [pc, #4]	; (800bb10 <__malloc_unlock+0x8>)
 800bb0a:	f7ff bbf1 	b.w	800b2f0 <__retarget_lock_release_recursive>
 800bb0e:	bf00      	nop
 800bb10:	240044cc 	.word	0x240044cc

0800bb14 <_free_r>:
 800bb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb16:	2900      	cmp	r1, #0
 800bb18:	d044      	beq.n	800bba4 <_free_r+0x90>
 800bb1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb1e:	9001      	str	r0, [sp, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f1a1 0404 	sub.w	r4, r1, #4
 800bb26:	bfb8      	it	lt
 800bb28:	18e4      	addlt	r4, r4, r3
 800bb2a:	f7ff ffe7 	bl	800bafc <__malloc_lock>
 800bb2e:	4a1e      	ldr	r2, [pc, #120]	; (800bba8 <_free_r+0x94>)
 800bb30:	9801      	ldr	r0, [sp, #4]
 800bb32:	6813      	ldr	r3, [r2, #0]
 800bb34:	b933      	cbnz	r3, 800bb44 <_free_r+0x30>
 800bb36:	6063      	str	r3, [r4, #4]
 800bb38:	6014      	str	r4, [r2, #0]
 800bb3a:	b003      	add	sp, #12
 800bb3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb40:	f7ff bfe2 	b.w	800bb08 <__malloc_unlock>
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	d908      	bls.n	800bb5a <_free_r+0x46>
 800bb48:	6825      	ldr	r5, [r4, #0]
 800bb4a:	1961      	adds	r1, r4, r5
 800bb4c:	428b      	cmp	r3, r1
 800bb4e:	bf01      	itttt	eq
 800bb50:	6819      	ldreq	r1, [r3, #0]
 800bb52:	685b      	ldreq	r3, [r3, #4]
 800bb54:	1949      	addeq	r1, r1, r5
 800bb56:	6021      	streq	r1, [r4, #0]
 800bb58:	e7ed      	b.n	800bb36 <_free_r+0x22>
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	b10b      	cbz	r3, 800bb64 <_free_r+0x50>
 800bb60:	42a3      	cmp	r3, r4
 800bb62:	d9fa      	bls.n	800bb5a <_free_r+0x46>
 800bb64:	6811      	ldr	r1, [r2, #0]
 800bb66:	1855      	adds	r5, r2, r1
 800bb68:	42a5      	cmp	r5, r4
 800bb6a:	d10b      	bne.n	800bb84 <_free_r+0x70>
 800bb6c:	6824      	ldr	r4, [r4, #0]
 800bb6e:	4421      	add	r1, r4
 800bb70:	1854      	adds	r4, r2, r1
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	6011      	str	r1, [r2, #0]
 800bb76:	d1e0      	bne.n	800bb3a <_free_r+0x26>
 800bb78:	681c      	ldr	r4, [r3, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	6053      	str	r3, [r2, #4]
 800bb7e:	4421      	add	r1, r4
 800bb80:	6011      	str	r1, [r2, #0]
 800bb82:	e7da      	b.n	800bb3a <_free_r+0x26>
 800bb84:	d902      	bls.n	800bb8c <_free_r+0x78>
 800bb86:	230c      	movs	r3, #12
 800bb88:	6003      	str	r3, [r0, #0]
 800bb8a:	e7d6      	b.n	800bb3a <_free_r+0x26>
 800bb8c:	6825      	ldr	r5, [r4, #0]
 800bb8e:	1961      	adds	r1, r4, r5
 800bb90:	428b      	cmp	r3, r1
 800bb92:	bf04      	itt	eq
 800bb94:	6819      	ldreq	r1, [r3, #0]
 800bb96:	685b      	ldreq	r3, [r3, #4]
 800bb98:	6063      	str	r3, [r4, #4]
 800bb9a:	bf04      	itt	eq
 800bb9c:	1949      	addeq	r1, r1, r5
 800bb9e:	6021      	streq	r1, [r4, #0]
 800bba0:	6054      	str	r4, [r2, #4]
 800bba2:	e7ca      	b.n	800bb3a <_free_r+0x26>
 800bba4:	b003      	add	sp, #12
 800bba6:	bd30      	pop	{r4, r5, pc}
 800bba8:	240044d0 	.word	0x240044d0

0800bbac <__sfputc_r>:
 800bbac:	6893      	ldr	r3, [r2, #8]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	b410      	push	{r4}
 800bbb4:	6093      	str	r3, [r2, #8]
 800bbb6:	da08      	bge.n	800bbca <__sfputc_r+0x1e>
 800bbb8:	6994      	ldr	r4, [r2, #24]
 800bbba:	42a3      	cmp	r3, r4
 800bbbc:	db01      	blt.n	800bbc2 <__sfputc_r+0x16>
 800bbbe:	290a      	cmp	r1, #10
 800bbc0:	d103      	bne.n	800bbca <__sfputc_r+0x1e>
 800bbc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbc6:	f7ff bd7d 	b.w	800b6c4 <__swbuf_r>
 800bbca:	6813      	ldr	r3, [r2, #0]
 800bbcc:	1c58      	adds	r0, r3, #1
 800bbce:	6010      	str	r0, [r2, #0]
 800bbd0:	7019      	strb	r1, [r3, #0]
 800bbd2:	4608      	mov	r0, r1
 800bbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <__sfputs_r>:
 800bbda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	4614      	mov	r4, r2
 800bbe2:	18d5      	adds	r5, r2, r3
 800bbe4:	42ac      	cmp	r4, r5
 800bbe6:	d101      	bne.n	800bbec <__sfputs_r+0x12>
 800bbe8:	2000      	movs	r0, #0
 800bbea:	e007      	b.n	800bbfc <__sfputs_r+0x22>
 800bbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf0:	463a      	mov	r2, r7
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7ff ffda 	bl	800bbac <__sfputc_r>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d1f3      	bne.n	800bbe4 <__sfputs_r+0xa>
 800bbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc00 <_vfiprintf_r>:
 800bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc04:	460d      	mov	r5, r1
 800bc06:	b09d      	sub	sp, #116	; 0x74
 800bc08:	4614      	mov	r4, r2
 800bc0a:	4698      	mov	r8, r3
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	b118      	cbz	r0, 800bc18 <_vfiprintf_r+0x18>
 800bc10:	6983      	ldr	r3, [r0, #24]
 800bc12:	b90b      	cbnz	r3, 800bc18 <_vfiprintf_r+0x18>
 800bc14:	f7ff faa8 	bl	800b168 <__sinit>
 800bc18:	4b89      	ldr	r3, [pc, #548]	; (800be40 <_vfiprintf_r+0x240>)
 800bc1a:	429d      	cmp	r5, r3
 800bc1c:	d11b      	bne.n	800bc56 <_vfiprintf_r+0x56>
 800bc1e:	6875      	ldr	r5, [r6, #4]
 800bc20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc22:	07d9      	lsls	r1, r3, #31
 800bc24:	d405      	bmi.n	800bc32 <_vfiprintf_r+0x32>
 800bc26:	89ab      	ldrh	r3, [r5, #12]
 800bc28:	059a      	lsls	r2, r3, #22
 800bc2a:	d402      	bmi.n	800bc32 <_vfiprintf_r+0x32>
 800bc2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc2e:	f7ff fb5e 	bl	800b2ee <__retarget_lock_acquire_recursive>
 800bc32:	89ab      	ldrh	r3, [r5, #12]
 800bc34:	071b      	lsls	r3, r3, #28
 800bc36:	d501      	bpl.n	800bc3c <_vfiprintf_r+0x3c>
 800bc38:	692b      	ldr	r3, [r5, #16]
 800bc3a:	b9eb      	cbnz	r3, 800bc78 <_vfiprintf_r+0x78>
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f7ff fda4 	bl	800b78c <__swsetup_r>
 800bc44:	b1c0      	cbz	r0, 800bc78 <_vfiprintf_r+0x78>
 800bc46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc48:	07dc      	lsls	r4, r3, #31
 800bc4a:	d50e      	bpl.n	800bc6a <_vfiprintf_r+0x6a>
 800bc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc50:	b01d      	add	sp, #116	; 0x74
 800bc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc56:	4b7b      	ldr	r3, [pc, #492]	; (800be44 <_vfiprintf_r+0x244>)
 800bc58:	429d      	cmp	r5, r3
 800bc5a:	d101      	bne.n	800bc60 <_vfiprintf_r+0x60>
 800bc5c:	68b5      	ldr	r5, [r6, #8]
 800bc5e:	e7df      	b.n	800bc20 <_vfiprintf_r+0x20>
 800bc60:	4b79      	ldr	r3, [pc, #484]	; (800be48 <_vfiprintf_r+0x248>)
 800bc62:	429d      	cmp	r5, r3
 800bc64:	bf08      	it	eq
 800bc66:	68f5      	ldreq	r5, [r6, #12]
 800bc68:	e7da      	b.n	800bc20 <_vfiprintf_r+0x20>
 800bc6a:	89ab      	ldrh	r3, [r5, #12]
 800bc6c:	0598      	lsls	r0, r3, #22
 800bc6e:	d4ed      	bmi.n	800bc4c <_vfiprintf_r+0x4c>
 800bc70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc72:	f7ff fb3d 	bl	800b2f0 <__retarget_lock_release_recursive>
 800bc76:	e7e9      	b.n	800bc4c <_vfiprintf_r+0x4c>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc7c:	2320      	movs	r3, #32
 800bc7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc82:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc86:	2330      	movs	r3, #48	; 0x30
 800bc88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be4c <_vfiprintf_r+0x24c>
 800bc8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc90:	f04f 0901 	mov.w	r9, #1
 800bc94:	4623      	mov	r3, r4
 800bc96:	469a      	mov	sl, r3
 800bc98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc9c:	b10a      	cbz	r2, 800bca2 <_vfiprintf_r+0xa2>
 800bc9e:	2a25      	cmp	r2, #37	; 0x25
 800bca0:	d1f9      	bne.n	800bc96 <_vfiprintf_r+0x96>
 800bca2:	ebba 0b04 	subs.w	fp, sl, r4
 800bca6:	d00b      	beq.n	800bcc0 <_vfiprintf_r+0xc0>
 800bca8:	465b      	mov	r3, fp
 800bcaa:	4622      	mov	r2, r4
 800bcac:	4629      	mov	r1, r5
 800bcae:	4630      	mov	r0, r6
 800bcb0:	f7ff ff93 	bl	800bbda <__sfputs_r>
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	f000 80aa 	beq.w	800be0e <_vfiprintf_r+0x20e>
 800bcba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcbc:	445a      	add	r2, fp
 800bcbe:	9209      	str	r2, [sp, #36]	; 0x24
 800bcc0:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 80a2 	beq.w	800be0e <_vfiprintf_r+0x20e>
 800bcca:	2300      	movs	r3, #0
 800bccc:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcd4:	f10a 0a01 	add.w	sl, sl, #1
 800bcd8:	9304      	str	r3, [sp, #16]
 800bcda:	9307      	str	r3, [sp, #28]
 800bcdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bce0:	931a      	str	r3, [sp, #104]	; 0x68
 800bce2:	4654      	mov	r4, sl
 800bce4:	2205      	movs	r2, #5
 800bce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcea:	4858      	ldr	r0, [pc, #352]	; (800be4c <_vfiprintf_r+0x24c>)
 800bcec:	f7f4 faf8 	bl	80002e0 <memchr>
 800bcf0:	9a04      	ldr	r2, [sp, #16]
 800bcf2:	b9d8      	cbnz	r0, 800bd2c <_vfiprintf_r+0x12c>
 800bcf4:	06d1      	lsls	r1, r2, #27
 800bcf6:	bf44      	itt	mi
 800bcf8:	2320      	movmi	r3, #32
 800bcfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcfe:	0713      	lsls	r3, r2, #28
 800bd00:	bf44      	itt	mi
 800bd02:	232b      	movmi	r3, #43	; 0x2b
 800bd04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd08:	f89a 3000 	ldrb.w	r3, [sl]
 800bd0c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd0e:	d015      	beq.n	800bd3c <_vfiprintf_r+0x13c>
 800bd10:	9a07      	ldr	r2, [sp, #28]
 800bd12:	4654      	mov	r4, sl
 800bd14:	2000      	movs	r0, #0
 800bd16:	f04f 0c0a 	mov.w	ip, #10
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd20:	3b30      	subs	r3, #48	; 0x30
 800bd22:	2b09      	cmp	r3, #9
 800bd24:	d94e      	bls.n	800bdc4 <_vfiprintf_r+0x1c4>
 800bd26:	b1b0      	cbz	r0, 800bd56 <_vfiprintf_r+0x156>
 800bd28:	9207      	str	r2, [sp, #28]
 800bd2a:	e014      	b.n	800bd56 <_vfiprintf_r+0x156>
 800bd2c:	eba0 0308 	sub.w	r3, r0, r8
 800bd30:	fa09 f303 	lsl.w	r3, r9, r3
 800bd34:	4313      	orrs	r3, r2
 800bd36:	9304      	str	r3, [sp, #16]
 800bd38:	46a2      	mov	sl, r4
 800bd3a:	e7d2      	b.n	800bce2 <_vfiprintf_r+0xe2>
 800bd3c:	9b03      	ldr	r3, [sp, #12]
 800bd3e:	1d19      	adds	r1, r3, #4
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	9103      	str	r1, [sp, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	bfbb      	ittet	lt
 800bd48:	425b      	neglt	r3, r3
 800bd4a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd4e:	9307      	strge	r3, [sp, #28]
 800bd50:	9307      	strlt	r3, [sp, #28]
 800bd52:	bfb8      	it	lt
 800bd54:	9204      	strlt	r2, [sp, #16]
 800bd56:	7823      	ldrb	r3, [r4, #0]
 800bd58:	2b2e      	cmp	r3, #46	; 0x2e
 800bd5a:	d10c      	bne.n	800bd76 <_vfiprintf_r+0x176>
 800bd5c:	7863      	ldrb	r3, [r4, #1]
 800bd5e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd60:	d135      	bne.n	800bdce <_vfiprintf_r+0x1ce>
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	1d1a      	adds	r2, r3, #4
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	9203      	str	r2, [sp, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	bfb8      	it	lt
 800bd6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd72:	3402      	adds	r4, #2
 800bd74:	9305      	str	r3, [sp, #20]
 800bd76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be5c <_vfiprintf_r+0x25c>
 800bd7a:	7821      	ldrb	r1, [r4, #0]
 800bd7c:	2203      	movs	r2, #3
 800bd7e:	4650      	mov	r0, sl
 800bd80:	f7f4 faae 	bl	80002e0 <memchr>
 800bd84:	b140      	cbz	r0, 800bd98 <_vfiprintf_r+0x198>
 800bd86:	2340      	movs	r3, #64	; 0x40
 800bd88:	eba0 000a 	sub.w	r0, r0, sl
 800bd8c:	fa03 f000 	lsl.w	r0, r3, r0
 800bd90:	9b04      	ldr	r3, [sp, #16]
 800bd92:	4303      	orrs	r3, r0
 800bd94:	3401      	adds	r4, #1
 800bd96:	9304      	str	r3, [sp, #16]
 800bd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9c:	482c      	ldr	r0, [pc, #176]	; (800be50 <_vfiprintf_r+0x250>)
 800bd9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bda2:	2206      	movs	r2, #6
 800bda4:	f7f4 fa9c 	bl	80002e0 <memchr>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d03f      	beq.n	800be2c <_vfiprintf_r+0x22c>
 800bdac:	4b29      	ldr	r3, [pc, #164]	; (800be54 <_vfiprintf_r+0x254>)
 800bdae:	bb1b      	cbnz	r3, 800bdf8 <_vfiprintf_r+0x1f8>
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	3307      	adds	r3, #7
 800bdb4:	f023 0307 	bic.w	r3, r3, #7
 800bdb8:	3308      	adds	r3, #8
 800bdba:	9303      	str	r3, [sp, #12]
 800bdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdbe:	443b      	add	r3, r7
 800bdc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc2:	e767      	b.n	800bc94 <_vfiprintf_r+0x94>
 800bdc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdc8:	460c      	mov	r4, r1
 800bdca:	2001      	movs	r0, #1
 800bdcc:	e7a5      	b.n	800bd1a <_vfiprintf_r+0x11a>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	3401      	adds	r4, #1
 800bdd2:	9305      	str	r3, [sp, #20]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	f04f 0c0a 	mov.w	ip, #10
 800bdda:	4620      	mov	r0, r4
 800bddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bde0:	3a30      	subs	r2, #48	; 0x30
 800bde2:	2a09      	cmp	r2, #9
 800bde4:	d903      	bls.n	800bdee <_vfiprintf_r+0x1ee>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0c5      	beq.n	800bd76 <_vfiprintf_r+0x176>
 800bdea:	9105      	str	r1, [sp, #20]
 800bdec:	e7c3      	b.n	800bd76 <_vfiprintf_r+0x176>
 800bdee:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e7f0      	b.n	800bdda <_vfiprintf_r+0x1da>
 800bdf8:	ab03      	add	r3, sp, #12
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	462a      	mov	r2, r5
 800bdfe:	4b16      	ldr	r3, [pc, #88]	; (800be58 <_vfiprintf_r+0x258>)
 800be00:	a904      	add	r1, sp, #16
 800be02:	4630      	mov	r0, r6
 800be04:	f3af 8000 	nop.w
 800be08:	4607      	mov	r7, r0
 800be0a:	1c78      	adds	r0, r7, #1
 800be0c:	d1d6      	bne.n	800bdbc <_vfiprintf_r+0x1bc>
 800be0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be10:	07d9      	lsls	r1, r3, #31
 800be12:	d405      	bmi.n	800be20 <_vfiprintf_r+0x220>
 800be14:	89ab      	ldrh	r3, [r5, #12]
 800be16:	059a      	lsls	r2, r3, #22
 800be18:	d402      	bmi.n	800be20 <_vfiprintf_r+0x220>
 800be1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be1c:	f7ff fa68 	bl	800b2f0 <__retarget_lock_release_recursive>
 800be20:	89ab      	ldrh	r3, [r5, #12]
 800be22:	065b      	lsls	r3, r3, #25
 800be24:	f53f af12 	bmi.w	800bc4c <_vfiprintf_r+0x4c>
 800be28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be2a:	e711      	b.n	800bc50 <_vfiprintf_r+0x50>
 800be2c:	ab03      	add	r3, sp, #12
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	462a      	mov	r2, r5
 800be32:	4b09      	ldr	r3, [pc, #36]	; (800be58 <_vfiprintf_r+0x258>)
 800be34:	a904      	add	r1, sp, #16
 800be36:	4630      	mov	r0, r6
 800be38:	f000 f880 	bl	800bf3c <_printf_i>
 800be3c:	e7e4      	b.n	800be08 <_vfiprintf_r+0x208>
 800be3e:	bf00      	nop
 800be40:	0800c2dc 	.word	0x0800c2dc
 800be44:	0800c2fc 	.word	0x0800c2fc
 800be48:	0800c2bc 	.word	0x0800c2bc
 800be4c:	0800c320 	.word	0x0800c320
 800be50:	0800c32a 	.word	0x0800c32a
 800be54:	00000000 	.word	0x00000000
 800be58:	0800bbdb 	.word	0x0800bbdb
 800be5c:	0800c326 	.word	0x0800c326

0800be60 <_printf_common>:
 800be60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be64:	4616      	mov	r6, r2
 800be66:	4699      	mov	r9, r3
 800be68:	688a      	ldr	r2, [r1, #8]
 800be6a:	690b      	ldr	r3, [r1, #16]
 800be6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be70:	4293      	cmp	r3, r2
 800be72:	bfb8      	it	lt
 800be74:	4613      	movlt	r3, r2
 800be76:	6033      	str	r3, [r6, #0]
 800be78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be7c:	4607      	mov	r7, r0
 800be7e:	460c      	mov	r4, r1
 800be80:	b10a      	cbz	r2, 800be86 <_printf_common+0x26>
 800be82:	3301      	adds	r3, #1
 800be84:	6033      	str	r3, [r6, #0]
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	0699      	lsls	r1, r3, #26
 800be8a:	bf42      	ittt	mi
 800be8c:	6833      	ldrmi	r3, [r6, #0]
 800be8e:	3302      	addmi	r3, #2
 800be90:	6033      	strmi	r3, [r6, #0]
 800be92:	6825      	ldr	r5, [r4, #0]
 800be94:	f015 0506 	ands.w	r5, r5, #6
 800be98:	d106      	bne.n	800bea8 <_printf_common+0x48>
 800be9a:	f104 0a19 	add.w	sl, r4, #25
 800be9e:	68e3      	ldr	r3, [r4, #12]
 800bea0:	6832      	ldr	r2, [r6, #0]
 800bea2:	1a9b      	subs	r3, r3, r2
 800bea4:	42ab      	cmp	r3, r5
 800bea6:	dc26      	bgt.n	800bef6 <_printf_common+0x96>
 800bea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800beac:	1e13      	subs	r3, r2, #0
 800beae:	6822      	ldr	r2, [r4, #0]
 800beb0:	bf18      	it	ne
 800beb2:	2301      	movne	r3, #1
 800beb4:	0692      	lsls	r2, r2, #26
 800beb6:	d42b      	bmi.n	800bf10 <_printf_common+0xb0>
 800beb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bebc:	4649      	mov	r1, r9
 800bebe:	4638      	mov	r0, r7
 800bec0:	47c0      	blx	r8
 800bec2:	3001      	adds	r0, #1
 800bec4:	d01e      	beq.n	800bf04 <_printf_common+0xa4>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	68e5      	ldr	r5, [r4, #12]
 800beca:	6832      	ldr	r2, [r6, #0]
 800becc:	f003 0306 	and.w	r3, r3, #6
 800bed0:	2b04      	cmp	r3, #4
 800bed2:	bf08      	it	eq
 800bed4:	1aad      	subeq	r5, r5, r2
 800bed6:	68a3      	ldr	r3, [r4, #8]
 800bed8:	6922      	ldr	r2, [r4, #16]
 800beda:	bf0c      	ite	eq
 800bedc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bee0:	2500      	movne	r5, #0
 800bee2:	4293      	cmp	r3, r2
 800bee4:	bfc4      	itt	gt
 800bee6:	1a9b      	subgt	r3, r3, r2
 800bee8:	18ed      	addgt	r5, r5, r3
 800beea:	2600      	movs	r6, #0
 800beec:	341a      	adds	r4, #26
 800beee:	42b5      	cmp	r5, r6
 800bef0:	d11a      	bne.n	800bf28 <_printf_common+0xc8>
 800bef2:	2000      	movs	r0, #0
 800bef4:	e008      	b.n	800bf08 <_printf_common+0xa8>
 800bef6:	2301      	movs	r3, #1
 800bef8:	4652      	mov	r2, sl
 800befa:	4649      	mov	r1, r9
 800befc:	4638      	mov	r0, r7
 800befe:	47c0      	blx	r8
 800bf00:	3001      	adds	r0, #1
 800bf02:	d103      	bne.n	800bf0c <_printf_common+0xac>
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295
 800bf08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0c:	3501      	adds	r5, #1
 800bf0e:	e7c6      	b.n	800be9e <_printf_common+0x3e>
 800bf10:	18e1      	adds	r1, r4, r3
 800bf12:	1c5a      	adds	r2, r3, #1
 800bf14:	2030      	movs	r0, #48	; 0x30
 800bf16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf1a:	4422      	add	r2, r4
 800bf1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf24:	3302      	adds	r3, #2
 800bf26:	e7c7      	b.n	800beb8 <_printf_common+0x58>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	4638      	mov	r0, r7
 800bf30:	47c0      	blx	r8
 800bf32:	3001      	adds	r0, #1
 800bf34:	d0e6      	beq.n	800bf04 <_printf_common+0xa4>
 800bf36:	3601      	adds	r6, #1
 800bf38:	e7d9      	b.n	800beee <_printf_common+0x8e>
	...

0800bf3c <_printf_i>:
 800bf3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf40:	7e0f      	ldrb	r7, [r1, #24]
 800bf42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf44:	2f78      	cmp	r7, #120	; 0x78
 800bf46:	4691      	mov	r9, r2
 800bf48:	4680      	mov	r8, r0
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	469a      	mov	sl, r3
 800bf4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf52:	d807      	bhi.n	800bf64 <_printf_i+0x28>
 800bf54:	2f62      	cmp	r7, #98	; 0x62
 800bf56:	d80a      	bhi.n	800bf6e <_printf_i+0x32>
 800bf58:	2f00      	cmp	r7, #0
 800bf5a:	f000 80d8 	beq.w	800c10e <_printf_i+0x1d2>
 800bf5e:	2f58      	cmp	r7, #88	; 0x58
 800bf60:	f000 80a3 	beq.w	800c0aa <_printf_i+0x16e>
 800bf64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf6c:	e03a      	b.n	800bfe4 <_printf_i+0xa8>
 800bf6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf72:	2b15      	cmp	r3, #21
 800bf74:	d8f6      	bhi.n	800bf64 <_printf_i+0x28>
 800bf76:	a101      	add	r1, pc, #4	; (adr r1, 800bf7c <_printf_i+0x40>)
 800bf78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf7c:	0800bfd5 	.word	0x0800bfd5
 800bf80:	0800bfe9 	.word	0x0800bfe9
 800bf84:	0800bf65 	.word	0x0800bf65
 800bf88:	0800bf65 	.word	0x0800bf65
 800bf8c:	0800bf65 	.word	0x0800bf65
 800bf90:	0800bf65 	.word	0x0800bf65
 800bf94:	0800bfe9 	.word	0x0800bfe9
 800bf98:	0800bf65 	.word	0x0800bf65
 800bf9c:	0800bf65 	.word	0x0800bf65
 800bfa0:	0800bf65 	.word	0x0800bf65
 800bfa4:	0800bf65 	.word	0x0800bf65
 800bfa8:	0800c0f5 	.word	0x0800c0f5
 800bfac:	0800c019 	.word	0x0800c019
 800bfb0:	0800c0d7 	.word	0x0800c0d7
 800bfb4:	0800bf65 	.word	0x0800bf65
 800bfb8:	0800bf65 	.word	0x0800bf65
 800bfbc:	0800c117 	.word	0x0800c117
 800bfc0:	0800bf65 	.word	0x0800bf65
 800bfc4:	0800c019 	.word	0x0800c019
 800bfc8:	0800bf65 	.word	0x0800bf65
 800bfcc:	0800bf65 	.word	0x0800bf65
 800bfd0:	0800c0df 	.word	0x0800c0df
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	1d1a      	adds	r2, r3, #4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	602a      	str	r2, [r5, #0]
 800bfdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e0a3      	b.n	800c130 <_printf_i+0x1f4>
 800bfe8:	6820      	ldr	r0, [r4, #0]
 800bfea:	6829      	ldr	r1, [r5, #0]
 800bfec:	0606      	lsls	r6, r0, #24
 800bfee:	f101 0304 	add.w	r3, r1, #4
 800bff2:	d50a      	bpl.n	800c00a <_printf_i+0xce>
 800bff4:	680e      	ldr	r6, [r1, #0]
 800bff6:	602b      	str	r3, [r5, #0]
 800bff8:	2e00      	cmp	r6, #0
 800bffa:	da03      	bge.n	800c004 <_printf_i+0xc8>
 800bffc:	232d      	movs	r3, #45	; 0x2d
 800bffe:	4276      	negs	r6, r6
 800c000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c004:	485e      	ldr	r0, [pc, #376]	; (800c180 <_printf_i+0x244>)
 800c006:	230a      	movs	r3, #10
 800c008:	e019      	b.n	800c03e <_printf_i+0x102>
 800c00a:	680e      	ldr	r6, [r1, #0]
 800c00c:	602b      	str	r3, [r5, #0]
 800c00e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c012:	bf18      	it	ne
 800c014:	b236      	sxthne	r6, r6
 800c016:	e7ef      	b.n	800bff8 <_printf_i+0xbc>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	6820      	ldr	r0, [r4, #0]
 800c01c:	1d19      	adds	r1, r3, #4
 800c01e:	6029      	str	r1, [r5, #0]
 800c020:	0601      	lsls	r1, r0, #24
 800c022:	d501      	bpl.n	800c028 <_printf_i+0xec>
 800c024:	681e      	ldr	r6, [r3, #0]
 800c026:	e002      	b.n	800c02e <_printf_i+0xf2>
 800c028:	0646      	lsls	r6, r0, #25
 800c02a:	d5fb      	bpl.n	800c024 <_printf_i+0xe8>
 800c02c:	881e      	ldrh	r6, [r3, #0]
 800c02e:	4854      	ldr	r0, [pc, #336]	; (800c180 <_printf_i+0x244>)
 800c030:	2f6f      	cmp	r7, #111	; 0x6f
 800c032:	bf0c      	ite	eq
 800c034:	2308      	moveq	r3, #8
 800c036:	230a      	movne	r3, #10
 800c038:	2100      	movs	r1, #0
 800c03a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c03e:	6865      	ldr	r5, [r4, #4]
 800c040:	60a5      	str	r5, [r4, #8]
 800c042:	2d00      	cmp	r5, #0
 800c044:	bfa2      	ittt	ge
 800c046:	6821      	ldrge	r1, [r4, #0]
 800c048:	f021 0104 	bicge.w	r1, r1, #4
 800c04c:	6021      	strge	r1, [r4, #0]
 800c04e:	b90e      	cbnz	r6, 800c054 <_printf_i+0x118>
 800c050:	2d00      	cmp	r5, #0
 800c052:	d04d      	beq.n	800c0f0 <_printf_i+0x1b4>
 800c054:	4615      	mov	r5, r2
 800c056:	fbb6 f1f3 	udiv	r1, r6, r3
 800c05a:	fb03 6711 	mls	r7, r3, r1, r6
 800c05e:	5dc7      	ldrb	r7, [r0, r7]
 800c060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c064:	4637      	mov	r7, r6
 800c066:	42bb      	cmp	r3, r7
 800c068:	460e      	mov	r6, r1
 800c06a:	d9f4      	bls.n	800c056 <_printf_i+0x11a>
 800c06c:	2b08      	cmp	r3, #8
 800c06e:	d10b      	bne.n	800c088 <_printf_i+0x14c>
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	07de      	lsls	r6, r3, #31
 800c074:	d508      	bpl.n	800c088 <_printf_i+0x14c>
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	6861      	ldr	r1, [r4, #4]
 800c07a:	4299      	cmp	r1, r3
 800c07c:	bfde      	ittt	le
 800c07e:	2330      	movle	r3, #48	; 0x30
 800c080:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c084:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c088:	1b52      	subs	r2, r2, r5
 800c08a:	6122      	str	r2, [r4, #16]
 800c08c:	f8cd a000 	str.w	sl, [sp]
 800c090:	464b      	mov	r3, r9
 800c092:	aa03      	add	r2, sp, #12
 800c094:	4621      	mov	r1, r4
 800c096:	4640      	mov	r0, r8
 800c098:	f7ff fee2 	bl	800be60 <_printf_common>
 800c09c:	3001      	adds	r0, #1
 800c09e:	d14c      	bne.n	800c13a <_printf_i+0x1fe>
 800c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a4:	b004      	add	sp, #16
 800c0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0aa:	4835      	ldr	r0, [pc, #212]	; (800c180 <_printf_i+0x244>)
 800c0ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0b0:	6829      	ldr	r1, [r5, #0]
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0b8:	6029      	str	r1, [r5, #0]
 800c0ba:	061d      	lsls	r5, r3, #24
 800c0bc:	d514      	bpl.n	800c0e8 <_printf_i+0x1ac>
 800c0be:	07df      	lsls	r7, r3, #31
 800c0c0:	bf44      	itt	mi
 800c0c2:	f043 0320 	orrmi.w	r3, r3, #32
 800c0c6:	6023      	strmi	r3, [r4, #0]
 800c0c8:	b91e      	cbnz	r6, 800c0d2 <_printf_i+0x196>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	f023 0320 	bic.w	r3, r3, #32
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	2310      	movs	r3, #16
 800c0d4:	e7b0      	b.n	800c038 <_printf_i+0xfc>
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	f043 0320 	orr.w	r3, r3, #32
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	2378      	movs	r3, #120	; 0x78
 800c0e0:	4828      	ldr	r0, [pc, #160]	; (800c184 <_printf_i+0x248>)
 800c0e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0e6:	e7e3      	b.n	800c0b0 <_printf_i+0x174>
 800c0e8:	0659      	lsls	r1, r3, #25
 800c0ea:	bf48      	it	mi
 800c0ec:	b2b6      	uxthmi	r6, r6
 800c0ee:	e7e6      	b.n	800c0be <_printf_i+0x182>
 800c0f0:	4615      	mov	r5, r2
 800c0f2:	e7bb      	b.n	800c06c <_printf_i+0x130>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	6826      	ldr	r6, [r4, #0]
 800c0f8:	6961      	ldr	r1, [r4, #20]
 800c0fa:	1d18      	adds	r0, r3, #4
 800c0fc:	6028      	str	r0, [r5, #0]
 800c0fe:	0635      	lsls	r5, r6, #24
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	d501      	bpl.n	800c108 <_printf_i+0x1cc>
 800c104:	6019      	str	r1, [r3, #0]
 800c106:	e002      	b.n	800c10e <_printf_i+0x1d2>
 800c108:	0670      	lsls	r0, r6, #25
 800c10a:	d5fb      	bpl.n	800c104 <_printf_i+0x1c8>
 800c10c:	8019      	strh	r1, [r3, #0]
 800c10e:	2300      	movs	r3, #0
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	4615      	mov	r5, r2
 800c114:	e7ba      	b.n	800c08c <_printf_i+0x150>
 800c116:	682b      	ldr	r3, [r5, #0]
 800c118:	1d1a      	adds	r2, r3, #4
 800c11a:	602a      	str	r2, [r5, #0]
 800c11c:	681d      	ldr	r5, [r3, #0]
 800c11e:	6862      	ldr	r2, [r4, #4]
 800c120:	2100      	movs	r1, #0
 800c122:	4628      	mov	r0, r5
 800c124:	f7f4 f8dc 	bl	80002e0 <memchr>
 800c128:	b108      	cbz	r0, 800c12e <_printf_i+0x1f2>
 800c12a:	1b40      	subs	r0, r0, r5
 800c12c:	6060      	str	r0, [r4, #4]
 800c12e:	6863      	ldr	r3, [r4, #4]
 800c130:	6123      	str	r3, [r4, #16]
 800c132:	2300      	movs	r3, #0
 800c134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c138:	e7a8      	b.n	800c08c <_printf_i+0x150>
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	462a      	mov	r2, r5
 800c13e:	4649      	mov	r1, r9
 800c140:	4640      	mov	r0, r8
 800c142:	47d0      	blx	sl
 800c144:	3001      	adds	r0, #1
 800c146:	d0ab      	beq.n	800c0a0 <_printf_i+0x164>
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	079b      	lsls	r3, r3, #30
 800c14c:	d413      	bmi.n	800c176 <_printf_i+0x23a>
 800c14e:	68e0      	ldr	r0, [r4, #12]
 800c150:	9b03      	ldr	r3, [sp, #12]
 800c152:	4298      	cmp	r0, r3
 800c154:	bfb8      	it	lt
 800c156:	4618      	movlt	r0, r3
 800c158:	e7a4      	b.n	800c0a4 <_printf_i+0x168>
 800c15a:	2301      	movs	r3, #1
 800c15c:	4632      	mov	r2, r6
 800c15e:	4649      	mov	r1, r9
 800c160:	4640      	mov	r0, r8
 800c162:	47d0      	blx	sl
 800c164:	3001      	adds	r0, #1
 800c166:	d09b      	beq.n	800c0a0 <_printf_i+0x164>
 800c168:	3501      	adds	r5, #1
 800c16a:	68e3      	ldr	r3, [r4, #12]
 800c16c:	9903      	ldr	r1, [sp, #12]
 800c16e:	1a5b      	subs	r3, r3, r1
 800c170:	42ab      	cmp	r3, r5
 800c172:	dcf2      	bgt.n	800c15a <_printf_i+0x21e>
 800c174:	e7eb      	b.n	800c14e <_printf_i+0x212>
 800c176:	2500      	movs	r5, #0
 800c178:	f104 0619 	add.w	r6, r4, #25
 800c17c:	e7f5      	b.n	800c16a <_printf_i+0x22e>
 800c17e:	bf00      	nop
 800c180:	0800c331 	.word	0x0800c331
 800c184:	0800c342 	.word	0x0800c342

0800c188 <_read_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d07      	ldr	r5, [pc, #28]	; (800c1a8 <_read_r+0x20>)
 800c18c:	4604      	mov	r4, r0
 800c18e:	4608      	mov	r0, r1
 800c190:	4611      	mov	r1, r2
 800c192:	2200      	movs	r2, #0
 800c194:	602a      	str	r2, [r5, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	f7f5 f9f0 	bl	800157c <_read>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d102      	bne.n	800c1a6 <_read_r+0x1e>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	b103      	cbz	r3, 800c1a6 <_read_r+0x1e>
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	240044d8 	.word	0x240044d8

0800c1ac <_fstat_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4d07      	ldr	r5, [pc, #28]	; (800c1cc <_fstat_r+0x20>)
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	4608      	mov	r0, r1
 800c1b6:	4611      	mov	r1, r2
 800c1b8:	602b      	str	r3, [r5, #0]
 800c1ba:	f7f5 fa08 	bl	80015ce <_fstat>
 800c1be:	1c43      	adds	r3, r0, #1
 800c1c0:	d102      	bne.n	800c1c8 <_fstat_r+0x1c>
 800c1c2:	682b      	ldr	r3, [r5, #0]
 800c1c4:	b103      	cbz	r3, 800c1c8 <_fstat_r+0x1c>
 800c1c6:	6023      	str	r3, [r4, #0]
 800c1c8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ca:	bf00      	nop
 800c1cc:	240044d8 	.word	0x240044d8

0800c1d0 <_isatty_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4d06      	ldr	r5, [pc, #24]	; (800c1ec <_isatty_r+0x1c>)
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	4608      	mov	r0, r1
 800c1da:	602b      	str	r3, [r5, #0]
 800c1dc:	f7f5 fa07 	bl	80015ee <_isatty>
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	d102      	bne.n	800c1ea <_isatty_r+0x1a>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b103      	cbz	r3, 800c1ea <_isatty_r+0x1a>
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	240044d8 	.word	0x240044d8

0800c1f0 <_init>:
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f2:	bf00      	nop
 800c1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f6:	bc08      	pop	{r3}
 800c1f8:	469e      	mov	lr, r3
 800c1fa:	4770      	bx	lr

0800c1fc <_fini>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	bf00      	nop
 800c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c202:	bc08      	pop	{r3}
 800c204:	469e      	mov	lr, r3
 800c206:	4770      	bx	lr
