
FreeRTSPItst2CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000107c  0800a950  0800a950  0001a950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9cc  0800b9cc  0001b9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b9d4  0800b9d4  0001b9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b9d8  0800b9d8  0001b9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00003140  24000000  0800b9dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000507c  24003140  0800eb1c  00023140  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240081bc  0800eb1c  000281bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bad5  00000000  00000000  0002316e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002972  00000000  00000000  0002ec43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019b8  00000000  00000000  000315b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000037f0  00000000  00000000  00032f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a3a1  00000000  00000000  0003675d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00013ade  00000000  00000000  00050afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000645dc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006208  00000000  00000000  0006462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003a5a  00000000  00000000  0006a834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003140 	.word	0x24003140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a938 	.word	0x0800a938

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003144 	.word	0x24003144
 80002dc:	0800a938 	.word	0x0800a938

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <DisplayInit>:
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
}

void DisplayInit(const uint8_t *addr)
{
 8000694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000698:	4606      	mov	r6, r0
{
 800069a:	b083      	sub	sp, #12
    numCommands = *addr++;
 800069c:	f816 3b01 	ldrb.w	r3, [r6], #1
    while(numCommands--) {
 80006a0:	b3db      	cbz	r3, 800071a <DisplayInit+0x86>
 80006a2:	1e5d      	subs	r5, r3, #1
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80006a4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000720 <DisplayInit+0x8c>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80006a8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8000724 <DisplayInit+0x90>
 80006ac:	b2ed      	uxtb	r5, r5
 80006ae:	e00e      	b.n	80006ce <DisplayInit+0x3a>
        if(numArgs) {
            ST7735_WriteData((uint8_t*)addr, numArgs);
            addr += numArgs;
        }

        if(ms) {
 80006b0:	063b      	lsls	r3, r7, #24
            ms = *addr++;
 80006b2:	4626      	mov	r6, r4
        if(ms) {
 80006b4:	d507      	bpl.n	80006c6 <DisplayInit+0x32>
            ms = *addr++;
 80006b6:	f816 0b01 	ldrb.w	r0, [r6], #1
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
 80006ba:	28ff      	cmp	r0, #255	; 0xff
 80006bc:	bf08      	it	eq
 80006be:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80006c2:	f002 febf 	bl	8003444 <HAL_Delay>
    while(numCommands--) {
 80006c6:	3d01      	subs	r5, #1
 80006c8:	b2ed      	uxtb	r5, r5
 80006ca:	2dff      	cmp	r5, #255	; 0xff
 80006cc:	d025      	beq.n	800071a <DisplayInit+0x86>
 80006ce:	4634      	mov	r4, r6
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80006d0:	4648      	mov	r0, r9
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	f814 3b02 	ldrb.w	r3, [r4], #2
 80006dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80006e0:	f003 f930 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	2201      	movs	r2, #1
 80006ea:	f10d 0107 	add.w	r1, sp, #7
 80006ee:	4640      	mov	r0, r8
 80006f0:	f005 f924 	bl	800593c <HAL_SPI_Transmit>
        numArgs = *addr++;
 80006f4:	7877      	ldrb	r7, [r6, #1]
        if(numArgs) {
 80006f6:	f017 067f 	ands.w	r6, r7, #127	; 0x7f
 80006fa:	d0d9      	beq.n	80006b0 <DisplayInit+0x1c>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80006fc:	4648      	mov	r0, r9
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000704:	f003 f91e 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000708:	4621      	mov	r1, r4
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	4632      	mov	r2, r6
 8000710:	4640      	mov	r0, r8
            addr += numArgs;
 8000712:	4434      	add	r4, r6
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000714:	f005 f912 	bl	800593c <HAL_SPI_Transmit>
 8000718:	e7ca      	b.n	80006b0 <DisplayInit+0x1c>
        }
    }
}
 800071a:	b003      	add	sp, #12
 800071c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000720:	58021000 	.word	0x58021000
 8000724:	24003628 	.word	0x24003628

08000728 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800072c:	242a      	movs	r4, #42	; 0x2a
 800072e:	b083      	sub	sp, #12
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000730:	4d34      	ldr	r5, [pc, #208]	; (8000804 <ST7735_SetAddressWindow+0xdc>)
{
 8000732:	4691      	mov	r9, r2
 8000734:	f88d 4004 	strb.w	r4, [sp, #4]
 8000738:	4607      	mov	r7, r0
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800073a:	4c33      	ldr	r4, [pc, #204]	; (8000808 <ST7735_SetAddressWindow+0xe0>)
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800073c:	4628      	mov	r0, r5
{
 800073e:	460e      	mov	r6, r1
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 8000746:	4698      	mov	r8, r3
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000748:	f003 f8fc 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800074c:	a901      	add	r1, sp, #4
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	2201      	movs	r2, #1
 8000754:	4620      	mov	r0, r4
 8000756:	f005 f8f1 	bl	800593c <HAL_SPI_Transmit>
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <ST7735_SetAddressWindow+0xe4>)
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800075c:	4628      	mov	r0, r5
 800075e:	2201      	movs	r2, #1
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000760:	7819      	ldrb	r1, [r3, #0]
 8000762:	440f      	add	r7, r1
 8000764:	4449      	add	r1, r9
 8000766:	f88d 7005 	strb.w	r7, [sp, #5]
 800076a:	2700      	movs	r7, #0
 800076c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000774:	f88d 7004 	strb.w	r7, [sp, #4]
 8000778:	f88d 7006 	strb.w	r7, [sp, #6]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800077c:	f003 f8e2 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000780:	2204      	movs	r2, #4
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	4620      	mov	r0, r4
 8000788:	eb0d 0102 	add.w	r1, sp, r2
 800078c:	f005 f8d6 	bl	800593c <HAL_SPI_Transmit>
 8000790:	232b      	movs	r3, #43	; 0x2b
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000792:	463a      	mov	r2, r7
 8000794:	4628      	mov	r0, r5
 8000796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079a:	f88d 3003 	strb.w	r3, [sp, #3]
 800079e:	f003 f8d1 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007a2:	f10d 0103 	add.w	r1, sp, #3
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	2201      	movs	r2, #1
 80007ac:	4620      	mov	r0, r4
 80007ae:	f005 f8c5 	bl	800593c <HAL_SPI_Transmit>
    ST7735_WriteData(data, sizeof(data));

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
    data[1] = y0 + _ystart;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <ST7735_SetAddressWindow+0xe8>)
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007b4:	4628      	mov	r0, r5
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    data[1] = y0 + _ystart;
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	4416      	add	r6, r2
    data[3] = y1 + _ystart;
 80007be:	4442      	add	r2, r8
 80007c0:	f88d 2007 	strb.w	r2, [sp, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
    data[1] = y0 + _ystart;
 80007c6:	f88d 6005 	strb.w	r6, [sp, #5]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007ca:	f003 f8bb 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007ce:	a901      	add	r1, sp, #4
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	2204      	movs	r2, #4
 80007d6:	4620      	mov	r0, r4
 80007d8:	f005 f8b0 	bl	800593c <HAL_SPI_Transmit>
 80007dc:	232c      	movs	r3, #44	; 0x2c
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007de:	463a      	mov	r2, r7
 80007e0:	4628      	mov	r0, r5
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	f88d 3003 	strb.w	r3, [sp, #3]
 80007ea:	f003 f8ab 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	2201      	movs	r2, #1
 80007f4:	f10d 0103 	add.w	r1, sp, #3
 80007f8:	4620      	mov	r0, r4
 80007fa:	f005 f89f 	bl	800593c <HAL_SPI_Transmit>
    ST7735_WriteData(data, sizeof(data));

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
}
 80007fe:	b003      	add	sp, #12
 8000800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000804:	58021000 	.word	0x58021000
 8000808:	24003628 	.word	0x24003628
 800080c:	24003164 	.word	0x24003164
 8000810:	24003165 	.word	0x24003165

08000814 <ST7735_SetRotation>:
void ST7735_SetRotation(uint8_t m)
{

  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 8000814:	f000 0003 	and.w	r0, r0, #3
  uint8_t madctl = 0;
 8000818:	2200      	movs	r2, #0
  rotation = m % 4; // can't be higher than 3
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <ST7735_SetRotation+0xe4>)

  switch (rotation)
 800081c:	2802      	cmp	r0, #2
{
 800081e:	b510      	push	{r4, lr}
 8000820:	b082      	sub	sp, #8
  rotation = m % 4; // can't be higher than 3
 8000822:	7018      	strb	r0, [r3, #0]
  uint8_t madctl = 0;
 8000824:	f88d 2006 	strb.w	r2, [sp, #6]
  switch (rotation)
 8000828:	d041      	beq.n	80008ae <ST7735_SetRotation+0x9a>
 800082a:	2803      	cmp	r0, #3
 800082c:	d060      	beq.n	80008f0 <ST7735_SetRotation+0xdc>
 800082e:	2801      	cmp	r0, #1
//	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
//#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
      _height = ST7735_HEIGHT;
      _width = ST7735_WIDTH;
      _xstart = _colstart;
 8000830:	4c32      	ldr	r4, [pc, #200]	; (80008fc <ST7735_SetRotation+0xe8>)
      _ystart = _rowstart;
 8000832:	4a33      	ldr	r2, [pc, #204]	; (8000900 <ST7735_SetRotation+0xec>)
  switch (rotation)
 8000834:	d04c      	beq.n	80008d0 <ST7735_SetRotation+0xbc>
      _height = ST7735_HEIGHT;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <ST7735_SetRotation+0xf0>)
 8000838:	21a2      	movs	r1, #162	; 0xa2
      _xstart = _colstart;
 800083a:	7824      	ldrb	r4, [r4, #0]
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800083c:	20c0      	movs	r0, #192	; 0xc0
      _height = ST7735_HEIGHT;
 800083e:	8019      	strh	r1, [r3, #0]
      _xstart = _colstart;
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <ST7735_SetRotation+0xf4>)
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000842:	f88d 0006 	strb.w	r0, [sp, #6]
      _width = ST7735_WIDTH;
 8000846:	2052      	movs	r0, #82	; 0x52
      _xstart = _colstart;
 8000848:	701c      	strb	r4, [r3, #0]
      _ystart = _rowstart;
 800084a:	7812      	ldrb	r2, [r2, #0]
      _width = ST7735_WIDTH;
 800084c:	492f      	ldr	r1, [pc, #188]	; (800090c <ST7735_SetRotation+0xf8>)
      _ystart = _rowstart;
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <ST7735_SetRotation+0xfc>)
      _width = ST7735_WIDTH;
 8000850:	8008      	strh	r0, [r1, #0]
      _ystart = _rowstart;
 8000852:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	482e      	ldr	r0, [pc, #184]	; (8000914 <ST7735_SetRotation+0x100>)
 800085c:	f003 f872 	bl	8003944 <HAL_GPIO_WritePin>
 8000860:	2336      	movs	r3, #54	; 0x36
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <ST7735_SetRotation+0x100>)
 800086a:	f88d 3007 	strb.w	r3, [sp, #7]
 800086e:	f003 f869 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	f10d 0107 	add.w	r1, sp, #7
 800087a:	2201      	movs	r2, #1
 800087c:	4826      	ldr	r0, [pc, #152]	; (8000918 <ST7735_SetRotation+0x104>)
 800087e:	f005 f85d 	bl	800593c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <ST7735_SetRotation+0x100>)
 800088a:	f003 f85b 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800088e:	f10d 0106 	add.w	r1, sp, #6
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	2201      	movs	r2, #1
 8000898:	481f      	ldr	r0, [pc, #124]	; (8000918 <ST7735_SetRotation+0x104>)
 800089a:	f005 f84f 	bl	800593c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a4:	481b      	ldr	r0, [pc, #108]	; (8000914 <ST7735_SetRotation+0x100>)
 80008a6:	f003 f84d 	bl	8003944 <HAL_GPIO_WritePin>
  }
  ST7735_Select();
  ST7735_WriteCommand(ST7735_MADCTL);
  ST7735_WriteData(&madctl,1);
  ST7735_Unselect();
}
 80008aa:	b002      	add	sp, #8
 80008ac:	bd10      	pop	{r4, pc}
      _height = ST7735_HEIGHT;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <ST7735_SetRotation+0xf0>)
 80008b0:	20a2      	movs	r0, #162	; 0xa2
    _xstart = _colstart;
 80008b2:	4c12      	ldr	r4, [pc, #72]	; (80008fc <ST7735_SetRotation+0xe8>)
      _height = ST7735_HEIGHT;
 80008b4:	8018      	strh	r0, [r3, #0]
      _width = ST7735_WIDTH;
 80008b6:	2052      	movs	r0, #82	; 0x52
    _xstart = _colstart;
 80008b8:	f894 c000 	ldrb.w	ip, [r4]
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <ST7735_SetRotation+0xf4>)
    _ystart = _rowstart;
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <ST7735_SetRotation+0xec>)
    _xstart = _colstart;
 80008c0:	f883 c000 	strb.w	ip, [r3]
    _ystart = _rowstart;
 80008c4:	7812      	ldrb	r2, [r2, #0]
      _width = ST7735_WIDTH;
 80008c6:	4911      	ldr	r1, [pc, #68]	; (800090c <ST7735_SetRotation+0xf8>)
    _ystart = _rowstart;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <ST7735_SetRotation+0xfc>)
      _width = ST7735_WIDTH;
 80008ca:	8008      	strh	r0, [r1, #0]
    _ystart = _rowstart;
 80008cc:	701a      	strb	r2, [r3, #0]
    break;
 80008ce:	e7c1      	b.n	8000854 <ST7735_SetRotation+0x40>
      _width = ST7735_HEIGHT;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <ST7735_SetRotation+0xf8>)
 80008d2:	21a2      	movs	r1, #162	; 0xa2
    _ystart = _colstart;
 80008d4:	7824      	ldrb	r4, [r4, #0]
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80008d6:	20a0      	movs	r0, #160	; 0xa0
      _width = ST7735_HEIGHT;
 80008d8:	8019      	strh	r1, [r3, #0]
    _ystart = _colstart;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <ST7735_SetRotation+0xfc>)
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80008dc:	f88d 0006 	strb.w	r0, [sp, #6]
      _height = ST7735_WIDTH;
 80008e0:	2052      	movs	r0, #82	; 0x52
    _ystart = _colstart;
 80008e2:	701c      	strb	r4, [r3, #0]
    _xstart = _rowstart;
 80008e4:	7812      	ldrb	r2, [r2, #0]
      _height = ST7735_WIDTH;
 80008e6:	4907      	ldr	r1, [pc, #28]	; (8000904 <ST7735_SetRotation+0xf0>)
    _xstart = _rowstart;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <ST7735_SetRotation+0xf4>)
      _height = ST7735_WIDTH;
 80008ea:	8008      	strh	r0, [r1, #0]
    _xstart = _rowstart;
 80008ec:	701a      	strb	r2, [r3, #0]
    break;
 80008ee:	e7b1      	b.n	8000854 <ST7735_SetRotation+0x40>
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
 80008f0:	2368      	movs	r3, #104	; 0x68
 80008f2:	f88d 3006 	strb.w	r3, [sp, #6]
    break;
 80008f6:	e7ad      	b.n	8000854 <ST7735_SetRotation+0x40>
 80008f8:	240032ac 	.word	0x240032ac
 80008fc:	2400315c 	.word	0x2400315c
 8000900:	24003160 	.word	0x24003160
 8000904:	2400315e 	.word	0x2400315e
 8000908:	24003164 	.word	0x24003164
 800090c:	24003162 	.word	0x24003162
 8000910:	24003165 	.word	0x24003165
 8000914:	58021000 	.word	0x58021000
 8000918:	24003628 	.word	0x24003628

0800091c <ST7735_Init>:
{
 800091c:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800091e:	4d11      	ldr	r5, [pc, #68]	; (8000964 <ST7735_Init+0x48>)
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 6100 	mov.w	r1, #2048	; 0x800
{
 8000926:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000928:	4628      	mov	r0, r5
 800092a:	f003 f80b 	bl	8003944 <HAL_GPIO_WritePin>
    DisplayInit(init_cmds1);
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <ST7735_Init+0x4c>)
 8000930:	f7ff feb0 	bl	8000694 <DisplayInit>
    DisplayInit(init_cmds2);
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <ST7735_Init+0x50>)
 8000936:	f7ff fead 	bl	8000694 <DisplayInit>
    DisplayInit(init_cmds3);
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <ST7735_Init+0x54>)
 800093c:	f7ff feaa 	bl	8000694 <DisplayInit>
    _colstart = 24;
 8000940:	2118      	movs	r1, #24
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <ST7735_Init+0x58>)
    ST7735_SetRotation (rotation);
 8000944:	4620      	mov	r0, r4
    _rowstart = 0;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <ST7735_Init+0x5c>)
    _colstart = 24;
 8000948:	7011      	strb	r1, [r2, #0]
    _rowstart = 0;
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
    ST7735_SetRotation (rotation);
 800094e:	f7ff ff61 	bl	8000814 <ST7735_SetRotation>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000952:	4628      	mov	r0, r5
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 800095a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800095e:	f002 bff1 	b.w	8003944 <HAL_GPIO_WritePin>
 8000962:	bf00      	nop
 8000964:	58021000 	.word	0x58021000
 8000968:	0800a9e8 	.word	0x0800a9e8
 800096c:	0800aa20 	.word	0x0800aa20
 8000970:	0800aa30 	.word	0x0800aa30
 8000974:	2400315c 	.word	0x2400315c
 8000978:	24003160 	.word	0x24003160

0800097c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800097c:	b082      	sub	sp, #8
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800097e:	b2c0      	uxtb	r0, r0
 8000980:	b2c9      	uxtb	r1, r1
void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000986:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800098a:	b087      	sub	sp, #28
 800098c:	b2df      	uxtb	r7, r3
 800098e:	4614      	mov	r4, r2
 8000990:	9311      	str	r3, [sp, #68]	; 0x44
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000992:	1e6b      	subs	r3, r5, #1
 8000994:	1e7a      	subs	r2, r7, #1
void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000996:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800099a:	440b      	add	r3, r1
void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800099c:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009a0:	4402      	add	r2, r0
 80009a2:	9503      	str	r5, [sp, #12]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	f7ff febe 	bl	8000728 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d042      	beq.n	8000a36 <ST7735_WriteChar+0xba>
        b = font.data[(ch - 32) * font.height + i];
 80009b0:	3c20      	subs	r4, #32
        for(j = 0; j < font.width; j++) {
            if((b << j) & 0x8000)  {
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009b2:	ea4f 2319 	mov.w	r3, r9, lsr #8
                ST7735_WriteData(data, sizeof(data));
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80009b6:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
        b = font.data[(ch - 32) * font.height + i];
 80009ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80009bc:	fb05 f404 	mul.w	r4, r5, r4
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d037      	beq.n	8000a36 <ST7735_WriteChar+0xba>
 80009c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80009ca:	4d1d      	ldr	r5, [pc, #116]	; (8000a40 <ST7735_WriteChar+0xc4>)
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80009cc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000a44 <ST7735_WriteChar+0xc8>
 80009d0:	4423      	add	r3, r4
 80009d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80009d6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < font.height; i++) {
 80009d8:	2300      	movs	r3, #0
 80009da:	9301      	str	r3, [sp, #4]
        b = font.data[(ch - 32) * font.height + i];
 80009dc:	9b02      	ldr	r3, [sp, #8]
        for(j = 0; j < font.width; j++) {
 80009de:	2400      	movs	r4, #0
        b = font.data[(ch - 32) * font.height + i];
 80009e0:	f833 6f02 	ldrh.w	r6, [r3, #2]!
 80009e4:	9302      	str	r3, [sp, #8]
 80009e6:	e010      	b.n	8000a0a <ST7735_WriteChar+0x8e>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009e8:	9b00      	ldr	r3, [sp, #0]
 80009ea:	f88d 9015 	strb.w	r9, [sp, #21]
 80009ee:	f88d 3014 	strb.w	r3, [sp, #20]
        for(j = 0; j < font.width; j++) {
 80009f2:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80009f4:	f002 ffa6 	bl	8003944 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	2202      	movs	r2, #2
 80009fe:	a905      	add	r1, sp, #20
 8000a00:	4640      	mov	r0, r8
 8000a02:	f004 ff9b 	bl	800593c <HAL_SPI_Transmit>
        for(j = 0; j < font.width; j++) {
 8000a06:	42bc      	cmp	r4, r7
 8000a08:	d00f      	beq.n	8000a2a <ST7735_WriteChar+0xae>
            if((b << j) & 0x8000)  {
 8000a0a:	fa06 f304 	lsl.w	r3, r6, r4
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a0e:	4628      	mov	r0, r5
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
            if((b << j) & 0x8000)  {
 8000a16:	041b      	lsls	r3, r3, #16
 8000a18:	d4e6      	bmi.n	80009e8 <ST7735_WriteChar+0x6c>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a20:	f88d b014 	strb.w	fp, [sp, #20]
 8000a24:	f88d a015 	strb.w	sl, [sp, #21]
 8000a28:	e7e3      	b.n	80009f2 <ST7735_WriteChar+0x76>
    for(i = 0; i < font.height; i++) {
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	9a03      	ldr	r2, [sp, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4293      	cmp	r3, r2
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	d1d2      	bne.n	80009dc <ST7735_WriteChar+0x60>
                ST7735_WriteData(data, sizeof(data));
            }
        }
    }
}
 8000a36:	b007      	add	sp, #28
 8000a38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a3c:	b002      	add	sp, #8
 8000a3e:	4770      	bx	lr
 8000a40:	58021000 	.word	0x58021000
 8000a44:	24003628 	.word	0x24003628

08000a48 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a48:	b082      	sub	sp, #8
 8000a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4e:	4690      	mov	r8, r2
 8000a50:	b087      	sub	sp, #28
 8000a52:	4604      	mov	r4, r0
 8000a54:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5c:	4823      	ldr	r0, [pc, #140]	; (8000aec <ST7735_WriteString+0xa4>)
 8000a5e:	b2df      	uxtb	r7, r3
 8000a60:	f3c3 2607 	ubfx	r6, r3, #8, #8
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a64:	9311      	str	r3, [sp, #68]	; 0x44
 8000a66:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 8000a6a:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000a6e:	f002 ff69 	bl	8003944 <HAL_GPIO_WritePin>
    ST7735_Select();

    while(*str) {
 8000a72:	f898 3000 	ldrb.w	r3, [r8]
 8000a76:	b37b      	cbz	r3, 8000ad8 <ST7735_WriteString+0x90>
        if(x + font.width >= _width) {
            x = 0;
            y += font.height;
            if(y + font.height >= _height) {
 8000a78:	4652      	mov	r2, sl
 8000a7a:	f108 0801 	add.w	r8, r8, #1
 8000a7e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8000af4 <ST7735_WriteString+0xac>
 8000a82:	46aa      	mov	sl, r5
 8000a84:	9205      	str	r2, [sp, #20]
        if(x + font.width >= _width) {
 8000a86:	19e1      	adds	r1, r4, r7
 8000a88:	f9b9 0000 	ldrsh.w	r0, [r9]
            y += font.height;
 8000a8c:	eb0a 0c06 	add.w	ip, sl, r6
                str++;
                continue;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000a90:	461a      	mov	r2, r3
        if(x + font.width >= _width) {
 8000a92:	4281      	cmp	r1, r0
 8000a94:	db0c      	blt.n	8000ab0 <ST7735_WriteString+0x68>
            if(y + font.height >= _height) {
 8000a96:	4916      	ldr	r1, [pc, #88]	; (8000af0 <ST7735_WriteString+0xa8>)
            y += font.height;
 8000a98:	fa1f fa8c 	uxth.w	sl, ip
            x = 0;
 8000a9c:	2400      	movs	r4, #0
            if(y + font.height >= _height) {
 8000a9e:	f9b1 0000 	ldrsh.w	r0, [r1]
 8000aa2:	eb0a 0c06 	add.w	ip, sl, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	4584      	cmp	ip, r0
 8000aaa:	da15      	bge.n	8000ad8 <ST7735_WriteString+0x90>
            if(*str == ' ') {
 8000aac:	2b20      	cmp	r3, #32
 8000aae:	d00f      	beq.n	8000ad0 <ST7735_WriteString+0x88>
        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ab0:	9d05      	ldr	r5, [sp, #20]
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
        x += font.width;
 8000ab8:	b28c      	uxth	r4, r1
        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000aba:	9501      	str	r5, [sp, #4]
 8000abc:	4651      	mov	r1, sl
 8000abe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000ac0:	f88d 6045 	strb.w	r6, [sp, #69]	; 0x45
 8000ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ac6:	f8cd b008 	str.w	fp, [sp, #8]
 8000aca:	9500      	str	r5, [sp, #0]
 8000acc:	f7ff ff56 	bl	800097c <ST7735_WriteChar>
    while(*str) {
 8000ad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1d6      	bne.n	8000a86 <ST7735_WriteString+0x3e>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <ST7735_WriteString+0xa4>)
        str++;
    }

    ST7735_Unselect();
}
 8000ae0:	b007      	add	sp, #28
 8000ae2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae6:	b002      	add	sp, #8
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ae8:	f002 bf2c 	b.w	8003944 <HAL_GPIO_WritePin>
 8000aec:	58021000 	.word	0x58021000
 8000af0:	2400315e 	.word	0x2400315e
 8000af4:	24003162 	.word	0x24003162

08000af8 <ST7735_FillRectangle>:

uint16_t linearray[ST7735_HEIGHT];

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000afc:	461c      	mov	r4, r3
    if((x >= _width) || (y >= _height)) return;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <ST7735_FillRectangle+0xa4>)
{
 8000b00:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    if((x >= _width) || (y >= _height)) return;
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	da44      	bge.n	8000b96 <ST7735_FillRectangle+0x9e>
 8000b0c:	4617      	mov	r7, r2
 8000b0e:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <ST7735_FillRectangle+0xa8>)
 8000b10:	460e      	mov	r6, r1
 8000b12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b16:	4291      	cmp	r1, r2
 8000b18:	da3d      	bge.n	8000b96 <ST7735_FillRectangle+0x9e>
    if((x + w - 1) >= _width) w = _width - x;
 8000b1a:	19c1      	adds	r1, r0, r7
 8000b1c:	4605      	mov	r5, r0
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	da01      	bge.n	8000b26 <ST7735_FillRectangle+0x2e>
 8000b22:	1a1b      	subs	r3, r3, r0
 8000b24:	b29f      	uxth	r7, r3
    if((y + h - 1) >= _height) h = _height - y;
 8000b26:	19a3      	adds	r3, r4, r6
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	da01      	bge.n	8000b30 <ST7735_FillRectangle+0x38>
 8000b2c:	1b92      	subs	r2, r2, r6
 8000b2e:	b294      	uxth	r4, r2
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <ST7735_FillRectangle+0xac>)
 8000b38:	f002 ff04 	bl	8003944 <HAL_GPIO_WritePin>

    ST7735_Select();
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b3c:	b2e8      	uxtb	r0, r5
 8000b3e:	b2f1      	uxtb	r1, r6
 8000b40:	1e42      	subs	r2, r0, #1


    uint32_t color2=color;
    color2<=16;
    color2|=color;
    memset(linearray, color2, w*2);
 8000b42:	007d      	lsls	r5, r7, #1
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b44:	1e4b      	subs	r3, r1, #1
 8000b46:	443a      	add	r2, r7
 8000b48:	4423      	add	r3, r4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f7ff fdeb 	bl	8000728 <ST7735_SetAddressWindow>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <ST7735_FillRectangle+0xac>)
 8000b5a:	f002 fef3 	bl	8003944 <HAL_GPIO_WritePin>
    memset(linearray, color2, w*2);
 8000b5e:	462a      	mov	r2, r5
 8000b60:	4641      	mov	r1, r8
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <ST7735_FillRectangle+0xb0>)
 8000b64:	f008 fee4 	bl	8009930 <memset>

    for(y = h; y > 0; y--)
 8000b68:	b16c      	cbz	r4, 8000b86 <ST7735_FillRectangle+0x8e>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, (uint8_t*)&linearray, w*2, HAL_MAX_DELAY);
 8000b6a:	b2ad      	uxth	r5, r5
 8000b6c:	4f0e      	ldr	r7, [pc, #56]	; (8000ba8 <ST7735_FillRectangle+0xb0>)
 8000b6e:	4e0f      	ldr	r6, [pc, #60]	; (8000bac <ST7735_FillRectangle+0xb4>)
    for(y = h; y > 0; y--)
 8000b70:	3c01      	subs	r4, #1
    HAL_SPI_Transmit(&ST7735_SPI_PORT, (uint8_t*)&linearray, w*2, HAL_MAX_DELAY);
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	462a      	mov	r2, r5
 8000b78:	4639      	mov	r1, r7
    for(y = h; y > 0; y--)
 8000b7a:	b2a4      	uxth	r4, r4
    HAL_SPI_Transmit(&ST7735_SPI_PORT, (uint8_t*)&linearray, w*2, HAL_MAX_DELAY);
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f004 fedd 	bl	800593c <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d1f4      	bne.n	8000b70 <ST7735_FillRectangle+0x78>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <ST7735_FillRectangle+0xac>)

    ST7735_Unselect();
}
 8000b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000b92:	f002 bed7 	b.w	8003944 <HAL_GPIO_WritePin>
}
 8000b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24003162 	.word	0x24003162
 8000ba0:	2400315e 	.word	0x2400315e
 8000ba4:	58021000 	.word	0x58021000
 8000ba8:	24003168 	.word	0x24003168
 8000bac:	24003628 	.word	0x24003628

08000bb0 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb4:	461f      	mov	r7, r3
    if((x >= _width) || (y >= _height)) return;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <ST7735_DrawImage+0x84>)
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000bb8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if((x >= _width) || (y >= _height)) return;
 8000bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	da0d      	bge.n	8000be0 <ST7735_DrawImage+0x30>
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <ST7735_DrawImage+0x88>)
 8000bc8:	460e      	mov	r6, r1
 8000bca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bce:	4291      	cmp	r1, r2
 8000bd0:	da06      	bge.n	8000be0 <ST7735_DrawImage+0x30>
    if((x + w - 1) >= _width) return;
 8000bd2:	1829      	adds	r1, r5, r0
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	db02      	blt.n	8000be0 <ST7735_DrawImage+0x30>
    if((y + h - 1) >= _height) return;
 8000bda:	19bb      	adds	r3, r7, r6
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	da01      	bge.n	8000be4 <ST7735_DrawImage+0x34>

    ST7735_Select();
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ST7735_Unselect();
}
 8000be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <ST7735_DrawImage+0x8c>)
 8000bec:	f002 feaa 	bl	8003944 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bf0:	1e7b      	subs	r3, r7, #1
 8000bf2:	b2e0      	uxtb	r0, r4
 8000bf4:	1e6a      	subs	r2, r5, #1
 8000bf6:	b2f1      	uxtb	r1, r6
 8000bf8:	4402      	add	r2, r0
 8000bfa:	440b      	add	r3, r1
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f7ff fd92 	bl	8000728 <ST7735_SetAddressWindow>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <ST7735_DrawImage+0x8c>)
 8000c0c:	f002 fe9a 	bl	8003944 <HAL_GPIO_WritePin>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000c10:	fb07 f205 	mul.w	r2, r7, r5
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000c14:	4641      	mov	r1, r8
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000c1a:	0052      	lsls	r2, r2, #1
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <ST7735_DrawImage+0x90>)
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	f004 fe8c 	bl	800593c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2a:	4804      	ldr	r0, [pc, #16]	; (8000c3c <ST7735_DrawImage+0x8c>)
}
 8000c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000c30:	f002 be88 	b.w	8003944 <HAL_GPIO_WritePin>
 8000c34:	24003162 	.word	0x24003162
 8000c38:	2400315e 	.word	0x2400315e
 8000c3c:	58021000 	.word	0x58021000
 8000c40:	24003628 	.word	0x24003628

08000c44 <_ZN15ThreadWrapper_tD1Ev>:
      ,taskStackSize( _taskStackSize )
    {
    };

  public:
    virtual ~ThreadWrapper_t()
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    {
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <_ZN15ThreadWrapper_tD1Ev+0x40>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
      if( threadId != NULL )
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00f      	beq.n	8000c7a <_ZN15ThreadWrapper_tD1Ev+0x36>
      {
        // Release thread handle.
    	  osStatus_t status = osThreadTerminate(threadId);// stop the thread
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f006 fc88 	bl	8007574 <osThreadTerminate>
 8000c64:	60f8      	str	r0, [r7, #12]
    	  if (status == osOK) {
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <_ZN15ThreadWrapper_tD1Ev+0x30>
    	     printf("Thread successfully stopped");                                           // Thread was terminated successfully
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <_ZN15ThreadWrapper_tD1Ev+0x44>)
 8000c6e:	f008 ff47 	bl	8009b00 <iprintf>
 8000c72:	e002      	b.n	8000c7a <_ZN15ThreadWrapper_tD1Ev+0x36>
    	  }
    	  else{
    		  printf("Thread failed to stop");
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <_ZN15ThreadWrapper_tD1Ev+0x48>)
 8000c76:	f008 ff43 	bl	8009b00 <iprintf>
    	  }
      };
    };
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	0800aa78 	.word	0x0800aa78
 8000c88:	0800a950 	.word	0x0800a950
 8000c8c:	0800a96c 	.word	0x0800a96c

08000c90 <_ZN15ThreadWrapper_tD0Ev>:
    virtual ~ThreadWrapper_t()
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    };
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ffd3 	bl	8000c44 <_ZN15ThreadWrapper_tD1Ev>
 8000c9e:	2138      	movs	r1, #56	; 0x38
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f008 fcaf 	bl	8009604 <_ZdlPvj>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_ZN19ThreadWrapperTest_tD1Ev>:
        ,int _taskStackSize = 0
       )
        :ThreadWrapper_t(_taskPriority,_taskPriority)
        ,threadNumber(_threadNumber)
        {};
       ~ThreadWrapperTest_t()
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
       {};
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_ZN19ThreadWrapperTest_tD1Ev+0x20>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ffbf 	bl	8000c44 <_ZN15ThreadWrapper_tD1Ev>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	0800aa64 	.word	0x0800aa64

08000cd4 <_ZN19ThreadWrapperTest_tD0Ev>:
       ~ThreadWrapperTest_t()
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
       {};
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ffe7 	bl	8000cb0 <_ZN19ThreadWrapperTest_tD1Ev>
 8000ce2:	213c      	movs	r1, #60	; 0x3c
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f008 fc8d 	bl	8009604 <_ZdlPvj>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_ZN19ThreadWrapperTest_t9entryFuncEv>:
# include "ThreadTest.hpp" //
#endif


void ThreadWrapperTest_t::entryFunc()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("Hello world!\n");
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <_ZN19ThreadWrapperTest_t9entryFuncEv+0x18>)
 8000cfe:	f008 ff85 	bl	8009c0c <puts>
		osDelay(1500);
 8000d02:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d06:	f006 fc4d 	bl	80075a4 <osDelay>
		printf("Hello world!\n");
 8000d0a:	e7f7      	b.n	8000cfc <_ZN19ThreadWrapperTest_t9entryFuncEv+0x8>
 8000d0c:	0800a984 	.word	0x0800a984

08000d10 <_ZNK15ThreadWrapper_t9isRunningEv>:

    bool isRunning()const { return running; };
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN15ThreadWrapper_t8dispatchEPv>:
#include "ThreadWrapper.hpp"
#endif


void * ThreadWrapper_t::dispatch( void * lpParam )
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  // Call the actual OO thread handler.
  ((ThreadWrapper_t*)lpParam)->entryFunc();
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3308      	adds	r3, #8
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	4798      	blx	r3

  return NULL;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <_ZN15ThreadWrapper_t5startEv>:

//-----------------------------------------------------------------------------
int ThreadWrapper_t::start()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  // Don't start two threads on the same object.
  if( !isRunning() )
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ffdd 	bl	8000d10 <_ZNK15ThreadWrapper_t9isRunningEv>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f083 0301 	eor.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d026      	beq.n	8000db0 <_ZN15ThreadWrapper_t5startEv+0x68>
  {


	thread_attr.name = "ThreadWrapper_t";
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <_ZN15ThreadWrapper_t5startEv+0x74>)
 8000d66:	615a      	str	r2, [r3, #20]
	thread_attr.priority = (osPriority_t) (taskPriority + osPriorityRealtime);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
	thread_attr.stack_size = configMINIMAL_STACK_SIZE;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28

	// Create the thread.
	    threadId = osThreadNew((osThreadFunc_t) dispatch, NULL, &thread_attr);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3314      	adds	r3, #20
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2100      	movs	r1, #0
 8000d82:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <_ZN15ThreadWrapper_t5startEv+0x78>)
 8000d84:	f006 fbac 	bl	80074e0 <osThreadNew>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	611a      	str	r2, [r3, #16]
	    if (threadId == NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d103      	bne.n	8000d9e <_ZN15ThreadWrapper_t5startEv+0x56>
	    {
	      running = false;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	711a      	strb	r2, [r3, #4]
 8000d9c:	e008      	b.n	8000db0 <_ZN15ThreadWrapper_t5startEv+0x68>
	    }
	    else
	    {
	      running = true;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	711a      	strb	r2, [r3, #4]
	      printf("Thread %i is running",((int)threadId));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <_ZN15ThreadWrapper_t5startEv+0x7c>)
 8000dac:	f008 fea8 	bl	8009b00 <iprintf>
	    }
	  }
	  return (int) threadId;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0800a994 	.word	0x0800a994
 8000dc0:	08000d29 	.word	0x08000d29
 8000dc4:	0800a9a4 	.word	0x0800a9a4

08000dc8 <_ZN15ThreadWrapper_tC1Eii>:
    ThreadWrapper_t
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
      ,taskStackSize( _taskStackSize )
 8000dd4:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <_ZN15ThreadWrapper_tC1Eii+0x34>)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	711a      	strb	r2, [r3, #4]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
    };
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0800aa78 	.word	0x0800aa78

08000e00 <_ZN19ThreadWrapperTest_tC1Eiii>:
      ThreadWrapperTest_t
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	603b      	str	r3, [r7, #0]
        ,threadNumber(_threadNumber)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffd7 	bl	8000dc8 <_ZN15ThreadWrapper_tC1Eii>
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_ZN19ThreadWrapperTest_tC1Eiii+0x30>)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
        {};
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	0800aa64 	.word	0x0800aa64

08000e34 <alt_main>:
#include "alt_main.h"
#include "ThreadTest.hpp"


int alt_main()
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0

	while (1)
	{
		/* Super loop */
//		printf( "Hello World CPP\n\r") ;
		ThreadWrapperTest_t* t1 = new ThreadWrapperTest_t();
 8000e3a:	203c      	movs	r0, #60	; 0x3c
 8000e3c:	f008 fbe4 	bl	8009608 <_Znwj>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461c      	mov	r4, r3
 8000e44:	2300      	movs	r3, #0
 8000e46:	2207      	movs	r2, #7
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f7ff ffd8 	bl	8000e00 <_ZN19ThreadWrapperTest_tC1Eiii>
 8000e50:	607c      	str	r4, [r7, #4]

		t1->start();
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff77 	bl	8000d48 <_ZN15ThreadWrapper_t5startEv>





	}
 8000e5a:	e7ee      	b.n	8000e3a <alt_main+0x6>

08000e5c <isCalibratingMode>:
	return calibration_mode>= CALIB_INIT && calibration_mode <=CALIB_END;
}

uint8_t isCalibratingMode(uint8_t mode)
{
	return mode>= CALIB_INIT && mode <=CALIB_END;
 8000e5c:	3801      	subs	r0, #1
}
 8000e5e:	280a      	cmp	r0, #10
 8000e60:	bf8c      	ite	hi
 8000e62:	2000      	movhi	r0, #0
 8000e64:	2001      	movls	r0, #1
 8000e66:	4770      	bx	lr

08000e68 <startDemo>:
	calibration_mode=CALIB_UNCAL;
}

void startDemo()
{
	calibration_mode = CALIB_DEMO_BEGIN;
 8000e68:	4b01      	ldr	r3, [pc, #4]	; (8000e70 <startDemo+0x8>)
 8000e6a:	220e      	movs	r2, #14
 8000e6c:	701a      	strb	r2, [r3, #0]
}
 8000e6e:	4770      	bx	lr
 8000e70:	240032af 	.word	0x240032af

08000e74 <stopDemo>:

void stopDemo()
{
	calibration_mode=CALIB_UNCAL;
 8000e74:	4b01      	ldr	r3, [pc, #4]	; (8000e7c <stopDemo+0x8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	4770      	bx	lr
 8000e7c:	240032af 	.word	0x240032af

08000e80 <computePD>:
		 17,
		  7
};

void computePD(int32_t* pcounter, int32_t* pvelocity, int32_t* pwm_out)
{
 8000e80:	b430      	push	{r4, r5}
	++pdcounter;
 8000e82:	4c4e      	ldr	r4, [pc, #312]	; (8000fbc <computePD+0x13c>)
	{
		int8_t noise= somenoise[pdcounter%24];
//		float v_x =  ( (float)(pvelocity[0] ) + (float)noise*.0005f)*( PPR_TO_DISTANCE_X/ mydt ); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);

		float velocity_closer_to_zero = (float)pvelocity[0] ;
		if(velocity_closer_to_zero>1.f)velocity_closer_to_zero-=.5f;
 8000e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	++pdcounter;
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	6023      	str	r3, [r4, #0]
		float velocity_closer_to_zero = (float)pvelocity[0] ;
 8000e8e:	edd1 7a00 	vldr	s15, [r1]
 8000e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if(velocity_closer_to_zero>1.f)velocity_closer_to_zero-=.5f;
 8000e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	dd7e      	ble.n	8000f9e <computePD+0x11e>
 8000ea0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ea4:	ee37 7ac7 	vsub.f32	s14, s15, s14
		else if(velocity_closer_to_zero<-1.f)velocity_closer_to_zero+=.5f;
		else velocity_closer_to_zero=0;

		float v_x =  ( (float)(velocity_closer_to_zero) )*( PPR_TO_DISTANCE_X/ mydt ); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000ea8:	4d45      	ldr	r5, [pc, #276]	; (8000fc0 <computePD+0x140>)
 8000eaa:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8000fc4 <computePD+0x144>
 8000eae:	ed95 5a00 	vldr	s10, [r5]
		float p_x =   ( (float)(pcounter[0] ))*PPR_TO_DISTANCE_X; //((float)mycounter[0]) / PPM_X;

		float target_p_x = target[0];
 8000eb2:	4c45      	ldr	r4, [pc, #276]	; (8000fc8 <computePD+0x148>)
		float v_x =  ( (float)(velocity_closer_to_zero) )*( PPR_TO_DISTANCE_X/ mydt ); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000eb4:	eec6 6a05 	vdiv.f32	s13, s12, s10

		float error_P = target_p_x - p_x;

		float error_acceptable = 0.02f;// + 0.001f*(pdcounter%8);

		if(error_P>error_acceptable)error_P-=error_acceptable;	//Allow 1cm error.
 8000eb8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8000fcc <computePD+0x14c>
		float target_p_x = target[0];
 8000ebc:	edd4 7a00 	vldr	s15, [r4]
		float target_v_x = target_v[0];
 8000ec0:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <computePD+0x150>)
		float v_x =  ( (float)(velocity_closer_to_zero) )*( PPR_TO_DISTANCE_X/ mydt ); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000ec2:	ee66 6a87 	vmul.f32	s13, s13, s14
		float p_x =   ( (float)(pcounter[0] ))*PPR_TO_DISTANCE_X; //((float)mycounter[0]) / PPM_X;
 8000ec6:	ed90 7a00 	vldr	s14, [r0]
 8000eca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		float error_P = target_p_x - p_x;
 8000ece:	eee7 7a46 	vfms.f32	s15, s14, s12
		float target_v_x = target_v[0];
 8000ed2:	ed93 7a00 	vldr	s14, [r3]
		if(error_P>error_acceptable)error_P-=error_acceptable;	//Allow 1cm error.
 8000ed6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ede:	dd4d      	ble.n	8000f7c <computePD+0xfc>
 8000ee0:	ee77 7ae5 	vsub.f32	s15, s15, s11
		else error_P=0;

		float error_D = target_v_x - v_x;
		//total_error_I += error_P*dt;

		float pwm_output = error_P*(K_P) /* + total_error_I* (K_I)*/ + error_D*(K_D);
 8000ee4:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8000fd4 <computePD+0x154>
 8000ee8:	ee67 7a86 	vmul.f32	s15, s15, s12
		float error_D = target_v_x - v_x;
 8000eec:	ee37 7a66 	vsub.f32	s14, s14, s13
//		if(vPWMX_out<-12000)vPWMX_out=-12000;

 		pwm_out[0]=vPWMX_out;
	}
	{
		float v_y =  ( (float)pvelocity[1])*( PPR_TO_DISTANCE_Y/ mydt); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000ef0:	ed95 4a00 	vldr	s8, [r5]
		float pwm_output = error_P*(K_P) /* + total_error_I* (K_I)*/ + error_D*(K_D);
 8000ef4:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
		float p_y =   ( (float)pcounter[1])*PPR_TO_DISTANCE_Y; //((float)mycounter[0]) / PPM_X;

		float target_p_y = target[1];
		float target_v_y = target_v[1];

		float error_P = target_p_y - p_y;
 8000ef8:	eddf 4a37 	vldr	s9, [pc, #220]	; 8000fd8 <computePD+0x158>
 8000efc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		int32_t vPWMX_out = (int32_t)(pwm_output*12000);
 8000f00:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8000fdc <computePD+0x15c>
		float v_y =  ( (float)pvelocity[1])*( PPR_TO_DISTANCE_Y/ mydt); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000f04:	ee84 2a84 	vdiv.f32	s4, s9, s8
		float target_p_y = target[1];
 8000f08:	edd4 6a01 	vldr	s13, [r4, #4]
		float error_D = target_v_y - v_y;
		//total_error_I += error_P*dt;

		float pwm_output = error_P*(K_P_Y) /* + total_error_I* (K_I)*/ + error_D*(K_D_Y);
 8000f0c:	eddf 2a34 	vldr	s5, [pc, #208]	; 8000fe0 <computePD+0x160>
 8000f10:	ed9f 3a34 	vldr	s6, [pc, #208]	; 8000fe4 <computePD+0x164>

		if(pwm_output>.8f)pwm_output=.8f;
		if(pwm_output<-.8f)pwm_output=-.8f;


		int32_t vPWMY_out = (int32_t)(pwm_output*12000);
 8000f14:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8000fe8 <computePD+0x168>
		float pwm_output = error_P*(K_P) /* + total_error_I* (K_I)*/ + error_D*(K_D);
 8000f18:	eee7 7a23 	vfma.f32	s15, s14, s7
		float target_v_y = target_v[1];
 8000f1c:	ed93 7a01 	vldr	s14, [r3, #4]
		int32_t vPWMX_out = (int32_t)(pwm_output*12000);
 8000f20:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8000f24:	eddf 3a31 	vldr	s7, [pc, #196]	; 8000fec <computePD+0x16c>
//		if(vPWMY_out>8000)vPWMY_out=8000;
//		if(vPWMY_out<-8000)vPWMY_out=-8000;
		pwm_out[1] = vPWMY_out;
	}

}
 8000f28:	bc30      	pop	{r4, r5}
 8000f2a:	fec7 7ae5 	vminnm.f32	s15, s15, s11
		int32_t vPWMX_out = (int32_t)(pwm_output*12000);
 8000f2e:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
 8000f32:	ee67 7a85 	vmul.f32	s15, s15, s10
 8000f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3a:	edc2 7a00 	vstr	s15, [r2]
		float error_D = target_v_y - v_y;
 8000f3e:	eef0 7a47 	vmov.f32	s15, s14
		float v_y =  ( (float)pvelocity[1])*( PPR_TO_DISTANCE_Y/ mydt); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000f42:	edd1 5a01 	vldr	s11, [r1, #4]
		float error_P = target_p_y - p_y;
 8000f46:	eeb0 7a66 	vmov.f32	s14, s13
		float p_y =   ( (float)pcounter[1])*PPR_TO_DISTANCE_Y; //((float)mycounter[0]) / PPM_X;
 8000f4a:	ed90 6a01 	vldr	s12, [r0, #4]
		float v_y =  ( (float)pvelocity[1])*( PPR_TO_DISTANCE_Y/ mydt); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000f4e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
		float p_y =   ( (float)pcounter[1])*PPR_TO_DISTANCE_Y; //((float)mycounter[0]) / PPM_X;
 8000f52:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		float error_D = target_v_y - v_y;
 8000f56:	eee5 7ac2 	vfms.f32	s15, s11, s4
		float error_P = target_p_y - p_y;
 8000f5a:	eea6 7a64 	vfms.f32	s14, s12, s9
		float pwm_output = error_P*(K_P_Y) /* + total_error_I* (K_I)*/ + error_D*(K_D_Y);
 8000f5e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8000f62:	eee7 7a03 	vfma.f32	s15, s14, s6
 8000f66:	fec7 7ae3 	vminnm.f32	s15, s15, s7
		int32_t vPWMY_out = (int32_t)(pwm_output*12000);
 8000f6a:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8000f6e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8000f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f76:	edc2 7a01 	vstr	s15, [r2, #4]
}
 8000f7a:	4770      	bx	lr
		else if(error_P<-error_acceptable)error_P+=error_acceptable;
 8000f7c:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8000ff0 <computePD+0x170>
 8000f80:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	d506      	bpl.n	8000f98 <computePD+0x118>
 8000f8a:	ee77 7aa5 	vadd.f32	s15, s15, s11
		float pwm_output = error_P*(K_P) /* + total_error_I* (K_I)*/ + error_D*(K_D);
 8000f8e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8000fd4 <computePD+0x154>
 8000f92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000f96:	e7a9      	b.n	8000eec <computePD+0x6c>
 8000f98:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000ff4 <computePD+0x174>
 8000f9c:	e7a6      	b.n	8000eec <computePD+0x6c>
		else if(velocity_closer_to_zero<-1.f)velocity_closer_to_zero+=.5f;
 8000f9e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	d402      	bmi.n	8000fb2 <computePD+0x132>
		else velocity_closer_to_zero=0;
 8000fac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000ff4 <computePD+0x174>
 8000fb0:	e77a      	b.n	8000ea8 <computePD+0x28>
		else if(velocity_closer_to_zero<-1.f)velocity_closer_to_zero+=.5f;
 8000fb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fba:	e775      	b.n	8000ea8 <computePD+0x28>
 8000fbc:	240032d8 	.word	0x240032d8
 8000fc0:	24000008 	.word	0x24000008
 8000fc4:	3727c5ac 	.word	0x3727c5ac
 8000fc8:	240032dc 	.word	0x240032dc
 8000fcc:	3ca3d70a 	.word	0x3ca3d70a
 8000fd0:	240032e4 	.word	0x240032e4
 8000fd4:	43c80000 	.word	0x43c80000
 8000fd8:	3627c5ac 	.word	0x3627c5ac
 8000fdc:	463b8000 	.word	0x463b8000
 8000fe0:	3f19999a 	.word	0x3f19999a
 8000fe4:	42a00000 	.word	0x42a00000
 8000fe8:	bf4ccccd 	.word	0xbf4ccccd
 8000fec:	3f4ccccd 	.word	0x3f4ccccd
 8000ff0:	bca3d70a 	.word	0xbca3d70a
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <getCalibrationMode>:

uint8_t getCalibrationMode()
{
	return calibration_mode;
 8000ff8:	4b01      	ldr	r3, [pc, #4]	; (8001000 <getCalibrationMode+0x8>)
 8000ffa:	7818      	ldrb	r0, [r3, #0]
}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	240032af 	.word	0x240032af

08001004 <updateCalibration>:
int32_t theta_min=0;
int32_t theta_max=0;

//Feedback loop called on timer callback at current update rate.
void updateCalibration(int32_t* pcounter, int32_t* pvelocity, uint8_t _limit_status,  int32_t* rPWM)
{
 8001004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	my_limit_status = _limit_status;
 8001008:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80012fc <updateCalibration+0x2f8>
{
 800100c:	460d      	mov	r5, r1

	for(int i=0;i<3;++i)
	{
		mycounter[i] = pcounter[i];
 800100e:	4ea9      	ldr	r6, [pc, #676]	; (80012b4 <updateCalibration+0x2b0>)
{
 8001010:	461f      	mov	r7, r3
	my_limit_status = _limit_status;
 8001012:	f888 2000 	strb.w	r2, [r8]
{
 8001016:	4604      	mov	r4, r0
		mycounter[i] = pcounter[i];
 8001018:	6802      	ldr	r2, [r0, #0]
 800101a:	6843      	ldr	r3, [r0, #4]
 800101c:	6032      	str	r2, [r6, #0]
		myvelocity[i] = pvelocity[i];
 800101e:	680a      	ldr	r2, [r1, #0]
 8001020:	49a5      	ldr	r1, [pc, #660]	; (80012b8 <updateCalibration+0x2b4>)
 8001022:	600a      	str	r2, [r1, #0]
		mycounter[i] = pcounter[i];
 8001024:	6073      	str	r3, [r6, #4]
 8001026:	6883      	ldr	r3, [r0, #8]
		myvelocity[i] = pvelocity[i];
 8001028:	686a      	ldr	r2, [r5, #4]
 800102a:	604a      	str	r2, [r1, #4]
		mycounter[i] = pcounter[i];
 800102c:	60b3      	str	r3, [r6, #8]
		myvelocity[i] = pvelocity[i];
 800102e:	68ab      	ldr	r3, [r5, #8]
 8001030:	608b      	str	r3, [r1, #8]
	}

	mydt = getDt();
 8001032:	f000 fda3 	bl	8001b7c <getDt>
 8001036:	4ba1      	ldr	r3, [pc, #644]	; (80012bc <updateCalibration+0x2b8>)

	if(calibration_mode == CALIB_INIT)
 8001038:	4aa1      	ldr	r2, [pc, #644]	; (80012c0 <updateCalibration+0x2bc>)
	mydt = getDt();
 800103a:	ed83 0a00 	vstr	s0, [r3]
	if(calibration_mode == CALIB_INIT)
 800103e:	7811      	ldrb	r1, [r2, #0]
 8001040:	2901      	cmp	r1, #1
 8001042:	d129      	bne.n	8001098 <updateCalibration+0x94>
	{
		//Set target to current position.
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8001044:	ed94 7a00 	vldr	s14, [r4]
		target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
		target_v[0]= 0;
 8001048:	f04f 0c00 	mov.w	ip, #0
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 800104c:	eddf 7a9d 	vldr	s15, [pc, #628]	; 80012c4 <updateCalibration+0x2c0>
		target_v[1]= -calib_speed_y;
		calibration_mode = CALIB_MOVE_DOWN;
		wait_time=1.f;
 8001050:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8001054:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 8001058:	eddf 6a9b 	vldr	s13, [pc, #620]	; 80012c8 <updateCalibration+0x2c4>
		target_v[1]= -calib_speed_y;
 800105c:	499b      	ldr	r1, [pc, #620]	; (80012cc <updateCalibration+0x2c8>)
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 800105e:	ee27 7a27 	vmul.f32	s14, s14, s15
		target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 8001062:	edd4 7a01 	vldr	s15, [r4, #4]
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	ee67 7aa6 	vmul.f32	s15, s15, s13
		target_v[1]= -calib_speed_y;
 800106e:	edd1 6a00 	vldr	s13, [r1]
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8001072:	4997      	ldr	r1, [pc, #604]	; (80012d0 <updateCalibration+0x2cc>)
		target_v[1]= -calib_speed_y;
 8001074:	eef1 6a66 	vneg.f32	s13, s13
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8001078:	ed81 7a00 	vstr	s14, [r1]
		target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 800107c:	edc1 7a01 	vstr	s15, [r1, #4]
		target_v[0]= 0;
 8001080:	4994      	ldr	r1, [pc, #592]	; (80012d4 <updateCalibration+0x2d0>)
 8001082:	f8c1 c000 	str.w	ip, [r1]
		target_v[1]= -calib_speed_y;
 8001086:	edc1 6a01 	vstr	s13, [r1, #4]
		calibration_mode = CALIB_MOVE_DOWN;
 800108a:	2102      	movs	r1, #2
 800108c:	7011      	strb	r1, [r2, #0]
		wait_time=1.f;
 800108e:	4992      	ldr	r1, [pc, #584]	; (80012d8 <updateCalibration+0x2d4>)
 8001090:	6008      	str	r0, [r1, #0]

		calib_failed=0;
 8001092:	2000      	movs	r0, #0
 8001094:	4991      	ldr	r1, [pc, #580]	; (80012dc <updateCalibration+0x2d8>)
 8001096:	7008      	strb	r0, [r1, #0]
	{
		return;
	}*/


	switch(calibration_mode)
 8001098:	7811      	ldrb	r1, [r2, #0]
 800109a:	3902      	subs	r1, #2
 800109c:	2910      	cmp	r1, #16
 800109e:	d82c      	bhi.n	80010fa <updateCalibration+0xf6>
 80010a0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80010a4:	00600048 	.word	0x00600048
 80010a8:	008e00e4 	.word	0x008e00e4
 80010ac:	012e00b4 	.word	0x012e00b4
 80010b0:	019901d3 	.word	0x019901d3
 80010b4:	002b01b6 	.word	0x002b01b6
 80010b8:	002b002b 	.word	0x002b002b
 80010bc:	0011017a 	.word	0x0011017a
 80010c0:	02370215 	.word	0x02370215
 80010c4:	002d      	.short	0x002d
			computePD(pcounter, pvelocity, rPWM);
		}break;

		case CALIB_DEMO_LEFT:
		{
			wait_time-=mydt;
 80010c6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80012d8 <updateCalibration+0x2d4>
 80010ca:	ed93 7a00 	vldr	s14, [r3]
 80010ce:	edd9 7a00 	vldr	s15, [r9]
 80010d2:	ee77 7ac7 	vsub.f32	s15, s15, s14

			if(wait_time<0 || my_limit_status &LIMIT_LEFT)
 80010d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time-=mydt;
 80010da:	edc9 7a00 	vstr	s15, [r9]
			if(wait_time<0 || my_limit_status &LIMIT_LEFT)
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	f140 825b 	bpl.w	800159c <updateCalibration+0x598>
			{
				target_v[0]=0;
 80010e6:	4b7b      	ldr	r3, [pc, #492]	; (80012d4 <updateCalibration+0x2d0>)
 80010e8:	2100      	movs	r1, #0
				target_v[1]=0;
				calibration_mode = CALIB_DEMO_UP;
 80010ea:	2010      	movs	r0, #16
				target_v[0]=0;
 80010ec:	6019      	str	r1, [r3, #0]
				target_v[1]=0;
 80010ee:	6059      	str	r1, [r3, #4]
				wait_time=2.f;
 80010f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
				calibration_mode = CALIB_DEMO_UP;
 80010f4:	7010      	strb	r0, [r2, #0]
				wait_time=2.f;
 80010f6:	f8c9 3000 	str.w	r3, [r9]
			computePD(pcounter, pvelocity, rPWM);
		}break;

	}

}
 80010fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			wait_time-=mydt;
 80010fe:	4976      	ldr	r1, [pc, #472]	; (80012d8 <updateCalibration+0x2d4>)
			if(wait_time<0)
 8001100:	2000      	movs	r0, #0
			wait_time-=mydt;
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	edd1 7a00 	vldr	s15, [r1]
 800110a:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<0)
 800110e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time-=mydt;
 8001112:	edc1 7a00 	vstr	s15, [r1]
			if(wait_time<0)
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	f100 8272 	bmi.w	8001602 <updateCalibration+0x5fe>
			if(wait_time<1.75f)target_v[1]=-calib_speed_y*.75f;
 800111e:	eeb7 7a0c 	vmov.f32	s14, #124	; 0x3fe00000  1.750
 8001122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	f140 81a0 	bpl.w	800146e <updateCalibration+0x46a>
 800112e:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 8001132:	e1e5      	b.n	8001500 <updateCalibration+0x4fc>
			wait_time -= mydt;
 8001134:	4968      	ldr	r1, [pc, #416]	; (80012d8 <updateCalibration+0x2d4>)
 8001136:	ed93 7a00 	vldr	s14, [r3]
 800113a:	edd1 7a00 	vldr	s15, [r1]
 800113e:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0)
 8001142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8001146:	edc1 7a00 	vstr	s15, [r1]
			if(wait_time<=0)
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	f200 818e 	bhi.w	800146e <updateCalibration+0x46a>
				target_v[1]=calib_speed_y;
 8001152:	485e      	ldr	r0, [pc, #376]	; (80012cc <updateCalibration+0x2c8>)
 8001154:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <updateCalibration+0x2d0>)
 8001156:	6800      	ldr	r0, [r0, #0]
				wait_time=20;//max 10 seconds up... Who knows, maybe that pulley thing is not connected...
 8001158:	4c61      	ldr	r4, [pc, #388]	; (80012e0 <updateCalibration+0x2dc>)
				target_v[1]=calib_speed_y;
 800115a:	6058      	str	r0, [r3, #4]
				calibration_mode = CALIB_MOVE_UP;
 800115c:	2303      	movs	r3, #3
				wait_time=20;//max 10 seconds up... Who knows, maybe that pulley thing is not connected...
 800115e:	600c      	str	r4, [r1, #0]
				calibration_mode = CALIB_MOVE_UP;
 8001160:	7013      	strb	r3, [r2, #0]
				break;
 8001162:	e7ca      	b.n	80010fa <updateCalibration+0xf6>
			wait_time -= mydt;
 8001164:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80012d8 <updateCalibration+0x2d4>
 8001168:	ed93 7a00 	vldr	s14, [r3]
 800116c:	edd9 7a00 	vldr	s15, [r9]
 8001170:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0 || my_limit_status & LIMIT_Y_UP || fabs(calibGetDeltaY())>.08f )
 8001174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8001178:	edc9 7a00 	vstr	s15, [r9]
			if(wait_time<=0 || my_limit_status & LIMIT_Y_UP || fabs(calibGetDeltaY())>.08f )
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	f240 827e 	bls.w	8001680 <updateCalibration+0x67c>
 8001184:	f898 1000 	ldrb.w	r1, [r8]
 8001188:	0708      	lsls	r0, r1, #28
 800118a:	f140 82b3 	bpl.w	80016f4 <updateCalibration+0x6f0>
 800118e:	4950      	ldr	r1, [pc, #320]	; (80012d0 <updateCalibration+0x2cc>)
				target_v[0]=-calib_speed;
 8001190:	4854      	ldr	r0, [pc, #336]	; (80012e4 <updateCalibration+0x2e0>)
 8001192:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <updateCalibration+0x2d0>)
 8001194:	edd0 7a00 	vldr	s15, [r0]
				target_v[1]=0;
 8001198:	2000      	movs	r0, #0
				target[1]-=.025f;
 800119a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80012e8 <updateCalibration+0x2e4>
				target_v[0]=-calib_speed;
 800119e:	eef1 7a67 	vneg.f32	s15, s15
				wait_time=10.f;
 80011a2:	4c52      	ldr	r4, [pc, #328]	; (80012ec <updateCalibration+0x2e8>)
 80011a4:	f8c9 4000 	str.w	r4, [r9]
				target_v[0]=-calib_speed;
 80011a8:	edc3 7a00 	vstr	s15, [r3]
				target[1]-=.025f;
 80011ac:	edd1 7a01 	vldr	s15, [r1, #4]
 80011b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b4:	edc1 7a01 	vstr	s15, [r1, #4]
				calibration_mode = CALIB_MOVE_LEFT_IF_NECESSARY;
 80011b8:	2104      	movs	r1, #4
				target_v[1]=0;
 80011ba:	6058      	str	r0, [r3, #4]
				calibration_mode = CALIB_MOVE_LEFT_IF_NECESSARY;
 80011bc:	7011      	strb	r1, [r2, #0]
				break;
 80011be:	e79c      	b.n	80010fa <updateCalibration+0xf6>
			wait_time -= mydt;
 80011c0:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80012d8 <updateCalibration+0x2d4>
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	edd9 7a00 	vldr	s15, [r9]
			if( my_limit_status & LIMIT_MAXRIGHT || wait_time<=0)
 80011cc:	f898 1000 	ldrb.w	r1, [r8]
			wait_time -= mydt;
 80011d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if( my_limit_status & LIMIT_MAXRIGHT || wait_time<=0)
 80011d4:	0788      	lsls	r0, r1, #30
			wait_time -= mydt;
 80011d6:	edc9 7a00 	vstr	s15, [r9]
			if( my_limit_status & LIMIT_MAXRIGHT || wait_time<=0)
 80011da:	d405      	bmi.n	80011e8 <updateCalibration+0x1e4>
 80011dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	f200 8143 	bhi.w	800146e <updateCalibration+0x46a>
				if(wait_time<=0)calib_failed=1;
 80011e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	f240 8257 	bls.w	80016a2 <updateCalibration+0x69e>
				target_v[0]=0;//-calib_speed;
 80011f4:	4937      	ldr	r1, [pc, #220]	; (80012d4 <updateCalibration+0x2d0>)
 80011f6:	2000      	movs	r0, #0
				wait_time = 10.f;
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <updateCalibration+0x2e8>)
				target_v[0]=0;//-calib_speed;
 80011fa:	6008      	str	r0, [r1, #0]
				calibration_mode = CALIB_MOVE_LEFT;
 80011fc:	2106      	movs	r1, #6
				wait_time = 10.f;
 80011fe:	f8c9 3000 	str.w	r3, [r9]
				calibration_mode = CALIB_MOVE_LEFT;
 8001202:	7011      	strb	r1, [r2, #0]
				counter_limit_right = pcounter[0];
 8001204:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <updateCalibration+0x2ec>)
 8001206:	6822      	ldr	r2, [r4, #0]
 8001208:	601a      	str	r2, [r3, #0]
				break;
 800120a:	e776      	b.n	80010fa <updateCalibration+0xf6>
			wait_time -= mydt;
 800120c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80012d8 <updateCalibration+0x2d4>
 8001210:	ed93 7a00 	vldr	s14, [r3]
 8001214:	edd9 7a00 	vldr	s15, [r9]
			if( my_limit_status & LIMIT_MAXLEFT || wait_time<=0)
 8001218:	f898 1000 	ldrb.w	r1, [r8]
			wait_time -= mydt;
 800121c:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if( my_limit_status & LIMIT_MAXLEFT || wait_time<=0)
 8001220:	b2c9      	uxtb	r1, r1
 8001222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8001226:	edc9 7a00 	vstr	s15, [r9]
			if( my_limit_status & LIMIT_MAXLEFT || wait_time<=0)
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	f240 822c 	bls.w	800168a <updateCalibration+0x686>
 8001232:	07c9      	lsls	r1, r1, #31
 8001234:	f140 829d 	bpl.w	8001772 <updateCalibration+0x76e>
				if(wait_time<=0)calib_failed=1;
 8001238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	f240 8223 	bls.w	800168a <updateCalibration+0x686>
				target_v[0]=0;//calib_speed;
 8001244:	4923      	ldr	r1, [pc, #140]	; (80012d4 <updateCalibration+0x2d0>)
 8001246:	2000      	movs	r0, #0
				wait_time=10.f;
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <updateCalibration+0x2e8>)
				target_v[0]=0;//calib_speed;
 800124a:	6008      	str	r0, [r1, #0]
				wait_time=10.f;
 800124c:	f8c9 3000 	str.w	r3, [r9]
				calibration_mode = CALIB_MOVE_CENTER;
 8001250:	2307      	movs	r3, #7
				counter_center = (counter_limit_left+counter_limit_right)/2;
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <updateCalibration+0x2ec>)
				counter_limit_left = pcounter[0];
 8001254:	4927      	ldr	r1, [pc, #156]	; (80012f4 <updateCalibration+0x2f0>)
				calibration_mode = CALIB_MOVE_CENTER;
 8001256:	7013      	strb	r3, [r2, #0]
				counter_center = (counter_limit_left+counter_limit_right)/2;
 8001258:	6802      	ldr	r2, [r0, #0]
				counter_limit_left = pcounter[0];
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	600b      	str	r3, [r1, #0]
				counter_center = (counter_limit_left+counter_limit_right)/2;
 800125e:	189b      	adds	r3, r3, r2
 8001260:	4925      	ldr	r1, [pc, #148]	; (80012f8 <updateCalibration+0x2f4>)
 8001262:	bf48      	it	mi
 8001264:	3301      	addmi	r3, #1
 8001266:	105b      	asrs	r3, r3, #1
 8001268:	600b      	str	r3, [r1, #0]
				break;
 800126a:	e746      	b.n	80010fa <updateCalibration+0xf6>
			wait_time -= mydt;
 800126c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80012d8 <updateCalibration+0x2d4>
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	edd9 7a00 	vldr	s15, [r9]
			if(!( my_limit_status & LIMIT_MAXRIGHT) || wait_time<=0 )
 8001278:	f898 1000 	ldrb.w	r1, [r8]
			wait_time -= mydt;
 800127c:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(!( my_limit_status & LIMIT_MAXRIGHT) || wait_time<=0 )
 8001280:	0789      	lsls	r1, r1, #30
			wait_time -= mydt;
 8001282:	edc9 7a00 	vstr	s15, [r9]
			if(!( my_limit_status & LIMIT_MAXRIGHT) || wait_time<=0 )
 8001286:	d505      	bpl.n	8001294 <updateCalibration+0x290>
 8001288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	f200 80ed 	bhi.w	800146e <updateCalibration+0x46a>
				if(wait_time<=0)calib_failed=1;
 8001294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	f240 81fd 	bls.w	800169a <updateCalibration+0x696>
				target_v[0]= calib_speed;
 80012a0:	4910      	ldr	r1, [pc, #64]	; (80012e4 <updateCalibration+0x2e0>)
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <updateCalibration+0x2d0>)
 80012a4:	6809      	ldr	r1, [r1, #0]
				wait_time=10.f;
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <updateCalibration+0x2e8>)
				target_v[0]= calib_speed;
 80012a8:	6019      	str	r1, [r3, #0]
				calibration_mode = CALIB_MOVE_RIGHT;
 80012aa:	2305      	movs	r3, #5
				wait_time=10.f;
 80012ac:	f8c9 0000 	str.w	r0, [r9]
				calibration_mode = CALIB_MOVE_RIGHT;
 80012b0:	7013      	strb	r3, [r2, #0]
				break;
 80012b2:	e722      	b.n	80010fa <updateCalibration+0xf6>
 80012b4:	240032c0 	.word	0x240032c0
 80012b8:	240032cc 	.word	0x240032cc
 80012bc:	24000008 	.word	0x24000008
 80012c0:	240032af 	.word	0x240032af
 80012c4:	3727c5ac 	.word	0x3727c5ac
 80012c8:	3627c5ac 	.word	0x3627c5ac
 80012cc:	24000004 	.word	0x24000004
 80012d0:	240032dc 	.word	0x240032dc
 80012d4:	240032e4 	.word	0x240032e4
 80012d8:	240032f4 	.word	0x240032f4
 80012dc:	240032ae 	.word	0x240032ae
 80012e0:	41a00000 	.word	0x41a00000
 80012e4:	24000000 	.word	0x24000000
 80012e8:	3ccccccd 	.word	0x3ccccccd
 80012ec:	41200000 	.word	0x41200000
 80012f0:	240032b8 	.word	0x240032b8
 80012f4:	240032b4 	.word	0x240032b4
 80012f8:	240032b0 	.word	0x240032b0
 80012fc:	240032bc 	.word	0x240032bc
			wait_time -= mydt;
 8001300:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8001660 <updateCalibration+0x65c>
			if(pcounter[0]>=counter_center || wait_time<=0)
 8001304:	49cd      	ldr	r1, [pc, #820]	; (800163c <updateCalibration+0x638>)
			wait_time -= mydt;
 8001306:	edd9 7a00 	vldr	s15, [r9]
 800130a:	ed93 7a00 	vldr	s14, [r3]
			if(pcounter[0]>=counter_center || wait_time<=0)
 800130e:	6808      	ldr	r0, [r1, #0]
 8001310:	6821      	ldr	r1, [r4, #0]
			wait_time -= mydt;
 8001312:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(pcounter[0]>=counter_center || wait_time<=0)
 8001316:	4281      	cmp	r1, r0
			wait_time -= mydt;
 8001318:	edc9 7a00 	vstr	s15, [r9]
			if(pcounter[0]>=counter_center || wait_time<=0)
 800131c:	f280 811e 	bge.w	800155c <updateCalibration+0x558>
 8001320:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	f240 8118 	bls.w	800155c <updateCalibration+0x558>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 800132c:	edd6 6a00 	vldr	s13, [r6]
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001330:	4ac3      	ldr	r2, [pc, #780]	; (8001640 <updateCalibration+0x63c>)
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001332:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001336:	eddf 5ac3 	vldr	s11, [pc, #780]	; 8001644 <updateCalibration+0x640>
 800133a:	ed92 7a00 	vldr	s14, [r2]
 800133e:	ed9f 6ac2 	vldr	s12, [pc, #776]	; 8001648 <updateCalibration+0x644>
 8001342:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8001346:	eeb0 7ac7 	vabs.f32	s14, s14
 800134a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d514      	bpl.n	800137e <updateCalibration+0x37a>
		target[0] += target_v[0]*mydt;
 8001354:	49bd      	ldr	r1, [pc, #756]	; (800164c <updateCalibration+0x648>)
 8001356:	ed91 6a00 	vldr	s12, [r1]
 800135a:	edd3 6a00 	vldr	s13, [r3]
 800135e:	ed92 7a00 	vldr	s14, [r2]
 8001362:	eea6 7a26 	vfma.f32	s14, s12, s13
 8001366:	ed82 7a00 	vstr	s14, [r2]
		target[1] += target_v[1]*mydt;
 800136a:	ed91 6a01 	vldr	s12, [r1, #4]
 800136e:	edd3 6a00 	vldr	s13, [r3]
 8001372:	ed92 7a01 	vldr	s14, [r2, #4]
 8001376:	eea6 7a26 	vfma.f32	s14, s12, s13
 800137a:	ed82 7a01 	vstr	s14, [r2, #4]
			if(wait_time<9.75f)target_v[0]=calib_speed;
 800137e:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8001650 <updateCalibration+0x64c>
 8001382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	f140 8099 	bpl.w	80014c0 <updateCalibration+0x4bc>
 800138e:	4ab1      	ldr	r2, [pc, #708]	; (8001654 <updateCalibration+0x650>)
 8001390:	4bae      	ldr	r3, [pc, #696]	; (800164c <updateCalibration+0x648>)
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e093      	b.n	80014c0 <updateCalibration+0x4bc>
			target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8001398:	ed94 7a00 	vldr	s14, [r4]
			target_v[0]=0 ;//-calib_speed*.75f;
 800139c:	2100      	movs	r1, #0
			target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 800139e:	edd4 7a01 	vldr	s15, [r4, #4]
			target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 80013a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013a6:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 8001644 <updateCalibration+0x640>
			target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 80013aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ae:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8001658 <updateCalibration+0x654>
			target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 80013b2:	48a3      	ldr	r0, [pc, #652]	; (8001640 <updateCalibration+0x63c>)
 80013b4:	ee27 7a06 	vmul.f32	s14, s14, s12
			target_v[0]=0 ;//-calib_speed*.75f;
 80013b8:	4ba4      	ldr	r3, [pc, #656]	; (800164c <updateCalibration+0x648>)
			target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 80013ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
			wait_time=10.f;
 80013be:	4ca7      	ldr	r4, [pc, #668]	; (800165c <updateCalibration+0x658>)
			target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 80013c0:	ed80 7a00 	vstr	s14, [r0]
			target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 80013c4:	edc0 7a01 	vstr	s15, [r0, #4]
			calibration_mode = CALIB_DEMO_RIGHT;
 80013c8:	2011      	movs	r0, #17
			target_v[0]=0 ;//-calib_speed*.75f;
 80013ca:	6019      	str	r1, [r3, #0]
			target_v[1]= 0;
 80013cc:	6059      	str	r1, [r3, #4]
			wait_time=10.f;
 80013ce:	4ba4      	ldr	r3, [pc, #656]	; (8001660 <updateCalibration+0x65c>)
			calibration_mode = CALIB_DEMO_RIGHT;
 80013d0:	7010      	strb	r0, [r2, #0]
			wait_time=10.f;
 80013d2:	601c      	str	r4, [r3, #0]
		}break;
 80013d4:	e691      	b.n	80010fa <updateCalibration+0xf6>
			wait_time -= mydt;
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	4ba1      	ldr	r3, [pc, #644]	; (8001660 <updateCalibration+0x65c>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0)
 80013e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 80013e8:	edc3 7a00 	vstr	s15, [r3]
			if(wait_time<=0)
 80013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f0:	f240 815b 	bls.w	80016aa <updateCalibration+0x6a6>
			if(wait_time>4.5f)
 80013f4:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80013f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	f340 8167 	ble.w	80016d2 <updateCalibration+0x6ce>
				theta_min=pcounter[2];
 8001404:	68a3      	ldr	r3, [r4, #8]
 8001406:	4a97      	ldr	r2, [pc, #604]	; (8001664 <updateCalibration+0x660>)
 8001408:	6013      	str	r3, [r2, #0]
				theta_max=theta_min;
 800140a:	4a97      	ldr	r2, [pc, #604]	; (8001668 <updateCalibration+0x664>)
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e057      	b.n	80014c0 <updateCalibration+0x4bc>
			wait_time -= mydt;
 8001410:	4e93      	ldr	r6, [pc, #588]	; (8001660 <updateCalibration+0x65c>)
			float k_mul = 1/(5000.f*mydt);
 8001412:	edd3 6a00 	vldr	s13, [r3]
			wait_time -= mydt;
 8001416:	edd6 7a00 	vldr	s15, [r6]
 800141a:	ed93 7a00 	vldr	s14, [r3]
 800141e:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0)
 8001422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8001426:	edc6 7a00 	vstr	s15, [r6]
			if(wait_time<=0)
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	f200 80c5 	bhi.w	80015bc <updateCalibration+0x5b8>
				rPWM[0]=0;
 8001432:	2300      	movs	r3, #0
				if(calib_failed)
 8001434:	498d      	ldr	r1, [pc, #564]	; (800166c <updateCalibration+0x668>)
				rPWM[0]=0;
 8001436:	603b      	str	r3, [r7, #0]
				if(calib_failed)
 8001438:	7809      	ldrb	r1, [r1, #0]
				rPWM[1]=0;
 800143a:	607b      	str	r3, [r7, #4]
				if(calib_failed)
 800143c:	2900      	cmp	r1, #0
 800143e:	f000 8155 	beq.w	80016ec <updateCalibration+0x6e8>
					calibration_mode = CALIB_ERROR;
 8001442:	210d      	movs	r1, #13
 8001444:	7011      	strb	r1, [r2, #0]
					rPWM[0]=0;
 8001446:	603b      	str	r3, [r7, #0]
					break;
 8001448:	e657      	b.n	80010fa <updateCalibration+0xf6>
			wait_time -= mydt;
 800144a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8001660 <updateCalibration+0x65c>
			if(wait_time<=0)
 800144e:	f04f 0900 	mov.w	r9, #0
			wait_time -= mydt;
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	edd8 7a00 	vldr	s15, [r8]
 800145a:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0)
 800145e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8001462:	edc8 7a00 	vstr	s15, [r8]
			if(wait_time<=0)
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	f240 80d5 	bls.w	8001618 <updateCalibration+0x614>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 800146e:	ed96 7a00 	vldr	s14, [r6]
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001472:	4a73      	ldr	r2, [pc, #460]	; (8001640 <updateCalibration+0x63c>)
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001474:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001478:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8001644 <updateCalibration+0x640>
 800147c:	edd2 7a00 	vldr	s15, [r2]
 8001480:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001648 <updateCalibration+0x644>
 8001484:	eee7 7a46 	vfms.f32	s15, s14, s12
 8001488:	eef0 7ae7 	vabs.f32	s15, s15
 800148c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	d514      	bpl.n	80014c0 <updateCalibration+0x4bc>
		target[0] += target_v[0]*mydt;
 8001496:	496d      	ldr	r1, [pc, #436]	; (800164c <updateCalibration+0x648>)
 8001498:	edd1 6a00 	vldr	s13, [r1]
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	edd2 7a00 	vldr	s15, [r2]
 80014a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80014a8:	edc2 7a00 	vstr	s15, [r2]
		target[1] += target_v[1]*mydt;
 80014ac:	edd1 6a01 	vldr	s13, [r1, #4]
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	edd2 7a01 	vldr	s15, [r2, #4]
 80014b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80014bc:	edc2 7a01 	vstr	s15, [r2, #4]
			computePD(pcounter, pvelocity, rPWM);
 80014c0:	463a      	mov	r2, r7
 80014c2:	4629      	mov	r1, r5
 80014c4:	4620      	mov	r0, r4
}
 80014c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			computePD(pcounter, pvelocity, rPWM);
 80014ca:	f7ff bcd9 	b.w	8000e80 <computePD>
			wait_time-=mydt;
 80014ce:	4964      	ldr	r1, [pc, #400]	; (8001660 <updateCalibration+0x65c>)
			if(wait_time<0 )
 80014d0:	2000      	movs	r0, #0
			wait_time-=mydt;
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	edd1 7a00 	vldr	s15, [r1]
 80014da:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<0 )
 80014de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time-=mydt;
 80014e2:	edc1 7a00 	vstr	s15, [r1]
			if(wait_time<0 )
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	f100 8092 	bmi.w	8001612 <updateCalibration+0x60e>
			if(wait_time<1.75f)target_v[1]=calib_speed_y*.75f;
 80014ee:	eeb7 7a0c 	vmov.f32	s14, #124	; 0x3fe00000  1.750
 80014f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	d5b8      	bpl.n	800146e <updateCalibration+0x46a>
 80014fc:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8001500:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <updateCalibration+0x66c>)
 8001502:	edd2 7a00 	vldr	s15, [r2]
 8001506:	4a51      	ldr	r2, [pc, #324]	; (800164c <updateCalibration+0x648>)
 8001508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150c:	edc2 7a01 	vstr	s15, [r2, #4]
 8001510:	e7ad      	b.n	800146e <updateCalibration+0x46a>
			wait_time-=mydt;
 8001512:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8001660 <updateCalibration+0x65c>
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	edd9 7a00 	vldr	s15, [r9]
 800151e:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<0 || my_limit_status & LIMIT_RIGHT)
 8001522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time-=mydt;
 8001526:	edc9 7a00 	vstr	s15, [r9]
			if(wait_time<0 || my_limit_status & LIMIT_RIGHT)
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d464      	bmi.n	80015fa <updateCalibration+0x5f6>
 8001530:	f898 1000 	ldrb.w	r1, [r8]
 8001534:	0688      	lsls	r0, r1, #26
 8001536:	d460      	bmi.n	80015fa <updateCalibration+0x5f6>
			if(wait_time<9.75f)target_v[0]=calib_speed*.75f;
 8001538:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001650 <updateCalibration+0x64c>
 800153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d593      	bpl.n	800146e <updateCalibration+0x46a>
 8001546:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
			if(wait_time<9.75f)target_v[0]=-calib_speed*.75f;
 800154a:	4a42      	ldr	r2, [pc, #264]	; (8001654 <updateCalibration+0x650>)
 800154c:	edd2 7a00 	vldr	s15, [r2]
 8001550:	4a3e      	ldr	r2, [pc, #248]	; (800164c <updateCalibration+0x648>)
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	edc2 7a00 	vstr	s15, [r2]
 800155a:	e788      	b.n	800146e <updateCalibration+0x46a>
				if(wait_time<=0)calib_failed=1;
 800155c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	f240 8095 	bls.w	8001692 <updateCalibration+0x68e>
				target_v[1]=-calib_speed_y;
 8001568:	4d41      	ldr	r5, [pc, #260]	; (8001670 <updateCalibration+0x66c>)
				target_v[0]=0.f;
 800156a:	2400      	movs	r4, #0
 800156c:	4b37      	ldr	r3, [pc, #220]	; (800164c <updateCalibration+0x648>)
				resetCounter(0);
 800156e:	2000      	movs	r0, #0
				target_v[1]=-calib_speed_y;
 8001570:	edd5 7a00 	vldr	s15, [r5]
				target_v[0]=0.f;
 8001574:	601c      	str	r4, [r3, #0]
				target_v[1]=-calib_speed_y;
 8001576:	eef1 7a67 	vneg.f32	s15, s15
 800157a:	edc3 7a01 	vstr	s15, [r3, #4]
				calibration_mode = CALIB_MOVE_DOWN_AGAIN;
 800157e:	2308      	movs	r3, #8
 8001580:	7013      	strb	r3, [r2, #0]
				resetCounter(0);
 8001582:	f000 fb17 	bl	8001bb4 <resetCounter>
				wait_time = LIMIT_Y_UP_VALUE/calib_speed_y; //Go down 1 meter.
 8001586:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001674 <updateCalibration+0x670>
 800158a:	ed95 7a00 	vldr	s14, [r5]
				target[0]=0;
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <updateCalibration+0x63c>)
				wait_time = LIMIT_Y_UP_VALUE/calib_speed_y; //Go down 1 meter.
 8001590:	eec6 7a87 	vdiv.f32	s15, s13, s14
				target[0]=0;
 8001594:	601c      	str	r4, [r3, #0]
				wait_time = LIMIT_Y_UP_VALUE/calib_speed_y; //Go down 1 meter.
 8001596:	edc9 7a00 	vstr	s15, [r9]
				break;
 800159a:	e5ae      	b.n	80010fa <updateCalibration+0xf6>
			if(wait_time<0 || my_limit_status &LIMIT_LEFT)
 800159c:	f898 1000 	ldrb.w	r1, [r8]
 80015a0:	06c9      	lsls	r1, r1, #27
 80015a2:	f53f ada0 	bmi.w	80010e6 <updateCalibration+0xe2>
			if(wait_time<9.75f)target_v[0]=-calib_speed*.75f;
 80015a6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001650 <updateCalibration+0x64c>
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	f57f af5c 	bpl.w	800146e <updateCalibration+0x46a>
 80015b6:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 80015ba:	e7c6      	b.n	800154a <updateCalibration+0x546>
			float k_mul = 1/(5000.f*mydt);
 80015bc:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8001678 <updateCalibration+0x674>
			computePD(pcounter, pvelocity, rPWM);
 80015c0:	463a      	mov	r2, r7
 80015c2:	4629      	mov	r1, r5
 80015c4:	4620      	mov	r0, r4
			float k_mul = 1/(5000.f*mydt);
 80015c6:	eec7 1aa6 	vdiv.f32	s3, s15, s13
			computePD(pcounter, pvelocity, rPWM);
 80015ca:	f7ff fc59 	bl	8000e80 <computePD>
			if(calib_failed)
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <updateCalibration+0x668>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8107 	beq.w	80017e6 <updateCalibration+0x7e2>
				if( (uint16_t)(wait_time*10)%2==0)
 80015d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015dc:	edd6 7a00 	vldr	s15, [r6]
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e8:	ee17 3a90 	vmov	r3, s15
 80015ec:	07de      	lsls	r6, r3, #31
 80015ee:	f140 8122 	bpl.w	8001836 <updateCalibration+0x832>
					rPWM[1]=0;
 80015f2:	2300      	movs	r3, #0
					rPWM[0]=0;
 80015f4:	e9c7 3300 	strd	r3, r3, [r7]
 80015f8:	e57f      	b.n	80010fa <updateCalibration+0xf6>
				target_v[0]=0;//-calib_speed*.75f;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <updateCalibration+0x648>)
 80015fc:	2100      	movs	r1, #0
				calibration_mode = CALIB_DEMO_DOWN;
 80015fe:	2012      	movs	r0, #18
 8001600:	e574      	b.n	80010ec <updateCalibration+0xe8>
				target_v[0]=0;//-calib_speed*.75f;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <updateCalibration+0x648>)
				calibration_mode = CALIB_DEMO_LEFT;
 8001604:	240f      	movs	r4, #15
				target_v[0]=0;//-calib_speed*.75f;
 8001606:	6018      	str	r0, [r3, #0]
				target_v[1]=0;
 8001608:	6058      	str	r0, [r3, #4]
				wait_time=10.f;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <updateCalibration+0x658>)
				calibration_mode = CALIB_DEMO_RIGHT;
 800160c:	7014      	strb	r4, [r2, #0]
				wait_time=10.f;
 800160e:	600b      	str	r3, [r1, #0]
				break;
 8001610:	e573      	b.n	80010fa <updateCalibration+0xf6>
				target_v[0]=0;//-calib_speed*.75f;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <updateCalibration+0x648>)
				calibration_mode = CALIB_DEMO_RIGHT;
 8001614:	2411      	movs	r4, #17
 8001616:	e7f6      	b.n	8001606 <updateCalibration+0x602>
				target_v[1]=0;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <updateCalibration+0x648>)
				resetCounter(1);
 800161a:	2001      	movs	r0, #1
				wait_time=10;
 800161c:	490f      	ldr	r1, [pc, #60]	; (800165c <updateCalibration+0x658>)
				target_v[1]=0;
 800161e:	f8c3 9004 	str.w	r9, [r3, #4]
				calibration_mode = CALIB_MEASURE_THETA;
 8001622:	2309      	movs	r3, #9
				wait_time=10;
 8001624:	f8c8 1000 	str.w	r1, [r8]
				calibration_mode = CALIB_MEASURE_THETA;
 8001628:	7013      	strb	r3, [r2, #0]
				resetCounter(1);
 800162a:	f000 fac3 	bl	8001bb4 <resetCounter>
				wait_time=5.f;	//wait 5 seconds and measure min/max on theta.
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <updateCalibration+0x678>)
				target[1]=0;
 8001630:	4a03      	ldr	r2, [pc, #12]	; (8001640 <updateCalibration+0x63c>)
				wait_time=5.f;	//wait 5 seconds and measure min/max on theta.
 8001632:	f8c8 3000 	str.w	r3, [r8]
				target[1]=0;
 8001636:	f8c2 9004 	str.w	r9, [r2, #4]
				break;
 800163a:	e55e      	b.n	80010fa <updateCalibration+0xf6>
 800163c:	240032b0 	.word	0x240032b0
 8001640:	240032dc 	.word	0x240032dc
 8001644:	3727c5ac 	.word	0x3727c5ac
 8001648:	3e19999a 	.word	0x3e19999a
 800164c:	240032e4 	.word	0x240032e4
 8001650:	411c0000 	.word	0x411c0000
 8001654:	24000000 	.word	0x24000000
 8001658:	3627c5ac 	.word	0x3627c5ac
 800165c:	41200000 	.word	0x41200000
 8001660:	240032f4 	.word	0x240032f4
 8001664:	240032f0 	.word	0x240032f0
 8001668:	240032ec 	.word	0x240032ec
 800166c:	240032ae 	.word	0x240032ae
 8001670:	24000004 	.word	0x24000004
 8001674:	3f4ccccd 	.word	0x3f4ccccd
 8001678:	3951b717 	.word	0x3951b717
 800167c:	40a00000 	.word	0x40a00000
				if(wait_time<=0)calib_failed=1;
 8001680:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <updateCalibration+0x874>)
 8001682:	2001      	movs	r0, #1
 8001684:	497d      	ldr	r1, [pc, #500]	; (800187c <updateCalibration+0x878>)
 8001686:	7018      	strb	r0, [r3, #0]
 8001688:	e582      	b.n	8001190 <updateCalibration+0x18c>
				if(wait_time<=0)calib_failed=1;
 800168a:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <updateCalibration+0x874>)
 800168c:	2101      	movs	r1, #1
 800168e:	7019      	strb	r1, [r3, #0]
 8001690:	e5d8      	b.n	8001244 <updateCalibration+0x240>
				if(wait_time<=0)calib_failed=1;
 8001692:	4b79      	ldr	r3, [pc, #484]	; (8001878 <updateCalibration+0x874>)
 8001694:	2101      	movs	r1, #1
 8001696:	7019      	strb	r1, [r3, #0]
 8001698:	e766      	b.n	8001568 <updateCalibration+0x564>
				if(wait_time<=0)calib_failed=1;
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <updateCalibration+0x874>)
 800169c:	2101      	movs	r1, #1
 800169e:	7019      	strb	r1, [r3, #0]
 80016a0:	e5fe      	b.n	80012a0 <updateCalibration+0x29c>
				if(wait_time<=0)calib_failed=1;
 80016a2:	4b75      	ldr	r3, [pc, #468]	; (8001878 <updateCalibration+0x874>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	7019      	strb	r1, [r3, #0]
 80016a8:	e5a4      	b.n	80011f4 <updateCalibration+0x1f0>
				int32_t middle = (theta_min + theta_max)/2;
 80016aa:	4d75      	ldr	r5, [pc, #468]	; (8001880 <updateCalibration+0x87c>)
				wait_time=1.5f;
 80016ac:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
				int32_t middle = (theta_min + theta_max)/2;
 80016b0:	4974      	ldr	r1, [pc, #464]	; (8001884 <updateCalibration+0x880>)
				wait_time=1.5f;
 80016b2:	6018      	str	r0, [r3, #0]
				calibration_mode = CALIB_BEEP;
 80016b4:	200a      	movs	r0, #10
				int32_t middle = (theta_min + theta_max)/2;
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	6809      	ldr	r1, [r1, #0]
				calibration_mode = CALIB_BEEP;
 80016ba:	7010      	strb	r0, [r2, #0]
				setCounter(2, pcounter[2] - middle);
 80016bc:	2002      	movs	r0, #2
				int32_t middle = (theta_min + theta_max)/2;
 80016be:	185b      	adds	r3, r3, r1
				setCounter(2, pcounter[2] - middle);
 80016c0:	68a1      	ldr	r1, [r4, #8]
				int32_t middle = (theta_min + theta_max)/2;
 80016c2:	bf48      	it	mi
 80016c4:	3301      	addmi	r3, #1
				setCounter(2, pcounter[2] - middle);
 80016c6:	eba1 0163 	sub.w	r1, r1, r3, asr #1
}
 80016ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
				setCounter(2, pcounter[2] - middle);
 80016ce:	f000 ba79 	b.w	8001bc4 <setCounter>
				if(theta<theta_min)theta_min=theta;
 80016d2:	4a6b      	ldr	r2, [pc, #428]	; (8001880 <updateCalibration+0x87c>)
				int32_t theta=pcounter[2];
 80016d4:	68a3      	ldr	r3, [r4, #8]
				if(theta<theta_min)theta_min=theta;
 80016d6:	6811      	ldr	r1, [r2, #0]
 80016d8:	4299      	cmp	r1, r3
 80016da:	bfc8      	it	gt
 80016dc:	6013      	strgt	r3, [r2, #0]
				if(theta>theta_max)theta_max=theta;
 80016de:	4a69      	ldr	r2, [pc, #420]	; (8001884 <updateCalibration+0x880>)
 80016e0:	6811      	ldr	r1, [r2, #0]
 80016e2:	4299      	cmp	r1, r3
 80016e4:	f6bf aeec 	bge.w	80014c0 <updateCalibration+0x4bc>
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e6e9      	b.n	80014c0 <updateCalibration+0x4bc>
					calibration_mode = CALIB_DONE;
 80016ec:	230c      	movs	r3, #12
 80016ee:	7013      	strb	r3, [r2, #0]
					rPWM[0]=0;
 80016f0:	6039      	str	r1, [r7, #0]
					break;
 80016f2:	e502      	b.n	80010fa <updateCalibration+0xf6>
	float p_y =  ( (float)mycounter[1])*(DISTANCE_PER_TURN_Y/PPRY);
 80016f4:	ed96 7a01 	vldr	s14, [r6, #4]
	return target[1]-p_y;
 80016f8:	4960      	ldr	r1, [pc, #384]	; (800187c <updateCalibration+0x878>)
	float p_y =  ( (float)mycounter[1])*(DISTANCE_PER_TURN_Y/PPRY);
 80016fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	return target[1]-p_y;
 80016fe:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8001888 <updateCalibration+0x884>
 8001702:	edd1 7a01 	vldr	s15, [r1, #4]
			if(wait_time<=0 || my_limit_status & LIMIT_Y_UP || fabs(calibGetDeltaY())>.08f )
 8001706:	eddf 6a61 	vldr	s13, [pc, #388]	; 800188c <updateCalibration+0x888>
	return target[1]-p_y;
 800170a:	eee7 7a46 	vfms.f32	s15, s14, s12
			if(wait_time<=0 || my_limit_status & LIMIT_Y_UP || fabs(calibGetDeltaY())>.08f )
 800170e:	eef0 7ae7 	vabs.f32	s15, s15
 8001712:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	f73f ad39 	bgt.w	8001190 <updateCalibration+0x18c>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 800171e:	ed96 7a00 	vldr	s14, [r6]
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001722:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8001890 <updateCalibration+0x88c>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001726:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 800172a:	edd1 7a00 	vldr	s15, [r1]
 800172e:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001894 <updateCalibration+0x890>
 8001732:	eee7 7a46 	vfms.f32	s15, s14, s12
 8001736:	eef0 7ae7 	vabs.f32	s15, s15
 800173a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	f57f aebd 	bpl.w	80014c0 <updateCalibration+0x4bc>
		target[0] += target_v[0]*mydt;
 8001746:	4a54      	ldr	r2, [pc, #336]	; (8001898 <updateCalibration+0x894>)
 8001748:	edd2 6a00 	vldr	s13, [r2]
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	edd1 7a00 	vldr	s15, [r1]
 8001754:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001758:	edc1 7a00 	vstr	s15, [r1]
		target[1] += target_v[1]*mydt;
 800175c:	edd2 6a01 	vldr	s13, [r2, #4]
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	edd1 7a01 	vldr	s15, [r1, #4]
 8001768:	eee6 7a87 	vfma.f32	s15, s13, s14
 800176c:	edc1 7a01 	vstr	s15, [r1, #4]
}
 8001770:	e6a6      	b.n	80014c0 <updateCalibration+0x4bc>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001772:	edd6 6a00 	vldr	s13, [r6]
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001776:	4a41      	ldr	r2, [pc, #260]	; (800187c <updateCalibration+0x878>)
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001778:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 800177c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8001890 <updateCalibration+0x88c>
 8001780:	ed92 7a00 	vldr	s14, [r2]
 8001784:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8001894 <updateCalibration+0x890>
 8001788:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800178c:	eeb0 7ac7 	vabs.f32	s14, s14
 8001790:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001798:	d514      	bpl.n	80017c4 <updateCalibration+0x7c0>
		target[0] += target_v[0]*mydt;
 800179a:	493f      	ldr	r1, [pc, #252]	; (8001898 <updateCalibration+0x894>)
 800179c:	ed91 6a00 	vldr	s12, [r1]
 80017a0:	edd3 6a00 	vldr	s13, [r3]
 80017a4:	ed92 7a00 	vldr	s14, [r2]
 80017a8:	eea6 7a26 	vfma.f32	s14, s12, s13
 80017ac:	ed82 7a00 	vstr	s14, [r2]
		target[1] += target_v[1]*mydt;
 80017b0:	ed91 6a01 	vldr	s12, [r1, #4]
 80017b4:	edd3 6a00 	vldr	s13, [r3]
 80017b8:	ed92 7a01 	vldr	s14, [r2, #4]
 80017bc:	eea6 7a26 	vfma.f32	s14, s12, s13
 80017c0:	ed82 7a01 	vstr	s14, [r2, #4]
			if(wait_time<9.75f)target_v[0]=-calib_speed;
 80017c4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800189c <updateCalibration+0x898>
 80017c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	f57f ae76 	bpl.w	80014c0 <updateCalibration+0x4bc>
 80017d4:	4a32      	ldr	r2, [pc, #200]	; (80018a0 <updateCalibration+0x89c>)
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <updateCalibration+0x894>)
 80017d8:	edd2 7a00 	vldr	s15, [r2]
 80017dc:	eef1 7a67 	vneg.f32	s15, s15
 80017e0:	edc3 7a00 	vstr	s15, [r3]
 80017e4:	e66c      	b.n	80014c0 <updateCalibration+0x4bc>
				if(wait_time>1.f)
 80017e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017ea:	edd6 7a00 	vldr	s15, [r6]
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	dd2f      	ble.n	8001858 <updateCalibration+0x854>
					beep_up = (beep_up+1)%8;
 80017f8:	4a2a      	ldr	r2, [pc, #168]	; (80018a4 <updateCalibration+0x8a0>)
 80017fa:	7813      	ldrb	r3, [r2, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	f003 0107 	and.w	r1, r3, #7
					if(beep_up>=4)
 8001802:	075d      	lsls	r5, r3, #29
					beep_up = (beep_up+1)%8;
 8001804:	7011      	strb	r1, [r2, #0]
					if(beep_up>=4)
 8001806:	d524      	bpl.n	8001852 <updateCalibration+0x84e>
						rPWM[1]+=7000*k_mul;
 8001808:	eddf 6a27 	vldr	s13, [pc, #156]	; 80018a8 <updateCalibration+0x8a4>
						rPWM[1]+=-7000*k_mul;
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						rPWM[0]+=-7000*k_mul;
 8001814:	edd7 7a00 	vldr	s15, [r7]
 8001818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						rPWM[1]+=-7000*k_mul;
 800181c:	eea1 7aa6 	vfma.f32	s14, s3, s13
						rPWM[0]+=-7000*k_mul;
 8001820:	eee1 7aa6 	vfma.f32	s15, s3, s13
						rPWM[1]+=-7000*k_mul;
 8001824:	eebd 7ac7 	vcvt.s32.f32	s14, s14
						rPWM[0]+=-7000*k_mul;
 8001828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						rPWM[1]+=-7000*k_mul;
 800182c:	ed87 7a01 	vstr	s14, [r7, #4]
						rPWM[0]+=-7000*k_mul;
 8001830:	edc7 7a00 	vstr	s15, [r7]
 8001834:	e461      	b.n	80010fa <updateCalibration+0xf6>
					beep_up = (beep_up+1)%6;
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <updateCalibration+0x8a0>)
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <updateCalibration+0x8a8>)
 800183a:	780a      	ldrb	r2, [r1, #0]
 800183c:	3201      	adds	r2, #1
 800183e:	fba3 0302 	umull	r0, r3, r3, r2
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001848:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
					if(beep_up>=3)
 800184c:	2b02      	cmp	r3, #2
					beep_up = (beep_up+1)%6;
 800184e:	700b      	strb	r3, [r1, #0]
					if(beep_up>=3)
 8001850:	dcda      	bgt.n	8001808 <updateCalibration+0x804>
						rPWM[1]+=-7000*k_mul;
 8001852:	eddf 6a17 	vldr	s13, [pc, #92]	; 80018b0 <updateCalibration+0x8ac>
 8001856:	e7d9      	b.n	800180c <updateCalibration+0x808>
				if(wait_time>.5f)
 8001858:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800185c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dce7      	bgt.n	8001836 <updateCalibration+0x832>
					beep_up = (beep_up+1)%4;
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <updateCalibration+0x8a0>)
 8001868:	7813      	ldrb	r3, [r2, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	f003 0103 	and.w	r1, r3, #3
					if(beep_up>=2)
 8001870:	079c      	lsls	r4, r3, #30
					beep_up = (beep_up+1)%4;
 8001872:	7011      	strb	r1, [r2, #0]
					if(beep_up>=2)
 8001874:	d5ed      	bpl.n	8001852 <updateCalibration+0x84e>
 8001876:	e7c7      	b.n	8001808 <updateCalibration+0x804>
 8001878:	240032ae 	.word	0x240032ae
 800187c:	240032dc 	.word	0x240032dc
 8001880:	240032f0 	.word	0x240032f0
 8001884:	240032ec 	.word	0x240032ec
 8001888:	3627c5ac 	.word	0x3627c5ac
 800188c:	3da3d70a 	.word	0x3da3d70a
 8001890:	3727c5ac 	.word	0x3727c5ac
 8001894:	3e19999a 	.word	0x3e19999a
 8001898:	240032e4 	.word	0x240032e4
 800189c:	411c0000 	.word	0x411c0000
 80018a0:	24000000 	.word	0x24000000
 80018a4:	240032ad 	.word	0x240032ad
 80018a8:	45dac000 	.word	0x45dac000
 80018ac:	aaaaaaab 	.word	0xaaaaaaab
 80018b0:	c5dac000 	.word	0xc5dac000

080018b4 <SlowThisDown>:


#pragma GCC optimize ("O0")

void SlowThisDown()
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<2;i++)dummy+=dummy+1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	e008      	b.n	80018d2 <SlowThisDown+0x1e>
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <SlowThisDown+0x34>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <SlowThisDown+0x34>)
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d9f3      	bls.n	80018c0 <SlowThisDown+0xc>
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	24003320 	.word	0x24003320

080018ec <SPITransmitReceive>:
#pragma GCC pop_options


void SPITransmitReceive()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b09a      	sub	sp, #104	; 0x68
 80018f0:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2102      	movs	r1, #2
 80018f6:	487f      	ldr	r0, [pc, #508]	; (8001af4 <SPITransmitReceive+0x208>)
 80018f8:	f002 f824 	bl	8003944 <HAL_GPIO_WritePin>

	SlowThisDown();
 80018fc:	f7ff ffda 	bl	80018b4 <SlowThisDown>

	uint8_t* pHDR=(uint8_t*)(aTxBuffer);
 8001900:	4b7d      	ldr	r3, [pc, #500]	; (8001af8 <SPITransmitReceive+0x20c>)
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t* pCMD=(uint8_t*)(aTxBuffer+1);
 8001904:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <SPITransmitReceive+0x210>)
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t* pEMG=(uint8_t*)(aTxBuffer+2);
 8001908:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <SPITransmitReceive+0x214>)
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t* pPWMX=(uint16_t*)(aTxBuffer+12);
 800190c:	4b7d      	ldr	r3, [pc, #500]	; (8001b04 <SPITransmitReceive+0x218>)
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t* pPWMY=(uint16_t*)(aTxBuffer+14); //Write these last! So we can compute them in the middle of the message!
 8001910:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <SPITransmitReceive+0x21c>)
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38

	uint8_t vCMD=1;
 8001914:	2301      	movs	r3, #1
 8001916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(b_startcalib)
 800191a:	4b7c      	ldr	r3, [pc, #496]	; (8001b0c <SPITransmitReceive+0x220>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <SPITransmitReceive+0x44>
	{
		vCMD=2;
 8001924:	2302      	movs	r3, #2
 8001926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		b_startcalib=0;
 800192a:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <SPITransmitReceive+0x220>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
	}
	*pHDR='C';
 8001930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001932:	2243      	movs	r2, #67	; 0x43
 8001934:	701a      	strb	r2, [r3, #0]
	*pCMD=vCMD;
 8001936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001938:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800193c:	701a      	strb	r2, [r3, #0]
	*pEMG=emagnet;
 800193e:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <SPITransmitReceive+0x224>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001946:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, 8, 100);
 8001948:	2364      	movs	r3, #100	; 0x64
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2308      	movs	r3, #8
 800194e:	4a71      	ldr	r2, [pc, #452]	; (8001b14 <SPITransmitReceive+0x228>)
 8001950:	4969      	ldr	r1, [pc, #420]	; (8001af8 <SPITransmitReceive+0x20c>)
 8001952:	4871      	ldr	r0, [pc, #452]	; (8001b18 <SPITransmitReceive+0x22c>)
 8001954:	f004 f988 	bl	8005c68 <HAL_SPI_TransmitReceive>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	{ //Update counter x and y.
		int32_t* pT5 = (int32_t*)(aRxBuffer);
 800195e:	4b6d      	ldr	r3, [pc, #436]	; (8001b14 <SPITransmitReceive+0x228>)
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
		int32_t* pT2 = (int32_t*)(aRxBuffer+4);
 8001962:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <SPITransmitReceive+0x230>)
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c

		uint32_t old_counter[2];
		for(int i=0;i<2;++i)old_counter[i]=counter[i];
 8001966:	2300      	movs	r3, #0
 8001968:	65bb      	str	r3, [r7, #88]	; 0x58
 800196a:	e00d      	b.n	8001988 <SPITransmitReceive+0x9c>
 800196c:	4a6c      	ldr	r2, [pc, #432]	; (8001b20 <SPITransmitReceive+0x234>)
 800196e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	461a      	mov	r2, r3
 8001976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	3360      	adds	r3, #96	; 0x60
 800197c:	443b      	add	r3, r7
 800197e:	f843 2c4c 	str.w	r2, [r3, #-76]
 8001982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001984:	3301      	adds	r3, #1
 8001986:	65bb      	str	r3, [r7, #88]	; 0x58
 8001988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800198a:	2b01      	cmp	r3, #1
 800198c:	ddee      	ble.n	800196c <SPITransmitReceive+0x80>

		counter[0]=*pT5;
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a63      	ldr	r2, [pc, #396]	; (8001b20 <SPITransmitReceive+0x234>)
 8001994:	6013      	str	r3, [r2, #0]
		counter[1]=*pT2;
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a61      	ldr	r2, [pc, #388]	; (8001b20 <SPITransmitReceive+0x234>)
 800199c:	6053      	str	r3, [r2, #4]

		for(int i=0;i<2;++i)velocity[i] = counter[i]-old_counter[i];
 800199e:	2300      	movs	r3, #0
 80019a0:	657b      	str	r3, [r7, #84]	; 0x54
 80019a2:	e013      	b.n	80019cc <SPITransmitReceive+0xe0>
 80019a4:	4a5e      	ldr	r2, [pc, #376]	; (8001b20 <SPITransmitReceive+0x234>)
 80019a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	461a      	mov	r2, r3
 80019ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	3360      	adds	r3, #96	; 0x60
 80019b4:	443b      	add	r3, r7
 80019b6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	4a59      	ldr	r2, [pc, #356]	; (8001b24 <SPITransmitReceive+0x238>)
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80019c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c8:	3301      	adds	r3, #1
 80019ca:	657b      	str	r3, [r7, #84]	; 0x54
 80019cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	dde8      	ble.n	80019a4 <SPITransmitReceive+0xb8>
	}


	if(b_demo)
 80019d2:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <SPITransmitReceive+0x23c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d010      	beq.n	80019fe <SPITransmitReceive+0x112>
	{
		int32_t rPWM[2];
		updateCalibration(counter, velocity, limit_status, &rPWM);
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <SPITransmitReceive+0x240>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	494f      	ldr	r1, [pc, #316]	; (8001b24 <SPITransmitReceive+0x238>)
 80019e8:	484d      	ldr	r0, [pc, #308]	; (8001b20 <SPITransmitReceive+0x234>)
 80019ea:	f7ff fb0b 	bl	8001004 <updateCalibration>

		vPWMX = rPWM[0];
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <SPITransmitReceive+0x244>)
 80019f4:	801a      	strh	r2, [r3, #0]
		vPWMY = rPWM[1];
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <SPITransmitReceive+0x248>)
 80019fc:	801a      	strh	r2, [r3, #0]
	}
	*pPWMX=vPWMX;
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <SPITransmitReceive+0x244>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a08:	801a      	strh	r2, [r3, #0]
	*pPWMY=vPWMY;
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <SPITransmitReceive+0x248>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a14:	801a      	strh	r2, [r3, #0]

	state = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)(aTxBuffer+8), (uint8_t*)(aRxBuffer+8), 8, 100);
 8001a16:	4948      	ldr	r1, [pc, #288]	; (8001b38 <SPITransmitReceive+0x24c>)
 8001a18:	4a48      	ldr	r2, [pc, #288]	; (8001b3c <SPITransmitReceive+0x250>)
 8001a1a:	2364      	movs	r3, #100	; 0x64
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2308      	movs	r3, #8
 8001a20:	483d      	ldr	r0, [pc, #244]	; (8001b18 <SPITransmitReceive+0x22c>)
 8001a22:	f004 f921 	bl	8005c68 <HAL_SPI_TransmitReceive>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4830      	ldr	r0, [pc, #192]	; (8001af4 <SPITransmitReceive+0x208>)
 8001a32:	f001 ff87 	bl	8003944 <HAL_GPIO_WritePin>

	int16_t* pT3 = (int16_t*)(aRxBuffer+8);
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <SPITransmitReceive+0x250>)
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    pHDR = (uint8_t*)(aRxBuffer+10);
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <SPITransmitReceive+0x254>)
 8001a3c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t* plimit = (uint8_t*)(aRxBuffer+11);
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <SPITransmitReceive+0x258>)
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t* pcalibrationmode = (uint8_t*)(aRxBuffer+12);
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <SPITransmitReceive+0x25c>)
 8001a44:	623b      	str	r3, [r7, #32]
	uint8_t* pvFreqDiv = (uint8_t*)(aRxBuffer+13);
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <SPITransmitReceive+0x260>)
 8001a48:	61fb      	str	r3, [r7, #28]

	hdr_received = *pHDR;
 8001a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <SPITransmitReceive+0x264>)
 8001a50:	701a      	strb	r2, [r3, #0]

	if(*pHDR=='C')
 8001a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b43      	cmp	r3, #67	; 0x43
 8001a58:	d147      	bne.n	8001aea <SPITransmitReceive+0x1fe>
	{
		uint32_t old_counter[3];
		for(int i=2;i<3;++i)old_counter[i]=counter[i];
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a5e:	e00d      	b.n	8001a7c <SPITransmitReceive+0x190>
 8001a60:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <SPITransmitReceive+0x234>)
 8001a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	3360      	adds	r3, #96	; 0x60
 8001a70:	443b      	add	r3, r7
 8001a72:	f843 2c60 	str.w	r2, [r3, #-96]
 8001a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a78:	3301      	adds	r3, #1
 8001a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8001a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	ddee      	ble.n	8001a60 <SPITransmitReceive+0x174>

//		counter[0]=*pT5; //0 and 1 are being updated before the transmission of the second group of 8 characters.
//		counter[1]=*pT2; // so only update the angle Theta counter. (Which will be one frame late to the control loop, but this is not critical.
		counter[2]=*pT3;
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <SPITransmitReceive+0x234>)
 8001a8c:	609a      	str	r2, [r3, #8]

		for(int i=2;i<3;++i)velocity[i]=counter[i]-old_counter[i];
 8001a8e:	2302      	movs	r3, #2
 8001a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a92:	e013      	b.n	8001abc <SPITransmitReceive+0x1d0>
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <SPITransmitReceive+0x234>)
 8001a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	3360      	adds	r3, #96	; 0x60
 8001aa4:	443b      	add	r3, r7
 8001aa6:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <SPITransmitReceive+0x238>)
 8001ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab8:	3301      	adds	r3, #1
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	dde8      	ble.n	8001a94 <SPITransmitReceive+0x1a8>

		limit_status=*plimit;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <SPITransmitReceive+0x240>)
 8001ac8:	701a      	strb	r2, [r3, #0]
		controller_calibration_mode = *pcalibrationmode;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <SPITransmitReceive+0x268>)
 8001ad0:	701a      	strb	r2, [r3, #0]
		vFreqDiv = *pvFreqDiv;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <SPITransmitReceive+0x26c>)
 8001ad8:	701a      	strb	r2, [r3, #0]

		if(vFreqDiv==0)vFreqDiv=1;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <SPITransmitReceive+0x26c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <SPITransmitReceive+0x1fe>
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <SPITransmitReceive+0x26c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
	}

}
 8001aea:	bf00      	nop
 8001aec:	3760      	adds	r7, #96	; 0x60
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	58020800 	.word	0x58020800
 8001af8:	24000058 	.word	0x24000058
 8001afc:	24000059 	.word	0x24000059
 8001b00:	2400005a 	.word	0x2400005a
 8001b04:	24000064 	.word	0x24000064
 8001b08:	24000066 	.word	0x24000066
 8001b0c:	240032f8 	.word	0x240032f8
 8001b10:	24003301 	.word	0x24003301
 8001b14:	24000018 	.word	0x24000018
 8001b18:	240035a0 	.word	0x240035a0
 8001b1c:	2400001c 	.word	0x2400001c
 8001b20:	24003310 	.word	0x24003310
 8001b24:	24003304 	.word	0x24003304
 8001b28:	24003300 	.word	0x24003300
 8001b2c:	2400331c 	.word	0x2400331c
 8001b30:	240032fc 	.word	0x240032fc
 8001b34:	240032fa 	.word	0x240032fa
 8001b38:	24000060 	.word	0x24000060
 8001b3c:	24000020 	.word	0x24000020
 8001b40:	24000022 	.word	0x24000022
 8001b44:	24000023 	.word	0x24000023
 8001b48:	24000024 	.word	0x24000024
 8001b4c:	24000025 	.word	0x24000025
 8001b50:	240032fe 	.word	0x240032fe
 8001b54:	240032ff 	.word	0x240032ff
 8001b58:	24000014 	.word	0x24000014

08001b5c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SPULSE_Pin)
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b6c:	d101      	bne.n	8001b72 <HAL_GPIO_EXTI_Callback+0x16>
	{
		SPITransmitReceive();
 8001b6e:	f7ff febd 	bl	80018ec <SPITransmitReceive>
/*	if(GPIO_Pin == CSS_Pin)
	{


	}*/
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop

08001b7c <getDt>:



float getDt()
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
	return 1.f/ ( (float)( 20000/vFreqDiv));
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <getDt+0x34>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001b8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ba0:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	24000014 	.word	0x24000014

08001bb4 <resetCounter>:
	return ( (float)( 20000/vFreqDiv));
}

//Can't do that from here! For compatibility with calibration.c
void resetCounter()
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop

08001bc4 <setCounter>:

//same
void setCounter(uint8_t id_tim, int32_t value)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <StartDefaultTask>:
{
 8001bdc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	  printf("LCD Init:%i\n",counter[0]);
 8001be0:	4daa      	ldr	r5, [pc, #680]	; (8001e8c <StartDefaultTask+0x2b0>)
      ST7735_FillRectangle(0, 0, 162, 82, BLACK);
 8001be2:	262a      	movs	r6, #42	; 0x2a
	  printf("LCD Init:%i\n",counter[0]);
 8001be4:	48aa      	ldr	r0, [pc, #680]	; (8001e90 <StartDefaultTask+0x2b4>)
      ST7735_FillRectangle(0, 0, 162, 82, BLACK);
 8001be6:	f04f 0901 	mov.w	r9, #1
	  printf("LCD Init:%i\n",counter[0]);
 8001bea:	6829      	ldr	r1, [r5, #0]
      ST7735_FillRectangle(0, 0, 162, 82, BLACK);
 8001bec:	f04f 0802 	mov.w	r8, #2
 8001bf0:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 8001ecc <StartDefaultTask+0x2f0>
{
 8001bf4:	ed2d 8b02 	vpush	{d8}
 8001bf8:	b086      	sub	sp, #24
	  printf("LCD Init:%i\n",counter[0]);
 8001bfa:	f007 ff81 	bl	8009b00 <iprintf>
	  ST7735_Init(1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7fe fe8c 	bl	800091c <ST7735_Init>
	  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c0a:	48a2      	ldr	r0, [pc, #648]	; (8001e94 <StartDefaultTask+0x2b8>)
 8001c0c:	f001 fe9a 	bl	8003944 <HAL_GPIO_WritePin>
      ST7735_FillRectangle(0, 0, 162, 82, BLACK);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2352      	movs	r3, #82	; 0x52
 8001c14:	22a2      	movs	r2, #162	; 0xa2
 8001c16:	4608      	mov	r0, r1
 8001c18:	9100      	str	r1, [sp, #0]
 8001c1a:	f7fe ff6d 	bl	8000af8 <ST7735_FillRectangle>
 8001c1e:	e023      	b.n	8001c68 <StartDefaultTask+0x8c>
			  ST7735_DrawImage(0,82-y-38, 162, 38+y, logo);
 8001c20:	4623      	mov	r3, r4
 8001c22:	4c9d      	ldr	r4, [pc, #628]	; (8001e98 <StartDefaultTask+0x2bc>)
 8001c24:	4631      	mov	r1, r6
 8001c26:	22a2      	movs	r2, #162	; 0xa2
 8001c28:	2000      	movs	r0, #0
 8001c2a:	9400      	str	r4, [sp, #0]
 8001c2c:	f7fe ffc0 	bl	8000bb0 <ST7735_DrawImage>
			  ST7735_DrawImage(0,82-y-39, 162, 1, logo + 162*37); //black line
 8001c30:	4c9a      	ldr	r4, [pc, #616]	; (8001e9c <StartDefaultTask+0x2c0>)
 8001c32:	1e71      	subs	r1, r6, #1
 8001c34:	2301      	movs	r3, #1
 8001c36:	22a2      	movs	r2, #162	; 0xa2
 8001c38:	2000      	movs	r0, #0
 8001c3a:	b289      	uxth	r1, r1
 8001c3c:	9400      	str	r4, [sp, #0]
 8001c3e:	f7fe ffb7 	bl	8000bb0 <ST7735_DrawImage>
		  osDelay(20);
 8001c42:	2014      	movs	r0, #20
 8001c44:	f005 fcae 	bl	80075a4 <osDelay>
	  while(y>-39)
 8001c48:	f64f 73d9 	movw	r3, #65497	; 0xffd9
 8001c4c:	4599      	cmp	r9, r3
 8001c4e:	d04e      	beq.n	8001cee <StartDefaultTask+0x112>
 8001c50:	f108 38ff 	add.w	r8, r8, #4294967295
 8001c54:	f109 39ff 	add.w	r9, r9, #4294967295
 8001c58:	3601      	adds	r6, #1
 8001c5a:	f50b 7ba2 	add.w	fp, fp, #324	; 0x144
 8001c5e:	fa1f f888 	uxth.w	r8, r8
 8001c62:	fa1f f989 	uxth.w	r9, r9
 8001c66:	b2b6      	uxth	r6, r6
			  ST7735_DrawImage(0,0, 162, 38+y, logo - 162*y);
 8001c68:	f1c6 0452 	rsb	r4, r6, #82	; 0x52
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	fa0f fa88 	sxth.w	sl, r8
 8001c72:	22a2      	movs	r2, #162	; 0xa2
 8001c74:	b2a4      	uxth	r4, r4
		  if(y>0)
 8001c76:	458a      	cmp	sl, r1
			  ST7735_DrawImage(0,0, 162, 38+y, logo - 162*y);
 8001c78:	4623      	mov	r3, r4
		  if(y>0)
 8001c7a:	dc15      	bgt.n	8001ca8 <StartDefaultTask+0xcc>
			  ST7735_DrawImage(0,0, 162, 38+y, logo - 162*y);
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	f8cd b000 	str.w	fp, [sp]
 8001c82:	f7fe ff95 	bl	8000bb0 <ST7735_DrawImage>
			  if(y==-10)
 8001c86:	f11a 0f0a 	cmn.w	sl, #10
 8001c8a:	d1c9      	bne.n	8001c20 <StartDefaultTask+0x44>
				  ST7735_WriteString(0,40-18/2, "Palans --> SP", Font_11x18, WHITE, BLACK);
 8001c8c:	4984      	ldr	r1, [pc, #528]	; (8001ea0 <StartDefaultTask+0x2c4>)
 8001c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c92:	2000      	movs	r0, #0
 8001c94:	684b      	ldr	r3, [r1, #4]
 8001c96:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4a81      	ldr	r2, [pc, #516]	; (8001ea4 <StartDefaultTask+0x2c8>)
 8001c9e:	680b      	ldr	r3, [r1, #0]
 8001ca0:	211f      	movs	r1, #31
 8001ca2:	f7fe fed1 	bl	8000a48 <ST7735_WriteString>
 8001ca6:	e7bb      	b.n	8001c20 <StartDefaultTask+0x44>
			  ST7735_DrawImage(0,y, 162, 38, logo);
 8001ca8:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <StartDefaultTask+0x2bc>)
 8001caa:	4641      	mov	r1, r8
 8001cac:	2000      	movs	r0, #0
 8001cae:	461c      	mov	r4, r3
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2326      	movs	r3, #38	; 0x26
 8001cb4:	f7fe ff7c 	bl	8000bb0 <ST7735_DrawImage>
			  ST7735_DrawImage(0,82-y - 38, 162, 38, logo);
 8001cb8:	4631      	mov	r1, r6
 8001cba:	2326      	movs	r3, #38	; 0x26
 8001cbc:	22a2      	movs	r2, #162	; 0xa2
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	9400      	str	r4, [sp, #0]
 8001cc2:	f7fe ff75 	bl	8000bb0 <ST7735_DrawImage>
			  ST7735_DrawImage(0,82-y-39, 162, 1, logo + 162*37); //black line
 8001cc6:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <StartDefaultTask+0x2c0>)
 8001cc8:	1e71      	subs	r1, r6, #1
 8001cca:	2000      	movs	r0, #0
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	22a2      	movs	r2, #162	; 0xa2
 8001cd0:	b289      	uxth	r1, r1
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f7fe ff6c 	bl	8000bb0 <ST7735_DrawImage>
		  if(y==2)osDelay(500);
 8001cd8:	f1ba 0f02 	cmp.w	sl, #2
 8001cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce0:	d101      	bne.n	8001ce6 <StartDefaultTask+0x10a>
 8001ce2:	f005 fc5f 	bl	80075a4 <osDelay>
		  osDelay(20);
 8001ce6:	2014      	movs	r0, #20
 8001ce8:	f005 fc5c 	bl	80075a4 <osDelay>
 8001cec:	e7b0      	b.n	8001c50 <StartDefaultTask+0x74>
 8001cee:	4c6e      	ldr	r4, [pc, #440]	; (8001ea8 <StartDefaultTask+0x2cc>)
 8001cf0:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8001ed0 <StartDefaultTask+0x2f4>
 8001cf4:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8001ed4 <StartDefaultTask+0x2f8>
 8001cf8:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8001ed8 <StartDefaultTask+0x2fc>
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001cfc:	eddf 8a6b 	vldr	s17, [pc, #428]	; 8001eac <StartDefaultTask+0x2d0>
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001d00:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 8001eb0 <StartDefaultTask+0x2d4>
 8001d04:	4e6b      	ldr	r6, [pc, #428]	; (8001eb4 <StartDefaultTask+0x2d8>)
 8001d06:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8001edc <StartDefaultTask+0x300>
		    SystemCoreClockUpdate();
 8001d0a:	f001 f875 	bl	8002df8 <SystemCoreClockUpdate>
			scanKeyboard();
 8001d0e:	f000 fa09 	bl	8002124 <scanKeyboard>
			if(!b_demo)
 8001d12:	7823      	ldrb	r3, [r4, #0]
 8001d14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8087 	beq.w	8001e2c <StartDefaultTask+0x250>
			if(keyClicked('#'))
 8001d1e:	2023      	movs	r0, #35	; 0x23
 8001d20:	f000 f9ec 	bl	80020fc <keyClicked>
				screeninfo.page = (screeninfo.page+1)%2;
 8001d24:	f89b 3000 	ldrb.w	r3, [fp]
			if(keyClicked('#'))
 8001d28:	b120      	cbz	r0, 8001d34 <StartDefaultTask+0x158>
				screeninfo.page = (screeninfo.page+1)%2;
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	f88b 3000 	strb.w	r3, [fp]
			if(screeninfo.page==0)
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d069      	beq.n	8001e0c <StartDefaultTask+0x230>
			if(keyClicked('D'))
 8001d38:	2044      	movs	r0, #68	; 0x44
 8001d3a:	f000 f9df 	bl	80020fc <keyClicked>
 8001d3e:	b160      	cbz	r0, 8001d5a <StartDefaultTask+0x17e>
				b_demo = (b_demo+1)%2;
 8001d40:	7823      	ldrb	r3, [r4, #0]
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	7023      	strb	r3, [r4, #0]
				if(b_demo)
 8001d4a:	7823      	ldrb	r3, [r4, #0]
 8001d4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8092 	beq.w	8001e7a <StartDefaultTask+0x29e>
					startDemo();
 8001d56:	f7ff f887 	bl	8000e68 <startDemo>
			if(keyClicked('*'))
 8001d5a:	202a      	movs	r0, #42	; 0x2a
 8001d5c:	f000 f9ce 	bl	80020fc <keyClicked>
 8001d60:	b110      	cbz	r0, 8001d68 <StartDefaultTask+0x18c>
				b_startcalib=1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	4a54      	ldr	r2, [pc, #336]	; (8001eb8 <StartDefaultTask+0x2dc>)
 8001d66:	7013      	strb	r3, [r2, #0]
				screeninfo.counter[i] = counter[i];
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	f8cb 3004 	str.w	r3, [fp, #4]
				screeninfo.velocity[i] = velocity[i];
 8001d6e:	6833      	ldr	r3, [r6, #0]
 8001d70:	f8cb 3010 	str.w	r3, [fp, #16]
				screeninfo.counter[i] = counter[i];
 8001d74:	686b      	ldr	r3, [r5, #4]
 8001d76:	f8cb 3008 	str.w	r3, [fp, #8]
				screeninfo.velocity[i] = velocity[i];
 8001d7a:	6873      	ldr	r3, [r6, #4]
 8001d7c:	f8cb 3014 	str.w	r3, [fp, #20]
				screeninfo.counter[i] = counter[i];
 8001d80:	68ab      	ldr	r3, [r5, #8]
 8001d82:	f8cb 300c 	str.w	r3, [fp, #12]
				screeninfo.velocity[i] = velocity[i];
 8001d86:	68b3      	ldr	r3, [r6, #8]
 8001d88:	f8cb 3018 	str.w	r3, [fp, #24]
			screeninfo.header_char = hdr_received;
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <StartDefaultTask+0x2e0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	f88b 3021 	strb.w	r3, [fp, #33]	; 0x21
			screeninfo.freq_update = 20000/vFreqDiv;
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <StartDefaultTask+0x2e4>)
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001da0:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
			screeninfo.emagnet = emagnet;
 8001da4:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <StartDefaultTask+0x2e8>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
			screeninfo.limit_status = limit_status;
 8001dac:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <StartDefaultTask+0x2ec>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f88b 3020 	strb.w	r3, [fp, #32]
			screeninfo.pwm[0]=vPWMX;
 8001db4:	f8ba 3000 	ldrh.w	r3, [sl]
 8001db8:	f8ab 301c 	strh.w	r3, [fp, #28]
			screeninfo.pwm[1]=vPWMY;
 8001dbc:	f8b9 3000 	ldrh.w	r3, [r9]
			screeninfo.b_controlloop = isCalibratingMode(controller_calibration_mode);
 8001dc0:	f898 0000 	ldrb.w	r0, [r8]
			screeninfo.pwm[1]=vPWMY;
 8001dc4:	f8ab 301e 	strh.w	r3, [fp, #30]
			screeninfo.b_controlloop = isCalibratingMode(controller_calibration_mode);
 8001dc8:	f7ff f848 	bl	8000e5c <isCalibratingMode>
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001dcc:	eddb 7a01 	vldr	s15, [fp, #4]
			screeninfo.calibration_mode = controller_calibration_mode;// getCalibrationMode();
 8001dd0:	f898 3000 	ldrb.w	r3, [r8]
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001dd8:	eddb 7a02 	vldr	s15, [fp, #8]
			screeninfo.calibration_mode = controller_calibration_mode;// getCalibrationMode();
 8001ddc:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if(b_demo)
 8001de4:	7823      	ldrb	r3, [r4, #0]
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001de6:	ee27 7a28 	vmul.f32	s14, s14, s17
			screeninfo.b_controlloop = isCalibratingMode(controller_calibration_mode);
 8001dea:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001dee:	ee67 7a88 	vmul.f32	s15, s15, s16
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001df2:	ed8b 7a0b 	vstr	s14, [fp, #44]	; 0x2c
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001df6:	edcb 7a0c 	vstr	s15, [fp, #48]	; 0x30
			if(b_demo)
 8001dfa:	b11b      	cbz	r3, 8001e04 <StartDefaultTask+0x228>
				screeninfo.calibration_mode= getCalibrationMode();
 8001dfc:	f7ff f8fc 	bl	8000ff8 <getCalibrationMode>
 8001e00:	f88b 0029 	strb.w	r0, [fp, #41]	; 0x29
			updateScreen(&screeninfo);
 8001e04:	4658      	mov	r0, fp
 8001e06:	f000 fde3 	bl	80029d0 <updateScreen>
	  {
 8001e0a:	e77e      	b.n	8001d0a <StartDefaultTask+0x12e>
				if(keyClicked('A')){emagnet=100;}
 8001e0c:	2041      	movs	r0, #65	; 0x41
 8001e0e:	f000 f975 	bl	80020fc <keyClicked>
 8001e12:	b110      	cbz	r0, 8001e1a <StartDefaultTask+0x23e>
 8001e14:	2364      	movs	r3, #100	; 0x64
 8001e16:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <StartDefaultTask+0x2e8>)
 8001e18:	7013      	strb	r3, [r2, #0]
				if(keyClicked('B')){emagnet=0;}
 8001e1a:	2042      	movs	r0, #66	; 0x42
 8001e1c:	f000 f96e 	bl	80020fc <keyClicked>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d089      	beq.n	8001d38 <StartDefaultTask+0x15c>
 8001e24:	2300      	movs	r3, #0
 8001e26:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <StartDefaultTask+0x2e8>)
 8001e28:	7013      	strb	r3, [r2, #0]
 8001e2a:	e785      	b.n	8001d38 <StartDefaultTask+0x15c>
				if(keyPressed('6'))
 8001e2c:	2036      	movs	r0, #54	; 0x36
				vPWMX=0;
 8001e2e:	f8aa 2000 	strh.w	r2, [sl]
				vPWMY=0;
 8001e32:	f8a9 2000 	strh.w	r2, [r9]
				if(keyPressed('6'))
 8001e36:	f000 f96f 	bl	8002118 <keyPressed>
 8001e3a:	b118      	cbz	r0, 8001e44 <StartDefaultTask+0x268>
					vPWMX=12000;
 8001e3c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001e40:	f8aa 3000 	strh.w	r3, [sl]
				if(keyPressed('4'))
 8001e44:	2034      	movs	r0, #52	; 0x34
 8001e46:	f000 f967 	bl	8002118 <keyPressed>
 8001e4a:	b118      	cbz	r0, 8001e54 <StartDefaultTask+0x278>
					vPWMX=-12000;
 8001e4c:	f24d 1320 	movw	r3, #53536	; 0xd120
 8001e50:	f8aa 3000 	strh.w	r3, [sl]
				if(keyPressed('2'))
 8001e54:	2032      	movs	r0, #50	; 0x32
 8001e56:	f000 f95f 	bl	8002118 <keyPressed>
 8001e5a:	b118      	cbz	r0, 8001e64 <StartDefaultTask+0x288>
					vPWMY=5000;
 8001e5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e60:	f8a9 3000 	strh.w	r3, [r9]
				if(keyPressed('8'))
 8001e64:	2038      	movs	r0, #56	; 0x38
 8001e66:	f000 f957 	bl	8002118 <keyPressed>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	f43f af57 	beq.w	8001d1e <StartDefaultTask+0x142>
					vPWMY=-5000;
 8001e70:	f64e 4378 	movw	r3, #60536	; 0xec78
 8001e74:	f8a9 3000 	strh.w	r3, [r9]
 8001e78:	e751      	b.n	8001d1e <StartDefaultTask+0x142>
 8001e7a:	9205      	str	r2, [sp, #20]
					stopDemo();
 8001e7c:	f7fe fffa 	bl	8000e74 <stopDemo>
					vPWMX=0;
 8001e80:	9a05      	ldr	r2, [sp, #20]
 8001e82:	f8aa 2000 	strh.w	r2, [sl]
					vPWMY=0;
 8001e86:	f8a9 2000 	strh.w	r2, [r9]
 8001e8a:	e766      	b.n	8001d5a <StartDefaultTask+0x17e>
 8001e8c:	24003310 	.word	0x24003310
 8001e90:	0800a9bc 	.word	0x0800a9bc
 8001e94:	58021000 	.word	0x58021000
 8001e98:	240000ac 	.word	0x240000ac
 8001e9c:	24002f80 	.word	0x24002f80
 8001ea0:	2400000c 	.word	0x2400000c
 8001ea4:	0800a9cc 	.word	0x0800a9cc
 8001ea8:	24003300 	.word	0x24003300
 8001eac:	3727c5ac 	.word	0x3727c5ac
 8001eb0:	3627c5ac 	.word	0x3627c5ac
 8001eb4:	24003304 	.word	0x24003304
 8001eb8:	240032f8 	.word	0x240032f8
 8001ebc:	240032fe 	.word	0x240032fe
 8001ec0:	24000014 	.word	0x24000014
 8001ec4:	24003301 	.word	0x24003301
 8001ec8:	2400331c 	.word	0x2400331c
 8001ecc:	23fffe24 	.word	0x23fffe24
 8001ed0:	240032fc 	.word	0x240032fc
 8001ed4:	240032fa 	.word	0x240032fa
 8001ed8:	24003328 	.word	0x24003328
 8001edc:	240032ff 	.word	0x240032ff

08001ee0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001ee0:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <MX_FREERTOS_Init+0x18>)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_FREERTOS_Init+0x1c>)
 8001ee8:	f005 fafa 	bl	80074e0 <osThreadNew>
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <MX_FREERTOS_Init+0x20>)
 8001eee:	6018      	str	r0, [r3, #0]
}
 8001ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	alt_main();
 8001ef4:	f7fe bf9e 	b.w	8000e34 <alt_main>
 8001ef8:	0800b7e0 	.word	0x0800b7e0
 8001efc:	08001bdd 	.word	0x08001bdd
 8001f00:	24003324 	.word	0x24003324

08001f04 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f08:	4b77      	ldr	r3, [pc, #476]	; (80020e8 <MX_GPIO_Init+0x1e4>)
{
 8001f0a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001f0e:	4f77      	ldr	r7, [pc, #476]	; (80020ec <MX_GPIO_Init+0x1e8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSS_Pin|KB_COL0_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001f10:	4d77      	ldr	r5, [pc, #476]	; (80020f0 <MX_GPIO_Init+0x1ec>)
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001f12:	f242 0108 	movw	r1, #8200	; 0x2008
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f16:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001f18:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_LED_Pin|LCD_CSS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSSF1_GPIO_Port, CSSF1_Pin, GPIO_PIN_SET);
 8001f1a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80020f8 <MX_GPIO_Init+0x1f4>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSSF0_GPIO_Port, CSSF0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_LED_Pin|LCD_CSS_Pin|LCD_WR_RS_Pin;
 8001f1e:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_WritePin(CSSF0_GPIO_Port, CSSF0_Pin, GPIO_PIN_SET);
 8001f22:	4e74      	ldr	r6, [pc, #464]	; (80020f4 <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pin = LED_Pin|LCD_LED_Pin|LCD_CSS_Pin|LCD_WR_RS_Pin;
 8001f24:	f04f 0900 	mov.w	r9, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f28:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001f30:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f38:	f042 0210 	orr.w	r2, r2, #16
 8001f3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001f40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f44:	f002 0210 	and.w	r2, r2, #16
 8001f48:	9200      	str	r2, [sp, #0]
 8001f4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f50:	f042 0204 	orr.w	r2, r2, #4
 8001f54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001f58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f5c:	f002 0204 	and.w	r2, r2, #4
 8001f60:	9201      	str	r2, [sp, #4]
 8001f62:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001f70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f74:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001f78:	9202      	str	r2, [sp, #8]
 8001f7a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001f88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f8c:	f002 0201 	and.w	r2, r2, #1
 8001f90:	9203      	str	r2, [sp, #12]
 8001f92:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f98:	f042 0208 	orr.w	r2, r2, #8
 8001f9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001fa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001fa4:	f002 0208 	and.w	r2, r2, #8
 8001fa8:	9204      	str	r2, [sp, #16]
 8001faa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001fb0:	f042 0202 	orr.w	r2, r2, #2
 8001fb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001fb8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	9305      	str	r3, [sp, #20]
 8001fc4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001fc6:	f001 fcbd 	bl	8003944 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CSS_Pin|KB_COL0_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001fca:	4622      	mov	r2, r4
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f240 31c2 	movw	r1, #962	; 0x3c2
 8001fd2:	f001 fcb7 	bl	8003944 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LCD_LED_Pin|LCD_CSS_Pin, GPIO_PIN_SET);
 8001fd6:	4638      	mov	r0, r7
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001fde:	f001 fcb1 	bl	8003944 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CSSF1_GPIO_Port, CSSF1_Pin, GPIO_PIN_SET);
 8001fe2:	4650      	mov	r0, sl
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2140      	movs	r1, #64	; 0x40
 8001fe8:	f001 fcac 	bl	8003944 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CSSF0_GPIO_Port, CSSF0_Pin, GPIO_PIN_SET);
 8001fec:	4630      	mov	r0, r6
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2140      	movs	r1, #64	; 0x40
 8001ff2:	f001 fca7 	bl	8003944 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin|LCD_LED_Pin|LCD_CSS_Pin|LCD_WR_RS_Pin;
 8001ff6:	f642 4208 	movw	r2, #11272	; 0x2c08
 8001ffa:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	a906      	add	r1, sp, #24

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
  GPIO_InitStruct.Pin = LED_Pin|LCD_LED_Pin|LCD_CSS_Pin|LCD_WR_RS_Pin;
 8002004:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002008:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200c:	f001 fb5a 	bl	80036c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = K1_Pin;
 8002010:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002014:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(K1_GPIO_Port, &GPIO_InitStruct);
 8002018:	a906      	add	r1, sp, #24
 800201a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800201c:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pin = K1_Pin;
 8002020:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(K1_GPIO_Port, &GPIO_InitStruct);
 8002024:	f001 fb4e 	bl	80036c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CSS_Pin;
 8002028:	2202      	movs	r2, #2
 800202a:	2301      	movs	r3, #1
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 800202c:	a906      	add	r1, sp, #24
 800202e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CSS_Pin;
 8002030:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002034:	2201      	movs	r2, #1
 8002036:	2302      	movs	r3, #2
 8002038:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 800203c:	f001 fb42 	bl	80036c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002040:	2210      	movs	r2, #16
 8002042:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	a906      	add	r1, sp, #24
 8002046:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800204a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f001 fb39 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = KB_COL0_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002052:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8002056:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	4628      	mov	r0, r5
 800205a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = KB_COL0_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800205c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002060:	2200      	movs	r2, #0
 8002062:	2301      	movs	r3, #1
 8002064:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002068:	f001 fb2c 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = KB_ROW0_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800206c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002070:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	4638      	mov	r0, r7
 8002074:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002076:	f8cd b020 	str.w	fp, [sp, #32]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSSF1_Pin;
 800207a:	f04f 0b01 	mov.w	fp, #1
  GPIO_InitStruct.Pin = KB_ROW0_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800207e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f001 fb1f 	bl	80036c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CSSF1_GPIO_Port, &GPIO_InitStruct);
 8002086:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = CSSF1_Pin;
 8002088:	f04f 0a40 	mov.w	sl, #64	; 0x40
  HAL_GPIO_Init(CSSF1_GPIO_Port, &GPIO_InitStruct);
 800208c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CSSF1_Pin;
 800208e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002092:	e9cd ab06 	strd	sl, fp, [sp, #24]
  HAL_GPIO_Init(CSSF1_GPIO_Port, &GPIO_InitStruct);
 8002096:	f001 fb15 	bl	80036c4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSSF0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CSSF0_GPIO_Port, &GPIO_InitStruct);
 800209a:	a906      	add	r1, sp, #24
 800209c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = CSSF0_Pin;
 800209e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80020a2:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(CSSF0_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f001 fb0d 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPULSE_Pin;
 80020aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020ae:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SPULSE_GPIO_Port, &GPIO_InitStruct);
 80020b2:	a906      	add	r1, sp, #24
 80020b4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = SPULSE_Pin;
 80020b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(SPULSE_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f001 fb02 	bl	80036c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80020c0:	4622      	mov	r2, r4
 80020c2:	2105      	movs	r1, #5
 80020c4:	2017      	movs	r0, #23
 80020c6:	f001 f9e7 	bl	8003498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020ca:	2017      	movs	r0, #23
 80020cc:	f001 fa22 	bl	8003514 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80020d0:	4622      	mov	r2, r4
 80020d2:	2105      	movs	r1, #5
 80020d4:	2028      	movs	r0, #40	; 0x28
 80020d6:	f001 f9df 	bl	8003498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020da:	2028      	movs	r0, #40	; 0x28
 80020dc:	f001 fa1a 	bl	8003514 <HAL_NVIC_EnableIRQ>

}
 80020e0:	b00d      	add	sp, #52	; 0x34
 80020e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e6:	bf00      	nop
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58021000 	.word	0x58021000
 80020f0:	58020800 	.word	0x58020800
 80020f4:	58020400 	.word	0x58020400
 80020f8:	58020c00 	.word	0x58020c00

080020fc <keyClicked>:
uint8_t last_keystatetable[256];


uint8_t keyClicked(char c)
{
	return keystatetable[ (uint8_t)c] && !last_keystatetable[ (uint8_t)c];
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <keyClicked+0x14>)
{
 80020fe:	4603      	mov	r3, r0
	return keystatetable[ (uint8_t)c] && !last_keystatetable[ (uint8_t)c];
 8002100:	5c10      	ldrb	r0, [r2, r0]
 8002102:	b120      	cbz	r0, 800210e <keyClicked+0x12>
 8002104:	4a03      	ldr	r2, [pc, #12]	; (8002114 <keyClicked+0x18>)
 8002106:	5cd0      	ldrb	r0, [r2, r3]
 8002108:	fab0 f080 	clz	r0, r0
 800210c:	0940      	lsrs	r0, r0, #5
}
 800210e:	4770      	bx	lr
 8002110:	24003360 	.word	0x24003360
 8002114:	24003460 	.word	0x24003460

08002118 <keyPressed>:
	return !keystatetable[ (uint8_t)c] && last_keystatetable[ (uint8_t)c];
}

uint8_t keyPressed(char c)
{
	return keystatetable[ (uint8_t)c];
 8002118:	4b01      	ldr	r3, [pc, #4]	; (8002120 <keyPressed+0x8>)
}
 800211a:	5c18      	ldrb	r0, [r3, r0]
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	24003360 	.word	0x24003360

08002124 <scanKeyboard>:


char scanKeyboard()
{
 8002124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002128:	4e24      	ldr	r6, [pc, #144]	; (80021bc <scanKeyboard+0x98>)
 800212a:	2500      	movs	r5, #0
 800212c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80021d0 <scanKeyboard+0xac>
 8002130:	4c23      	ldr	r4, [pc, #140]	; (80021c0 <scanKeyboard+0x9c>)
	for(uint8_t x=0;x<4;++x)
	{
		HAL_GPIO_WritePin(KB_COL0_GPIO_Port, KB_COL0_Pin | (KB_COL0_Pin<<1) | (KB_COL0_Pin<<2) | (KB_COL0_Pin<<3) , GPIO_PIN_RESET);
 8002132:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80021d4 <scanKeyboard+0xb0>
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800213c:	4650      	mov	r0, sl
 800213e:	f001 fc01 	bl	8003944 <HAL_GPIO_WritePin>

		//Output 1 on the x column.
		for(uint8_t i=0;i<4;++i)
		{
			uint16_t pin_column = KB_COL0_Pin<<x;
 8002142:	2140      	movs	r1, #64	; 0x40
 8002144:	b2ea      	uxtb	r2, r5
 8002146:	40a9      	lsls	r1, r5
 8002148:	b289      	uxth	r1, r1
			if(i==x)HAL_GPIO_WritePin(KB_COL0_GPIO_Port, pin_column, GPIO_PIN_SET);
 800214a:	b38d      	cbz	r5, 80021b0 <scanKeyboard+0x8c>
 800214c:	2a01      	cmp	r2, #1
 800214e:	d030      	beq.n	80021b2 <scanKeyboard+0x8e>
 8002150:	2a02      	cmp	r2, #2
 8002152:	d02d      	beq.n	80021b0 <scanKeyboard+0x8c>
 8002154:	2d03      	cmp	r5, #3
 8002156:	d02b      	beq.n	80021b0 <scanKeyboard+0x8c>

		}
		for(uint32_t i=0;i<10;i++)dummy_kbd+=i;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <scanKeyboard+0xa0>)
 800215a:	f04f 0b00 	mov.w	fp, #0

		for(uint8_t y=0;y<4;++y)
		{
			//Read x,y key
			GPIO_PinState pstate = HAL_GPIO_ReadPin(KB_ROW0_GPIO_Port, KB_ROW0_Pin<<y);
 800215e:	f44f 7880 	mov.w	r8, #256	; 0x100
 8002162:	4f19      	ldr	r7, [pc, #100]	; (80021c8 <scanKeyboard+0xa4>)
		for(uint32_t i=0;i<10;i++)dummy_kbd+=i;
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	322d      	adds	r2, #45	; 0x2d
 8002168:	601a      	str	r2, [r3, #0]
			GPIO_PinState pstate = HAL_GPIO_ReadPin(KB_ROW0_GPIO_Port, KB_ROW0_Pin<<y);
 800216a:	fa08 f10b 	lsl.w	r1, r8, fp
 800216e:	4638      	mov	r0, r7
 8002170:	b289      	uxth	r1, r1
 8002172:	f001 fbe1 	bl	8003938 <HAL_GPIO_ReadPin>

			char c = keytable[x+y*4];
			last_keystatetable[c] = keystatetable[c];
 8002176:	f816 102b 	ldrb.w	r1, [r6, fp, lsl #2]
		for(uint8_t y=0;y<4;++y)
 800217a:	f10b 0b01 	add.w	fp, fp, #1
			last_keystatetable[c] = keystatetable[c];
 800217e:	5c62      	ldrb	r2, [r4, r1]
			keystatetable[ c ]= (uint8_t)pstate;
 8002180:	5460      	strb	r0, [r4, r1]
			last_keystatetable[c] = keystatetable[c];
 8002182:	f809 2001 	strb.w	r2, [r9, r1]

			if(pstate)printf("%c\n", c);
 8002186:	b978      	cbnz	r0, 80021a8 <scanKeyboard+0x84>
		for(uint8_t y=0;y<4;++y)
 8002188:	f1bb 0f04 	cmp.w	fp, #4
 800218c:	d1ed      	bne.n	800216a <scanKeyboard+0x46>
	for(uint8_t x=0;x<4;++x)
 800218e:	3501      	adds	r5, #1
		}

		HAL_GPIO_WritePin(KB_COL0_GPIO_Port, KB_COL0_Pin | (KB_COL0_Pin<<1) | (KB_COL0_Pin<<2) | (KB_COL0_Pin<<3) , GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002196:	4650      	mov	r0, sl
 8002198:	f001 fbd4 	bl	8003944 <HAL_GPIO_WritePin>
	for(uint8_t x=0;x<4;++x)
 800219c:	2d04      	cmp	r5, #4
 800219e:	f106 0601 	add.w	r6, r6, #1
 80021a2:	d1c8      	bne.n	8002136 <scanKeyboard+0x12>

	}
}
 80021a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(pstate)printf("%c\n", c);
 80021a8:	4808      	ldr	r0, [pc, #32]	; (80021cc <scanKeyboard+0xa8>)
 80021aa:	f007 fca9 	bl	8009b00 <iprintf>
 80021ae:	e7eb      	b.n	8002188 <scanKeyboard+0x64>
			if(i==x)HAL_GPIO_WritePin(KB_COL0_GPIO_Port, pin_column, GPIO_PIN_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	4650      	mov	r0, sl
 80021b4:	f001 fbc6 	bl	8003944 <HAL_GPIO_WritePin>
 80021b8:	e7ce      	b.n	8002158 <scanKeyboard+0x34>
 80021ba:	bf00      	nop
 80021bc:	24000098 	.word	0x24000098
 80021c0:	24003360 	.word	0x24003360
 80021c4:	2400335c 	.word	0x2400335c
 80021c8:	58020000 	.word	0x58020000
 80021cc:	0800b804 	.word	0x0800b804
 80021d0:	24003460 	.word	0x24003460
 80021d4:	58020800 	.word	0x58020800

080021d8 <_write>:
#undef FLASH_LATENCY_0
#define FLASH_LATENCY_0 FLASH_LATENCY_4 //HACK IT!
//Redirect printf to uart
int _write(int file, char *data, int len)
{
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80021d8:	3801      	subs	r0, #1
 80021da:	2801      	cmp	r0, #1
{
 80021dc:	b510      	push	{r4, lr}
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80021de:	d80b      	bhi.n	80021f8 <_write+0x20>
 80021e0:	4614      	mov	r4, r2
      return -1;
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
   HAL_UART_Transmit(&huart4, (uint8_t*)data, len, 1000);
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	b292      	uxth	r2, r2
 80021e8:	4807      	ldr	r0, [pc, #28]	; (8002208 <_write+0x30>)
 80021ea:	f004 fa0d 	bl	8006608 <HAL_UART_Transmit>

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80021ee:	2800      	cmp	r0, #0
 80021f0:	bf0c      	ite	eq
 80021f2:	4620      	moveq	r0, r4
 80021f4:	2000      	movne	r0, #0
}
 80021f6:	bd10      	pop	{r4, pc}
      errno = EBADF;
 80021f8:	f007 fa3e 	bl	8009678 <__errno>
 80021fc:	2209      	movs	r2, #9
 80021fe:	4603      	mov	r3, r0
      return -1;
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
      errno = EBADF;
 8002204:	601a      	str	r2, [r3, #0]
}
 8002206:	bd10      	pop	{r4, pc}
 8002208:	24003700 	.word	0x24003700

0800220c <_read>:

//Redirect printf to uart
int _read(int file, char *data, int len)
{
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800220c:	3801      	subs	r0, #1
 800220e:	2801      	cmp	r0, #1
{
 8002210:	b510      	push	{r4, lr}
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8002212:	d80b      	bhi.n	800222c <_read+0x20>
 8002214:	4614      	mov	r4, r2
      return -1;
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
   HAL_UART_Receive(&huart4, (uint8_t*)data, len, 1000);
 8002216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221a:	b292      	uxth	r2, r2
 800221c:	4807      	ldr	r0, [pc, #28]	; (800223c <_read+0x30>)
 800221e:	f004 fb31 	bl	8006884 <HAL_UART_Receive>

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8002222:	2800      	cmp	r0, #0
 8002224:	bf0c      	ite	eq
 8002226:	4620      	moveq	r0, r4
 8002228:	2000      	movne	r0, #0
}
 800222a:	bd10      	pop	{r4, pc}
      errno = EBADF;
 800222c:	f007 fa24 	bl	8009678 <__errno>
 8002230:	2209      	movs	r2, #9
 8002232:	4603      	mov	r3, r0
      return -1;
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
      errno = EBADF;
 8002238:	601a      	str	r2, [r3, #0]
}
 800223a:	bd10      	pop	{r4, pc}
 800223c:	24003700 	.word	0x24003700

08002240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002240:	b500      	push	{lr}
 8002242:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002244:	224c      	movs	r2, #76	; 0x4c
 8002246:	2100      	movs	r1, #0
 8002248:	a808      	add	r0, sp, #32
 800224a:	f007 fb71 	bl	8009930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224e:	2220      	movs	r2, #32
 8002250:	2100      	movs	r1, #0
 8002252:	4668      	mov	r0, sp
 8002254:	f007 fb6c 	bl	8009930 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002258:	2002      	movs	r0, #2
 800225a:	f001 fb85 	bl	8003968 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800225e:	4a26      	ldr	r2, [pc, #152]	; (80022f8 <SystemClock_Config+0xb8>)
 8002260:	6993      	ldr	r3, [r2, #24]
 8002262:	049b      	lsls	r3, r3, #18
 8002264:	d5fc      	bpl.n	8002260 <SystemClock_Config+0x20>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002266:	4a25      	ldr	r2, [pc, #148]	; (80022fc <SystemClock_Config+0xbc>)
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002268:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800226a:	a808      	add	r0, sp, #32
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800226c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800226e:	f023 0303 	bic.w	r3, r3, #3
 8002272:	f043 0302 	orr.w	r3, r3, #2
 8002276:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002278:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 5;
 800227a:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800227c:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800227e:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002280:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002282:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002284:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002286:	921a      	str	r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002288:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80022e0 <SystemClock_Config+0xa0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800228c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002290:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002294:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002298:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229c:	f001 fc0c 	bl	8003ab8 <HAL_RCC_OscConfig>
 80022a0:	b108      	cbz	r0, 80022a6 <SystemClock_Config+0x66>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a2:	b672      	cpsid	i
 80022a4:	e7fe      	b.n	80022a4 <SystemClock_Config+0x64>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80022e8 <SystemClock_Config+0xa8>
 80022aa:	2200      	movs	r2, #0
 80022ac:	2308      	movs	r3, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022ae:	4668      	mov	r0, sp
 80022b0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b2:	ed8d 7b00 	vstr	d7, [sp]
 80022b6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80022f0 <SystemClock_Config+0xb0>
 80022ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c2:	2340      	movs	r3, #64	; 0x40
 80022c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80022c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022cc:	f001 ff88 	bl	80041e0 <HAL_RCC_ClockConfig>
 80022d0:	b108      	cbz	r0, 80022d6 <SystemClock_Config+0x96>
 80022d2:	b672      	cpsid	i
 80022d4:	e7fe      	b.n	80022d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
  }
}
 80022d6:	b01d      	add	sp, #116	; 0x74
 80022d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80022dc:	f3af 8000 	nop.w
 80022e0:	00000001 	.word	0x00000001
 80022e4:	00010000 	.word	0x00010000
 80022e8:	0000003f 	.word	0x0000003f
 80022ec:	00000003 	.word	0x00000003
 80022f0:	00000040 	.word	0x00000040
 80022f4:	00000040 	.word	0x00000040
 80022f8:	58024800 	.word	0x58024800
 80022fc:	58024400 	.word	0x58024400

08002300 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002300:	b500      	push	{lr}
 8002302:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002304:	22a0      	movs	r2, #160	; 0xa0
 8002306:	2100      	movs	r1, #0
 8002308:	a808      	add	r0, sp, #32
 800230a:	f007 fb11 	bl	8009930 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_UART4;
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800230e:	2105      	movs	r1, #5
  PeriphClkInitStruct.PLL2.PLL2N = 40;
 8002310:	2228      	movs	r2, #40	; 0x28
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002312:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8002314:	9102      	str	r1, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002316:	2180      	movs	r1, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2N = 40;
 8002318:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 800231a:	2201      	movs	r2, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231c:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800231e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002320:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8002322:	921e      	str	r2, [sp, #120]	; 0x78
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI4
 8002324:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8002348 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002328:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI4
 800232c:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8002330:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002350 <PeriphCommonClock_Config+0x50>
 8002334:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002338:	f002 fa6a 	bl	8004810 <HAL_RCCEx_PeriphCLKConfig>
 800233c:	b108      	cbz	r0, 8002342 <PeriphCommonClock_Config+0x42>
 800233e:	b672      	cpsid	i
 8002340:	e7fe      	b.n	8002340 <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
  }
}
 8002342:	b031      	add	sp, #196	; 0xc4
 8002344:	f85d fb04 	ldr.w	pc, [sp], #4
 8002348:	00003002 	.word	0x00003002
 800234c:	00000000 	.word	0x00000000
 8002350:	00001000 	.word	0x00001000
 8002354:	00010000 	.word	0x00010000

08002358 <main>:
{
 8002358:	b500      	push	{lr}
 800235a:	b085      	sub	sp, #20
  HAL_Init();
 800235c:	f001 f830 	bl	80033c0 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002360:	2002      	movs	r0, #2
 8002362:	f001 fb01 	bl	8003968 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <main+0xb4>)
 8002368:	2100      	movs	r1, #0
 800236a:	4a29      	ldr	r2, [pc, #164]	; (8002410 <main+0xb8>)
 800236c:	9101      	str	r1, [sp, #4]
 800236e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002370:	f021 0101 	bic.w	r1, r1, #1
 8002374:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	6993      	ldr	r3, [r2, #24]
 8002380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002384:	6193      	str	r3, [r2, #24]
 8002386:	6993      	ldr	r3, [r2, #24]
 8002388:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002390:	6993      	ldr	r3, [r2, #24]
 8002392:	0499      	lsls	r1, r3, #18
 8002394:	d5fc      	bpl.n	8002390 <main+0x38>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	491f      	ldr	r1, [pc, #124]	; (8002414 <main+0xbc>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002398:	2400      	movs	r4, #0
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <main+0xb4>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239c:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
 80023a0:	f040 0002 	orr.w	r0, r0, #2
 80023a4:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
 80023a8:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
 80023ac:	f001 0102 	and.w	r1, r1, #2
 80023b0:	9102      	str	r1, [sp, #8]
 80023b2:	9802      	ldr	r0, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80023b4:	9403      	str	r4, [sp, #12]
 80023b6:	6990      	ldr	r0, [r2, #24]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023b8:	4915      	ldr	r1, [pc, #84]	; (8002410 <main+0xb8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80023ba:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80023be:	6190      	str	r0, [r2, #24]
 80023c0:	6992      	ldr	r2, [r2, #24]
 80023c2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80023c6:	9203      	str	r2, [sp, #12]
 80023c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	9303      	str	r3, [sp, #12]
 80023d8:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023da:	698b      	ldr	r3, [r1, #24]
 80023dc:	049b      	lsls	r3, r3, #18
 80023de:	d5fc      	bpl.n	80023da <main+0x82>
  SystemClock_Config();
 80023e0:	f7ff ff2e 	bl	8002240 <SystemClock_Config>
  PeriphCommonClock_Config();
 80023e4:	f7ff ff8c 	bl	8002300 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80023e8:	f7ff fd8c 	bl	8001f04 <MX_GPIO_Init>
  MX_SPI4_Init();
 80023ec:	f000 fb30 	bl	8002a50 <MX_SPI4_Init>
  MX_SPI1_Init();
 80023f0:	f000 fb00 	bl	80029f4 <MX_SPI1_Init>
  MX_UART4_Init();
 80023f4:	f000 fdb6 	bl	8002f64 <MX_UART4_Init>
  printf( "Hello World\n\r") ;
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <main+0xc0>)
 80023fa:	f007 fb81 	bl	8009b00 <iprintf>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80023fe:	f005 f843 	bl	8007488 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002402:	f7ff fd6d 	bl	8001ee0 <MX_FREERTOS_Init>
  osKernelStart();
 8002406:	f005 f851 	bl	80074ac <osKernelStart>
 800240a:	e7fe      	b.n	800240a <main+0xb2>
 800240c:	58000400 	.word	0x58000400
 8002410:	58024800 	.word	0x58024800
 8002414:	58024400 	.word	0x58024400
 8002418:	0800b808 	.word	0x0800b808

0800241c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800241e:	6802      	ldr	r2, [r0, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d000      	beq.n	8002426 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002424:	4770      	bx	lr
    HAL_IncTick();
 8002426:	f000 bffb 	b.w	8003420 <HAL_IncTick>
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000

08002430 <Error_Handler>:
 8002430:	b672      	cpsid	i
 8002432:	e7fe      	b.n	8002432 <Error_Handler+0x2>

08002434 <writeScrLine>:


char buffer[64];

void writeScrLine(char* beginning, uint16_t pos_y, int32_t num)
{
 8002434:	b530      	push	{r4, r5, lr}
	char bline[14]="              ";
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <writeScrLine+0x78>)
{
 8002438:	b089      	sub	sp, #36	; 0x24
 800243a:	4696      	mov	lr, r2
 800243c:	4605      	mov	r5, r0
	char bline[14]="              ";
 800243e:	f10d 0c10 	add.w	ip, sp, #16
{
 8002442:	460c      	mov	r4, r1
	char bline[14]="              ";
 8002444:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002446:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}

	itoa(num, buffer, 10);
 800244a:	4670      	mov	r0, lr
 800244c:	220a      	movs	r2, #10
 800244e:	4918      	ldr	r1, [pc, #96]	; (80024b0 <writeScrLine+0x7c>)
	char bline[14]="              ";
 8002450:	f8ac 3000 	strh.w	r3, [ip]
	itoa(num, buffer, 10);
 8002454:	f007 fa48 	bl	80098e8 <itoa>

	memcpy(bline, beginning, strlen(beginning)-1);
 8002458:	4628      	mov	r0, r5
 800245a:	f7fd ff41 	bl	80002e0 <strlen>
 800245e:	4629      	mov	r1, r5
 8002460:	1e42      	subs	r2, r0, #1
 8002462:	a804      	add	r0, sp, #16
 8002464:	f007 fa56 	bl	8009914 <memcpy>

	int len_itoa=strlen(buffer);
 8002468:	4811      	ldr	r0, [pc, #68]	; (80024b0 <writeScrLine+0x7c>)
 800246a:	f7fd ff39 	bl	80002e0 <strlen>

	if(len_itoa<14)strcpy(bline+14-len_itoa, buffer);
 800246e:	280d      	cmp	r0, #13
 8002470:	d912      	bls.n	8002498 <writeScrLine+0x64>

	ST7735_WriteString(0,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002472:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8002476:	2000      	movs	r0, #0
 8002478:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <writeScrLine+0x80>)
 800247e:	0049      	lsls	r1, r1, #1
 8002480:	9002      	str	r0, [sp, #8]
 8002482:	9401      	str	r4, [sp, #4]
 8002484:	aa04      	add	r2, sp, #16
 8002486:	3101      	adds	r1, #1
 8002488:	e9d3 3400 	ldrd	r3, r4, [r3]
 800248c:	b289      	uxth	r1, r1
 800248e:	9400      	str	r4, [sp, #0]
 8002490:	f7fe fada 	bl	8000a48 <ST7735_WriteString>
}
 8002494:	b009      	add	sp, #36	; 0x24
 8002496:	bd30      	pop	{r4, r5, pc}
	if(len_itoa<14)strcpy(bline+14-len_itoa, buffer);
 8002498:	a904      	add	r1, sp, #16
 800249a:	f1c0 030e 	rsb	r3, r0, #14
 800249e:	1c42      	adds	r2, r0, #1
 80024a0:	18c8      	adds	r0, r1, r3
 80024a2:	4903      	ldr	r1, [pc, #12]	; (80024b0 <writeScrLine+0x7c>)
 80024a4:	f007 fa36 	bl	8009914 <memcpy>
 80024a8:	e7e3      	b.n	8002472 <writeScrLine+0x3e>
 80024aa:	bf00      	nop
 80024ac:	0800b818 	.word	0x0800b818
 80024b0:	24003560 	.word	0x24003560
 80024b4:	2400000c 	.word	0x2400000c

080024b8 <drawPage0>:


void drawPage0(ScreenInfo* pscrinfo)
{
 80024b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024bc:	4605      	mov	r5, r0
 80024be:	b088      	sub	sp, #32

	writeScrLine("x:", 0, pscrinfo->counter[0]);
 80024c0:	2100      	movs	r1, #0
 80024c2:	4888      	ldr	r0, [pc, #544]	; (80026e4 <drawPage0+0x22c>)
 80024c4:	686a      	ldr	r2, [r5, #4]
 80024c6:	f7ff ffb5 	bl	8002434 <writeScrLine>
	writeScrLine("y:", 1, pscrinfo->counter[1]);
	writeScrLine("t:", 2, pscrinfo->counter[2]);

	uint8_t limit_status = pscrinfo->limit_status;

 	ST7735_WriteString(0,1 +18*3, "x ", Font_11x18, WHITE, BLACK);
 80024ca:	4c87      	ldr	r4, [pc, #540]	; (80026e8 <drawPage0+0x230>)
	writeScrLine("y:", 1, pscrinfo->counter[1]);
 80024cc:	68aa      	ldr	r2, [r5, #8]
 80024ce:	2101      	movs	r1, #1
 80024d0:	4886      	ldr	r0, [pc, #536]	; (80026ec <drawPage0+0x234>)
 80024d2:	f7ff ffaf 	bl	8002434 <writeScrLine>
	writeScrLine("t:", 2, pscrinfo->counter[2]);
 80024d6:	68ea      	ldr	r2, [r5, #12]
 80024d8:	2102      	movs	r1, #2
 80024da:	4885      	ldr	r0, [pc, #532]	; (80026f0 <drawPage0+0x238>)
 80024dc:	f7ff ffaa 	bl	8002434 <writeScrLine>
 	ST7735_WriteString(0,1 +18*3, "x ", Font_11x18, WHITE, BLACK);
 80024e0:	6862      	ldr	r2, [r4, #4]
 80024e2:	2000      	movs	r0, #0
 80024e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e8:	9200      	str	r2, [sp, #0]
 80024ea:	2137      	movs	r1, #55	; 0x37
 80024ec:	4a81      	ldr	r2, [pc, #516]	; (80026f4 <drawPage0+0x23c>)
	strcpy(buffer,"  ");
 80024ee:	4e82      	ldr	r6, [pc, #520]	; (80026f8 <drawPage0+0x240>)
 	ST7735_WriteString(0,1 +18*3, "x ", Font_11x18, WHITE, BLACK);
 80024f0:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80024f4:	6823      	ldr	r3, [r4, #0]
	uint8_t limit_status = pscrinfo->limit_status;
 80024f6:	f895 7020 	ldrb.w	r7, [r5, #32]
 	ST7735_WriteString(0,1 +18*3, "x ", Font_11x18, WHITE, BLACK);
 80024fa:	f7fe faa5 	bl	8000a48 <ST7735_WriteString>
	strcpy(buffer,"  ");
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <drawPage0+0x244>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	8033      	strh	r3, [r6, #0]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	70b3      	strb	r3, [r6, #2]
	if(limit_status& (LIMIT_MAXLEFT | LIMIT_MAXRIGHT)) buffer[0]='E';
 8002508:	07bb      	lsls	r3, r7, #30
 800250a:	d001      	beq.n	8002510 <drawPage0+0x58>
 800250c:	2345      	movs	r3, #69	; 0x45
 800250e:	7033      	strb	r3, [r6, #0]
	if(limit_status&LIMIT_LEFT)  buffer[1]='L';
 8002510:	06f8      	lsls	r0, r7, #27
 8002512:	d501      	bpl.n	8002518 <drawPage0+0x60>
 8002514:	234c      	movs	r3, #76	; 0x4c
 8002516:	7073      	strb	r3, [r6, #1]
	if(limit_status&LIMIT_RIGHT) buffer[1]='R';
 8002518:	06b9      	lsls	r1, r7, #26
 800251a:	d501      	bpl.n	8002520 <drawPage0+0x68>
 800251c:	2352      	movs	r3, #82	; 0x52
 800251e:	7073      	strb	r3, [r6, #1]
	if(limit_status&LIMIT_CENTER) buffer[1]='C';
 8002520:	067a      	lsls	r2, r7, #25
 8002522:	d501      	bpl.n	8002528 <drawPage0+0x70>
 8002524:	2343      	movs	r3, #67	; 0x43
 8002526:	7073      	strb	r3, [r6, #1]
	ST7735_WriteString(11,1 +18*3, buffer, Font_11x18, BLUE, BLACK);
 8002528:	6863      	ldr	r3, [r4, #4]
 800252a:	f04f 0800 	mov.w	r8, #0
 800252e:	4a72      	ldr	r2, [pc, #456]	; (80026f8 <drawPage0+0x240>)
 8002530:	2137      	movs	r1, #55	; 0x37
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	231f      	movs	r3, #31
 8002536:	200b      	movs	r0, #11
 8002538:	f8cd 8008 	str.w	r8, [sp, #8]
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	f7fe fa82 	bl	8000a48 <ST7735_WriteString>

	ST7735_WriteString(11*3,1 +18*3, " y ", Font_11x18, WHITE, BLACK);
 8002544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002548:	4a6d      	ldr	r2, [pc, #436]	; (8002700 <drawPage0+0x248>)
 800254a:	2137      	movs	r1, #55	; 0x37
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	2021      	movs	r0, #33	; 0x21
 8002550:	6863      	ldr	r3, [r4, #4]
 8002552:	f8cd 8008 	str.w	r8, [sp, #8]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	f7fe fa75 	bl	8000a48 <ST7735_WriteString>
	strcpy(buffer," ");
 800255e:	2320      	movs	r3, #32
 8002560:	8033      	strh	r3, [r6, #0]
	if(limit_status&LIMIT_Y_UP)buffer[0]='U';
 8002562:	073b      	lsls	r3, r7, #28
 8002564:	d501      	bpl.n	800256a <drawPage0+0xb2>
 8002566:	2355      	movs	r3, #85	; 0x55
 8002568:	7033      	strb	r3, [r6, #0]
	if(limit_status&LIMIT_Y_DOWN)buffer[0]='D';
 800256a:	077f      	lsls	r7, r7, #29
 800256c:	d501      	bpl.n	8002572 <drawPage0+0xba>
 800256e:	2344      	movs	r3, #68	; 0x44
 8002570:	7033      	strb	r3, [r6, #0]
	ST7735_WriteString(11*6,1 +18*3, buffer, Font_11x18, BLUE, BLACK);
 8002572:	2700      	movs	r7, #0
 8002574:	231f      	movs	r3, #31
 8002576:	4a60      	ldr	r2, [pc, #384]	; (80026f8 <drawPage0+0x240>)
 8002578:	2137      	movs	r1, #55	; 0x37
 800257a:	2042      	movs	r0, #66	; 0x42
 800257c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8002580:	6863      	ldr	r3, [r4, #4]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f7fe fa5f 	bl	8000a48 <ST7735_WriteString>

	ST7735_WriteString(11*7,1 + 18*3, "m", Font_11x18, WHITE, BLACK);
 800258a:	6862      	ldr	r2, [r4, #4]
 800258c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002590:	2137      	movs	r1, #55	; 0x37
 8002592:	204d      	movs	r0, #77	; 0x4d
 8002594:	9702      	str	r7, [sp, #8]

	{
		char bline[]= "   ";
		itoa( (uint16_t)pscrinfo->emagnet, buffer, 10);
		int len_itoa=strlen(buffer);
		if(len_itoa<=3)strcpy(bline+3-len_itoa, buffer);
 8002596:	af07      	add	r7, sp, #28
	ST7735_WriteString(11*7,1 + 18*3, "m", Font_11x18, WHITE, BLACK);
 8002598:	e9cd 2300 	strd	r2, r3, [sp]
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	4a59      	ldr	r2, [pc, #356]	; (8002704 <drawPage0+0x24c>)
 80025a0:	f7fe fa52 	bl	8000a48 <ST7735_WriteString>
		char bline[]= "   ";
 80025a4:	4b58      	ldr	r3, [pc, #352]	; (8002708 <drawPage0+0x250>)
		itoa( (uint16_t)pscrinfo->emagnet, buffer, 10);
 80025a6:	220a      	movs	r2, #10
 80025a8:	4953      	ldr	r1, [pc, #332]	; (80026f8 <drawPage0+0x240>)
 80025aa:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
		char bline[]= "   ";
 80025ae:	9307      	str	r3, [sp, #28]
		itoa( (uint16_t)pscrinfo->emagnet, buffer, 10);
 80025b0:	f007 f99a 	bl	80098e8 <itoa>
		int len_itoa=strlen(buffer);
 80025b4:	4850      	ldr	r0, [pc, #320]	; (80026f8 <drawPage0+0x240>)
 80025b6:	f7fd fe93 	bl	80002e0 <strlen>
		if(len_itoa<=3)strcpy(bline+3-len_itoa, buffer);
 80025ba:	2803      	cmp	r0, #3
 80025bc:	f240 8083 	bls.w	80026c6 <drawPage0+0x20e>
		ST7735_WriteString(11*8, 1 + 18*3, bline, Font_11x18, RED, BLACK);
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	463a      	mov	r2, r7
 80025c4:	f04f 0800 	mov.w	r8, #0
 80025c8:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2137      	movs	r1, #55	; 0x37
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	2058      	movs	r0, #88	; 0x58
 80025d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80025d8:	9701      	str	r7, [sp, #4]
 80025da:	f7fe fa35 	bl	8000a48 <ST7735_WriteString>

		if(pscrinfo->b_controlloop)
 80025de:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d03d      	beq.n	8002662 <drawPage0+0x1aa>
			ST7735_WriteString(11*(8+3), 1 + 18*3, "L", Font_11x18, RED, BLACK);
 80025e6:	6863      	ldr	r3, [r4, #4]
 80025e8:	2137      	movs	r1, #55	; 0x37
 80025ea:	4a48      	ldr	r2, [pc, #288]	; (800270c <drawPage0+0x254>)
 80025ec:	2079      	movs	r0, #121	; 0x79
 80025ee:	f8cd 8008 	str.w	r8, [sp, #8]
 80025f2:	e9cd 3700 	strd	r3, r7, [sp]
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	f7fe fa26 	bl	8000a48 <ST7735_WriteString>
		else
			ST7735_WriteString(11*(8+3), 1 + 18*3, "  ", Font_11x18, RED, BLACK);

		if(pscrinfo->b_controlloop && pscrinfo->calibration_mode)
 80025fc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	d13c      	bne.n	800267e <drawPage0+0x1c6>
 8002604:	aa06      	add	r2, sp, #24
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, RED, BLACK);
		}

		if(!pscrinfo->b_controlloop)
		{
			char towrite[]=" ";
 8002606:	2320      	movs	r3, #32
 8002608:	f8ad 3018 	strh.w	r3, [sp, #24]
			if(pscrinfo->calibration_mode>=CALIB_DEMO_BEGIN && pscrinfo->calibration_mode<= CALIB_DEMO_END)towrite[0]='D';
 800260c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8002610:	f1a3 010e 	sub.w	r1, r3, #14
 8002614:	2905      	cmp	r1, #5
 8002616:	d850      	bhi.n	80026ba <drawPage0+0x202>
 8002618:	2344      	movs	r3, #68	; 0x44
 800261a:	f88d 3018 	strb.w	r3, [sp, #24]
			if(pscrinfo->calibration_mode==CALIB_DONE)towrite[0]='C';
			if(pscrinfo->calibration_mode==CALIB_ERROR)towrite[0]='E';
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, GREEN, BLACK);
 800261e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002622:	2100      	movs	r1, #0
 8002624:	2084      	movs	r0, #132	; 0x84
 8002626:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	2137      	movs	r1, #55	; 0x37
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f7fe fa09 	bl	8000a48 <ST7735_WriteString>
		}
	}


	strcpy(buffer," ");
 8002636:	2220      	movs	r2, #32
	char firstchar = pscrinfo->header_char;
 8002638:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	strcpy(buffer," ");
 800263c:	8032      	strh	r2, [r6, #0]
	if(firstchar)buffer[0]=firstchar;
 800263e:	b103      	cbz	r3, 8002642 <drawPage0+0x18a>
 8002640:	7033      	strb	r3, [r6, #0]
	ST7735_WriteString(11*13, 1 + 18*3, buffer, Font_11x18, GREEN, BLACK);
 8002642:	2000      	movs	r0, #0
 8002644:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <drawPage0+0x240>)
 800264a:	e9d4 3500 	ldrd	r3, r5, [r4]
 800264e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002652:	2137      	movs	r1, #55	; 0x37
 8002654:	208f      	movs	r0, #143	; 0x8f
 8002656:	9500      	str	r5, [sp, #0]
 8002658:	f7fe f9f6 	bl	8000a48 <ST7735_WriteString>
}
 800265c:	b008      	add	sp, #32
 800265e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ST7735_WriteString(11*(8+3), 1 + 18*3, "  ", Font_11x18, RED, BLACK);
 8002662:	9302      	str	r3, [sp, #8]
 8002664:	2137      	movs	r1, #55	; 0x37
 8002666:	6863      	ldr	r3, [r4, #4]
 8002668:	2079      	movs	r0, #121	; 0x79
 800266a:	4a24      	ldr	r2, [pc, #144]	; (80026fc <drawPage0+0x244>)
 800266c:	e9cd 3700 	strd	r3, r7, [sp]
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	f7fe f9e9 	bl	8000a48 <ST7735_WriteString>
		if(pscrinfo->b_controlloop && pscrinfo->calibration_mode)
 8002676:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0c2      	beq.n	8002604 <drawPage0+0x14c>
 800267e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0d7      	beq.n	8002636 <drawPage0+0x17e>
			towrite[0]='0'+pscrinfo->calibration_mode;
 8002686:	3330      	adds	r3, #48	; 0x30
			char towrite[]=" ";
 8002688:	2220      	movs	r2, #32
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, RED, BLACK);
 800268a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800268e:	2000      	movs	r0, #0
			char towrite[]=" ";
 8002690:	f8ad 2018 	strh.w	r2, [sp, #24]
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, RED, BLACK);
 8002694:	aa06      	add	r2, sp, #24
			towrite[0]='0'+pscrinfo->calibration_mode;
 8002696:	f88d 3018 	strb.w	r3, [sp, #24]
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, RED, BLACK);
 800269a:	6863      	ldr	r3, [r4, #4]
 800269c:	9205      	str	r2, [sp, #20]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80026a6:	2137      	movs	r1, #55	; 0x37
 80026a8:	2084      	movs	r0, #132	; 0x84
 80026aa:	f7fe f9cd 	bl	8000a48 <ST7735_WriteString>
		if(!pscrinfo->b_controlloop)
 80026ae:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80026b2:	9a05      	ldr	r2, [sp, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1be      	bne.n	8002636 <drawPage0+0x17e>
 80026b8:	e7a5      	b.n	8002606 <drawPage0+0x14e>
			if(pscrinfo->calibration_mode==CALIB_DONE)towrite[0]='C';
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d10b      	bne.n	80026d6 <drawPage0+0x21e>
 80026be:	2343      	movs	r3, #67	; 0x43
 80026c0:	f88d 3018 	strb.w	r3, [sp, #24]
 80026c4:	e7ab      	b.n	800261e <drawPage0+0x166>
		if(len_itoa<=3)strcpy(bline+3-len_itoa, buffer);
 80026c6:	f1c0 0303 	rsb	r3, r0, #3
 80026ca:	1c42      	adds	r2, r0, #1
 80026cc:	490a      	ldr	r1, [pc, #40]	; (80026f8 <drawPage0+0x240>)
 80026ce:	18f8      	adds	r0, r7, r3
 80026d0:	f007 f920 	bl	8009914 <memcpy>
 80026d4:	e774      	b.n	80025c0 <drawPage0+0x108>
			if(pscrinfo->calibration_mode==CALIB_ERROR)towrite[0]='E';
 80026d6:	2b0d      	cmp	r3, #13
 80026d8:	d1a1      	bne.n	800261e <drawPage0+0x166>
 80026da:	2345      	movs	r3, #69	; 0x45
 80026dc:	f88d 3018 	strb.w	r3, [sp, #24]
 80026e0:	e79d      	b.n	800261e <drawPage0+0x166>
 80026e2:	bf00      	nop
 80026e4:	0800b828 	.word	0x0800b828
 80026e8:	2400000c 	.word	0x2400000c
 80026ec:	0800b82c 	.word	0x0800b82c
 80026f0:	0800b830 	.word	0x0800b830
 80026f4:	0800b834 	.word	0x0800b834
 80026f8:	24003560 	.word	0x24003560
 80026fc:	0800b824 	.word	0x0800b824
 8002700:	0800b838 	.word	0x0800b838
 8002704:	0800b83c 	.word	0x0800b83c
 8002708:	00202020 	.word	0x00202020
 800270c:	0800b840 	.word	0x0800b840

08002710 <drawPage1>:
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
}


void drawPage1(ScreenInfo* pscrinfo)
{
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
	char bline[8]="              ";
 8002712:	4eab      	ldr	r6, [pc, #684]	; (80029c0 <drawPage1+0x2b0>)
{
 8002714:	b087      	sub	sp, #28
 8002716:	4607      	mov	r7, r0
	itoa(num, buffer, 10);
 8002718:	220a      	movs	r2, #10
	char bline[8]="              ";
 800271a:	ac04      	add	r4, sp, #16
 800271c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002720:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002724:	49a7      	ldr	r1, [pc, #668]	; (80029c4 <drawPage1+0x2b4>)
 8002726:	6938      	ldr	r0, [r7, #16]
 8002728:	f007 f8de 	bl	80098e8 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 800272c:	f647 0376 	movw	r3, #30838	; 0x7876
	int len_itoa=strlen(buffer);
 8002730:	48a4      	ldr	r0, [pc, #656]	; (80029c4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 8002732:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 8002736:	f7fd fdd3 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800273a:	2806      	cmp	r0, #6
 800273c:	f240 810f 	bls.w	800295e <drawPage1+0x24e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002740:	4da1      	ldr	r5, [pc, #644]	; (80029c8 <drawPage1+0x2b8>)
 8002742:	2000      	movs	r0, #0
 8002744:	4622      	mov	r2, r4
 8002746:	2101      	movs	r1, #1
 8002748:	686b      	ldr	r3, [r5, #4]
 800274a:	9002      	str	r0, [sp, #8]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	f7fe f977 	bl	8000a48 <ST7735_WriteString>
	itoa(num, buffer, 10);
 800275a:	220a      	movs	r2, #10
	char bline[8]="              ";
 800275c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002760:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002764:	4997      	ldr	r1, [pc, #604]	; (80029c4 <drawPage1+0x2b4>)
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f007 f8be 	bl	80098e8 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 800276c:	f647 1376 	movw	r3, #31094	; 0x7976
	int len_itoa=strlen(buffer);
 8002770:	4894      	ldr	r0, [pc, #592]	; (80029c4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 8002772:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 8002776:	f7fd fdb3 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800277a:	2806      	cmp	r0, #6
 800277c:	f240 80e7 	bls.w	800294e <drawPage1+0x23e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002780:	686b      	ldr	r3, [r5, #4]
 8002782:	2000      	movs	r0, #0
 8002784:	4622      	mov	r2, r4
 8002786:	2113      	movs	r1, #19
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800278e:	9002      	str	r0, [sp, #8]
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	682b      	ldr	r3, [r5, #0]
 8002794:	f7fe f958 	bl	8000a48 <ST7735_WriteString>
	itoa(num, buffer, 10);
 8002798:	220a      	movs	r2, #10
	char bline[8]="              ";
 800279a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800279e:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 80027a2:	4988      	ldr	r1, [pc, #544]	; (80029c4 <drawPage1+0x2b4>)
 80027a4:	69b8      	ldr	r0, [r7, #24]
 80027a6:	f007 f89f 	bl	80098e8 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 80027aa:	f247 4376 	movw	r3, #29814	; 0x7476
	int len_itoa=strlen(buffer);
 80027ae:	4885      	ldr	r0, [pc, #532]	; (80029c4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 80027b0:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 80027b4:	f7fd fd94 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 80027b8:	2806      	cmp	r0, #6
 80027ba:	f240 80c0 	bls.w	800293e <drawPage1+0x22e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 80027be:	686b      	ldr	r3, [r5, #4]
 80027c0:	2000      	movs	r0, #0
 80027c2:	4622      	mov	r2, r4
 80027c4:	2125      	movs	r1, #37	; 0x25
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80027cc:	9002      	str	r0, [sp, #8]
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	f7fe f939 	bl	8000a48 <ST7735_WriteString>
	writeScrLine2("vx:", 0, 0, pscrinfo->velocity[0]);
	writeScrLine2("vy:", 0, 1, pscrinfo->velocity[1]);
	writeScrLine2("vt:", 0, 2, pscrinfo->velocity[2]);
	if(pscrinfo->freq_update) writeScrLine2("fr:", 0, 3, pscrinfo->freq_update);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a3 	beq.w	8002924 <drawPage1+0x214>
	itoa(num, buffer, 10);
 80027de:	220a      	movs	r2, #10
	char bline[8]="              ";
 80027e0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80027e4:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 80027e8:	4618      	mov	r0, r3
 80027ea:	4976      	ldr	r1, [pc, #472]	; (80029c4 <drawPage1+0x2b4>)
 80027ec:	f007 f87c 	bl	80098e8 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 80027f0:	f247 2366 	movw	r3, #29286	; 0x7266
	int len_itoa=strlen(buffer);
 80027f4:	4873      	ldr	r0, [pc, #460]	; (80029c4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 80027f6:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 80027fa:	f7fd fd71 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 80027fe:	2806      	cmp	r0, #6
 8002800:	f240 80d5 	bls.w	80029ae <drawPage1+0x29e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002804:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002808:	2000      	movs	r0, #0
 800280a:	4622      	mov	r2, r4
 800280c:	2137      	movs	r1, #55	; 0x37
 800280e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8002812:	686b      	ldr	r3, [r5, #4]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	f7fe f916 	bl	8000a48 <ST7735_WriteString>
	itoa(num, buffer, 10);
 800281c:	220a      	movs	r2, #10
	char bline[8]="              ";
 800281e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002822:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002826:	4967      	ldr	r1, [pc, #412]	; (80029c4 <drawPage1+0x2b4>)
 8002828:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 800282c:	f007 f85c 	bl	80098e8 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 8002830:	f647 0370 	movw	r3, #30832	; 0x7870
	int len_itoa=strlen(buffer);
 8002834:	4863      	ldr	r0, [pc, #396]	; (80029c4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 8002836:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 800283a:	f7fd fd51 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800283e:	2806      	cmp	r0, #6
 8002840:	f240 80ad 	bls.w	800299e <drawPage1+0x28e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002844:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002848:	2000      	movs	r0, #0
 800284a:	4622      	mov	r2, r4
 800284c:	2101      	movs	r1, #1
 800284e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8002852:	686b      	ldr	r3, [r5, #4]
 8002854:	204d      	movs	r0, #77	; 0x4d
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	f7fe f8f5 	bl	8000a48 <ST7735_WriteString>
	itoa(num, buffer, 10);
 800285e:	220a      	movs	r2, #10
	char bline[8]="              ";
 8002860:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002864:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002868:	4956      	ldr	r1, [pc, #344]	; (80029c4 <drawPage1+0x2b4>)
 800286a:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800286e:	f007 f83b 	bl	80098e8 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 8002872:	f647 1370 	movw	r3, #31088	; 0x7970
	int len_itoa=strlen(buffer);
 8002876:	4853      	ldr	r0, [pc, #332]	; (80029c4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 8002878:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 800287c:	f7fd fd30 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 8002880:	2806      	cmp	r0, #6
 8002882:	f240 8084 	bls.w	800298e <drawPage1+0x27e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002886:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800288a:	2100      	movs	r1, #0
 800288c:	4622      	mov	r2, r4
 800288e:	204d      	movs	r0, #77	; 0x4d
 8002890:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002894:	686b      	ldr	r3, [r5, #4]
 8002896:	2113      	movs	r1, #19
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	682b      	ldr	r3, [r5, #0]
 800289c:	f7fe f8d4 	bl	8000a48 <ST7735_WriteString>
	my_ftoa(vfloat, buffer, 2);
 80028a0:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
	char bline[8]="              ";
 80028a4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80028a8:	e884 0003 	stmia.w	r4, {r0, r1}
	my_ftoa(vfloat, buffer, 2);
 80028ac:	2102      	movs	r1, #2
 80028ae:	4845      	ldr	r0, [pc, #276]	; (80029c4 <drawPage1+0x2b4>)
 80028b0:	f000 fbdc 	bl	800306c <my_ftoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 80028b4:	f647 0370 	movw	r3, #30832	; 0x7870
	int len_itoa=strlen(buffer);
 80028b8:	4842      	ldr	r0, [pc, #264]	; (80029c4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 80028ba:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 80028be:	f7fd fd0f 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 80028c2:	2806      	cmp	r0, #6
 80028c4:	d95b      	bls.n	800297e <drawPage1+0x26e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 80028c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028ca:	2200      	movs	r2, #0
 80028cc:	2125      	movs	r1, #37	; 0x25
 80028ce:	204d      	movs	r0, #77	; 0x4d
 80028d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80028d4:	686b      	ldr	r3, [r5, #4]
 80028d6:	4622      	mov	r2, r4
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	f7fe f8b4 	bl	8000a48 <ST7735_WriteString>
	my_ftoa(vfloat, buffer, 2);
 80028e0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
	char bline[8]="              ";
 80028e4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80028e8:	e884 0003 	stmia.w	r4, {r0, r1}
	my_ftoa(vfloat, buffer, 2);
 80028ec:	2102      	movs	r1, #2
 80028ee:	4835      	ldr	r0, [pc, #212]	; (80029c4 <drawPage1+0x2b4>)
 80028f0:	f000 fbbc 	bl	800306c <my_ftoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 80028f4:	f647 1370 	movw	r3, #31088	; 0x7970
	int len_itoa=strlen(buffer);
 80028f8:	4832      	ldr	r0, [pc, #200]	; (80029c4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 80028fa:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 80028fe:	f7fd fcef 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 8002902:	2806      	cmp	r0, #6
 8002904:	d933      	bls.n	800296e <drawPage1+0x25e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002906:	2000      	movs	r0, #0
 8002908:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800290c:	4622      	mov	r2, r4
 800290e:	e9d5 3600 	ldrd	r3, r6, [r5]
 8002912:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002916:	2137      	movs	r1, #55	; 0x37
 8002918:	204d      	movs	r0, #77	; 0x4d
 800291a:	9600      	str	r6, [sp, #0]
 800291c:	f7fe f894 	bl	8000a48 <ST7735_WriteString>

/*	if(pscrinfo->b_demo)
		ST7735_WriteString(11*7, 1 + 18*3,"D ", Font_11x18, RED, BLACK);
	else
		ST7735_WriteString(11*7, 1 + 18*3, "       ", Font_11x18, RED, BLACK);*/
}
 8002920:	b007      	add	sp, #28
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else ST7735_WriteString(0, 18*3 +1, "       ", Font_11x18, WHITE, BLACK);
 8002924:	4618      	mov	r0, r3
 8002926:	9302      	str	r3, [sp, #8]
 8002928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292c:	4a27      	ldr	r2, [pc, #156]	; (80029cc <drawPage1+0x2bc>)
 800292e:	2137      	movs	r1, #55	; 0x37
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	686b      	ldr	r3, [r5, #4]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	682b      	ldr	r3, [r5, #0]
 8002938:	f7fe f886 	bl	8000a48 <ST7735_WriteString>
 800293c:	e76e      	b.n	800281c <drawPage1+0x10c>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800293e:	f1c0 0307 	rsb	r3, r0, #7
 8002942:	1c42      	adds	r2, r0, #1
 8002944:	491f      	ldr	r1, [pc, #124]	; (80029c4 <drawPage1+0x2b4>)
 8002946:	18e0      	adds	r0, r4, r3
 8002948:	f006 ffe4 	bl	8009914 <memcpy>
 800294c:	e737      	b.n	80027be <drawPage1+0xae>
 800294e:	f1c0 0307 	rsb	r3, r0, #7
 8002952:	1c42      	adds	r2, r0, #1
 8002954:	491b      	ldr	r1, [pc, #108]	; (80029c4 <drawPage1+0x2b4>)
 8002956:	18e0      	adds	r0, r4, r3
 8002958:	f006 ffdc 	bl	8009914 <memcpy>
 800295c:	e710      	b.n	8002780 <drawPage1+0x70>
 800295e:	f1c0 0307 	rsb	r3, r0, #7
 8002962:	1c42      	adds	r2, r0, #1
 8002964:	4917      	ldr	r1, [pc, #92]	; (80029c4 <drawPage1+0x2b4>)
 8002966:	18e0      	adds	r0, r4, r3
 8002968:	f006 ffd4 	bl	8009914 <memcpy>
 800296c:	e6e8      	b.n	8002740 <drawPage1+0x30>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800296e:	f1c0 0307 	rsb	r3, r0, #7
 8002972:	1c42      	adds	r2, r0, #1
 8002974:	4913      	ldr	r1, [pc, #76]	; (80029c4 <drawPage1+0x2b4>)
 8002976:	18e0      	adds	r0, r4, r3
 8002978:	f006 ffcc 	bl	8009914 <memcpy>
 800297c:	e7c3      	b.n	8002906 <drawPage1+0x1f6>
 800297e:	f1c0 0307 	rsb	r3, r0, #7
 8002982:	1c42      	adds	r2, r0, #1
 8002984:	490f      	ldr	r1, [pc, #60]	; (80029c4 <drawPage1+0x2b4>)
 8002986:	18e0      	adds	r0, r4, r3
 8002988:	f006 ffc4 	bl	8009914 <memcpy>
 800298c:	e79b      	b.n	80028c6 <drawPage1+0x1b6>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800298e:	f1c0 0307 	rsb	r3, r0, #7
 8002992:	1c42      	adds	r2, r0, #1
 8002994:	490b      	ldr	r1, [pc, #44]	; (80029c4 <drawPage1+0x2b4>)
 8002996:	18e0      	adds	r0, r4, r3
 8002998:	f006 ffbc 	bl	8009914 <memcpy>
 800299c:	e773      	b.n	8002886 <drawPage1+0x176>
 800299e:	f1c0 0307 	rsb	r3, r0, #7
 80029a2:	1c42      	adds	r2, r0, #1
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <drawPage1+0x2b4>)
 80029a6:	18e0      	adds	r0, r4, r3
 80029a8:	f006 ffb4 	bl	8009914 <memcpy>
 80029ac:	e74a      	b.n	8002844 <drawPage1+0x134>
 80029ae:	f1c0 0307 	rsb	r3, r0, #7
 80029b2:	1c42      	adds	r2, r0, #1
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <drawPage1+0x2b4>)
 80029b6:	18e0      	adds	r0, r4, r3
 80029b8:	f006 ffac 	bl	8009914 <memcpy>
 80029bc:	e722      	b.n	8002804 <drawPage1+0xf4>
 80029be:	bf00      	nop
 80029c0:	0800b844 	.word	0x0800b844
 80029c4:	24003560 	.word	0x24003560
 80029c8:	2400000c 	.word	0x2400000c
 80029cc:	0800b850 	.word	0x0800b850

080029d0 <updateScreen>:

void updateScreen(ScreenInfo* pscrinfo)
{
 80029d0:	b510      	push	{r4, lr}
	if(pscrinfo->page==0)drawPage0(pscrinfo);
 80029d2:	7803      	ldrb	r3, [r0, #0]
{
 80029d4:	4604      	mov	r4, r0
	if(pscrinfo->page==0)drawPage0(pscrinfo);
 80029d6:	b113      	cbz	r3, 80029de <updateScreen+0xe>
	if(pscrinfo->page==1)drawPage1(pscrinfo);
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d005      	beq.n	80029e8 <updateScreen+0x18>
}
 80029dc:	bd10      	pop	{r4, pc}
	if(pscrinfo->page==0)drawPage0(pscrinfo);
 80029de:	f7ff fd6b 	bl	80024b8 <drawPage0>
	if(pscrinfo->page==1)drawPage1(pscrinfo);
 80029e2:	7823      	ldrb	r3, [r4, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d1f9      	bne.n	80029dc <updateScreen+0xc>
 80029e8:	4620      	mov	r0, r4
}
 80029ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(pscrinfo->page==1)drawPage1(pscrinfo);
 80029ee:	f7ff be8f 	b.w	8002710 <drawPage1>
 80029f2:	bf00      	nop

080029f4 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029f4:	4814      	ldr	r0, [pc, #80]	; (8002a48 <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029f6:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 80029f8:	4914      	ldr	r1, [pc, #80]	; (8002a4c <MX_SPI1_Init+0x58>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
 80029fe:	b510      	push	{r4, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a08:	2407      	movs	r4, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a0a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
 8002a0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a10:	e9c0 3205 	strd	r3, r2, [r0, #20]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a18:	e9c0 4303 	strd	r4, r3, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a1c:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a20:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a24:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a28:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a2c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a30:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a34:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a38:	f002 feac 	bl	8005794 <HAL_SPI_Init>
 8002a3c:	b900      	cbnz	r0, 8002a40 <MX_SPI1_Init+0x4c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a3e:	bd10      	pop	{r4, pc}
 8002a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002a44:	f7ff bcf4 	b.w	8002430 <Error_Handler>
 8002a48:	240035a0 	.word	0x240035a0
 8002a4c:	40013000 	.word	0x40013000

08002a50 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002a50:	b510      	push	{r4, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002a52:	4816      	ldr	r0, [pc, #88]	; (8002aac <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002a54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hspi4.Instance = SPI4;
 8002a58:	4c15      	ldr	r4, [pc, #84]	; (8002ab0 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002a5a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a5e:	2300      	movs	r3, #0
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002a60:	6081      	str	r1, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a62:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a66:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a68:	6143      	str	r3, [r0, #20]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002a6a:	e9c0 4200 	strd	r4, r2, [r0]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a6e:	2207      	movs	r2, #7
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002a70:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a74:	60c2      	str	r2, [r0, #12]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a7a:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a7e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 8002a82:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a86:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a8a:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a8e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a92:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a96:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002a9a:	f002 fe7b 	bl	8005794 <HAL_SPI_Init>
 8002a9e:	b900      	cbnz	r0, 8002aa2 <MX_SPI4_Init+0x52>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002aa6:	f7ff bcc3 	b.w	8002430 <Error_Handler>
 8002aaa:	bf00      	nop
 8002aac:	24003628 	.word	0x24003628
 8002ab0:	40013400 	.word	0x40013400
 8002ab4:	00000000 	.word	0x00000000

08002ab8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8002ab8:	4a33      	ldr	r2, [pc, #204]	; (8002b88 <HAL_SPI_MspInit+0xd0>)
 8002aba:	6803      	ldr	r3, [r0, #0]
{
 8002abc:	b530      	push	{r4, r5, lr}
  if(spiHandle->Instance==SPI1)
 8002abe:	4293      	cmp	r3, r2
{
 8002ac0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac2:	f04f 0400 	mov.w	r4, #0
 8002ac6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002aca:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002ace:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8002ad0:	d004      	beq.n	8002adc <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI4)
 8002ad2:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <HAL_SPI_MspInit+0xd4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d02e      	beq.n	8002b36 <HAL_SPI_MspInit+0x7e>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002ad8:	b00b      	add	sp, #44	; 0x2c
 8002ada:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002adc:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ade:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ae2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002aee:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002af2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002af6:	9200      	str	r2, [sp, #0]
 8002af8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b06:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b0c:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b14:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	481e      	ldr	r0, [pc, #120]	; (8002b94 <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f000 fdd1 	bl	80036c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002b22:	4622      	mov	r2, r4
 8002b24:	4629      	mov	r1, r5
 8002b26:	2023      	movs	r0, #35	; 0x23
 8002b28:	f000 fcb6 	bl	8003498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b2c:	2023      	movs	r0, #35	; 0x23
 8002b2e:	f000 fcf1 	bl	8003514 <HAL_NVIC_EnableIRQ>
}
 8002b32:	b00b      	add	sp, #44	; 0x2c
 8002b34:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b38:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b3a:	a904      	add	r1, sp, #16
 8002b3c:	4816      	ldr	r0, [pc, #88]	; (8002b98 <HAL_SPI_MspInit+0xe0>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002b3e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002b42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002b4a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002b4e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b52:	9202      	str	r2, [sp, #8]
 8002b54:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002b5a:	f042 0210 	orr.w	r2, r2, #16
 8002b5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b66:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b68:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002b6c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8002b80 <HAL_SPI_MspInit+0xc8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b70:	9303      	str	r3, [sp, #12]
 8002b72:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002b74:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b78:	f000 fda4 	bl	80036c4 <HAL_GPIO_Init>
}
 8002b7c:	b00b      	add	sp, #44	; 0x2c
 8002b7e:	bd30      	pop	{r4, r5, pc}
 8002b80:	00005000 	.word	0x00005000
 8002b84:	00000002 	.word	0x00000002
 8002b88:	40013000 	.word	0x40013000
 8002b8c:	40013400 	.word	0x40013400
 8002b90:	58024400 	.word	0x58024400
 8002b94:	58020000 	.word	0x58020000
 8002b98:	58021000 	.word	0x58021000

08002b9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	210f      	movs	r1, #15
 8002ba2:	f06f 0001 	mvn.w	r0, #1
{
 8002ba6:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba8:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 8002bac:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	f044 0402 	orr.w	r4, r4, #2
 8002bb2:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 8002bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bc2:	b003      	add	sp, #12
 8002bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bc8:	f000 bc66 	b.w	8003498 <HAL_NVIC_SetPriority>
 8002bcc:	58024400 	.word	0x58024400

08002bd0 <HAL_InitTick>:
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd0:	280f      	cmp	r0, #15
 8002bd2:	d901      	bls.n	8002bd8 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002bd4:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002bd6:	4770      	bx	lr
{
 8002bd8:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8002bda:	4601      	mov	r1, r0
{
 8002bdc:	b08b      	sub	sp, #44	; 0x2c
 8002bde:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2019      	movs	r0, #25
  htim1.Instance = TIM1;
 8002be4:	4d1a      	ldr	r5, [pc, #104]	; (8002c50 <HAL_InitTick+0x80>)
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8002be6:	f000 fc57 	bl	8003498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002bea:	2019      	movs	r0, #25
 8002bec:	f000 fc92 	bl	8003514 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_InitTick+0x84>)
    uwTickPrio = TickPriority;
 8002bf2:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_InitTick+0x88>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bf4:	4669      	mov	r1, sp
 8002bf6:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8002bf8:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bfe:	4c17      	ldr	r4, [pc, #92]	; (8002c5c <HAL_InitTick+0x8c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c14:	f001 fcdc 	bl	80045d0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002c18:	f001 fc92 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
  htim1.Init.ClockDivision = 0;
 8002c1c:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002c1e:	0043      	lsls	r3, r0, #1
  htim1.Instance = TIM1;
 8002c20:	490f      	ldr	r1, [pc, #60]	; (8002c60 <HAL_InitTick+0x90>)
  htim1.Init.ClockDivision = 0;
 8002c22:	612a      	str	r2, [r5, #16]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c24:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c26:	60aa      	str	r2, [r5, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c28:	fba4 2303 	umull	r2, r3, r4, r3
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Instance = TIM1;
 8002c30:	6029      	str	r1, [r5, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c32:	0c9b      	lsrs	r3, r3, #18
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c34:	60ea      	str	r2, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c36:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c38:	606b      	str	r3, [r5, #4]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c3a:	f003 fb0d 	bl	8006258 <HAL_TIM_Base_Init>
 8002c3e:	b110      	cbz	r0, 8002c46 <HAL_InitTick+0x76>
    return HAL_ERROR;
 8002c40:	2001      	movs	r0, #1
}
 8002c42:	b00b      	add	sp, #44	; 0x2c
 8002c44:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8002c46:	4628      	mov	r0, r5
 8002c48:	f003 fbbc 	bl	80063c4 <HAL_TIM_Base_Start_IT>
 8002c4c:	e7f9      	b.n	8002c42 <HAL_InitTick+0x72>
 8002c4e:	bf00      	nop
 8002c50:	240036b0 	.word	0x240036b0
 8002c54:	58024400 	.word	0x58024400
 8002c58:	240030d0 	.word	0x240030d0
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	40010000 	.word	0x40010000

08002c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c64:	e7fe      	b.n	8002c64 <NMI_Handler>
 8002c66:	bf00      	nop

08002c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c68:	e7fe      	b.n	8002c68 <HardFault_Handler>
 8002c6a:	bf00      	nop

08002c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6c:	e7fe      	b.n	8002c6c <MemManage_Handler>
 8002c6e:	bf00      	nop

08002c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c70:	e7fe      	b.n	8002c70 <BusFault_Handler>
 8002c72:	bf00      	nop

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	e7fe      	b.n	8002c74 <UsageFault_Handler>
 8002c76:	bf00      	nop

08002c78 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop

08002c7c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPULSE_Pin);
 8002c7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c80:	f000 be64 	b.w	800394c <HAL_GPIO_EXTI_IRQHandler>

08002c84 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c84:	4801      	ldr	r0, [pc, #4]	; (8002c8c <TIM1_UP_IRQHandler+0x8>)
 8002c86:	f003 bc01 	b.w	800648c <HAL_TIM_IRQHandler>
 8002c8a:	bf00      	nop
 8002c8c:	240036b0 	.word	0x240036b0

08002c90 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c90:	4801      	ldr	r0, [pc, #4]	; (8002c98 <SPI1_IRQHandler+0x8>)
 8002c92:	f003 b9d5 	b.w	8006040 <HAL_SPI_IRQHandler>
 8002c96:	bf00      	nop
 8002c98:	240035a0 	.word	0x240035a0

08002c9c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K1_Pin);
 8002c9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ca0:	f000 be54 	b.w	800394c <HAL_GPIO_EXTI_IRQHandler>

08002ca4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	4770      	bx	lr

08002ca8 <_kill>:

int _kill(int pid, int sig)
{
 8002ca8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002caa:	f006 fce5 	bl	8009678 <__errno>
 8002cae:	2216      	movs	r2, #22
 8002cb0:	4603      	mov	r3, r0
  return -1;
}
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 8002cb6:	601a      	str	r2, [r3, #0]
}
 8002cb8:	bd08      	pop	{r3, pc}
 8002cba:	bf00      	nop

08002cbc <_exit>:

void _exit (int status)
{
 8002cbc:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002cbe:	f006 fcdb 	bl	8009678 <__errno>
 8002cc2:	2316      	movs	r3, #22
 8002cc4:	6003      	str	r3, [r0, #0]
 8002cc6:	e7fe      	b.n	8002cc6 <_exit+0xa>

08002cc8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop

08002cd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8002cd4:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002cd6:	604b      	str	r3, [r1, #4]
}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop

08002cdc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002cdc:	2001      	movs	r0, #1
 8002cde:	4770      	bx	lr

08002ce0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	4770      	bx	lr

08002ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce4:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce6:	4c0d      	ldr	r4, [pc, #52]	; (8002d1c <_sbrk+0x38>)
{
 8002ce8:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cea:	490d      	ldr	r1, [pc, #52]	; (8002d20 <_sbrk+0x3c>)
 8002cec:	4d0d      	ldr	r5, [pc, #52]	; (8002d24 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002cee:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf0:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8002cf2:	b12a      	cbz	r2, 8002d00 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	428b      	cmp	r3, r1
 8002cf8:	d808      	bhi.n	8002d0c <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002cfa:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8002cfc:	6023      	str	r3, [r4, #0]
}
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8002d00:	4809      	ldr	r0, [pc, #36]	; (8002d28 <_sbrk+0x44>)
 8002d02:	4602      	mov	r2, r0
 8002d04:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002d06:	4413      	add	r3, r2
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	d9f6      	bls.n	8002cfa <_sbrk+0x16>
    errno = ENOMEM;
 8002d0c:	f006 fcb4 	bl	8009678 <__errno>
 8002d10:	230c      	movs	r3, #12
    return (void *)-1;
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8002d16:	6003      	str	r3, [r0, #0]
}
 8002d18:	4610      	mov	r0, r2
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	240036fc 	.word	0x240036fc
 8002d20:	24080000 	.word	0x24080000
 8002d24:	00000400 	.word	0x00000400
 8002d28:	240081c0 	.word	0x240081c0

08002d2c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d2c:	4927      	ldr	r1, [pc, #156]	; (8002dcc <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d2e:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d30:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002d38:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d3e:	6813      	ldr	r3, [r2, #0]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d805      	bhi.n	8002d54 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d48:	6813      	ldr	r3, [r2, #0]
 8002d4a:	f023 030f 	bic.w	r3, r3, #15
 8002d4e:	f043 0307 	orr.w	r3, r3, #7
 8002d52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d54:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d56:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d58:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8002d5a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d5c:	481c      	ldr	r0, [pc, #112]	; (8002dd0 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8002d5e:	f041 0101 	orr.w	r1, r1, #1
 8002d62:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002d64:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	400a      	ands	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d6c:	6803      	ldr	r3, [r0, #0]
 8002d6e:	071b      	lsls	r3, r3, #28
 8002d70:	d505      	bpl.n	8002d7e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d72:	6803      	ldr	r3, [r0, #0]
 8002d74:	f023 030f 	bic.w	r3, r3, #15
 8002d78:	f043 0307 	orr.w	r3, r3, #7
 8002d7c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <SystemInit+0xa8>)
 8002d80:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d82:	4916      	ldr	r1, [pc, #88]	; (8002ddc <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8002d84:	4c16      	ldr	r4, [pc, #88]	; (8002de0 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8002d86:	4817      	ldr	r0, [pc, #92]	; (8002de4 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8002d88:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8002d8a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8002d8c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8002d8e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8002d90:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8002d92:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d96:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d98:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d9a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d9e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002da0:	4c11      	ldr	r4, [pc, #68]	; (8002de8 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8002da2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002da6:	4911      	ldr	r1, [pc, #68]	; (8002dec <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8002da8:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8002daa:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	4019      	ands	r1, r3
 8002db0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002db4:	d203      	bcs.n	8002dbe <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <SystemInit+0xc4>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <SystemInit+0xc8>)
 8002dc0:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00
 8002dd0:	52002000 	.word	0x52002000
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ddc:	01010280 	.word	0x01010280
 8002de0:	02020200 	.word	0x02020200
 8002de4:	01ff0000 	.word	0x01ff0000
 8002de8:	5c001000 	.word	0x5c001000
 8002dec:	ffff0000 	.word	0xffff0000
 8002df0:	51008000 	.word	0x51008000
 8002df4:	52004000 	.word	0x52004000

08002df8 <SystemCoreClockUpdate>:
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <SystemCoreClockUpdate+0x144>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
{
 8002e00:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e02:	2b18      	cmp	r3, #24
 8002e04:	d80e      	bhi.n	8002e24 <SystemCoreClockUpdate+0x2c>
 8002e06:	e8df f003 	tbb	[pc, r3]
 8002e0a:	0d0d      	.short	0x0d0d
 8002e0c:	0d0d0d0d 	.word	0x0d0d0d0d
 8002e10:	0d740d0d 	.word	0x0d740d0d
 8002e14:	0d0d0d0d 	.word	0x0d0d0d0d
 8002e18:	0d760d0d 	.word	0x0d760d0d
 8002e1c:	0d0d0d0d 	.word	0x0d0d0d0d
 8002e20:	0d0d      	.short	0x0d0d
 8002e22:	2a          	.byte	0x2a
 8002e23:	00          	.byte	0x00
      common_system_clock = 0U;
    }
    break;

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8002e24:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <SystemCoreClockUpdate+0x144>)
 8002e26:	4a46      	ldr	r2, [pc, #280]	; (8002f40 <SystemCoreClockUpdate+0x148>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002e2e:	40da      	lsrs	r2, r3
    break;
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8002e30:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <SystemCoreClockUpdate+0x144>)
 8002e32:	4844      	ldr	r0, [pc, #272]	; (8002f44 <SystemCoreClockUpdate+0x14c>)
 8002e34:	6999      	ldr	r1, [r3, #24]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e36:	699b      	ldr	r3, [r3, #24]
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8002e38:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e3c:	4c42      	ldr	r4, [pc, #264]	; (8002f48 <SystemCoreClockUpdate+0x150>)
 8002e3e:	f003 030f 	and.w	r3, r3, #15
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8002e42:	f810 c001 	ldrb.w	ip, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e46:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock >>= tmp;
 8002e48:	fa22 f20c 	lsr.w	r2, r2, ip
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e4c:	493f      	ldr	r1, [pc, #252]	; (8002f4c <SystemCoreClockUpdate+0x154>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e4e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8002e52:	600a      	str	r2, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
 8002e58:	6023      	str	r3, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
 8002e5a:	bc30      	pop	{r4, r5}
 8002e5c:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <SystemCoreClockUpdate+0x144>)
 8002e60:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e62:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e64:	6add      	ldr	r5, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8002e66:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e6c:	f3c4 1205 	ubfx	r2, r4, #4, #6
    if (pllm != 0U)
 8002e70:	d0de      	beq.n	8002e30 <SystemCoreClockUpdate+0x38>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e72:	f3c0 00cc 	ubfx	r0, r0, #3, #13
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e76:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e7a:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e7e:	fb05 f000 	mul.w	r0, r5, r0
 8002e82:	2901      	cmp	r1, #1
 8002e84:	ee07 0a90 	vmov	s15, r0
 8002e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8c:	d04f      	beq.n	8002f2e <SystemCoreClockUpdate+0x136>
 8002e8e:	2902      	cmp	r1, #2
 8002e90:	d033      	beq.n	8002efa <SystemCoreClockUpdate+0x102>
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8002e92:	6818      	ldr	r0, [r3, #0]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e94:	ee07 2a10 	vmov	s14, r2
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8002e98:	4929      	ldr	r1, [pc, #164]	; (8002f40 <SystemCoreClockUpdate+0x148>)
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8002ea0:	f3c0 02c1 	ubfx	r2, r0, #3, #2
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ea4:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
 8002ea8:	eddf 5a29 	vldr	s11, [pc, #164]	; 8002f50 <SystemCoreClockUpdate+0x158>
 8002eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8002eb0:	40d1      	lsrs	r1, r2
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eb2:	ee07 3a10 	vmov	s14, r3
 8002eb6:	ee06 1a10 	vmov	s12, r1
 8002eba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ebe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002ec2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002ec6:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8002eca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8002ece:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <SystemCoreClockUpdate+0x144>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002eda:	3301      	adds	r3, #1
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ee8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002eec:	ee17 2a90 	vmov	r2, s15
 8002ef0:	e79e      	b.n	8002e30 <SystemCoreClockUpdate+0x38>
    common_system_clock = CSI_VALUE;
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <SystemCoreClockUpdate+0x15c>)
 8002ef4:	e79c      	b.n	8002e30 <SystemCoreClockUpdate+0x38>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <SystemCoreClockUpdate+0x160>)
 8002ef8:	e79a      	b.n	8002e30 <SystemCoreClockUpdate+0x38>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002efa:	ee07 2a10 	vmov	s14, r2
 8002efe:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8002f5c <SystemCoreClockUpdate+0x164>
 8002f02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	eec5 6a07 	vdiv.f32	s13, s10, s14
 8002f0c:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002f50 <SystemCoreClockUpdate+0x158>
 8002f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f14:	ee07 3a10 	vmov	s14, r3
 8002f18:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002f1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f20:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002f24:	eea7 7a86 	vfma.f32	s14, s15, s12
 8002f28:	ee26 7a87 	vmul.f32	s14, s13, s14
        break;
 8002f2c:	e7d1      	b.n	8002ed2 <SystemCoreClockUpdate+0xda>
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f2e:	ee07 2a10 	vmov	s14, r2
 8002f32:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8002f60 <SystemCoreClockUpdate+0x168>
 8002f36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f3a:	e7e4      	b.n	8002f06 <SystemCoreClockUpdate+0x10e>
 8002f3c:	58024400 	.word	0x58024400
 8002f40:	03d09000 	.word	0x03d09000
 8002f44:	0800b858 	.word	0x0800b858
 8002f48:	240030c8 	.word	0x240030c8
 8002f4c:	240030c4 	.word	0x240030c4
 8002f50:	39000000 	.word	0x39000000
 8002f54:	003d0900 	.word	0x003d0900
 8002f58:	017d7840 	.word	0x017d7840
 8002f5c:	4bbebc20 	.word	0x4bbebc20
 8002f60:	4a742400 	.word	0x4a742400

08002f64 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f64:	b510      	push	{r4, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f66:	481f      	ldr	r0, [pc, #124]	; (8002fe4 <MX_UART4_Init+0x80>)
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f68:	2300      	movs	r3, #0
  huart4.Instance = UART4;
 8002f6a:	4c1f      	ldr	r4, [pc, #124]	; (8002fe8 <MX_UART4_Init+0x84>)
  huart4.Init.BaudRate = 115200;
 8002f6c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f70:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	6083      	str	r3, [r0, #8]
  huart4.Init.BaudRate = 115200;
 8002f74:	e9c0 4100 	strd	r4, r1, [r0]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f78:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f80:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f84:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f88:	f004 f99a 	bl	80072c0 <HAL_UART_Init>
 8002f8c:	b970      	cbnz	r0, 8002fac <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4814      	ldr	r0, [pc, #80]	; (8002fe4 <MX_UART4_Init+0x80>)
 8002f92:	f004 f9e7 	bl	8007364 <HAL_UARTEx_SetTxFifoThreshold>
 8002f96:	b988      	cbnz	r0, 8002fbc <MX_UART4_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4812      	ldr	r0, [pc, #72]	; (8002fe4 <MX_UART4_Init+0x80>)
 8002f9c:	f004 fa24 	bl	80073e8 <HAL_UARTEx_SetRxFifoThreshold>
 8002fa0:	b9a0      	cbnz	r0, 8002fcc <MX_UART4_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002fa2:	4810      	ldr	r0, [pc, #64]	; (8002fe4 <MX_UART4_Init+0x80>)
 8002fa4:	f004 f9c0 	bl	8007328 <HAL_UARTEx_DisableFifoMode>
 8002fa8:	b9b8      	cbnz	r0, 8002fda <MX_UART4_Init+0x76>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002faa:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002fac:	f7ff fa40 	bl	8002430 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	480c      	ldr	r0, [pc, #48]	; (8002fe4 <MX_UART4_Init+0x80>)
 8002fb4:	f004 f9d6 	bl	8007364 <HAL_UARTEx_SetTxFifoThreshold>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d0ed      	beq.n	8002f98 <MX_UART4_Init+0x34>
    Error_Handler();
 8002fbc:	f7ff fa38 	bl	8002430 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <MX_UART4_Init+0x80>)
 8002fc4:	f004 fa10 	bl	80073e8 <HAL_UARTEx_SetRxFifoThreshold>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d0ea      	beq.n	8002fa2 <MX_UART4_Init+0x3e>
    Error_Handler();
 8002fcc:	f7ff fa30 	bl	8002430 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002fd0:	4804      	ldr	r0, [pc, #16]	; (8002fe4 <MX_UART4_Init+0x80>)
 8002fd2:	f004 f9a9 	bl	8007328 <HAL_UARTEx_DisableFifoMode>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d0e7      	beq.n	8002faa <MX_UART4_Init+0x46>
}
 8002fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002fde:	f7ff ba27 	b.w	8002430 <Error_Handler>
 8002fe2:	bf00      	nop
 8002fe4:	24003700 	.word	0x24003700
 8002fe8:	40004c00 	.word	0x40004c00
 8002fec:	00000000 	.word	0x00000000

08002ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART4)
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_UART_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff2:	2300      	movs	r3, #0
  if(uartHandle->Instance==UART4)
 8002ff4:	6801      	ldr	r1, [r0, #0]
{
 8002ff6:	b510      	push	{r4, lr}
  if(uartHandle->Instance==UART4)
 8002ff8:	4291      	cmp	r1, r2
{
 8002ffa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003000:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003004:	9306      	str	r3, [sp, #24]
  if(uartHandle->Instance==UART4)
 8003006:	d001      	beq.n	800300c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8003008:	b008      	add	sp, #32
 800300a:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800300e:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	4815      	ldr	r0, [pc, #84]	; (8003068 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003012:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_UART4_CLK_ENABLE();
 800301a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800301e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003022:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003026:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800302a:	9200      	str	r2, [sp, #0]
 800302c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800303e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003040:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003044:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8003058 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800304c:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003050:	f000 fb38 	bl	80036c4 <HAL_GPIO_Init>
}
 8003054:	b008      	add	sp, #32
 8003056:	bd10      	pop	{r4, pc}
 8003058:	00000003 	.word	0x00000003
 800305c:	00000002 	.word	0x00000002
 8003060:	40004c00 	.word	0x40004c00
 8003064:	58024400 	.word	0x58024400
 8003068:	58020000 	.word	0x58020000

0800306c <my_ftoa>:
	// check precision bounds
	if (precision > MAX_PRECISION)
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 800306c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		f = -f;
		*ptr++ = '-';
 8003070:	4684      	mov	ip, r0
{
 8003072:	b530      	push	{r4, r5, lr}
	if (f < 0)
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8003078:	b083      	sub	sp, #12
	if (f < 0)
 800307a:	d504      	bpl.n	8003086 <my_ftoa+0x1a>
		f = -f;
 800307c:	eeb1 0a40 	vneg.f32	s0, s0
		*ptr++ = '-';
 8003080:	232d      	movs	r3, #45	; 0x2d
 8003082:	f80c 3b01 	strb.w	r3, [ip], #1
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8003086:	2900      	cmp	r1, #0
 8003088:	f2c0 810a 	blt.w	80032a0 <my_ftoa+0x234>
 800308c:	290a      	cmp	r1, #10
 800308e:	460c      	mov	r4, r1
 8003090:	bfa8      	it	ge
 8003092:	240a      	movge	r4, #10
		else if (f < 100000.0) precision = 1;
		else precision = 0;
	}

	// round value according the precision
	if (precision)
 8003094:	b131      	cbz	r1, 80030a4 <my_ftoa+0x38>
		f += rounders[precision];
 8003096:	4ba9      	ldr	r3, [pc, #676]	; (800333c <my_ftoa+0x2d0>)
 8003098:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ee30 0a27 	vadd.f32	s0, s0, s15

	// integer part...
	intPart = f;
 80030a4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	f -= intPart;

	if (!intPart)
 80030a8:	ee17 3a90 	vmov	r3, s15
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80f2 	beq.w	8003296 <my_ftoa+0x22a>
		else precision = 0;
 80030b2:	ee17 1a90 	vmov	r1, s15
 80030b6:	46e6      	mov	lr, ip
		p = ptr;

		// convert (reverse order)
		while (intPart)
		{
			*p++ = '0' + intPart % 10;
 80030b8:	4da1      	ldr	r5, [pc, #644]	; (8003340 <my_ftoa+0x2d4>)
 80030ba:	fb85 2301 	smull	r2, r3, r5, r1
 80030be:	17ca      	asrs	r2, r1, #31
 80030c0:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 80030c4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80030c8:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
		while (intPart)
 80030cc:	4611      	mov	r1, r2
			*p++ = '0' + intPart % 10;
 80030ce:	3330      	adds	r3, #48	; 0x30
 80030d0:	f80e 3b01 	strb.w	r3, [lr], #1
		while (intPart)
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d1f0      	bne.n	80030ba <my_ftoa+0x4e>

		// save end pos
		p1 = p;

		// reverse result
		while (p > ptr)
 80030d8:	45f4      	cmp	ip, lr
 80030da:	d209      	bcs.n	80030f0 <my_ftoa+0x84>
 80030dc:	4673      	mov	r3, lr
		{
			c = *--p;
 80030de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 80030e2:	f89c 1000 	ldrb.w	r1, [ip]
 80030e6:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 80030e8:	f80c 2b01 	strb.w	r2, [ip], #1
		while (p > ptr)
 80030ec:	4563      	cmp	r3, ip
 80030ee:	d8f6      	bhi.n	80030de <my_ftoa+0x72>
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 80030f0:	2c00      	cmp	r4, #0
 80030f2:	f000 80cb 	beq.w	800328c <my_ftoa+0x220>
	f -= intPart;
 80030f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	{
		// place decimal point
		*ptr++ = '.';
 80030fa:	232e      	movs	r3, #46	; 0x2e

		// convert
		while (precision--)
		{
			f *= 10.0;
 80030fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
		while (precision--)
 8003100:	2c01      	cmp	r4, #1
		*ptr++ = '.';
 8003102:	f88e 3000 	strb.w	r3, [lr]
	f -= intPart;
 8003106:	ee30 0a67 	vsub.f32	s0, s0, s15
			f *= 10.0;
 800310a:	ee20 0a07 	vmul.f32	s0, s0, s14
			c = f;
 800310e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003112:	edcd 7a01 	vstr	s15, [sp, #4]
 8003116:	f89d 3004 	ldrb.w	r3, [sp, #4]
			*ptr++ = '0' + c;
			f -= c;
 800311a:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 800311e:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8003122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8003126:	f88e 3001 	strb.w	r3, [lr, #1]
			f -= c;
 800312a:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 800312e:	f000 80ab 	beq.w	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 8003132:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8003136:	2c02      	cmp	r4, #2
			c = f;
 8003138:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800313c:	edcd 7a01 	vstr	s15, [sp, #4]
 8003140:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8003144:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8003148:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 800314c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8003150:	f88e 3002 	strb.w	r3, [lr, #2]
			f -= c;
 8003154:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8003158:	f000 8096 	beq.w	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 800315c:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8003160:	2c03      	cmp	r4, #3
			c = f;
 8003162:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003166:	edcd 7a01 	vstr	s15, [sp, #4]
 800316a:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 800316e:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8003172:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8003176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 800317a:	f88e 3003 	strb.w	r3, [lr, #3]
			f -= c;
 800317e:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8003182:	f000 8081 	beq.w	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 8003186:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 800318a:	2c04      	cmp	r4, #4
			c = f;
 800318c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003190:	edcd 7a01 	vstr	s15, [sp, #4]
 8003194:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8003198:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 800319c:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 80031a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 80031a4:	f88e 3004 	strb.w	r3, [lr, #4]
			f -= c;
 80031a8:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 80031ac:	d06c      	beq.n	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 80031ae:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 80031b2:	2c05      	cmp	r4, #5
			c = f;
 80031b4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80031b8:	edcd 7a01 	vstr	s15, [sp, #4]
 80031bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 80031c0:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 80031c4:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 80031c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 80031cc:	f88e 3005 	strb.w	r3, [lr, #5]
			f -= c;
 80031d0:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 80031d4:	d058      	beq.n	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 80031d6:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 80031da:	2c06      	cmp	r4, #6
			c = f;
 80031dc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80031e0:	edcd 7a01 	vstr	s15, [sp, #4]
 80031e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 80031e8:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 80031ec:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 80031f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 80031f4:	f88e 3006 	strb.w	r3, [lr, #6]
			f -= c;
 80031f8:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 80031fc:	d044      	beq.n	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 80031fe:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8003202:	2c07      	cmp	r4, #7
			c = f;
 8003204:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003208:	edcd 7a01 	vstr	s15, [sp, #4]
 800320c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8003210:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8003214:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8003218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 800321c:	f88e 3007 	strb.w	r3, [lr, #7]
			f -= c;
 8003220:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8003224:	d030      	beq.n	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 8003226:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 800322a:	2c08      	cmp	r4, #8
			c = f;
 800322c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003230:	edcd 7a01 	vstr	s15, [sp, #4]
 8003234:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8003238:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 800323c:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8003240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8003244:	f88e 3008 	strb.w	r3, [lr, #8]
			f -= c;
 8003248:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 800324c:	d01c      	beq.n	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 800324e:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8003252:	2c09      	cmp	r4, #9
			c = f;
 8003254:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003258:	edcd 7a01 	vstr	s15, [sp, #4]
 800325c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8003260:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8003264:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8003268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 800326c:	f88e 3009 	strb.w	r3, [lr, #9]
			f -= c;
 8003270:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8003274:	d008      	beq.n	8003288 <my_ftoa+0x21c>
			f *= 10.0;
 8003276:	ee20 0a07 	vmul.f32	s0, s0, s14
			c = f;
 800327a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
			*ptr++ = '0' + c;
 800327e:	ee10 3a10 	vmov	r3, s0
 8003282:	3330      	adds	r3, #48	; 0x30
 8003284:	f88e 300a 	strb.w	r3, [lr, #10]
 8003288:	3401      	adds	r4, #1
 800328a:	44a6      	add	lr, r4
		}
	}

	// terminating zero
	*ptr = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	f88e 3000 	strb.w	r3, [lr]

	return buf;
}
 8003292:	b003      	add	sp, #12
 8003294:	bd30      	pop	{r4, r5, pc}
		*ptr++ = '0';
 8003296:	46e6      	mov	lr, ip
 8003298:	2330      	movs	r3, #48	; 0x30
 800329a:	f80e 3b01 	strb.w	r3, [lr], #1
 800329e:	e727      	b.n	80030f0 <my_ftoa+0x84>
		if (f < 1.0) precision = 6;
 80032a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80032a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ac:	d430      	bmi.n	8003310 <my_ftoa+0x2a4>
		else if (f < 10.0) precision = 5;
 80032ae:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80032b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ba:	d425      	bmi.n	8003308 <my_ftoa+0x29c>
		else if (f < 100.0) precision = 4;
 80032bc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003344 <my_ftoa+0x2d8>
 80032c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c8:	d426      	bmi.n	8003318 <my_ftoa+0x2ac>
		else if (f < 1000.0) precision = 3;
 80032ca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003348 <my_ftoa+0x2dc>
 80032ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d6:	d423      	bmi.n	8003320 <my_ftoa+0x2b4>
		else if (f < 10000.0) precision = 2;
 80032d8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800334c <my_ftoa+0x2e0>
 80032dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e4:	d420      	bmi.n	8003328 <my_ftoa+0x2bc>
		else if (f < 100000.0) precision = 1;
 80032e6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003350 <my_ftoa+0x2e4>
 80032ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	d41d      	bmi.n	8003330 <my_ftoa+0x2c4>
	intPart = f;
 80032f4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (!intPart)
 80032f8:	ee17 3a90 	vmov	r3, s15
 80032fc:	b9e3      	cbnz	r3, 8003338 <my_ftoa+0x2cc>
		*ptr++ = '0';
 80032fe:	46e6      	mov	lr, ip
 8003300:	2330      	movs	r3, #48	; 0x30
 8003302:	f80e 3b01 	strb.w	r3, [lr], #1
 8003306:	e7c1      	b.n	800328c <my_ftoa+0x220>
 8003308:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003354 <my_ftoa+0x2e8>
		else if (f < 10.0) precision = 5;
 800330c:	2405      	movs	r4, #5
 800330e:	e6c7      	b.n	80030a0 <my_ftoa+0x34>
 8003310:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003358 <my_ftoa+0x2ec>
		if (f < 1.0) precision = 6;
 8003314:	2406      	movs	r4, #6
 8003316:	e6c3      	b.n	80030a0 <my_ftoa+0x34>
 8003318:	eddf 7a10 	vldr	s15, [pc, #64]	; 800335c <my_ftoa+0x2f0>
		else if (f < 100.0) precision = 4;
 800331c:	2404      	movs	r4, #4
 800331e:	e6bf      	b.n	80030a0 <my_ftoa+0x34>
 8003320:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003360 <my_ftoa+0x2f4>
		else if (f < 1000.0) precision = 3;
 8003324:	2403      	movs	r4, #3
 8003326:	e6bb      	b.n	80030a0 <my_ftoa+0x34>
 8003328:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003364 <my_ftoa+0x2f8>
		else if (f < 10000.0) precision = 2;
 800332c:	2402      	movs	r4, #2
 800332e:	e6b7      	b.n	80030a0 <my_ftoa+0x34>
 8003330:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003368 <my_ftoa+0x2fc>
		else if (f < 100000.0) precision = 1;
 8003334:	2401      	movs	r4, #1
 8003336:	e6b3      	b.n	80030a0 <my_ftoa+0x34>
		else precision = 0;
 8003338:	2400      	movs	r4, #0
 800333a:	e6ba      	b.n	80030b2 <my_ftoa+0x46>
 800333c:	0800b868 	.word	0x0800b868
 8003340:	66666667 	.word	0x66666667
 8003344:	42c80000 	.word	0x42c80000
 8003348:	447a0000 	.word	0x447a0000
 800334c:	461c4000 	.word	0x461c4000
 8003350:	47c35000 	.word	0x47c35000
 8003354:	36a7c5ac 	.word	0x36a7c5ac
 8003358:	350637bd 	.word	0x350637bd
 800335c:	3851b717 	.word	0x3851b717
 8003360:	3a03126f 	.word	0x3a03126f
 8003364:	3ba3d70a 	.word	0x3ba3d70a
 8003368:	3d4ccccd 	.word	0x3d4ccccd

0800336c <Reset_Handler>:
 800336c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033a4 <LoopFillZerobss+0xe>
 8003370:	f7ff fcdc 	bl	8002d2c <SystemInit>
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <LoopFillZerobss+0x12>)
 8003376:	490d      	ldr	r1, [pc, #52]	; (80033ac <LoopFillZerobss+0x16>)
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <LoopFillZerobss+0x1a>)
 800337a:	2300      	movs	r3, #0
 800337c:	e002      	b.n	8003384 <LoopCopyDataInit>

0800337e <CopyDataInit>:
 800337e:	58d4      	ldr	r4, [r2, r3]
 8003380:	50c4      	str	r4, [r0, r3]
 8003382:	3304      	adds	r3, #4

08003384 <LoopCopyDataInit>:
 8003384:	18c4      	adds	r4, r0, r3
 8003386:	428c      	cmp	r4, r1
 8003388:	d3f9      	bcc.n	800337e <CopyDataInit>
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <LoopFillZerobss+0x1e>)
 800338c:	4c0a      	ldr	r4, [pc, #40]	; (80033b8 <LoopFillZerobss+0x22>)
 800338e:	2300      	movs	r3, #0
 8003390:	e001      	b.n	8003396 <LoopFillZerobss>

08003392 <FillZerobss>:
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	3204      	adds	r2, #4

08003396 <LoopFillZerobss>:
 8003396:	42a2      	cmp	r2, r4
 8003398:	d3fb      	bcc.n	8003392 <FillZerobss>
 800339a:	f006 fa69 	bl	8009870 <__libc_init_array>
 800339e:	f7fe ffdb 	bl	8002358 <main>
 80033a2:	4770      	bx	lr
 80033a4:	24080000 	.word	0x24080000
 80033a8:	24000000 	.word	0x24000000
 80033ac:	24003140 	.word	0x24003140
 80033b0:	0800b9dc 	.word	0x0800b9dc
 80033b4:	24003140 	.word	0x24003140
 80033b8:	240081bc 	.word	0x240081bc

080033bc <ADC3_IRQHandler>:
 80033bc:	e7fe      	b.n	80033bc <ADC3_IRQHandler>
	...

080033c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c2:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033c4:	4c12      	ldr	r4, [pc, #72]	; (8003410 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c6:	f000 f855 	bl	8003474 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033ca:	f000 fe69 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_Init+0x54>)
 80033d0:	4911      	ldr	r1, [pc, #68]	; (8003418 <HAL_Init+0x58>)
 80033d2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033d4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033d6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033da:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033de:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033e2:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033e6:	490d      	ldr	r1, [pc, #52]	; (800341c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033ec:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033ee:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80033f2:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033f6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f8:	f7ff fbea 	bl	8002bd0 <HAL_InitTick>
 80033fc:	b110      	cbz	r0, 8003404 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80033fe:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8003400:	4620      	mov	r0, r4
 8003402:	bd10      	pop	{r4, pc}
 8003404:	4604      	mov	r4, r0
  HAL_MspInit();
 8003406:	f7ff fbc9 	bl	8002b9c <HAL_MspInit>
}
 800340a:	4620      	mov	r0, r4
 800340c:	bd10      	pop	{r4, pc}
 800340e:	bf00      	nop
 8003410:	240030c8 	.word	0x240030c8
 8003414:	58024400 	.word	0x58024400
 8003418:	0800b858 	.word	0x0800b858
 800341c:	240030c4 	.word	0x240030c4

08003420 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003420:	4a03      	ldr	r2, [pc, #12]	; (8003430 <HAL_IncTick+0x10>)
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <HAL_IncTick+0x14>)
 8003424:	6811      	ldr	r1, [r2, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	440b      	add	r3, r1
 800342a:	6013      	str	r3, [r2, #0]
}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	24003794 	.word	0x24003794
 8003434:	240030cc 	.word	0x240030cc

08003438 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003438:	4b01      	ldr	r3, [pc, #4]	; (8003440 <HAL_GetTick+0x8>)
 800343a:	6818      	ldr	r0, [r3, #0]
}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	24003794 	.word	0x24003794

08003444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003448:	f7ff fff6 	bl	8003438 <HAL_GetTick>
 800344c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344e:	1c63      	adds	r3, r4, #1
 8003450:	d002      	beq.n	8003458 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_Delay+0x20>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003458:	f7ff ffee 	bl	8003438 <HAL_GetTick>
 800345c:	1b43      	subs	r3, r0, r5
 800345e:	42a3      	cmp	r3, r4
 8003460:	d3fa      	bcc.n	8003458 <HAL_Delay+0x14>
  {
  }
}
 8003462:	bd38      	pop	{r3, r4, r5, pc}
 8003464:	240030cc 	.word	0x240030cc

08003468 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003468:	4b01      	ldr	r3, [pc, #4]	; (8003470 <HAL_GetREVID+0x8>)
 800346a:	6818      	ldr	r0, [r3, #0]
}
 800346c:	0c00      	lsrs	r0, r0, #16
 800346e:	4770      	bx	lr
 8003470:	5c001000 	.word	0x5c001000

08003474 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003474:	4906      	ldr	r1, [pc, #24]	; (8003490 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003476:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800347a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003480:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003484:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003488:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800348a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800348c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800348e:	4770      	bx	lr
 8003490:	e000ed00 	.word	0xe000ed00
 8003494:	05fa0000 	.word	0x05fa0000

08003498 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_NVIC_SetPriority+0x70>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034aa:	f1be 0f04 	cmp.w	lr, #4
 80034ae:	bf28      	it	cs
 80034b0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b4:	f1bc 0f06 	cmp.w	ip, #6
 80034b8:	d91a      	bls.n	80034f0 <HAL_NVIC_SetPriority+0x58>
 80034ba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034bc:	f04f 3cff 	mov.w	ip, #4294967295
 80034c0:	fa0c fc03 	lsl.w	ip, ip, r3
 80034c4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80034cc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ce:	fa0c fc0e 	lsl.w	ip, ip, lr
 80034d2:	ea21 010c 	bic.w	r1, r1, ip
 80034d6:	fa01 f103 	lsl.w	r1, r1, r3
 80034da:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80034de:	db0a      	blt.n	80034f6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e0:	0109      	lsls	r1, r1, #4
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_NVIC_SetPriority+0x74>)
 80034e4:	b2c9      	uxtb	r1, r1
 80034e6:	4403      	add	r3, r0
 80034e8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80034ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80034f0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	4613      	mov	r3, r2
 80034f4:	e7e8      	b.n	80034c8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f6:	f000 000f 	and.w	r0, r0, #15
 80034fa:	0109      	lsls	r1, r1, #4
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_NVIC_SetPriority+0x78>)
 80034fe:	b2c9      	uxtb	r1, r1
 8003500:	4403      	add	r3, r0
 8003502:	7619      	strb	r1, [r3, #24]
 8003504:	f85d fb04 	ldr.w	pc, [sp], #4
 8003508:	e000ed00 	.word	0xe000ed00
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ecfc 	.word	0xe000ecfc

08003514 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003514:	2800      	cmp	r0, #0
 8003516:	db07      	blt.n	8003528 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003518:	2301      	movs	r3, #1
 800351a:	f000 011f 	and.w	r1, r0, #31
 800351e:	4a03      	ldr	r2, [pc, #12]	; (800352c <HAL_NVIC_EnableIRQ+0x18>)
 8003520:	0940      	lsrs	r0, r0, #5
 8003522:	408b      	lsls	r3, r1
 8003524:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100

08003530 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003530:	2800      	cmp	r0, #0
 8003532:	d05f      	beq.n	80035f4 <HAL_DMA_Abort_IT+0xc4>
{
 8003534:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003536:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800353a:	4603      	mov	r3, r0
 800353c:	2a02      	cmp	r2, #2
 800353e:	d155      	bne.n	80035ec <HAL_DMA_Abort_IT+0xbc>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003540:	6801      	ldr	r1, [r0, #0]
 8003542:	4a57      	ldr	r2, [pc, #348]	; (80036a0 <HAL_DMA_Abort_IT+0x170>)
 8003544:	4291      	cmp	r1, r2
 8003546:	d048      	beq.n	80035da <HAL_DMA_Abort_IT+0xaa>
 8003548:	3218      	adds	r2, #24
 800354a:	4291      	cmp	r1, r2
 800354c:	d045      	beq.n	80035da <HAL_DMA_Abort_IT+0xaa>
 800354e:	3230      	adds	r2, #48	; 0x30
 8003550:	4c54      	ldr	r4, [pc, #336]	; (80036a4 <HAL_DMA_Abort_IT+0x174>)
 8003552:	4855      	ldr	r0, [pc, #340]	; (80036a8 <HAL_DMA_Abort_IT+0x178>)
 8003554:	42a1      	cmp	r1, r4
 8003556:	bf18      	it	ne
 8003558:	4291      	cmpne	r1, r2
 800355a:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800355e:	bf0c      	ite	eq
 8003560:	2201      	moveq	r2, #1
 8003562:	2200      	movne	r2, #0
 8003564:	4281      	cmp	r1, r0
 8003566:	bf08      	it	eq
 8003568:	f042 0201 	orreq.w	r2, r2, #1
 800356c:	3030      	adds	r0, #48	; 0x30
 800356e:	42a1      	cmp	r1, r4
 8003570:	bf08      	it	eq
 8003572:	f042 0201 	orreq.w	r2, r2, #1
 8003576:	3430      	adds	r4, #48	; 0x30
 8003578:	4281      	cmp	r1, r0
 800357a:	bf08      	it	eq
 800357c:	f042 0201 	orreq.w	r2, r2, #1
 8003580:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003584:	42a1      	cmp	r1, r4
 8003586:	bf08      	it	eq
 8003588:	f042 0201 	orreq.w	r2, r2, #1
 800358c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003590:	4281      	cmp	r1, r0
 8003592:	bf08      	it	eq
 8003594:	f042 0201 	orreq.w	r2, r2, #1
 8003598:	3030      	adds	r0, #48	; 0x30
 800359a:	42a1      	cmp	r1, r4
 800359c:	bf08      	it	eq
 800359e:	f042 0201 	orreq.w	r2, r2, #1
 80035a2:	3430      	adds	r4, #48	; 0x30
 80035a4:	4281      	cmp	r1, r0
 80035a6:	bf08      	it	eq
 80035a8:	f042 0201 	orreq.w	r2, r2, #1
 80035ac:	3030      	adds	r0, #48	; 0x30
 80035ae:	42a1      	cmp	r1, r4
 80035b0:	bf08      	it	eq
 80035b2:	f042 0201 	orreq.w	r2, r2, #1
 80035b6:	3430      	adds	r4, #48	; 0x30
 80035b8:	4281      	cmp	r1, r0
 80035ba:	bf08      	it	eq
 80035bc:	f042 0201 	orreq.w	r2, r2, #1
 80035c0:	3030      	adds	r0, #48	; 0x30
 80035c2:	42a1      	cmp	r1, r4
 80035c4:	bf08      	it	eq
 80035c6:	f042 0201 	orreq.w	r2, r2, #1
 80035ca:	4281      	cmp	r1, r0
 80035cc:	bf08      	it	eq
 80035ce:	f042 0201 	orreq.w	r2, r2, #1
 80035d2:	b912      	cbnz	r2, 80035da <HAL_DMA_Abort_IT+0xaa>
 80035d4:	4a35      	ldr	r2, [pc, #212]	; (80036ac <HAL_DMA_Abort_IT+0x17c>)
 80035d6:	4291      	cmp	r1, r2
 80035d8:	d10e      	bne.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80035da:	2204      	movs	r2, #4
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 80035dc:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80035e2:	680b      	ldr	r3, [r1, #0]
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	600b      	str	r3, [r1, #0]
}
 80035ea:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ec:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80035ee:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
}
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80035f4:	2001      	movs	r0, #1
}
 80035f6:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035f8:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <HAL_DMA_Abort_IT+0x180>)
 80035fa:	4d2e      	ldr	r5, [pc, #184]	; (80036b4 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035fc:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035fe:	42a9      	cmp	r1, r5
 8003600:	bf18      	it	ne
 8003602:	4291      	cmpne	r1, r2
 8003604:	4c2c      	ldr	r4, [pc, #176]	; (80036b8 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003606:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800360a:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800360e:	bf0c      	ite	eq
 8003610:	2201      	moveq	r2, #1
 8003612:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003614:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003616:	42a1      	cmp	r1, r4
 8003618:	bf08      	it	eq
 800361a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800361e:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003620:	3428      	adds	r4, #40	; 0x28
 8003622:	42a9      	cmp	r1, r5
 8003624:	bf08      	it	eq
 8003626:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800362a:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800362e:	42a1      	cmp	r1, r4
 8003630:	bf08      	it	eq
 8003632:	f042 0201 	orreq.w	r2, r2, #1
 8003636:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8003638:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800363a:	42a1      	cmp	r1, r4
 800363c:	bf08      	it	eq
 800363e:	f042 0201 	orreq.w	r2, r2, #1
 8003642:	481e      	ldr	r0, [pc, #120]	; (80036bc <HAL_DMA_Abort_IT+0x18c>)
 8003644:	4281      	cmp	r1, r0
 8003646:	bf08      	it	eq
 8003648:	f042 0201 	orreq.w	r2, r2, #1
 800364c:	b912      	cbnz	r2, 8003654 <HAL_DMA_Abort_IT+0x124>
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_DMA_Abort_IT+0x190>)
 8003650:	4291      	cmp	r1, r2
 8003652:	d117      	bne.n	8003684 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003654:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003656:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003658:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800365c:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800365e:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003662:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003666:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003668:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800366a:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800366c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800366e:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8003672:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003674:	b132      	cbz	r2, 8003684 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003676:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003678:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800367c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003680:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003682:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8003684:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8003686:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8003688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800368a:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800368e:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8003692:	b11a      	cbz	r2, 800369c <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8003694:	4618      	mov	r0, r3
 8003696:	4790      	blx	r2
  return HAL_OK;
 8003698:	4620      	mov	r0, r4
}
 800369a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800369c:	4610      	mov	r0, r2
}
 800369e:	bd38      	pop	{r3, r4, r5, pc}
 80036a0:	40020010 	.word	0x40020010
 80036a4:	40020040 	.word	0x40020040
 80036a8:	40020070 	.word	0x40020070
 80036ac:	400204b8 	.word	0x400204b8
 80036b0:	5802541c 	.word	0x5802541c
 80036b4:	58025408 	.word	0x58025408
 80036b8:	58025430 	.word	0x58025430
 80036bc:	58025480 	.word	0x58025480
 80036c0:	58025494 	.word	0x58025494

080036c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036c8:	680c      	ldr	r4, [r1, #0]
{
 80036ca:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036cc:	2c00      	cmp	r4, #0
 80036ce:	f000 80a6 	beq.w	800381e <HAL_GPIO_Init+0x15a>
 80036d2:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d6:	4f8e      	ldr	r7, [pc, #568]	; (8003910 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 80036d8:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036da:	2201      	movs	r2, #1
 80036dc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80036de:	ea12 0e04 	ands.w	lr, r2, r4
 80036e2:	f000 8095 	beq.w	8003810 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036e6:	684d      	ldr	r5, [r1, #4]
 80036e8:	f005 0903 	and.w	r9, r5, #3
 80036ec:	f109 36ff 	add.w	r6, r9, #4294967295
 80036f0:	2e01      	cmp	r6, #1
 80036f2:	f240 8097 	bls.w	8003824 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f6:	f1b9 0f03 	cmp.w	r9, #3
 80036fa:	f040 80d1 	bne.w	80038a0 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036fe:	fa09 f20c 	lsl.w	r2, r9, ip
 8003702:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8003706:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003708:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800370c:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003710:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8003714:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003716:	d07b      	beq.n	8003810 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003718:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800371c:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003720:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003724:	f042 0202 	orr.w	r2, r2, #2
 8003728:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800372c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003730:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003734:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8003738:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800373c:	f002 0202 	and.w	r2, r2, #2
 8003740:	9201      	str	r2, [sp, #4]
 8003742:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003744:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8003746:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800374a:	fa02 f209 	lsl.w	r2, r2, r9
 800374e:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003752:	4e70      	ldr	r6, [pc, #448]	; (8003914 <HAL_GPIO_Init+0x250>)
 8003754:	42b0      	cmp	r0, r6
 8003756:	d029      	beq.n	80037ac <HAL_GPIO_Init+0xe8>
 8003758:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800375c:	42b0      	cmp	r0, r6
 800375e:	f000 80ac 	beq.w	80038ba <HAL_GPIO_Init+0x1f6>
 8003762:	4e6d      	ldr	r6, [pc, #436]	; (8003918 <HAL_GPIO_Init+0x254>)
 8003764:	42b0      	cmp	r0, r6
 8003766:	f000 80ae 	beq.w	80038c6 <HAL_GPIO_Init+0x202>
 800376a:	4e6c      	ldr	r6, [pc, #432]	; (800391c <HAL_GPIO_Init+0x258>)
 800376c:	42b0      	cmp	r0, r6
 800376e:	f000 809e 	beq.w	80038ae <HAL_GPIO_Init+0x1ea>
 8003772:	4e6b      	ldr	r6, [pc, #428]	; (8003920 <HAL_GPIO_Init+0x25c>)
 8003774:	42b0      	cmp	r0, r6
 8003776:	f000 80b2 	beq.w	80038de <HAL_GPIO_Init+0x21a>
 800377a:	4e6a      	ldr	r6, [pc, #424]	; (8003924 <HAL_GPIO_Init+0x260>)
 800377c:	42b0      	cmp	r0, r6
 800377e:	f000 80b4 	beq.w	80038ea <HAL_GPIO_Init+0x226>
 8003782:	4e69      	ldr	r6, [pc, #420]	; (8003928 <HAL_GPIO_Init+0x264>)
 8003784:	42b0      	cmp	r0, r6
 8003786:	f000 80a4 	beq.w	80038d2 <HAL_GPIO_Init+0x20e>
 800378a:	4e68      	ldr	r6, [pc, #416]	; (800392c <HAL_GPIO_Init+0x268>)
 800378c:	42b0      	cmp	r0, r6
 800378e:	f000 80b2 	beq.w	80038f6 <HAL_GPIO_Init+0x232>
 8003792:	4e67      	ldr	r6, [pc, #412]	; (8003930 <HAL_GPIO_Init+0x26c>)
 8003794:	42b0      	cmp	r0, r6
 8003796:	f000 80b4 	beq.w	8003902 <HAL_GPIO_Init+0x23e>
 800379a:	4e66      	ldr	r6, [pc, #408]	; (8003934 <HAL_GPIO_Init+0x270>)
 800379c:	42b0      	cmp	r0, r6
 800379e:	bf0c      	ite	eq
 80037a0:	2609      	moveq	r6, #9
 80037a2:	260a      	movne	r6, #10
 80037a4:	fa06 f909 	lsl.w	r9, r6, r9
 80037a8:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ac:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b4:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80037b6:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 80037ba:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80037bc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80037c0:	bf54      	ite	pl
 80037c2:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80037c6:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 80037ca:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037cc:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 80037ce:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80037d4:	bf54      	ite	pl
 80037d6:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80037da:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 80037de:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037e0:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e4:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80037ea:	bf54      	ite	pl
 80037ec:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80037f0:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037f4:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037f6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80037fa:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80037fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8003802:	bf54      	ite	pl
 8003804:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8003808:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800380c:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8003810:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003812:	f10c 0c02 	add.w	ip, ip, #2
 8003816:	fa34 f203 	lsrs.w	r2, r4, r3
 800381a:	f47f af5e 	bne.w	80036da <HAL_GPIO_Init+0x16>
  }
}
 800381e:	b003      	add	sp, #12
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003824:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8003828:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800382a:	fa08 f80c 	lsl.w	r8, r8, ip
 800382e:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003832:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003834:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003838:	fa06 f60c 	lsl.w	r6, r6, ip
 800383c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8003840:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003842:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003846:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800384c:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003850:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8003852:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003854:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003856:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385a:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800385c:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003860:	fa06 f60c 	lsl.w	r6, r6, ip
 8003864:	ea46 0602 	orr.w	r6, r6, r2
 8003868:	fa09 f20c 	lsl.w	r2, r9, ip
      GPIOx->PUPDR = temp;
 800386c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386e:	f47f af4a 	bne.w	8003706 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003872:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003876:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800387a:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800387e:	260f      	movs	r6, #15
 8003880:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8003884:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8003888:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800388c:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003890:	690e      	ldr	r6, [r1, #16]
 8003892:	fa06 f60b 	lsl.w	r6, r6, fp
 8003896:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 800389a:	f8c9 6020 	str.w	r6, [r9, #32]
 800389e:	e732      	b.n	8003706 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038a0:	f04f 0803 	mov.w	r8, #3
 80038a4:	fa08 f80c 	lsl.w	r8, r8, ip
 80038a8:	ea6f 0808 	mvn.w	r8, r8
 80038ac:	e7d2      	b.n	8003854 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038ae:	2603      	movs	r6, #3
 80038b0:	fa06 f909 	lsl.w	r9, r6, r9
 80038b4:	ea42 0209 	orr.w	r2, r2, r9
 80038b8:	e778      	b.n	80037ac <HAL_GPIO_Init+0xe8>
 80038ba:	2601      	movs	r6, #1
 80038bc:	fa06 f909 	lsl.w	r9, r6, r9
 80038c0:	ea42 0209 	orr.w	r2, r2, r9
 80038c4:	e772      	b.n	80037ac <HAL_GPIO_Init+0xe8>
 80038c6:	2602      	movs	r6, #2
 80038c8:	fa06 f909 	lsl.w	r9, r6, r9
 80038cc:	ea42 0209 	orr.w	r2, r2, r9
 80038d0:	e76c      	b.n	80037ac <HAL_GPIO_Init+0xe8>
 80038d2:	2606      	movs	r6, #6
 80038d4:	fa06 f909 	lsl.w	r9, r6, r9
 80038d8:	ea42 0209 	orr.w	r2, r2, r9
 80038dc:	e766      	b.n	80037ac <HAL_GPIO_Init+0xe8>
 80038de:	2604      	movs	r6, #4
 80038e0:	fa06 f909 	lsl.w	r9, r6, r9
 80038e4:	ea42 0209 	orr.w	r2, r2, r9
 80038e8:	e760      	b.n	80037ac <HAL_GPIO_Init+0xe8>
 80038ea:	2605      	movs	r6, #5
 80038ec:	fa06 f909 	lsl.w	r9, r6, r9
 80038f0:	ea42 0209 	orr.w	r2, r2, r9
 80038f4:	e75a      	b.n	80037ac <HAL_GPIO_Init+0xe8>
 80038f6:	2607      	movs	r6, #7
 80038f8:	fa06 f909 	lsl.w	r9, r6, r9
 80038fc:	ea42 0209 	orr.w	r2, r2, r9
 8003900:	e754      	b.n	80037ac <HAL_GPIO_Init+0xe8>
 8003902:	2608      	movs	r6, #8
 8003904:	fa06 f909 	lsl.w	r9, r6, r9
 8003908:	ea42 0209 	orr.w	r2, r2, r9
 800390c:	e74e      	b.n	80037ac <HAL_GPIO_Init+0xe8>
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
 8003914:	58020000 	.word	0x58020000
 8003918:	58020800 	.word	0x58020800
 800391c:	58020c00 	.word	0x58020c00
 8003920:	58021000 	.word	0x58021000
 8003924:	58021400 	.word	0x58021400
 8003928:	58021800 	.word	0x58021800
 800392c:	58021c00 	.word	0x58021c00
 8003930:	58022000 	.word	0x58022000
 8003934:	58022400 	.word	0x58022400

08003938 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003938:	6903      	ldr	r3, [r0, #16]
 800393a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800393c:	bf14      	ite	ne
 800393e:	2001      	movne	r0, #1
 8003940:	2000      	moveq	r0, #0
 8003942:	4770      	bx	lr

08003944 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003944:	b902      	cbnz	r2, 8003948 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003946:	0409      	lsls	r1, r1, #16
 8003948:	6181      	str	r1, [r0, #24]
  }
}
 800394a:	4770      	bx	lr

0800394c <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800394c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003950:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8003954:	4201      	tst	r1, r0
 8003956:	d100      	bne.n	800395a <HAL_GPIO_EXTI_IRQHandler+0xe>
 8003958:	4770      	bx	lr
{
 800395a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800395c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003960:	f7fe f8fc 	bl	8001b5c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003964:	bd08      	pop	{r3, pc}
 8003966:	bf00      	nop

08003968 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003968:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800396a:	4c10      	ldr	r4, [pc, #64]	; (80039ac <HAL_PWREx_ConfigSupply+0x44>)
 800396c:	68e3      	ldr	r3, [r4, #12]
 800396e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003972:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003974:	d105      	bne.n	8003982 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003976:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800397a:	1a18      	subs	r0, r3, r0
 800397c:	bf18      	it	ne
 800397e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003980:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003982:	f023 0307 	bic.w	r3, r3, #7
 8003986:	4318      	orrs	r0, r3
 8003988:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800398a:	f7ff fd55 	bl	8003438 <HAL_GetTick>
 800398e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003990:	e005      	b.n	800399e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003992:	f7ff fd51 	bl	8003438 <HAL_GetTick>
 8003996:	1b40      	subs	r0, r0, r5
 8003998:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800399c:	d804      	bhi.n	80039a8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800399e:	6863      	ldr	r3, [r4, #4]
 80039a0:	049b      	lsls	r3, r3, #18
 80039a2:	d5f6      	bpl.n	8003992 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 80039a4:	2000      	movs	r0, #0
}
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80039a8:	2001      	movs	r0, #1
}
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	58024800 	.word	0x58024800

080039b0 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039b0:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80039b2:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039b8:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80039ba:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039be:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039c0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80039c4:	d038      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039c6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039ca:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ce:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039d2:	fb05 f101 	mul.w	r1, r5, r1
 80039d6:	2a01      	cmp	r2, #1
 80039d8:	ee07 1a90 	vmov	s15, r1
 80039dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80039e2:	2a02      	cmp	r2, #2
 80039e4:	d04e      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80039e6:	b34a      	cbz	r2, 8003a3c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e8:	ee07 0a90 	vmov	s15, r0
 80039ec:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003aa4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80039f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80039fa:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8003aa8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80039fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a02:	ee06 3a90 	vmov	s13, r3
 8003a06:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003a0a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003a0e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003a12:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003a16:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a1a:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003a22:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a34:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003a38:	bc30      	pop	{r4, r5}
 8003a3a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	0692      	lsls	r2, r2, #26
 8003a40:	d527      	bpl.n	8003a92 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a42:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a44:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a48:	4a18      	ldr	r2, [pc, #96]	; (8003aac <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a50:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a58:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8003aa8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8003a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a60:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a62:	ee06 3a90 	vmov	s13, r3
 8003a66:	ee05 2a90 	vmov	s11, r2
 8003a6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003a6e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003a72:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003a76:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003a7a:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003a7e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003a82:	e7ca      	b.n	8003a1a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a84:	ee07 0a90 	vmov	s15, r0
 8003a88:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003ab0 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8003a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a90:	e7b0      	b.n	80039f4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a92:	ee07 0a90 	vmov	s15, r0
 8003a96:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003ab4 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8003a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a9e:	e7a9      	b.n	80039f4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	4a742400 	.word	0x4a742400
 8003aa8:	39000000 	.word	0x39000000
 8003aac:	03d09000 	.word	0x03d09000
 8003ab0:	4bbebc20 	.word	0x4bbebc20
 8003ab4:	4c742400 	.word	0x4c742400

08003ab8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	f000 81e8 	beq.w	8003e8e <HAL_RCC_OscConfig+0x3d6>
{
 8003abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac0:	6803      	ldr	r3, [r0, #0]
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	07d9      	lsls	r1, r3, #31
 8003ac6:	d52e      	bpl.n	8003b26 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac8:	49a4      	ldr	r1, [pc, #656]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003aca:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003acc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ad2:	2a10      	cmp	r2, #16
 8003ad4:	f000 8107 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x22e>
 8003ad8:	2a18      	cmp	r2, #24
 8003ada:	f000 80ff 	beq.w	8003cdc <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ade:	6863      	ldr	r3, [r4, #4]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	f000 812a 	beq.w	8003d3c <HAL_RCC_OscConfig+0x284>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8168 	beq.w	8003dbe <HAL_RCC_OscConfig+0x306>
 8003aee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af2:	4b9a      	ldr	r3, [pc, #616]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	f000 8289 	beq.w	800400c <HAL_RCC_OscConfig+0x554>
 8003afa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b08:	f7ff fc96 	bl	8003438 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b0c:	4e93      	ldr	r6, [pc, #588]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8003b0e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b10:	e005      	b.n	8003b1e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b12:	f7ff fc91 	bl	8003438 <HAL_GetTick>
 8003b16:	1b40      	subs	r0, r0, r5
 8003b18:	2864      	cmp	r0, #100	; 0x64
 8003b1a:	f200 814e 	bhi.w	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b1e:	6833      	ldr	r3, [r6, #0]
 8003b20:	039b      	lsls	r3, r3, #14
 8003b22:	d5f6      	bpl.n	8003b12 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	079d      	lsls	r5, r3, #30
 8003b28:	f100 808a 	bmi.w	8003c40 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b2c:	06d9      	lsls	r1, r3, #27
 8003b2e:	d533      	bpl.n	8003b98 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b30:	4a8a      	ldr	r2, [pc, #552]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003b32:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b34:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	f000 80e3 	beq.w	8003d06 <HAL_RCC_OscConfig+0x24e>
 8003b40:	2b18      	cmp	r3, #24
 8003b42:	f000 80db 	beq.w	8003cfc <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b46:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8003b48:	4d84      	ldr	r5, [pc, #528]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 816f 	beq.w	8003e2e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b58:	f7ff fc6e 	bl	8003438 <HAL_GetTick>
 8003b5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b5e:	e005      	b.n	8003b6c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b60:	f7ff fc6a 	bl	8003438 <HAL_GetTick>
 8003b64:	1b80      	subs	r0, r0, r6
 8003b66:	2802      	cmp	r0, #2
 8003b68:	f200 8127 	bhi.w	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	05db      	lsls	r3, r3, #23
 8003b70:	d5f6      	bpl.n	8003b60 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b72:	f7ff fc79 	bl	8003468 <HAL_GetREVID>
 8003b76:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b7a:	4298      	cmp	r0, r3
 8003b7c:	f200 826d 	bhi.w	800405a <HAL_RCC_OscConfig+0x5a2>
 8003b80:	6a22      	ldr	r2, [r4, #32]
 8003b82:	686b      	ldr	r3, [r5, #4]
 8003b84:	2a20      	cmp	r2, #32
 8003b86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b8a:	bf0c      	ite	eq
 8003b8c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003b90:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003b94:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	071d      	lsls	r5, r3, #28
 8003b9a:	d516      	bpl.n	8003bca <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b9c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003b9e:	4d6f      	ldr	r5, [pc, #444]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8122 	beq.w	8003dea <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003bae:	f7ff fc43 	bl	8003438 <HAL_GetTick>
 8003bb2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7ff fc3f 	bl	8003438 <HAL_GetTick>
 8003bba:	1b80      	subs	r0, r0, r6
 8003bbc:	2802      	cmp	r0, #2
 8003bbe:	f200 80fc 	bhi.w	8003dba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bc2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003bc4:	0798      	lsls	r0, r3, #30
 8003bc6:	d5f6      	bpl.n	8003bb6 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	069a      	lsls	r2, r3, #26
 8003bcc:	d516      	bpl.n	8003bfc <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bce:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003bd0:	4d62      	ldr	r5, [pc, #392]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 811a 	beq.w	8003e0c <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bde:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003be0:	f7ff fc2a 	bl	8003438 <HAL_GetTick>
 8003be4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003be6:	e005      	b.n	8003bf4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be8:	f7ff fc26 	bl	8003438 <HAL_GetTick>
 8003bec:	1b80      	subs	r0, r0, r6
 8003bee:	2802      	cmp	r0, #2
 8003bf0:	f200 80e3 	bhi.w	8003dba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	049f      	lsls	r7, r3, #18
 8003bf8:	d5f6      	bpl.n	8003be8 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	0759      	lsls	r1, r3, #29
 8003bfe:	f100 80a3 	bmi.w	8003d48 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c04:	b1d0      	cbz	r0, 8003c3c <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c06:	4d55      	ldr	r5, [pc, #340]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003c08:	692b      	ldr	r3, [r5, #16]
 8003c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c0e:	2b18      	cmp	r3, #24
 8003c10:	f000 81ae 	beq.w	8003f70 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8003c14:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c16:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1e:	f000 8142 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8003c22:	f7ff fc09 	bl	8003438 <HAL_GetTick>
 8003c26:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c28:	e005      	b.n	8003c36 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7ff fc05 	bl	8003438 <HAL_GetTick>
 8003c2e:	1b00      	subs	r0, r0, r4
 8003c30:	2802      	cmp	r0, #2
 8003c32:	f200 80c2 	bhi.w	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	d4f6      	bmi.n	8003c2a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8003c3c:	2000      	movs	r0, #0
}
 8003c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c40:	4a46      	ldr	r2, [pc, #280]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003c42:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c44:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c46:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003c4a:	d12d      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4c:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003c4e:	68e2      	ldr	r2, [r4, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	0759      	lsls	r1, r3, #29
 8003c54:	d501      	bpl.n	8003c5a <HAL_RCC_OscConfig+0x1a2>
 8003c56:	2a00      	cmp	r2, #0
 8003c58:	d04e      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c5a:	4d40      	ldr	r5, [pc, #256]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	f023 0319 	bic.w	r3, r3, #25
 8003c62:	4313      	orrs	r3, r2
 8003c64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c66:	f7ff fbe7 	bl	8003438 <HAL_GetTick>
 8003c6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c6c:	e005      	b.n	8003c7a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7ff fbe3 	bl	8003438 <HAL_GetTick>
 8003c72:	1b80      	subs	r0, r0, r6
 8003c74:	2802      	cmp	r0, #2
 8003c76:	f200 80a0 	bhi.w	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	075b      	lsls	r3, r3, #29
 8003c7e:	d5f6      	bpl.n	8003c6e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	f7ff fbf2 	bl	8003468 <HAL_GetREVID>
 8003c84:	f241 0303 	movw	r3, #4099	; 0x1003
 8003c88:	4298      	cmp	r0, r3
 8003c8a:	f200 80f7 	bhi.w	8003e7c <HAL_RCC_OscConfig+0x3c4>
 8003c8e:	6922      	ldr	r2, [r4, #16]
 8003c90:	686b      	ldr	r3, [r5, #4]
 8003c92:	2a40      	cmp	r2, #64	; 0x40
 8003c94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c98:	bf0c      	ite	eq
 8003c9a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8003c9e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003ca2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	e741      	b.n	8003b2c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ca8:	2b18      	cmp	r3, #24
 8003caa:	f000 80e3 	beq.w	8003e74 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cae:	4d2b      	ldr	r5, [pc, #172]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cb0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cb2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cb4:	2a00      	cmp	r2, #0
 8003cb6:	f000 80cc 	beq.w	8003e52 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cba:	f023 0319 	bic.w	r3, r3, #25
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cc2:	f7ff fbb9 	bl	8003438 <HAL_GetTick>
 8003cc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cc8:	e004      	b.n	8003cd4 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cca:	f7ff fbb5 	bl	8003438 <HAL_GetTick>
 8003cce:	1b80      	subs	r0, r0, r6
 8003cd0:	2802      	cmp	r0, #2
 8003cd2:	d872      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	075f      	lsls	r7, r3, #29
 8003cd8:	d5f7      	bpl.n	8003cca <HAL_RCC_OscConfig+0x212>
 8003cda:	e7d1      	b.n	8003c80 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cdc:	f001 0103 	and.w	r1, r1, #3
 8003ce0:	2902      	cmp	r1, #2
 8003ce2:	f47f aefc 	bne.w	8003ade <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce6:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	0392      	lsls	r2, r2, #14
 8003cec:	f57f af1b 	bpl.w	8003b26 <HAL_RCC_OscConfig+0x6e>
 8003cf0:	6862      	ldr	r2, [r4, #4]
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	f47f af17 	bne.w	8003b26 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8003cf8:	2001      	movs	r0, #1
}
 8003cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cfc:	f002 0203 	and.w	r2, r2, #3
 8003d00:	2a01      	cmp	r2, #1
 8003d02:	f47f af20 	bne.w	8003b46 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	05da      	lsls	r2, r3, #23
 8003d0c:	d502      	bpl.n	8003d14 <HAL_RCC_OscConfig+0x25c>
 8003d0e:	69e3      	ldr	r3, [r4, #28]
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d1f1      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d14:	f7ff fba8 	bl	8003468 <HAL_GetREVID>
 8003d18:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d1c:	4298      	cmp	r0, r3
 8003d1e:	f200 80b8 	bhi.w	8003e92 <HAL_RCC_OscConfig+0x3da>
 8003d22:	6a22      	ldr	r2, [r4, #32]
 8003d24:	2a20      	cmp	r2, #32
 8003d26:	f000 81a7 	beq.w	8004078 <HAL_RCC_OscConfig+0x5c0>
 8003d2a:	490c      	ldr	r1, [pc, #48]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003d2c:	684b      	ldr	r3, [r1, #4]
 8003d2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d32:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003d36:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	e72d      	b.n	8003b98 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3c:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <HAL_RCC_OscConfig+0x2a4>)
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e6df      	b.n	8003b08 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8003d48:	4d05      	ldr	r5, [pc, #20]	; (8003d60 <HAL_RCC_OscConfig+0x2a8>)
 8003d4a:	682b      	ldr	r3, [r5, #0]
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003d52:	f7ff fb71 	bl	8003438 <HAL_GetTick>
 8003d56:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d58:	e009      	b.n	8003d6e <HAL_RCC_OscConfig+0x2b6>
 8003d5a:	bf00      	nop
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d64:	f7ff fb68 	bl	8003438 <HAL_GetTick>
 8003d68:	1b80      	subs	r0, r0, r6
 8003d6a:	2864      	cmp	r0, #100	; 0x64
 8003d6c:	d825      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	05da      	lsls	r2, r3, #23
 8003d72:	d5f7      	bpl.n	8003d64 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d74:	68a3      	ldr	r3, [r4, #8]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	f000 8178 	beq.w	800406c <HAL_RCC_OscConfig+0x5b4>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8153 	beq.w	8004028 <HAL_RCC_OscConfig+0x570>
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	4ba5      	ldr	r3, [pc, #660]	; (800401c <HAL_RCC_OscConfig+0x564>)
 8003d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d88:	f000 817f 	beq.w	800408a <HAL_RCC_OscConfig+0x5d2>
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	671a      	str	r2, [r3, #112]	; 0x70
 8003d92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d94:	f022 0204 	bic.w	r2, r2, #4
 8003d98:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003d9a:	f7ff fb4d 	bl	8003438 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d9e:	4e9f      	ldr	r6, [pc, #636]	; (800401c <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003da4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003da6:	e004      	b.n	8003db2 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7ff fb46 	bl	8003438 <HAL_GetTick>
 8003dac:	1b40      	subs	r0, r0, r5
 8003dae:	42b8      	cmp	r0, r7
 8003db0:	d803      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003db4:	079b      	lsls	r3, r3, #30
 8003db6:	d5f7      	bpl.n	8003da8 <HAL_RCC_OscConfig+0x2f0>
 8003db8:	e723      	b.n	8003c02 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8003dba:	2003      	movs	r0, #3
}
 8003dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbe:	4d97      	ldr	r5, [pc, #604]	; (800401c <HAL_RCC_OscConfig+0x564>)
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dd0:	f7ff fb32 	bl	8003438 <HAL_GetTick>
 8003dd4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dd6:	e004      	b.n	8003de2 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7ff fb2e 	bl	8003438 <HAL_GetTick>
 8003ddc:	1b80      	subs	r0, r0, r6
 8003dde:	2864      	cmp	r0, #100	; 0x64
 8003de0:	d8eb      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	039f      	lsls	r7, r3, #14
 8003de6:	d4f7      	bmi.n	8003dd8 <HAL_RCC_OscConfig+0x320>
 8003de8:	e69c      	b.n	8003b24 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8003dea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003df2:	f7ff fb21 	bl	8003438 <HAL_GetTick>
 8003df6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003df8:	e004      	b.n	8003e04 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7ff fb1d 	bl	8003438 <HAL_GetTick>
 8003dfe:	1b80      	subs	r0, r0, r6
 8003e00:	2802      	cmp	r0, #2
 8003e02:	d8da      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e04:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003e06:	0799      	lsls	r1, r3, #30
 8003e08:	d4f7      	bmi.n	8003dfa <HAL_RCC_OscConfig+0x342>
 8003e0a:	e6dd      	b.n	8003bc8 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e12:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003e14:	f7ff fb10 	bl	8003438 <HAL_GetTick>
 8003e18:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e1a:	e004      	b.n	8003e26 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1c:	f7ff fb0c 	bl	8003438 <HAL_GetTick>
 8003e20:	1b80      	subs	r0, r0, r6
 8003e22:	2802      	cmp	r0, #2
 8003e24:	d8c9      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	0498      	lsls	r0, r3, #18
 8003e2a:	d4f7      	bmi.n	8003e1c <HAL_RCC_OscConfig+0x364>
 8003e2c:	e6e5      	b.n	8003bfa <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e36:	f7ff faff 	bl	8003438 <HAL_GetTick>
 8003e3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e3c:	e004      	b.n	8003e48 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e3e:	f7ff fafb 	bl	8003438 <HAL_GetTick>
 8003e42:	1b80      	subs	r0, r0, r6
 8003e44:	2802      	cmp	r0, #2
 8003e46:	d8b8      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	05df      	lsls	r7, r3, #23
 8003e4c:	d4f7      	bmi.n	8003e3e <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	e6a2      	b.n	8003b98 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e58:	f7ff faee 	bl	8003438 <HAL_GetTick>
 8003e5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e5e:	e004      	b.n	8003e6a <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e60:	f7ff faea 	bl	8003438 <HAL_GetTick>
 8003e64:	1b80      	subs	r0, r0, r6
 8003e66:	2802      	cmp	r0, #2
 8003e68:	d8a7      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e6a:	682b      	ldr	r3, [r5, #0]
 8003e6c:	0758      	lsls	r0, r3, #29
 8003e6e:	d4f7      	bmi.n	8003e60 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	e65b      	b.n	8003b2c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e74:	0790      	lsls	r0, r2, #30
 8003e76:	f47f af1a 	bne.w	8003cae <HAL_RCC_OscConfig+0x1f6>
 8003e7a:	e6e7      	b.n	8003c4c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7c:	686b      	ldr	r3, [r5, #4]
 8003e7e:	6922      	ldr	r2, [r4, #16]
 8003e80:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e88:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	e64e      	b.n	8003b2c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8003e8e:	2001      	movs	r0, #1
}
 8003e90:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e92:	4a62      	ldr	r2, [pc, #392]	; (800401c <HAL_RCC_OscConfig+0x564>)
 8003e94:	6a21      	ldr	r1, [r4, #32]
 8003e96:	68d3      	ldr	r3, [r2, #12]
 8003e98:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003e9c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ea0:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	e678      	b.n	8003b98 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8003ea6:	f7ff fac7 	bl	8003438 <HAL_GetTick>
 8003eaa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eac:	e004      	b.n	8003eb8 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7ff fac3 	bl	8003438 <HAL_GetTick>
 8003eb2:	1b80      	subs	r0, r0, r6
 8003eb4:	2802      	cmp	r0, #2
 8003eb6:	d880      	bhi.n	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	0199      	lsls	r1, r3, #6
 8003ebc:	d4f7      	bmi.n	8003eae <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ebe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003ec0:	4b57      	ldr	r3, [pc, #348]	; (8004020 <HAL_RCC_OscConfig+0x568>)
 8003ec2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ec4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ec6:	4957      	ldr	r1, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ec8:	4e54      	ldr	r6, [pc, #336]	; (800401c <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ece:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003ed2:	62ab      	str	r3, [r5, #40]	; 0x28
 8003ed4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	3a01      	subs	r2, #1
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	0412      	lsls	r2, r2, #16
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003eea:	3a01      	subs	r2, #1
 8003eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0612      	lsls	r2, r2, #24
 8003ef8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003efc:	4313      	orrs	r3, r2
 8003efe:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f08:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003f0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f0c:	4011      	ands	r1, r2
 8003f0e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003f12:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f14:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f18:	f023 030c 	bic.w	r3, r3, #12
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f22:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f24:	f023 0302 	bic.w	r3, r3, #2
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f2c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f32:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f42:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f54:	f7ff fa70 	bl	8003438 <HAL_GetTick>
 8003f58:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f5a:	e005      	b.n	8003f68 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7ff fa6c 	bl	8003438 <HAL_GetTick>
 8003f60:	1b00      	subs	r0, r0, r4
 8003f62:	2802      	cmp	r0, #2
 8003f64:	f63f af29 	bhi.w	8003dba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f68:	6833      	ldr	r3, [r6, #0]
 8003f6a:	019a      	lsls	r2, r3, #6
 8003f6c:	d5f6      	bpl.n	8003f5c <HAL_RCC_OscConfig+0x4a4>
 8003f6e:	e665      	b.n	8003c3c <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f70:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f72:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f74:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f76:	f43f ae62 	beq.w	8003c3e <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003f80:	428b      	cmp	r3, r1
 8003f82:	f47f aeb9 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f86:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	f47f aeb3 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f94:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8003f98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	f47f aeac 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fa2:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8003fa6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	f47f aea5 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fb0:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8003fb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	f47f ae9e 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fbe:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8003fc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fc4:	429e      	cmp	r6, r3
 8003fc6:	f47f ae97 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fcc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fce:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f43f ae32 	beq.w	8003c3c <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003fd8:	4a10      	ldr	r2, [pc, #64]	; (800401c <HAL_RCC_OscConfig+0x564>)
 8003fda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8003fe2:	f7ff fa29 	bl	8003438 <HAL_GetTick>
 8003fe6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003fe8:	f7ff fa26 	bl	8003438 <HAL_GetTick>
 8003fec:	42a8      	cmp	r0, r5
 8003fee:	d0fb      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	; (800401c <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 8003ff2:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_OscConfig+0x56c>)
 8003ff8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003ffa:	4023      	ands	r3, r4
 8003ffc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004000:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004002:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e575      	b.n	8003b08 <HAL_RCC_OscConfig+0x50>
 800401c:	58024400 	.word	0x58024400
 8004020:	fffffc0c 	.word	0xfffffc0c
 8004024:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004028:	4d1c      	ldr	r5, [pc, #112]	; (800409c <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	672b      	str	r3, [r5, #112]	; 0x70
 8004036:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800403e:	f7ff f9fb 	bl	8003438 <HAL_GetTick>
 8004042:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004044:	e005      	b.n	8004052 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7ff f9f7 	bl	8003438 <HAL_GetTick>
 800404a:	1b80      	subs	r0, r0, r6
 800404c:	42b8      	cmp	r0, r7
 800404e:	f63f aeb4 	bhi.w	8003dba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004052:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004054:	0798      	lsls	r0, r3, #30
 8004056:	d4f6      	bmi.n	8004046 <HAL_RCC_OscConfig+0x58e>
 8004058:	e5d3      	b.n	8003c02 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405a:	68eb      	ldr	r3, [r5, #12]
 800405c:	6a22      	ldr	r2, [r4, #32]
 800405e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004062:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004066:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	e595      	b.n	8003b98 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x5e4>)
 800406e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
 8004076:	e690      	b.n	8003d9a <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004078:	4a08      	ldr	r2, [pc, #32]	; (800409c <HAL_RCC_OscConfig+0x5e4>)
 800407a:	6853      	ldr	r3, [r2, #4]
 800407c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004084:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	e586      	b.n	8003b98 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408a:	f042 0204 	orr.w	r2, r2, #4
 800408e:	671a      	str	r2, [r3, #112]	; 0x70
 8004090:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	671a      	str	r2, [r3, #112]	; 0x70
 8004098:	e67f      	b.n	8003d9a <HAL_RCC_OscConfig+0x2e2>
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400

080040a0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a0:	4a47      	ldr	r2, [pc, #284]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x120>)
 80040a2:	6913      	ldr	r3, [r2, #16]
 80040a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d004      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x16>
 80040ac:	2b18      	cmp	r3, #24
 80040ae:	d00d      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x2c>
 80040b0:	b11b      	cbz	r3, 80040ba <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80040b2:	4844      	ldr	r0, [pc, #272]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x124>)
 80040b4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b6:	4844      	ldr	r0, [pc, #272]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x128>)
 80040b8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	0699      	lsls	r1, r3, #26
 80040be:	d54a      	bpl.n	8004156 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c0:	6813      	ldr	r3, [r2, #0]
 80040c2:	4842      	ldr	r0, [pc, #264]	; (80041cc <HAL_RCC_GetSysClockFreq+0x12c>)
 80040c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80040c8:	40d8      	lsrs	r0, r3
 80040ca:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80040ce:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80040d0:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040d2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 80040d4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80040d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80040da:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80040de:	d038      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80040e0:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040e4:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040e8:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80040ec:	fb05 f101 	mul.w	r1, r5, r1
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	ee07 1a90 	vmov	s15, r1
 80040f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040fa:	d002      	beq.n	8004102 <HAL_RCC_GetSysClockFreq+0x62>
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d02c      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0xba>
 8004100:	b393      	cbz	r3, 8004168 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004102:	ee07 0a90 	vmov	s15, r0
 8004106:	eddf 6a32 	vldr	s13, [pc, #200]	; 80041d0 <HAL_RCC_GetSysClockFreq+0x130>
 800410a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800410e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004110:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8004114:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80041d4 <HAL_RCC_GetSysClockFreq+0x134>
 8004118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411c:	ee06 3a90 	vmov	s13, r3
 8004120:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004124:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004128:	ee76 6a85 	vadd.f32	s13, s13, s10
 800412c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004130:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x120>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800413c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800414a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414e:	ee17 0a90 	vmov	r0, s15
}
 8004152:	bc30      	pop	{r4, r5}
 8004154:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004156:	481d      	ldr	r0, [pc, #116]	; (80041cc <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8004158:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800415a:	ee07 0a90 	vmov	s15, r0
 800415e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80041d8 <HAL_RCC_GetSysClockFreq+0x138>
 8004162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004166:	e7d2      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004168:	6813      	ldr	r3, [r2, #0]
 800416a:	069b      	lsls	r3, r3, #26
 800416c:	d520      	bpl.n	80041b0 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800416e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004170:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004174:	4915      	ldr	r1, [pc, #84]	; (80041cc <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004176:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800417a:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800417c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004184:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80041d4 <HAL_RCC_GetSysClockFreq+0x134>
 8004188:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800418c:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800418e:	ee06 3a90 	vmov	s13, r3
 8004192:	ee05 1a90 	vmov	s11, r1
 8004196:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800419a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800419e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80041a2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80041a6:	eee7 6a05 	vfma.f32	s13, s14, s10
 80041aa:	ee66 6a26 	vmul.f32	s13, s12, s13
 80041ae:	e7c1      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041b0:	ee07 0a90 	vmov	s15, r0
 80041b4:	eddf 6a09 	vldr	s13, [pc, #36]	; 80041dc <HAL_RCC_GetSysClockFreq+0x13c>
 80041b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041bc:	e7a7      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x6e>
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400
 80041c4:	003d0900 	.word	0x003d0900
 80041c8:	017d7840 	.word	0x017d7840
 80041cc:	03d09000 	.word	0x03d09000
 80041d0:	4a742400 	.word	0x4a742400
 80041d4:	39000000 	.word	0x39000000
 80041d8:	4bbebc20 	.word	0x4bbebc20
 80041dc:	4c742400 	.word	0x4c742400

080041e0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80041e0:	2800      	cmp	r0, #0
 80041e2:	f000 810c 	beq.w	80043fe <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e6:	4a8c      	ldr	r2, [pc, #560]	; (8004418 <HAL_RCC_ClockConfig+0x238>)
 80041e8:	6813      	ldr	r3, [r2, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	428b      	cmp	r3, r1
{
 80041f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f4:	4604      	mov	r4, r0
 80041f6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f8:	d20c      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	f023 030f 	bic.w	r3, r3, #15
 8004200:	430b      	orrs	r3, r1
 8004202:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	428b      	cmp	r3, r1
 800420c:	d002      	beq.n	8004214 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800420e:	2001      	movs	r0, #1
}
 8004210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	075f      	lsls	r7, r3, #29
 8004218:	d50b      	bpl.n	8004232 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800421a:	4980      	ldr	r1, [pc, #512]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 800421c:	6920      	ldr	r0, [r4, #16]
 800421e:	698a      	ldr	r2, [r1, #24]
 8004220:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004224:	4290      	cmp	r0, r2
 8004226:	d904      	bls.n	8004232 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004228:	698a      	ldr	r2, [r1, #24]
 800422a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800422e:	4302      	orrs	r2, r0
 8004230:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004232:	071e      	lsls	r6, r3, #28
 8004234:	d50b      	bpl.n	800424e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004236:	4979      	ldr	r1, [pc, #484]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 8004238:	6960      	ldr	r0, [r4, #20]
 800423a:	69ca      	ldr	r2, [r1, #28]
 800423c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004240:	4290      	cmp	r0, r2
 8004242:	d904      	bls.n	800424e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004244:	69ca      	ldr	r2, [r1, #28]
 8004246:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800424a:	4302      	orrs	r2, r0
 800424c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	06d8      	lsls	r0, r3, #27
 8004250:	d50b      	bpl.n	800426a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004252:	4972      	ldr	r1, [pc, #456]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 8004254:	69a0      	ldr	r0, [r4, #24]
 8004256:	69ca      	ldr	r2, [r1, #28]
 8004258:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800425c:	4290      	cmp	r0, r2
 800425e:	d904      	bls.n	800426a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004260:	69ca      	ldr	r2, [r1, #28]
 8004262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004266:	4302      	orrs	r2, r0
 8004268:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800426a:	0699      	lsls	r1, r3, #26
 800426c:	d50b      	bpl.n	8004286 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800426e:	496b      	ldr	r1, [pc, #428]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 8004270:	69e0      	ldr	r0, [r4, #28]
 8004272:	6a0a      	ldr	r2, [r1, #32]
 8004274:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004278:	4290      	cmp	r0, r2
 800427a:	d904      	bls.n	8004286 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800427c:	6a0a      	ldr	r2, [r1, #32]
 800427e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004282:	4302      	orrs	r2, r0
 8004284:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004286:	079a      	lsls	r2, r3, #30
 8004288:	f140 80ab 	bpl.w	80043e2 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800428c:	4863      	ldr	r0, [pc, #396]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 800428e:	68e1      	ldr	r1, [r4, #12]
 8004290:	6982      	ldr	r2, [r0, #24]
 8004292:	f002 020f 	and.w	r2, r2, #15
 8004296:	4291      	cmp	r1, r2
 8004298:	d904      	bls.n	80042a4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429a:	6982      	ldr	r2, [r0, #24]
 800429c:	f022 020f 	bic.w	r2, r2, #15
 80042a0:	430a      	orrs	r2, r1
 80042a2:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a4:	07d8      	lsls	r0, r3, #31
 80042a6:	d530      	bpl.n	800430a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042a8:	4a5c      	ldr	r2, [pc, #368]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 80042aa:	68a1      	ldr	r1, [r4, #8]
 80042ac:	6993      	ldr	r3, [r2, #24]
 80042ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042b2:	430b      	orrs	r3, r1
 80042b4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042b8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	2902      	cmp	r1, #2
 80042bc:	f000 80a1 	beq.w	8004402 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c0:	2903      	cmp	r1, #3
 80042c2:	f000 8098 	beq.w	80043f6 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042c6:	2901      	cmp	r1, #1
 80042c8:	f000 80a1 	beq.w	800440e <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042cc:	0758      	lsls	r0, r3, #29
 80042ce:	d59e      	bpl.n	800420e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d0:	4e52      	ldr	r6, [pc, #328]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	6933      	ldr	r3, [r6, #16]
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	430b      	orrs	r3, r1
 80042de:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80042e0:	f7ff f8aa 	bl	8003438 <HAL_GetTick>
 80042e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	e005      	b.n	80042f4 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e8:	f7ff f8a6 	bl	8003438 <HAL_GetTick>
 80042ec:	1bc0      	subs	r0, r0, r7
 80042ee:	4540      	cmp	r0, r8
 80042f0:	f200 808b 	bhi.w	800440a <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f4:	6933      	ldr	r3, [r6, #16]
 80042f6:	6862      	ldr	r2, [r4, #4]
 80042f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042fc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004300:	d1f2      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	0799      	lsls	r1, r3, #30
 8004306:	d506      	bpl.n	8004316 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004308:	68e1      	ldr	r1, [r4, #12]
 800430a:	4844      	ldr	r0, [pc, #272]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 800430c:	6982      	ldr	r2, [r0, #24]
 800430e:	f002 020f 	and.w	r2, r2, #15
 8004312:	428a      	cmp	r2, r1
 8004314:	d869      	bhi.n	80043ea <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004316:	4940      	ldr	r1, [pc, #256]	; (8004418 <HAL_RCC_ClockConfig+0x238>)
 8004318:	680a      	ldr	r2, [r1, #0]
 800431a:	f002 020f 	and.w	r2, r2, #15
 800431e:	42aa      	cmp	r2, r5
 8004320:	d90a      	bls.n	8004338 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	680a      	ldr	r2, [r1, #0]
 8004324:	f022 020f 	bic.w	r2, r2, #15
 8004328:	432a      	orrs	r2, r5
 800432a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432c:	680a      	ldr	r2, [r1, #0]
 800432e:	f002 020f 	and.w	r2, r2, #15
 8004332:	42aa      	cmp	r2, r5
 8004334:	f47f af6b 	bne.w	800420e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004338:	075a      	lsls	r2, r3, #29
 800433a:	d50b      	bpl.n	8004354 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800433c:	4937      	ldr	r1, [pc, #220]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 800433e:	6920      	ldr	r0, [r4, #16]
 8004340:	698a      	ldr	r2, [r1, #24]
 8004342:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004346:	4290      	cmp	r0, r2
 8004348:	d204      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800434a:	698a      	ldr	r2, [r1, #24]
 800434c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004350:	4302      	orrs	r2, r0
 8004352:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	071f      	lsls	r7, r3, #28
 8004356:	d50b      	bpl.n	8004370 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004358:	4930      	ldr	r1, [pc, #192]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 800435a:	6960      	ldr	r0, [r4, #20]
 800435c:	69ca      	ldr	r2, [r1, #28]
 800435e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004362:	4290      	cmp	r0, r2
 8004364:	d204      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004366:	69ca      	ldr	r2, [r1, #28]
 8004368:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800436c:	4302      	orrs	r2, r0
 800436e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	06de      	lsls	r6, r3, #27
 8004372:	d50b      	bpl.n	800438c <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004374:	4929      	ldr	r1, [pc, #164]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 8004376:	69a0      	ldr	r0, [r4, #24]
 8004378:	69ca      	ldr	r2, [r1, #28]
 800437a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800437e:	4290      	cmp	r0, r2
 8004380:	d204      	bcs.n	800438c <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004382:	69ca      	ldr	r2, [r1, #28]
 8004384:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004388:	4302      	orrs	r2, r0
 800438a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800438c:	069d      	lsls	r5, r3, #26
 800438e:	d50b      	bpl.n	80043a8 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004390:	4a22      	ldr	r2, [pc, #136]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 8004392:	69e1      	ldr	r1, [r4, #28]
 8004394:	6a13      	ldr	r3, [r2, #32]
 8004396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800439a:	4299      	cmp	r1, r3
 800439c:	d204      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800439e:	6a13      	ldr	r3, [r2, #32]
 80043a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043a8:	f7ff fe7a 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 80043ac:	4a1b      	ldr	r2, [pc, #108]	; (800441c <HAL_RCC_ClockConfig+0x23c>)
 80043ae:	4603      	mov	r3, r0
 80043b0:	481b      	ldr	r0, [pc, #108]	; (8004420 <HAL_RCC_ClockConfig+0x240>)
 80043b2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043b4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043b6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80043ba:	4d1a      	ldr	r5, [pc, #104]	; (8004424 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043bc:	f002 020f 	and.w	r2, r2, #15
 80043c0:	4c19      	ldr	r4, [pc, #100]	; (8004428 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043c2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043c4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043c6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80043ca:	4818      	ldr	r0, [pc, #96]	; (800442c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043cc:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043d0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80043d2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80043d4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043d6:	40d3      	lsrs	r3, r2
 80043d8:	6023      	str	r3, [r4, #0]
}
 80043da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80043de:	f7fe bbf7 	b.w	8002bd0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e2:	07da      	lsls	r2, r3, #31
 80043e4:	f53f af60 	bmi.w	80042a8 <HAL_RCC_ClockConfig+0xc8>
 80043e8:	e795      	b.n	8004316 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ea:	6982      	ldr	r2, [r0, #24]
 80043ec:	f022 020f 	bic.w	r2, r2, #15
 80043f0:	4311      	orrs	r1, r2
 80043f2:	6181      	str	r1, [r0, #24]
 80043f4:	e78f      	b.n	8004316 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043f6:	019f      	lsls	r7, r3, #6
 80043f8:	f53f af6a 	bmi.w	80042d0 <HAL_RCC_ClockConfig+0xf0>
 80043fc:	e707      	b.n	800420e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80043fe:	2001      	movs	r0, #1
}
 8004400:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004402:	039b      	lsls	r3, r3, #14
 8004404:	f53f af64 	bmi.w	80042d0 <HAL_RCC_ClockConfig+0xf0>
 8004408:	e701      	b.n	800420e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800440a:	2003      	movs	r0, #3
 800440c:	e700      	b.n	8004210 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800440e:	05de      	lsls	r6, r3, #23
 8004410:	f53f af5e 	bmi.w	80042d0 <HAL_RCC_ClockConfig+0xf0>
 8004414:	e6fb      	b.n	800420e <HAL_RCC_ClockConfig+0x2e>
 8004416:	bf00      	nop
 8004418:	52002000 	.word	0x52002000
 800441c:	58024400 	.word	0x58024400
 8004420:	0800b858 	.word	0x0800b858
 8004424:	240030c4 	.word	0x240030c4
 8004428:	240030c8 	.word	0x240030c8
 800442c:	240030d0 	.word	0x240030d0

08004430 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004430:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004432:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004434:	6913      	ldr	r3, [r2, #16]
 8004436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800443a:	2b10      	cmp	r3, #16
 800443c:	d01a      	beq.n	8004474 <HAL_RCC_GetHCLKFreq+0x44>
 800443e:	2b18      	cmp	r3, #24
 8004440:	d023      	beq.n	800448a <HAL_RCC_GetHCLKFreq+0x5a>
 8004442:	b1cb      	cbz	r3, 8004478 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8004444:	4814      	ldr	r0, [pc, #80]	; (8004498 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_RCC_GetHCLKFreq+0x64>)
 8004448:	4914      	ldr	r1, [pc, #80]	; (800449c <HAL_RCC_GetHCLKFreq+0x6c>)
 800444a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800444c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800444e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004452:	4c13      	ldr	r4, [pc, #76]	; (80044a0 <HAL_RCC_GetHCLKFreq+0x70>)
 8004454:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004458:	4d12      	ldr	r5, [pc, #72]	; (80044a4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800445a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800445c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800445e:	f002 021f 	and.w	r2, r2, #31
 8004462:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004466:	f003 001f 	and.w	r0, r3, #31
 800446a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800446e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004470:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004472:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004474:	480c      	ldr	r0, [pc, #48]	; (80044a8 <HAL_RCC_GetHCLKFreq+0x78>)
 8004476:	e7e6      	b.n	8004446 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004478:	6813      	ldr	r3, [r2, #0]
 800447a:	069b      	lsls	r3, r3, #26
 800447c:	d508      	bpl.n	8004490 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	480a      	ldr	r0, [pc, #40]	; (80044ac <HAL_RCC_GetHCLKFreq+0x7c>)
 8004482:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004486:	40d0      	lsrs	r0, r2
 8004488:	e7dd      	b.n	8004446 <HAL_RCC_GetHCLKFreq+0x16>
 800448a:	f7ff fa91 	bl	80039b0 <HAL_RCC_GetSysClockFreq.part.0>
 800448e:	e7da      	b.n	8004446 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004490:	4806      	ldr	r0, [pc, #24]	; (80044ac <HAL_RCC_GetHCLKFreq+0x7c>)
 8004492:	e7d8      	b.n	8004446 <HAL_RCC_GetHCLKFreq+0x16>
 8004494:	58024400 	.word	0x58024400
 8004498:	003d0900 	.word	0x003d0900
 800449c:	0800b858 	.word	0x0800b858
 80044a0:	240030c8 	.word	0x240030c8
 80044a4:	240030c4 	.word	0x240030c4
 80044a8:	017d7840 	.word	0x017d7840
 80044ac:	03d09000 	.word	0x03d09000

080044b0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b4:	6913      	ldr	r3, [r2, #16]
 80044b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d021      	beq.n	8004502 <HAL_RCC_GetPCLK1Freq+0x52>
 80044be:	2b18      	cmp	r3, #24
 80044c0:	d02b      	beq.n	800451a <HAL_RCC_GetPCLK1Freq+0x6a>
 80044c2:	b303      	cbz	r3, 8004506 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 80044c4:	4818      	ldr	r0, [pc, #96]	; (8004528 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044c6:	4a17      	ldr	r2, [pc, #92]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x74>)
 80044c8:	4918      	ldr	r1, [pc, #96]	; (800452c <HAL_RCC_GetPCLK1Freq+0x7c>)
 80044ca:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 80044cc:	4d18      	ldr	r5, [pc, #96]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044ce:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044d2:	4c18      	ldr	r4, [pc, #96]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044d4:	5ccb      	ldrb	r3, [r1, r3]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044de:	6990      	ldr	r0, [r2, #24]
 80044e0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80044e4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044e6:	5c08      	ldrb	r0, [r1, r0]
 80044e8:	f000 001f 	and.w	r0, r0, #31
 80044ec:	40c3      	lsrs	r3, r0
 80044ee:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044f0:	69d2      	ldr	r2, [r2, #28]
 80044f2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80044f6:	5c88      	ldrb	r0, [r1, r2]
 80044f8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044fc:	fa23 f000 	lsr.w	r0, r3, r0
 8004500:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004502:	480d      	ldr	r0, [pc, #52]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004504:	e7df      	b.n	80044c6 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004506:	6813      	ldr	r3, [r2, #0]
 8004508:	069b      	lsls	r3, r3, #26
 800450a:	d509      	bpl.n	8004520 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800450c:	6810      	ldr	r0, [r2, #0]
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004510:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004514:	fa23 f000 	lsr.w	r0, r3, r0
 8004518:	e7d5      	b.n	80044c6 <HAL_RCC_GetPCLK1Freq+0x16>
 800451a:	f7ff fa49 	bl	80039b0 <HAL_RCC_GetSysClockFreq.part.0>
 800451e:	e7d2      	b.n	80044c6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004520:	4806      	ldr	r0, [pc, #24]	; (800453c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004522:	e7d0      	b.n	80044c6 <HAL_RCC_GetPCLK1Freq+0x16>
 8004524:	58024400 	.word	0x58024400
 8004528:	003d0900 	.word	0x003d0900
 800452c:	0800b858 	.word	0x0800b858
 8004530:	240030c4 	.word	0x240030c4
 8004534:	240030c8 	.word	0x240030c8
 8004538:	017d7840 	.word	0x017d7840
 800453c:	03d09000 	.word	0x03d09000

08004540 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004540:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004542:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004544:	6913      	ldr	r3, [r2, #16]
 8004546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454a:	2b10      	cmp	r3, #16
 800454c:	d021      	beq.n	8004592 <HAL_RCC_GetPCLK2Freq+0x52>
 800454e:	2b18      	cmp	r3, #24
 8004550:	d02b      	beq.n	80045aa <HAL_RCC_GetPCLK2Freq+0x6a>
 8004552:	b303      	cbz	r3, 8004596 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8004554:	4818      	ldr	r0, [pc, #96]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004556:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x74>)
 8004558:	4918      	ldr	r1, [pc, #96]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x7c>)
 800455a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800455c:	4d18      	ldr	r5, [pc, #96]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800455e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004562:	4c18      	ldr	r4, [pc, #96]	; (80045c4 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800456e:	6990      	ldr	r0, [r2, #24]
 8004570:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8004574:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004576:	5c08      	ldrb	r0, [r1, r0]
 8004578:	f000 001f 	and.w	r0, r0, #31
 800457c:	40c3      	lsrs	r3, r0
 800457e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004580:	69d2      	ldr	r2, [r2, #28]
 8004582:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8004586:	5c88      	ldrb	r0, [r1, r2]
 8004588:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800458c:	fa23 f000 	lsr.w	r0, r3, r0
 8004590:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004592:	480d      	ldr	r0, [pc, #52]	; (80045c8 <HAL_RCC_GetPCLK2Freq+0x88>)
 8004594:	e7df      	b.n	8004556 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	069b      	lsls	r3, r3, #26
 800459a:	d509      	bpl.n	80045b0 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800459c:	6810      	ldr	r0, [r2, #0]
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x8c>)
 80045a0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80045a4:	fa23 f000 	lsr.w	r0, r3, r0
 80045a8:	e7d5      	b.n	8004556 <HAL_RCC_GetPCLK2Freq+0x16>
 80045aa:	f7ff fa01 	bl	80039b0 <HAL_RCC_GetSysClockFreq.part.0>
 80045ae:	e7d2      	b.n	8004556 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045b0:	4806      	ldr	r0, [pc, #24]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x8c>)
 80045b2:	e7d0      	b.n	8004556 <HAL_RCC_GetPCLK2Freq+0x16>
 80045b4:	58024400 	.word	0x58024400
 80045b8:	003d0900 	.word	0x003d0900
 80045bc:	0800b858 	.word	0x0800b858
 80045c0:	240030c4 	.word	0x240030c4
 80045c4:	240030c8 	.word	0x240030c8
 80045c8:	017d7840 	.word	0x017d7840
 80045cc:	03d09000 	.word	0x03d09000

080045d0 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80045d2:	223f      	movs	r2, #63	; 0x3f
 80045d4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	f002 0207 	and.w	r2, r2, #7
 80045dc:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80045e4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	f002 020f 	and.w	r2, r2, #15
 80045ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80045f4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80045fc:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004604:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004606:	6a1b      	ldr	r3, [r3, #32]
{
 8004608:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800460a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800460e:	4c05      	ldr	r4, [pc, #20]	; (8004624 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004610:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004612:	6823      	ldr	r3, [r4, #0]
}
 8004614:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	600b      	str	r3, [r1, #0]
}
 800461e:	4770      	bx	lr
 8004620:	58024400 	.word	0x58024400
 8004624:	52002000 	.word	0x52002000

08004628 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800462a:	4c3a      	ldr	r4, [pc, #232]	; (8004714 <RCCEx_PLL2_Config+0xec>)
 800462c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b03      	cmp	r3, #3
 8004634:	d067      	beq.n	8004706 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	4606      	mov	r6, r0
 800463a:	460f      	mov	r7, r1
 800463c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004640:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004642:	f7fe fef9 	bl	8003438 <HAL_GetTick>
 8004646:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004648:	e004      	b.n	8004654 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800464a:	f7fe fef5 	bl	8003438 <HAL_GetTick>
 800464e:	1b43      	subs	r3, r0, r5
 8004650:	2b02      	cmp	r3, #2
 8004652:	d856      	bhi.n	8004702 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	011a      	lsls	r2, r3, #4
 8004658:	d4f7      	bmi.n	800464a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800465a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800465c:	6832      	ldr	r2, [r6, #0]
 800465e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004662:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004666:	62a3      	str	r3, [r4, #40]	; 0x28
 8004668:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800466c:	3b01      	subs	r3, #1
 800466e:	3a01      	subs	r2, #1
 8004670:	025b      	lsls	r3, r3, #9
 8004672:	0412      	lsls	r2, r2, #16
 8004674:	b29b      	uxth	r3, r3
 8004676:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800467a:	4313      	orrs	r3, r2
 800467c:	6872      	ldr	r2, [r6, #4]
 800467e:	3a01      	subs	r2, #1
 8004680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004684:	4313      	orrs	r3, r2
 8004686:	6932      	ldr	r2, [r6, #16]
 8004688:	3a01      	subs	r2, #1
 800468a:	0612      	lsls	r2, r2, #24
 800468c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004690:	4313      	orrs	r3, r2
 8004692:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004694:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004696:	6972      	ldr	r2, [r6, #20]
 8004698:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800469c:	4313      	orrs	r3, r2
 800469e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046a2:	69b3      	ldr	r3, [r6, #24]
 80046a4:	f022 0220 	bic.w	r2, r2, #32
 80046a8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046aa:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046ac:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046b0:	f022 0210 	bic.w	r2, r2, #16
 80046b4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80046b8:	69f2      	ldr	r2, [r6, #28]
 80046ba:	400b      	ands	r3, r1
 80046bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80046c0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046c4:	f043 0310 	orr.w	r3, r3, #16
 80046c8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80046cc:	b1ef      	cbz	r7, 800470a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046ce:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046d0:	bf0c      	ite	eq
 80046d2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046d6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80046da:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <RCCEx_PLL2_Config+0xec>)
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046e4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e6:	f7fe fea7 	bl	8003438 <HAL_GetTick>
 80046ea:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046ec:	e004      	b.n	80046f8 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046ee:	f7fe fea3 	bl	8003438 <HAL_GetTick>
 80046f2:	1b40      	subs	r0, r0, r5
 80046f4:	2802      	cmp	r0, #2
 80046f6:	d804      	bhi.n	8004702 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	d5f7      	bpl.n	80046ee <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80046fe:	2000      	movs	r0, #0
}
 8004700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004702:	2003      	movs	r0, #3
}
 8004704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004706:	2001      	movs	r0, #1
}
 8004708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800470a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800470e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004710:	e7e4      	b.n	80046dc <RCCEx_PLL2_Config+0xb4>
 8004712:	bf00      	nop
 8004714:	58024400 	.word	0x58024400
 8004718:	ffff0007 	.word	0xffff0007

0800471c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800471e:	4c3a      	ldr	r4, [pc, #232]	; (8004808 <RCCEx_PLL3_Config+0xec>)
 8004720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b03      	cmp	r3, #3
 8004728:	d067      	beq.n	80047fa <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	4606      	mov	r6, r0
 800472e:	460f      	mov	r7, r1
 8004730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004734:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004736:	f7fe fe7f 	bl	8003438 <HAL_GetTick>
 800473a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800473c:	e004      	b.n	8004748 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800473e:	f7fe fe7b 	bl	8003438 <HAL_GetTick>
 8004742:	1b43      	subs	r3, r0, r5
 8004744:	2b02      	cmp	r3, #2
 8004746:	d856      	bhi.n	80047f6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	d4f7      	bmi.n	800473e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800474e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004750:	6832      	ldr	r2, [r6, #0]
 8004752:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004756:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800475a:	62a3      	str	r3, [r4, #40]	; 0x28
 800475c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004760:	3b01      	subs	r3, #1
 8004762:	3a01      	subs	r2, #1
 8004764:	025b      	lsls	r3, r3, #9
 8004766:	0412      	lsls	r2, r2, #16
 8004768:	b29b      	uxth	r3, r3
 800476a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800476e:	4313      	orrs	r3, r2
 8004770:	6872      	ldr	r2, [r6, #4]
 8004772:	3a01      	subs	r2, #1
 8004774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004778:	4313      	orrs	r3, r2
 800477a:	6932      	ldr	r2, [r6, #16]
 800477c:	3a01      	subs	r2, #1
 800477e:	0612      	lsls	r2, r2, #24
 8004780:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004784:	4313      	orrs	r3, r2
 8004786:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004788:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800478a:	6972      	ldr	r2, [r6, #20]
 800478c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004790:	4313      	orrs	r3, r2
 8004792:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004794:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004796:	69b3      	ldr	r3, [r6, #24]
 8004798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800479c:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800479e:	4b1b      	ldr	r3, [pc, #108]	; (800480c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047a0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80047ac:	69f2      	ldr	r2, [r6, #28]
 80047ae:	400b      	ands	r3, r1
 80047b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80047b4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047bc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80047c0:	b1ef      	cbz	r7, 80047fe <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047c2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047c4:	bf0c      	ite	eq
 80047c6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047ca:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80047ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047d0:	4c0d      	ldr	r4, [pc, #52]	; (8004808 <RCCEx_PLL3_Config+0xec>)
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047da:	f7fe fe2d 	bl	8003438 <HAL_GetTick>
 80047de:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047e0:	e004      	b.n	80047ec <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047e2:	f7fe fe29 	bl	8003438 <HAL_GetTick>
 80047e6:	1b40      	subs	r0, r0, r5
 80047e8:	2802      	cmp	r0, #2
 80047ea:	d804      	bhi.n	80047f6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	d5f7      	bpl.n	80047e2 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80047f2:	2000      	movs	r0, #0
}
 80047f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80047f6:	2003      	movs	r0, #3
}
 80047f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80047fa:	2001      	movs	r0, #1
}
 80047fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004802:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004804:	e7e4      	b.n	80047d0 <RCCEx_PLL3_Config+0xb4>
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
 800480c:	ffff0007 	.word	0xffff0007

08004810 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004814:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004818:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800481a:	011d      	lsls	r5, r3, #4
 800481c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8004820:	d523      	bpl.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004822:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8004824:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004828:	f000 854f 	beq.w	80052ca <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800482c:	d812      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800482e:	2900      	cmp	r1, #0
 8004830:	f000 85a5 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8004834:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004838:	f040 859e 	bne.w	8005378 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800483c:	2102      	movs	r1, #2
 800483e:	3008      	adds	r0, #8
 8004840:	f7ff fef2 	bl	8004628 <RCCEx_PLL2_Config>
 8004844:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004846:	2e00      	cmp	r6, #0
 8004848:	f040 851e 	bne.w	8005288 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800484c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800484e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004854:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004858:	f040 858e 	bne.w	8005378 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800485c:	4dae      	ldr	r5, [pc, #696]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800485e:	2600      	movs	r6, #0
 8004860:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004862:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8004866:	4301      	orrs	r1, r0
 8004868:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800486a:	05d8      	lsls	r0, r3, #23
 800486c:	d50a      	bpl.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 800486e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004870:	2904      	cmp	r1, #4
 8004872:	d806      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004874:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004878:	05390532 	.word	0x05390532
 800487c:	03100516 	.word	0x03100516
 8004880:	0310      	.short	0x0310
 8004882:	2601      	movs	r6, #1
 8004884:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004886:	0599      	lsls	r1, r3, #22
 8004888:	d51d      	bpl.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800488a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800488c:	2980      	cmp	r1, #128	; 0x80
 800488e:	f000 8512 	beq.w	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 8004892:	f200 80f9 	bhi.w	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004896:	2900      	cmp	r1, #0
 8004898:	f000 8420 	beq.w	80050dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800489c:	2940      	cmp	r1, #64	; 0x40
 800489e:	f040 80fa 	bne.w	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048a2:	2100      	movs	r1, #0
 80048a4:	f104 0008 	add.w	r0, r4, #8
 80048a8:	f7ff febe 	bl	8004628 <RCCEx_PLL2_Config>
 80048ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	f040 83eb 	bne.w	800508e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80048b8:	4f97      	ldr	r7, [pc, #604]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80048bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048be:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 80048c2:	4301      	orrs	r1, r0
 80048c4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048c6:	055f      	lsls	r7, r3, #21
 80048c8:	d521      	bpl.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 80048ca:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80048ce:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80048d2:	f000 851d 	beq.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80048d6:	f200 80e1 	bhi.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80048da:	2900      	cmp	r1, #0
 80048dc:	f000 8405 	beq.w	80050ea <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80048e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80048e4:	f040 80e2 	bne.w	8004aac <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048e8:	2100      	movs	r1, #0
 80048ea:	f104 0008 	add.w	r0, r4, #8
 80048ee:	f7ff fe9b 	bl	8004628 <RCCEx_PLL2_Config>
 80048f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	f040 83cf 	bne.w	800509c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048fe:	4f86      	ldr	r7, [pc, #536]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004900:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8004904:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004906:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800490a:	4301      	orrs	r1, r0
 800490c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800490e:	0518      	lsls	r0, r3, #20
 8004910:	d521      	bpl.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004912:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004916:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800491a:	f000 84b9 	beq.w	8005290 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 800491e:	f200 80c8 	bhi.w	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8004922:	2900      	cmp	r1, #0
 8004924:	f000 83d4 	beq.w	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004928:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800492c:	f040 80c9 	bne.w	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004930:	2100      	movs	r1, #0
 8004932:	f104 0008 	add.w	r0, r4, #8
 8004936:	f7ff fe77 	bl	8004628 <RCCEx_PLL2_Config>
 800493a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800493c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004940:	2d00      	cmp	r5, #0
 8004942:	f040 83a2 	bne.w	800508a <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004946:	4f74      	ldr	r7, [pc, #464]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004948:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800494c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800494e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8004952:	4301      	orrs	r1, r0
 8004954:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004956:	0199      	lsls	r1, r3, #6
 8004958:	d518      	bpl.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 800495a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800495c:	2920      	cmp	r1, #32
 800495e:	f000 841e 	beq.w	800519e <HAL_RCCEx_PeriphCLKConfig+0x98e>
 8004962:	f200 80b1 	bhi.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004966:	b139      	cbz	r1, 8004978 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004968:	2910      	cmp	r1, #16
 800496a:	f040 80b0 	bne.w	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800496e:	486a      	ldr	r0, [pc, #424]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004970:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004972:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004976:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004978:	2d00      	cmp	r5, #0
 800497a:	f040 83d3 	bne.w	8005124 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800497e:	4f66      	ldr	r7, [pc, #408]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004980:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004982:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004984:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8004988:	4301      	orrs	r1, r0
 800498a:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800498c:	04df      	lsls	r7, r3, #19
 800498e:	d51f      	bpl.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004990:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004992:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004996:	f000 84b1 	beq.w	80052fc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800499a:	f200 809b 	bhi.w	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800499e:	2900      	cmp	r1, #0
 80049a0:	f000 8390 	beq.w	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80049a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80049a8:	f040 809c 	bne.w	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ac:	2100      	movs	r1, #0
 80049ae:	f104 0008 	add.w	r0, r4, #8
 80049b2:	f7ff fe39 	bl	8004628 <RCCEx_PLL2_Config>
 80049b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049bc:	2d00      	cmp	r5, #0
 80049be:	f040 8368 	bne.w	8005092 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049c2:	4f55      	ldr	r7, [pc, #340]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049c4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80049c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049c8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80049cc:	4301      	orrs	r1, r0
 80049ce:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049d0:	0498      	lsls	r0, r3, #18
 80049d2:	d51d      	bpl.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 80049d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80049d6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80049da:	f000 840f 	beq.w	80051fc <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 80049de:	f200 8084 	bhi.w	8004aea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80049e2:	b159      	cbz	r1, 80049fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80049e4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80049e8:	f040 8087 	bne.w	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ec:	2101      	movs	r1, #1
 80049ee:	f104 0008 	add.w	r0, r4, #8
 80049f2:	f7ff fe19 	bl	8004628 <RCCEx_PLL2_Config>
 80049f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049fc:	2d00      	cmp	r5, #0
 80049fe:	f040 839b 	bne.w	8005138 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a02:	4f45      	ldr	r7, [pc, #276]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a04:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004a06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a08:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8004a0c:	4301      	orrs	r1, r0
 8004a0e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a10:	0459      	lsls	r1, r3, #17
 8004a12:	d51d      	bpl.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a14:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8004a18:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004a1c:	f000 83fa 	beq.w	8005214 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a20:	d86e      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8004a22:	b151      	cbz	r1, 8004a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004a28:	d172      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	f104 0008 	add.w	r0, r4, #8
 8004a30:	f7ff fdfa 	bl	8004628 <RCCEx_PLL2_Config>
 8004a34:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a36:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	f040 8380 	bne.w	8005140 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a40:	4f35      	ldr	r7, [pc, #212]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a42:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8004a46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a48:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8004a4c:	4301      	orrs	r1, r0
 8004a4e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a50:	041f      	lsls	r7, r3, #16
 8004a52:	d50d      	bpl.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 8004a54:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004a56:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004a5a:	f000 83c7 	beq.w	80051ec <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8004a5e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004a62:	f000 8225 	beq.w	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8004a66:	2900      	cmp	r1, #0
 8004a68:	f000 822a 	beq.w	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004a6c:	2601      	movs	r6, #1
 8004a6e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a70:	01d8      	lsls	r0, r3, #7
 8004a72:	d55f      	bpl.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
 8004a74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a76:	2903      	cmp	r1, #3
 8004a78:	f200 84bb 	bhi.w	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8004a7c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a80:	03e10056 	.word	0x03e10056
 8004a84:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
 8004a88:	29c0      	cmp	r1, #192	; 0xc0
 8004a8a:	f43f af12 	beq.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a8e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004a92:	f43f af0e 	beq.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a96:	2601      	movs	r6, #1
 8004a98:	4635      	mov	r5, r6
 8004a9a:	e714      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004a9c:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8004aa0:	f43f af2a 	beq.w	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004aa4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004aa8:	f43f af26 	beq.w	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004aac:	2601      	movs	r6, #1
 8004aae:	4635      	mov	r5, r6
 8004ab0:	e72d      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ab2:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004ab6:	f43f af43 	beq.w	8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004aba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004abe:	f43f af3f 	beq.w	8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004ac2:	2601      	movs	r6, #1
 8004ac4:	4635      	mov	r5, r6
 8004ac6:	e746      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 8004ac8:	2930      	cmp	r1, #48	; 0x30
 8004aca:	f43f af55 	beq.w	8004978 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004ace:	2601      	movs	r6, #1
 8004ad0:	4635      	mov	r5, r6
 8004ad2:	e75b      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ad4:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8004ad8:	f43f af70 	beq.w	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004adc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004ae0:	f43f af6c 	beq.w	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004ae4:	2601      	movs	r6, #1
 8004ae6:	4635      	mov	r5, r6
 8004ae8:	e772      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004aea:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8004aee:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004af2:	d083      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004af4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8004af8:	d080      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004afa:	2601      	movs	r6, #1
 8004afc:	4635      	mov	r5, r6
 8004afe:	e787      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b00:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8004b04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b08:	d097      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b0a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8004b0e:	d094      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b10:	2601      	movs	r6, #1
 8004b12:	4635      	mov	r5, r6
 8004b14:	e79c      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	f104 0008 	add.w	r0, r4, #8
 8004b22:	f7ff fd81 	bl	8004628 <RCCEx_PLL2_Config>
 8004b26:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b28:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	f000 82fb 	beq.w	8005128 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8004b32:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b34:	0259      	lsls	r1, r3, #9
 8004b36:	f100 825a 	bmi.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b3a:	07d8      	lsls	r0, r3, #31
 8004b3c:	d52f      	bpl.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b3e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004b40:	2928      	cmp	r1, #40	; 0x28
 8004b42:	d82a      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8004b44:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004b48:	002901fa 	.word	0x002901fa
 8004b4c:	00290029 	.word	0x00290029
 8004b50:	00290029 	.word	0x00290029
 8004b54:	00290029 	.word	0x00290029
 8004b58:	00290406 	.word	0x00290406
 8004b5c:	00290029 	.word	0x00290029
 8004b60:	00290029 	.word	0x00290029
 8004b64:	00290029 	.word	0x00290029
 8004b68:	002901f2 	.word	0x002901f2
 8004b6c:	00290029 	.word	0x00290029
 8004b70:	00290029 	.word	0x00290029
 8004b74:	00290029 	.word	0x00290029
 8004b78:	002901fa 	.word	0x002901fa
 8004b7c:	00290029 	.word	0x00290029
 8004b80:	00290029 	.word	0x00290029
 8004b84:	00290029 	.word	0x00290029
 8004b88:	002901fa 	.word	0x002901fa
 8004b8c:	00290029 	.word	0x00290029
 8004b90:	00290029 	.word	0x00290029
 8004b94:	00290029 	.word	0x00290029
 8004b98:	01fa      	.short	0x01fa
 8004b9a:	2601      	movs	r6, #1
 8004b9c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b9e:	0799      	lsls	r1, r3, #30
 8004ba0:	d517      	bpl.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ba2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004ba4:	2905      	cmp	r1, #5
 8004ba6:	f200 8420 	bhi.w	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8004baa:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004bae:	000e      	.short	0x000e
 8004bb0:	000603bb 	.word	0x000603bb
 8004bb4:	000e000e 	.word	0x000e000e
 8004bb8:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bba:	2101      	movs	r1, #1
 8004bbc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004bc0:	f7ff fdac 	bl	800471c <RCCEx_PLL3_Config>
 8004bc4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bc6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	f000 8299 	beq.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8004bd0:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bd2:	075f      	lsls	r7, r3, #29
 8004bd4:	d518      	bpl.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004bd6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004bda:	2905      	cmp	r1, #5
 8004bdc:	f200 840d 	bhi.w	80053fa <HAL_RCCEx_PeriphCLKConfig+0xbea>
 8004be0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004be4:	03ac000e 	.word	0x03ac000e
 8004be8:	000e0006 	.word	0x000e0006
 8004bec:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004bf6:	f7ff fd91 	bl	800471c <RCCEx_PLL3_Config>
 8004bfa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bfc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c00:	2d00      	cmp	r5, #0
 8004c02:	f000 8286 	beq.w	8005112 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8004c06:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c08:	0698      	lsls	r0, r3, #26
 8004c0a:	d51f      	bpl.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c0c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004c10:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004c14:	f000 8309 	beq.w	800522a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004c18:	f200 810b 	bhi.w	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8004c1c:	b159      	cbz	r1, 8004c36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c1e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004c22:	f040 8110 	bne.w	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c26:	2100      	movs	r1, #0
 8004c28:	f104 0008 	add.w	r0, r4, #8
 8004c2c:	f7ff fcfc 	bl	8004628 <RCCEx_PLL2_Config>
 8004c30:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c32:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	f040 825f 	bne.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3c:	4fa6      	ldr	r7, [pc, #664]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004c3e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8004c42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c44:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8004c48:	4301      	orrs	r1, r0
 8004c4a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c4c:	0659      	lsls	r1, r3, #25
 8004c4e:	d51f      	bpl.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c50:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004c54:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004c58:	f000 82b2 	beq.w	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8004c5c:	f200 80f6 	bhi.w	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004c60:	b159      	cbz	r1, 8004c7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004c62:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004c66:	f040 80fb 	bne.w	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	f104 0008 	add.w	r0, r4, #8
 8004c70:	f7ff fcda 	bl	8004628 <RCCEx_PLL2_Config>
 8004c74:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c76:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	f040 8262 	bne.w	8005144 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c80:	4f95      	ldr	r7, [pc, #596]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004c82:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8004c86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c88:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8004c8c:	4301      	orrs	r1, r0
 8004c8e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c90:	061f      	lsls	r7, r3, #24
 8004c92:	d51f      	bpl.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c94:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004c98:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004c9c:	f000 829b 	beq.w	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 8004ca0:	f200 80e1 	bhi.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8004ca4:	b159      	cbz	r1, 8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ca6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004caa:	f040 80e6 	bne.w	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cae:	2100      	movs	r1, #0
 8004cb0:	f104 0008 	add.w	r0, r4, #8
 8004cb4:	f7ff fcb8 	bl	8004628 <RCCEx_PLL2_Config>
 8004cb8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	f040 823c 	bne.w	800513c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cc4:	4f84      	ldr	r7, [pc, #528]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004cc6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8004cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ccc:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004cd0:	4301      	orrs	r1, r0
 8004cd2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cd4:	0718      	lsls	r0, r3, #28
 8004cd6:	d50b      	bpl.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004cd8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004cdc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004ce0:	f000 82b8 	beq.w	8005254 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ce4:	4f7c      	ldr	r7, [pc, #496]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ce6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ce8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004cec:	4301      	orrs	r1, r0
 8004cee:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cf0:	06d9      	lsls	r1, r3, #27
 8004cf2:	d50b      	bpl.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004cf4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8004cf8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004cfc:	f000 82b7 	beq.w	800526e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d00:	4f75      	ldr	r7, [pc, #468]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004d02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d04:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004d08:	4301      	orrs	r1, r0
 8004d0a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d0c:	031f      	lsls	r7, r3, #12
 8004d0e:	d50e      	bpl.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
 8004d10:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004d14:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004d18:	f000 80f4 	beq.w	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004d1c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004d20:	f000 80f8 	beq.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x704>
 8004d24:	2900      	cmp	r1, #0
 8004d26:	f000 822e 	beq.w	8005186 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004d2a:	2601      	movs	r6, #1
 8004d2c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d2e:	0358      	lsls	r0, r3, #13
 8004d30:	d50f      	bpl.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
 8004d32:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004d36:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004d3a:	f000 80cf 	beq.w	8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8004d3e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004d42:	f000 80d3 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8004d46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004d4a:	f000 8214 	beq.w	8005176 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004d4e:	2601      	movs	r6, #1
 8004d50:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d52:	03d9      	lsls	r1, r3, #15
 8004d54:	d509      	bpl.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004d56:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	f000 8203 	beq.w	8005164 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8004d5e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004d62:	f000 819d 	beq.w	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8004d66:	2601      	movs	r6, #1
 8004d68:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d6a:	009f      	lsls	r7, r3, #2
 8004d6c:	f100 80f1 	bmi.w	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d70:	0398      	lsls	r0, r3, #14
 8004d72:	d50c      	bpl.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
 8004d74:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004d78:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004d7c:	f000 81ea 	beq.w	8005154 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8004d80:	d97e      	bls.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x670>
 8004d82:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8004d86:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004d8a:	d07b      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8004d8c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d8e:	02d9      	lsls	r1, r3, #11
 8004d90:	d506      	bpl.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d92:	4851      	ldr	r0, [pc, #324]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004d94:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8004d96:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004d98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004d9c:	4329      	orrs	r1, r5
 8004d9e:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004da0:	00df      	lsls	r7, r3, #3
 8004da2:	d507      	bpl.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004da4:	484c      	ldr	r0, [pc, #304]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004da6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8004daa:	6901      	ldr	r1, [r0, #16]
 8004dac:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004db0:	4329      	orrs	r1, r5
 8004db2:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004db4:	029d      	lsls	r5, r3, #10
 8004db6:	d506      	bpl.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004db8:	4847      	ldr	r0, [pc, #284]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004dba:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8004dbc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004dbe:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004dc2:	4329      	orrs	r1, r5
 8004dc4:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004dc6:	0058      	lsls	r0, r3, #1
 8004dc8:	d509      	bpl.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dca:	4943      	ldr	r1, [pc, #268]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004dcc:	6908      	ldr	r0, [r1, #16]
 8004dce:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004dd2:	6108      	str	r0, [r1, #16]
 8004dd4:	6908      	ldr	r0, [r1, #16]
 8004dd6:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8004dda:	4328      	orrs	r0, r5
 8004ddc:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	da06      	bge.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004de2:	483d      	ldr	r0, [pc, #244]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004de4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004de6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004de8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004dec:	4329      	orrs	r1, r5
 8004dee:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004df0:	0219      	lsls	r1, r3, #8
 8004df2:	d507      	bpl.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004df4:	4938      	ldr	r1, [pc, #224]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004df6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004dfa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004dfc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e00:	4303      	orrs	r3, r0
 8004e02:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e04:	07d3      	lsls	r3, r2, #31
 8004e06:	f100 80b0 	bmi.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e0a:	0797      	lsls	r7, r2, #30
 8004e0c:	f100 80ba 	bmi.w	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e10:	0755      	lsls	r5, r2, #29
 8004e12:	f100 80c4 	bmi.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e16:	0710      	lsls	r0, r2, #28
 8004e18:	f100 80ce 	bmi.w	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e1c:	06d1      	lsls	r1, r2, #27
 8004e1e:	f100 80d8 	bmi.w	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e22:	0692      	lsls	r2, r2, #26
 8004e24:	f100 8125 	bmi.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
 8004e28:	1e30      	subs	r0, r6, #0
 8004e2a:	bf18      	it	ne
 8004e2c:	2001      	movne	r0, #1
}
 8004e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e32:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8004e36:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e3a:	f43f aefc 	beq.w	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004e3e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8004e42:	f43f aef8 	beq.w	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004e46:	2601      	movs	r6, #1
 8004e48:	4635      	mov	r5, r6
 8004e4a:	e6ff      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e4c:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8004e50:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004e54:	f43f af11 	beq.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004e58:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8004e5c:	f43f af0d 	beq.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004e60:	2601      	movs	r6, #1
 8004e62:	4635      	mov	r5, r6
 8004e64:	e714      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e66:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8004e6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004e6e:	f43f af26 	beq.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004e72:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8004e76:	f43f af22 	beq.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004e7a:	2601      	movs	r6, #1
 8004e7c:	4635      	mov	r5, r6
 8004e7e:	e729      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
 8004e80:	2900      	cmp	r1, #0
 8004e82:	d183      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	f040 8163 	bne.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e8a:	4d13      	ldr	r5, [pc, #76]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004e8c:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004e8e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004e92:	4301      	orrs	r1, r0
 8004e94:	6569      	str	r1, [r5, #84]	; 0x54
 8004e96:	e77a      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e98:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	f040 80fb 	bne.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea0:	4f0d      	ldr	r7, [pc, #52]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ea2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ea6:	f021 0107 	bic.w	r1, r1, #7
 8004eaa:	4301      	orrs	r1, r0
 8004eac:	6539      	str	r1, [r7, #80]	; 0x50
 8004eae:	e4ea      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	f104 0008 	add.w	r0, r4, #8
 8004eb6:	f7ff fbb7 	bl	8004628 <RCCEx_PLL2_Config>
 8004eba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ebc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ec0:	2d00      	cmp	r5, #0
 8004ec2:	f040 811c 	bne.w	80050fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ec6:	4f04      	ldr	r7, [pc, #16]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ec8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004eca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ecc:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004ed0:	4301      	orrs	r1, r0
 8004ed2:	6539      	str	r1, [r7, #80]	; 0x50
 8004ed4:	e5cc      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004edc:	2101      	movs	r1, #1
 8004ede:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004ee2:	f7ff fc1b 	bl	800471c <RCCEx_PLL3_Config>
 8004ee6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ee8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	f040 812d 	bne.w	800514c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef2:	4fb1      	ldr	r7, [pc, #708]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004ef4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004efa:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004efe:	4301      	orrs	r1, r0
 8004f00:	6579      	str	r1, [r7, #84]	; 0x54
 8004f02:	e726      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f04:	2102      	movs	r1, #2
 8004f06:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004f0a:	f7ff fc07 	bl	800471c <RCCEx_PLL3_Config>
 8004f0e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	f040 8117 	bne.w	8005148 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f1a:	4fa7      	ldr	r7, [pc, #668]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004f1c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8004f20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f22:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004f26:	4301      	orrs	r1, r0
 8004f28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f2a:	e700      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004f32:	f7ff fbf3 	bl	800471c <RCCEx_PLL3_Config>
 8004f36:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f38:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	f040 80da 	bne.w	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f42:	4f9d      	ldr	r7, [pc, #628]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004f44:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004f46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f48:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8004f4c:	4301      	orrs	r1, r0
 8004f4e:	6579      	str	r1, [r7, #84]	; 0x54
 8004f50:	e625      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f52:	2102      	movs	r1, #2
 8004f54:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004f58:	f7ff fbe0 	bl	800471c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f5c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f60:	2800      	cmp	r0, #0
 8004f62:	f43f af05 	beq.w	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
 8004f66:	2601      	movs	r6, #1
 8004f68:	e702      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f104 0008 	add.w	r0, r4, #8
 8004f70:	f7ff fb5a 	bl	8004628 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f74:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004f76:	2800      	cmp	r0, #0
 8004f78:	f43f af47 	beq.w	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f7c:	0797      	lsls	r7, r2, #30
 8004f7e:	4606      	mov	r6, r0
 8004f80:	f57f af46 	bpl.w	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f84:	2101      	movs	r1, #1
 8004f86:	f104 0008 	add.w	r0, r4, #8
 8004f8a:	f7ff fb4d 	bl	8004628 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f8e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004f90:	2800      	cmp	r0, #0
 8004f92:	f43f af3d 	beq.w	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f96:	0755      	lsls	r5, r2, #29
 8004f98:	4606      	mov	r6, r0
 8004f9a:	f57f af3c 	bpl.w	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	f104 0008 	add.w	r0, r4, #8
 8004fa4:	f7ff fb40 	bl	8004628 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004fa8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f43f af33 	beq.w	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	0710      	lsls	r0, r2, #28
 8004fb4:	f57f af32 	bpl.w	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fb8:	2100      	movs	r1, #0
 8004fba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004fbe:	f7ff fbad 	bl	800471c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004fc2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f43f af29 	beq.w	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004fca:	06d1      	lsls	r1, r2, #27
 8004fcc:	4606      	mov	r6, r0
 8004fce:	f57f af28 	bpl.w	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fd2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f7ff fb9f 	bl	800471c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	f000 80db 	beq.w	800519a <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	069b      	lsls	r3, r3, #26
 8004fe8:	d54c      	bpl.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8004fea:	4606      	mov	r6, r0
 8004fec:	e043      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fee:	4f73      	ldr	r7, [pc, #460]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004ff8:	f7fe fa1e 	bl	8003438 <HAL_GetTick>
 8004ffc:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ffe:	e006      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005000:	f7fe fa1a 	bl	8003438 <HAL_GetTick>
 8005004:	eba0 0008 	sub.w	r0, r0, r8
 8005008:	2864      	cmp	r0, #100	; 0x64
 800500a:	f200 81af 	bhi.w	800536c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	05da      	lsls	r2, r3, #23
 8005012:	d5f5      	bpl.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
 8005014:	2d00      	cmp	r5, #0
 8005016:	f040 81e3 	bne.w	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800501a:	4a67      	ldr	r2, [pc, #412]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800501c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8005020:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005022:	4059      	eors	r1, r3
 8005024:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005028:	d00b      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800502a:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800502e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005032:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005036:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005038:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800503a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800503e:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005040:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005046:	f000 81ad 	beq.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800504a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800504e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005052:	f000 81bb 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8005056:	4958      	ldr	r1, [pc, #352]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005058:	690a      	ldr	r2, [r1, #16]
 800505a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800505e:	610a      	str	r2, [r1, #16]
 8005060:	4855      	ldr	r0, [pc, #340]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005062:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8005066:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8005068:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800506a:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506e:	6701      	str	r1, [r0, #112]	; 0x70
 8005070:	e563      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005072:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005076:	2102      	movs	r1, #2
 8005078:	4628      	mov	r0, r5
 800507a:	f7ff fb4f 	bl	800471c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800507e:	2800      	cmp	r0, #0
 8005080:	f43f aed2 	beq.w	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
 8005084:	2001      	movs	r0, #1
}
 8005086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508a:	462e      	mov	r6, r5
 800508c:	e463      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x146>
 800508e:	462e      	mov	r6, r5
 8005090:	e419      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8005092:	462e      	mov	r6, r5
 8005094:	e49c      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005096:	462e      	mov	r6, r5
 8005098:	f7ff bbf5 	b.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800509c:	462e      	mov	r6, r5
 800509e:	e436      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050a0:	2102      	movs	r1, #2
 80050a2:	f104 0008 	add.w	r0, r4, #8
 80050a6:	f7ff fabf 	bl	8004628 <RCCEx_PLL2_Config>
 80050aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	d15e      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050b4:	4f40      	ldr	r7, [pc, #256]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80050b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80050b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80050ba:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80050be:	4301      	orrs	r1, r0
 80050c0:	64f9      	str	r1, [r7, #76]	; 0x4c
 80050c2:	e652      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c4:	483c      	ldr	r0, [pc, #240]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80050c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80050c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80050cc:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80050ce:	e475      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d0:	4839      	ldr	r0, [pc, #228]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80050d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80050d4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80050d8:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80050da:	e431      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050dc:	4836      	ldr	r0, [pc, #216]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80050de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80050e0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80050e4:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80050e6:	f7ff bbe4 	b.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ea:	4833      	ldr	r0, [pc, #204]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80050ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80050ee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80050f2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80050f4:	e400      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80050f6:	462e      	mov	r6, r5
 80050f8:	e551      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80050fa:	462e      	mov	r6, r5
 80050fc:	e5a6      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80050fe:	462e      	mov	r6, r5
 8005100:	e4b6      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005102:	4f2d      	ldr	r7, [pc, #180]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005104:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005106:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005108:	f021 0107 	bic.w	r1, r1, #7
 800510c:	4301      	orrs	r1, r0
 800510e:	6579      	str	r1, [r7, #84]	; 0x54
 8005110:	e55f      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005112:	4f29      	ldr	r7, [pc, #164]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005114:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8005118:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800511a:	f021 0107 	bic.w	r1, r1, #7
 800511e:	4301      	orrs	r1, r0
 8005120:	65b9      	str	r1, [r7, #88]	; 0x58
 8005122:	e571      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005124:	462e      	mov	r6, r5
 8005126:	e431      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005128:	4f23      	ldr	r7, [pc, #140]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800512a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800512c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800512e:	f021 0103 	bic.w	r1, r1, #3
 8005132:	4301      	orrs	r1, r0
 8005134:	64f9      	str	r1, [r7, #76]	; 0x4c
 8005136:	e4fd      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005138:	462e      	mov	r6, r5
 800513a:	e469      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800513c:	462e      	mov	r6, r5
 800513e:	e5c9      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8005140:	462e      	mov	r6, r5
 8005142:	e485      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005144:	462e      	mov	r6, r5
 8005146:	e5a3      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005148:	462e      	mov	r6, r5
 800514a:	e5f0      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800514c:	462e      	mov	r6, r5
 800514e:	e600      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x542>
 8005150:	462e      	mov	r6, r5
 8005152:	e61c      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005154:	4f18      	ldr	r7, [pc, #96]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005158:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800515c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 800515e:	2d00      	cmp	r5, #0
 8005160:	d1f6      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8005162:	e692      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005164:	4814      	ldr	r0, [pc, #80]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005166:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005168:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800516c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800516e:	2d00      	cmp	r5, #0
 8005170:	d0a0      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8005172:	462e      	mov	r6, r5
 8005174:	e5f9      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005176:	4810      	ldr	r0, [pc, #64]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005178:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800517a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800517e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005180:	2d00      	cmp	r5, #0
 8005182:	d1e3      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8005184:	e6b5      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005186:	f104 0008 	add.w	r0, r4, #8
 800518a:	f7ff fa4d 	bl	8004628 <RCCEx_PLL2_Config>
 800518e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005190:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005194:	2d00      	cmp	r5, #0
 8005196:	d1d7      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005198:	e6bf      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800519a:	6862      	ldr	r2, [r4, #4]
 800519c:	e641      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800519e:	2102      	movs	r1, #2
 80051a0:	f104 0008 	add.w	r0, r4, #8
 80051a4:	f7ff fa40 	bl	8004628 <RCCEx_PLL2_Config>
 80051a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051ae:	2d00      	cmp	r5, #0
 80051b0:	d1b8      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80051b2:	f7ff bbe4 	b.w	800497e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80051b6:	bf00      	nop
 80051b8:	58024400 	.word	0x58024400
 80051bc:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051c0:	2102      	movs	r1, #2
 80051c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80051c6:	f7ff faa9 	bl	800471c <RCCEx_PLL3_Config>
 80051ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051d0:	2d00      	cmp	r5, #0
 80051d2:	d1b7      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80051d4:	e554      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051d6:	2102      	movs	r1, #2
 80051d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80051dc:	f7ff fa9e 	bl	800471c <RCCEx_PLL3_Config>
 80051e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80051e2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	d1a8      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 80051ea:	e56b      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ec:	4884      	ldr	r0, [pc, #528]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 80051ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80051f0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80051f4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	d181      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80051fa:	e664      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051fc:	2101      	movs	r1, #1
 80051fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005202:	f7ff fa8b 	bl	800471c <RCCEx_PLL3_Config>
 8005206:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005208:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800520c:	2d00      	cmp	r5, #0
 800520e:	d193      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8005210:	f7ff bbf7 	b.w	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005214:	2101      	movs	r1, #1
 8005216:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800521a:	f7ff fa7f 	bl	800471c <RCCEx_PLL3_Config>
 800521e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005220:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005224:	2d00      	cmp	r5, #0
 8005226:	d18b      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8005228:	e40a      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800522a:	2102      	movs	r1, #2
 800522c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005230:	f7ff fa74 	bl	800471c <RCCEx_PLL3_Config>
 8005234:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005236:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800523a:	2d00      	cmp	r5, #0
 800523c:	f47f af5d 	bne.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8005240:	e4fc      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005242:	486f      	ldr	r0, [pc, #444]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 8005244:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005246:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800524a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800524c:	2d00      	cmp	r5, #0
 800524e:	f47f ac70 	bne.w	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8005252:	e769      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005254:	2102      	movs	r1, #2
 8005256:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800525a:	f7ff fa5f 	bl	800471c <RCCEx_PLL3_Config>
 800525e:	2800      	cmp	r0, #0
 8005260:	f040 8094 	bne.w	800538c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005264:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005268:	e9d4 3200 	ldrd	r3, r2, [r4]
 800526c:	e53a      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800526e:	2102      	movs	r1, #2
 8005270:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005274:	f7ff fa52 	bl	800471c <RCCEx_PLL3_Config>
 8005278:	2800      	cmp	r0, #0
 800527a:	f040 808d 	bne.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800527e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005282:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005286:	e53b      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005288:	e9d4 3200 	ldrd	r3, r2, [r4]
 800528c:	f7ff baed 	b.w	800486a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005290:	2100      	movs	r1, #0
 8005292:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005296:	f7ff fa41 	bl	800471c <RCCEx_PLL3_Config>
 800529a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800529c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80052a0:	f7ff bb4e 	b.w	8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052a4:	2100      	movs	r1, #0
 80052a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052aa:	f7ff fa37 	bl	800471c <RCCEx_PLL3_Config>
 80052ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052b0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80052b4:	e5f1      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052b6:	2100      	movs	r1, #0
 80052b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052bc:	f7ff fa2e 	bl	800471c <RCCEx_PLL3_Config>
 80052c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80052c2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80052c6:	f7ff baf4 	b.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052ca:	2102      	movs	r1, #2
 80052cc:	3028      	adds	r0, #40	; 0x28
 80052ce:	f7ff fa25 	bl	800471c <RCCEx_PLL3_Config>
 80052d2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80052d4:	2e00      	cmp	r6, #0
 80052d6:	f43f aab9 	beq.w	800484c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80052da:	e7d5      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052dc:	4848      	ldr	r0, [pc, #288]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
 80052de:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80052e2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80052e6:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80052e8:	e5d7      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ea:	2100      	movs	r1, #0
 80052ec:	f104 0008 	add.w	r0, r4, #8
 80052f0:	f7ff f99a 	bl	8004628 <RCCEx_PLL2_Config>
 80052f4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052f6:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80052fa:	e5ce      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052fc:	2100      	movs	r1, #0
 80052fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005302:	f7ff fa0b 	bl	800471c <RCCEx_PLL3_Config>
 8005306:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005308:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800530c:	f7ff bb56 	b.w	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005310:	2100      	movs	r1, #0
 8005312:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005316:	f7ff fa01 	bl	800471c <RCCEx_PLL3_Config>
 800531a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800531c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005320:	f7ff baea 	b.w	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005324:	2101      	movs	r1, #1
 8005326:	f104 0008 	add.w	r0, r4, #8
 800532a:	f7ff f97d 	bl	8004628 <RCCEx_PLL2_Config>
 800532e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005330:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005334:	2d00      	cmp	r5, #0
 8005336:	f47f ac4b 	bne.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800533a:	e6e2      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800533c:	2101      	movs	r1, #1
 800533e:	f104 0008 	add.w	r0, r4, #8
 8005342:	f7ff f971 	bl	8004628 <RCCEx_PLL2_Config>
 8005346:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005348:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800534c:	2d00      	cmp	r5, #0
 800534e:	f47f ac5a 	bne.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8005352:	e6de      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005354:	2101      	movs	r1, #1
 8005356:	f104 0008 	add.w	r0, r4, #8
 800535a:	f7ff f965 	bl	8004628 <RCCEx_PLL2_Config>
 800535e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005360:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005364:	2d00      	cmp	r5, #0
 8005366:	f47f aec6 	bne.w	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800536a:	e5ea      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
 800536c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800536e:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 8005372:	4635      	mov	r5, r6
 8005374:	f7ff bbe1 	b.w	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005378:	2601      	movs	r6, #1
 800537a:	f7ff ba76 	b.w	800486a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537e:	4d20      	ldr	r5, [pc, #128]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 8005380:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005382:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8005386:	62e8      	str	r0, [r5, #44]	; 0x2c
 8005388:	f7ff ba68 	b.w	800485c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800538c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 8005390:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005392:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005396:	e4a5      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005398:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 800539c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800539e:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053a2:	e4ad      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
 80053a4:	f7fe f848 	bl	8003438 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053a8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005400 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
 80053ac:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053b2:	e004      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fe f840 	bl	8003438 <HAL_GetTick>
 80053b8:	1bc0      	subs	r0, r0, r7
 80053ba:	4548      	cmp	r0, r9
 80053bc:	d8d6      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053be:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80053c2:	079b      	lsls	r3, r3, #30
 80053c4:	d5f6      	bpl.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80053ca:	e63e      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80053cc:	480c      	ldr	r0, [pc, #48]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 80053ce:	4a0d      	ldr	r2, [pc, #52]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 80053d0:	6901      	ldr	r1, [r0, #16]
 80053d2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80053d6:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80053da:	430a      	orrs	r2, r1
 80053dc:	6102      	str	r2, [r0, #16]
 80053de:	e63f      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053e4:	462e      	mov	r6, r5
 80053e6:	f7ff bba8 	b.w	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053ea:	2601      	movs	r6, #1
 80053ec:	4635      	mov	r5, r6
 80053ee:	f7ff bbf0 	b.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
 80053f2:	2601      	movs	r6, #1
 80053f4:	4635      	mov	r5, r6
 80053f6:	f7ff bb9d 	b.w	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80053fa:	2601      	movs	r6, #1
 80053fc:	4635      	mov	r5, r6
 80053fe:	e403      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005400:	58024400 	.word	0x58024400
 8005404:	00ffffcf 	.word	0x00ffffcf

08005408 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005408:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800540a:	f7ff f811 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005410:	4a05      	ldr	r2, [pc, #20]	; (8005428 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005418:	5cd3      	ldrb	r3, [r2, r3]
 800541a:	f003 031f 	and.w	r3, r3, #31
}
 800541e:	40d8      	lsrs	r0, r3
 8005420:	bd08      	pop	{r3, pc}
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	0800b858 	.word	0x0800b858

0800542c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800542c:	4b4f      	ldr	r3, [pc, #316]	; (800556c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800542e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005430:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005432:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005434:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8005436:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800543a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800543e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8005440:	d05c      	beq.n	80054fc <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005442:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005446:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800544a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800544e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005452:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005454:	ee07 4a90 	vmov	s15, r4
 8005458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800545c:	d003      	beq.n	8005466 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800545e:	2902      	cmp	r1, #2
 8005460:	d075      	beq.n	800554e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8005462:	2900      	cmp	r1, #0
 8005464:	d04f      	beq.n	8005506 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005466:	ee07 2a90 	vmov	s15, r2
 800546a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005570 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800546e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005478:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800547c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005480:	ee06 3a90 	vmov	s13, r3
 8005484:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005488:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800548c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005490:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005494:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005498:	4a34      	ldr	r2, [pc, #208]	; (800556c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800549a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800549e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80054a0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80054a4:	ee07 3a10 	vmov	s14, r3
 80054a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80054ac:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80054ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80054b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ba:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80054c0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80054c4:	ee07 3a10 	vmov	s14, r3
 80054c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80054d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80054dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80054de:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 80054ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80054f6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80054fa:	4770      	bx	lr
 80054fc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80054fe:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005502:	6082      	str	r2, [r0, #8]
}
 8005504:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	0689      	lsls	r1, r1, #26
 800550a:	d527      	bpl.n	800555c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800550c:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800550e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005512:	4919      	ldr	r1, [pc, #100]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005514:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800551a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800551e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005522:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800552a:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800552c:	ee06 3a90 	vmov	s13, r3
 8005530:	ee05 1a90 	vmov	s11, r1
 8005534:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005538:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800553c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005540:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005544:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005548:	ee66 6a26 	vmul.f32	s13, s12, s13
 800554c:	e7a4      	b.n	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800554e:	ee07 2a90 	vmov	s15, r2
 8005552:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800557c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8005556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800555a:	e78a      	b.n	8005472 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800555c:	ee07 2a90 	vmov	s15, r2
 8005560:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005568:	e783      	b.n	8005472 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
 8005570:	4a742400 	.word	0x4a742400
 8005574:	39000000 	.word	0x39000000
 8005578:	03d09000 	.word	0x03d09000
 800557c:	4bbebc20 	.word	0x4bbebc20
 8005580:	4c742400 	.word	0x4c742400

08005584 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005584:	4b4f      	ldr	r3, [pc, #316]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8005586:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005588:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800558a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800558c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800558e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005592:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005596:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8005598:	d05c      	beq.n	8005654 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800559a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800559e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055a2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055a6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80055aa:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055ac:	ee07 4a90 	vmov	s15, r4
 80055b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80055b4:	d003      	beq.n	80055be <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80055b6:	2902      	cmp	r1, #2
 80055b8:	d075      	beq.n	80056a6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80055ba:	2900      	cmp	r1, #0
 80055bc:	d04f      	beq.n	800565e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055be:	ee07 2a90 	vmov	s15, r2
 80055c2:	eddf 6a41 	vldr	s13, [pc, #260]	; 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80055c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80055d0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80055d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d8:	ee06 3a90 	vmov	s13, r3
 80055dc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80055e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80055e4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80055e8:	eee7 6a25 	vfma.f32	s13, s14, s11
 80055ec:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80055f0:	4a34      	ldr	r2, [pc, #208]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80055f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80055f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80055f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80055fc:	ee07 3a10 	vmov	s14, r3
 8005600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005604:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005606:	ee37 7a06 	vadd.f32	s14, s14, s12
 800560a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800560e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005612:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005616:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005618:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800561c:	ee07 3a10 	vmov	s14, r3
 8005620:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005624:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005630:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005634:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005636:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005642:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800564e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005652:	4770      	bx	lr
 8005654:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005656:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800565a:	6082      	str	r2, [r0, #8]
}
 800565c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	0689      	lsls	r1, r1, #26
 8005662:	d527      	bpl.n	80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005664:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005666:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800566a:	4919      	ldr	r1, [pc, #100]	; (80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800566c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005672:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005682:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005684:	ee06 3a90 	vmov	s13, r3
 8005688:	ee05 1a90 	vmov	s11, r1
 800568c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005690:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005694:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005698:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800569c:	eee7 6a05 	vfma.f32	s13, s14, s10
 80056a0:	ee66 6a26 	vmul.f32	s13, s12, s13
 80056a4:	e7a4      	b.n	80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056a6:	ee07 2a90 	vmov	s15, r2
 80056aa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80056ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b2:	e78a      	b.n	80055ca <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056b4:	ee07 2a90 	vmov	s15, r2
 80056b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80056bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c0:	e783      	b.n	80055ca <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80056c2:	bf00      	nop
 80056c4:	58024400 	.word	0x58024400
 80056c8:	4a742400 	.word	0x4a742400
 80056cc:	39000000 	.word	0x39000000
 80056d0:	03d09000 	.word	0x03d09000
 80056d4:	4bbebc20 	.word	0x4bbebc20
 80056d8:	4c742400 	.word	0x4c742400

080056dc <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80056dc:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80056de:	492c      	ldr	r1, [pc, #176]	; (8005790 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80056e0:	695a      	ldr	r2, [r3, #20]
{
 80056e2:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80056e4:	699c      	ldr	r4, [r3, #24]
 80056e6:	f044 0408 	orr.w	r4, r4, #8
 80056ea:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80056ec:	699c      	ldr	r4, [r3, #24]
 80056ee:	f044 0410 	orr.w	r4, r4, #16
 80056f2:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80056f4:	681c      	ldr	r4, [r3, #0]
 80056f6:	f024 0401 	bic.w	r4, r4, #1
 80056fa:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80056fc:	691c      	ldr	r4, [r3, #16]
 80056fe:	4021      	ands	r1, r4
 8005700:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005702:	6899      	ldr	r1, [r3, #8]
 8005704:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8005708:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800570a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 800570e:	2904      	cmp	r1, #4
 8005710:	d001      	beq.n	8005716 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005712:	0691      	lsls	r1, r2, #26
 8005714:	d430      	bmi.n	8005778 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005716:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 800571a:	2903      	cmp	r1, #3
 800571c:	d001      	beq.n	8005722 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800571e:	0654      	lsls	r4, r2, #25
 8005720:	d41f      	bmi.n	8005762 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005722:	0591      	lsls	r1, r2, #22
 8005724:	d509      	bpl.n	800573a <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005726:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800572a:	f041 0101 	orr.w	r1, r1, #1
 800572e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005732:	6999      	ldr	r1, [r3, #24]
 8005734:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005738:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800573a:	05d2      	lsls	r2, r2, #23
 800573c:	d509      	bpl.n	8005752 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800573e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005742:	f042 0208 	orr.w	r2, r2, #8
 8005746:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005750:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005752:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8005754:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8005758:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800575c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005760:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005762:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8005766:	f041 0104 	orr.w	r1, r1, #4
 800576a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576e:	6999      	ldr	r1, [r3, #24]
 8005770:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005774:	6199      	str	r1, [r3, #24]
 8005776:	e7d4      	b.n	8005722 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005778:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800577c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005780:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005784:	6999      	ldr	r1, [r3, #24]
 8005786:	f041 0120 	orr.w	r1, r1, #32
 800578a:	6199      	str	r1, [r3, #24]
 800578c:	e7c3      	b.n	8005716 <SPI_CloseTransfer+0x3a>
 800578e:	bf00      	nop
 8005790:	fffffc90 	.word	0xfffffc90

08005794 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005794:	2800      	cmp	r0, #0
 8005796:	f000 80c9 	beq.w	800592c <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800579a:	4a66      	ldr	r2, [pc, #408]	; (8005934 <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800579c:	2100      	movs	r1, #0
{
 800579e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80057a2:	6803      	ldr	r3, [r0, #0]
 80057a4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a6:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d017      	beq.n	80057dc <HAL_SPI_Init+0x48>
 80057ac:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <HAL_SPI_Init+0x48>
 80057b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057b8:	4293      	cmp	r3, r2
 80057ba:	68c2      	ldr	r2, [r0, #12]
 80057bc:	f000 80ae 	beq.w	800591c <HAL_SPI_Init+0x188>
 80057c0:	2a0f      	cmp	r2, #15
 80057c2:	d808      	bhi.n	80057d6 <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80057c4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80057c6:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80057ca:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 80057cc:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 80057ce:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80057d2:	2908      	cmp	r1, #8
 80057d4:	d916      	bls.n	8005804 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 80057d6:	2001      	movs	r0, #1
}
 80057d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80057dc:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80057de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80057e0:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80057e4:	4e53      	ldr	r6, [pc, #332]	; (8005934 <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80057e6:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 80057e8:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 80057ea:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80057ee:	4d52      	ldr	r5, [pc, #328]	; (8005938 <HAL_SPI_Init+0x1a4>)
 80057f0:	42ab      	cmp	r3, r5
 80057f2:	bf18      	it	ne
 80057f4:	42b3      	cmpne	r3, r6
 80057f6:	d003      	beq.n	8005800 <HAL_SPI_Init+0x6c>
 80057f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	d101      	bne.n	8005804 <HAL_SPI_Init+0x70>
 8005800:	2910      	cmp	r1, #16
 8005802:	d8e8      	bhi.n	80057d6 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005804:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8005808:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 800580c:	2900      	cmp	r1, #0
 800580e:	d07a      	beq.n	8005906 <HAL_SPI_Init+0x172>
 8005810:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8005814:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005816:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005818:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 800581a:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800581e:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8005822:	6819      	ldr	r1, [r3, #0]
 8005824:	f021 0101 	bic.w	r1, r1, #1
 8005828:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800582a:	6899      	ldr	r1, [r3, #8]
 800582c:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005830:	6861      	ldr	r1, [r4, #4]
 8005832:	d058      	beq.n	80058e6 <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005834:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
 8005838:	d001      	beq.n	800583e <HAL_SPI_Init+0xaa>
 800583a:	2a06      	cmp	r2, #6
 800583c:	d849      	bhi.n	80058d2 <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800583e:	f8d3 e000 	ldr.w	lr, [r3]
 8005842:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8005846:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800584a:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800584c:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005850:	4337      	orrs	r7, r6
 8005852:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005854:	4337      	orrs	r7, r6
 8005856:	6926      	ldr	r6, [r4, #16]
 8005858:	4337      	orrs	r7, r6
 800585a:	6966      	ldr	r6, [r4, #20]
 800585c:	4337      	orrs	r7, r6
 800585e:	6a26      	ldr	r6, [r4, #32]
 8005860:	4337      	orrs	r7, r6
 8005862:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8005864:	4337      	orrs	r7, r6
 8005866:	68a6      	ldr	r6, [r4, #8]
 8005868:	4337      	orrs	r7, r6
 800586a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800586c:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800586e:	69e6      	ldr	r6, [r4, #28]
 8005870:	4332      	orrs	r2, r6
 8005872:	4310      	orrs	r0, r2
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005874:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005876:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005878:	ea40 000c 	orr.w	r0, r0, ip
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800587c:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800587e:	6098      	str	r0, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005880:	4315      	orrs	r5, r2
 8005882:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005884:	b9b9      	cbnz	r1, 80058b6 <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800588c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005890:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8005898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800589c:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800589e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80058a8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058aa:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80058ae:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80058b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058b8:	f022 0201 	bic.w	r2, r2, #1
 80058bc:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80058be:	f1b9 0f00 	cmp.w	r9, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80058c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80058cc:	430a      	orrs	r2, r1
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	e7e9      	b.n	80058a6 <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80058d2:	f8d3 e000 	ldr.w	lr, [r3]
 80058d6:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80058d8:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 80058dc:	ea4e 0e06 	orr.w	lr, lr, r6
 80058e0:	f8c3 e000 	str.w	lr, [r3]
 80058e4:	e7b1      	b.n	800584a <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058e6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80058ea:	d006      	beq.n	80058fa <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d1a1      	bne.n	8005834 <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058f0:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80058f6:	4689      	mov	r9, r1
 80058f8:	e7a1      	b.n	800583e <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058fa:	b9cd      	cbnz	r5, 8005930 <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80058fc:	681e      	ldr	r6, [r3, #0]
 80058fe:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8005902:	601e      	str	r6, [r3, #0]
 8005904:	e796      	b.n	8005834 <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
 8005906:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005908:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800590c:	f7fd f8d4 	bl	8002ab8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005910:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005912:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005914:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8005918:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800591a:	e77b      	b.n	8005814 <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800591c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800591e:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005922:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8005924:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8005926:	fb05 1101 	mla	r1, r5, r1, r1
 800592a:	e769      	b.n	8005800 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 800592c:	2001      	movs	r0, #1
}
 800592e:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005930:	4689      	mov	r9, r1
 8005932:	e782      	b.n	800583a <HAL_SPI_Init+0xa6>
 8005934:	40013000 	.word	0x40013000
 8005938:	40003800 	.word	0x40003800

0800593c <HAL_SPI_Transmit>:
{
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005942:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005946:	2b01      	cmp	r3, #1
 8005948:	f000 8084 	beq.w	8005a54 <HAL_SPI_Transmit+0x118>
 800594c:	2301      	movs	r3, #1
 800594e:	4604      	mov	r4, r0
 8005950:	4690      	mov	r8, r2
 8005952:	4689      	mov	r9, r1
 8005954:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005958:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 800595a:	f7fd fd6d 	bl	8003438 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800595e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8005962:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005964:	2b01      	cmp	r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	d16d      	bne.n	8005a46 <HAL_SPI_Transmit+0x10a>
  if ((pData == NULL) || (Size == 0UL))
 800596a:	f1b9 0f00 	cmp.w	r9, #0
 800596e:	f000 80fc 	beq.w	8005b6a <HAL_SPI_Transmit+0x22e>
 8005972:	fab8 f388 	clz	r3, r8
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	f1b8 0f00 	cmp.w	r8, #0
 800597c:	f000 80f5 	beq.w	8005b6a <HAL_SPI_Transmit+0x22e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005980:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 8005982:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005984:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005988:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800598c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferCount = Size;
 8005990:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t) 0UL;
 8005994:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SPI_1LINE_TX(hspi);
 8005998:	6821      	ldr	r1, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800599a:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800599e:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80059a2:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a6:	68a3      	ldr	r3, [r4, #8]
 80059a8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80059ac:	f000 8148 	beq.w	8005c40 <HAL_SPI_Transmit+0x304>
    SPI_2LINES_TX(hspi);
 80059b0:	68cb      	ldr	r3, [r1, #12]
 80059b2:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 80059b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ba:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80059bc:	684a      	ldr	r2, [r1, #4]
 80059be:	4ba9      	ldr	r3, [pc, #676]	; (8005c64 <HAL_SPI_Transmit+0x328>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	ea43 0308 	orr.w	r3, r3, r8
 80059c6:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 80059c8:	680b      	ldr	r3, [r1, #0]
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059d0:	6863      	ldr	r3, [r4, #4]
 80059d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059d6:	d103      	bne.n	80059e0 <HAL_SPI_Transmit+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80059d8:	680b      	ldr	r3, [r1, #0]
 80059da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059de:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80059e0:	68e3      	ldr	r3, [r4, #12]
 80059e2:	2b0f      	cmp	r3, #15
 80059e4:	d875      	bhi.n	8005ad2 <HAL_SPI_Transmit+0x196>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e6:	2b07      	cmp	r3, #7
    while (hspi->TxXferCount > 0UL)
 80059e8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80059ec:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ee:	d952      	bls.n	8005a96 <HAL_SPI_Transmit+0x15a>
    while (hspi->TxXferCount > 0UL)
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8115 	beq.w	8005c20 <HAL_SPI_Transmit+0x2e4>
 80059f6:	b9cd      	cbnz	r5, 8005a2c <HAL_SPI_Transmit+0xf0>
 80059f8:	e0d5      	b.n	8005ba6 <HAL_SPI_Transmit+0x26a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80059fa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f240 80e7 	bls.w	8005bd4 <HAL_SPI_Transmit+0x298>
 8005a06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80e3 	beq.w	8005bd4 <HAL_SPI_Transmit+0x298>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005a0e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a14:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a16:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005a18:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005a1c:	3b02      	subs	r3, #2
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8005a24:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b303      	cbz	r3, 8005a6e <HAL_SPI_Transmit+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a2c:	694b      	ldr	r3, [r1, #20]
 8005a2e:	0798      	lsls	r0, r3, #30
 8005a30:	d4e3      	bmi.n	80059fa <HAL_SPI_Transmit+0xbe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a32:	f7fd fd01 	bl	8003438 <HAL_GetTick>
 8005a36:	1b80      	subs	r0, r0, r6
 8005a38:	4285      	cmp	r5, r0
 8005a3a:	d802      	bhi.n	8005a42 <HAL_SPI_Transmit+0x106>
 8005a3c:	1c69      	adds	r1, r5, #1
 8005a3e:	f040 8081 	bne.w	8005b44 <HAL_SPI_Transmit+0x208>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a42:	6821      	ldr	r1, [r4, #0]
 8005a44:	e7ee      	b.n	8005a24 <HAL_SPI_Transmit+0xe8>
    __HAL_UNLOCK(hspi);
 8005a46:	2300      	movs	r3, #0
    return errorcode;
 8005a48:	2202      	movs	r2, #2
    __HAL_UNLOCK(hspi);
 8005a4a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005a4e:	4610      	mov	r0, r2
 8005a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005a54:	2202      	movs	r2, #2
}
 8005a56:	4610      	mov	r0, r2
 8005a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5c:	f7fd fcec 	bl	8003438 <HAL_GetTick>
 8005a60:	1b80      	subs	r0, r0, r6
 8005a62:	4285      	cmp	r5, r0
 8005a64:	d802      	bhi.n	8005a6c <HAL_SPI_Transmit+0x130>
 8005a66:	1c6a      	adds	r2, r5, #1
 8005a68:	f040 80e3 	bne.w	8005c32 <HAL_SPI_Transmit+0x2f6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a6c:	6821      	ldr	r1, [r4, #0]
 8005a6e:	694b      	ldr	r3, [r1, #20]
 8005a70:	0719      	lsls	r1, r3, #28
 8005a72:	d5f3      	bpl.n	8005a5c <HAL_SPI_Transmit+0x120>
  SPI_CloseTransfer(hspi);
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7ff fe31 	bl	80056dc <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005a7c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005a7e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a82:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8005a86:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	bf18      	it	ne
 8005a8e:	2201      	movne	r2, #1
}
 8005a90:	4610      	mov	r0, r2
 8005a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (hspi->TxXferCount > 0UL)
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80c2 	beq.w	8005c20 <HAL_SPI_Transmit+0x2e4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a9c:	694b      	ldr	r3, [r1, #20]
 8005a9e:	079b      	lsls	r3, r3, #30
 8005aa0:	f140 80b3 	bpl.w	8005c0a <HAL_SPI_Transmit+0x2ce>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005aa4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d97f      	bls.n	8005bae <HAL_SPI_Transmit+0x272>
 8005aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d97c      	bls.n	8005bae <HAL_SPI_Transmit+0x272>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005ab4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aba:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005abc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005abe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005ac2:	3b04      	subs	r3, #4
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8005aca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	e7e1      	b.n	8005a96 <HAL_SPI_Transmit+0x15a>
    while (hspi->TxXferCount > 0UL)
 8005ad2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80a1 	beq.w	8005c20 <HAL_SPI_Transmit+0x2e4>
 8005ade:	b985      	cbnz	r5, 8005b02 <HAL_SPI_Transmit+0x1c6>
 8005ae0:	e02b      	b.n	8005b3a <HAL_SPI_Transmit+0x1fe>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005ae2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae8:	620a      	str	r2, [r1, #32]
        hspi->TxXferCount--;
 8005aea:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005aee:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005af0:	3a01      	subs	r2, #1
 8005af2:	b292      	uxth	r2, r2
 8005af4:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8005af8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005afc:	b292      	uxth	r2, r2
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d0b5      	beq.n	8005a6e <HAL_SPI_Transmit+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005b02:	694b      	ldr	r3, [r1, #20]
 8005b04:	079b      	lsls	r3, r3, #30
 8005b06:	d4ec      	bmi.n	8005ae2 <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b08:	f7fd fc96 	bl	8003438 <HAL_GetTick>
 8005b0c:	1b80      	subs	r0, r0, r6
 8005b0e:	4285      	cmp	r5, r0
 8005b10:	d801      	bhi.n	8005b16 <HAL_SPI_Transmit+0x1da>
 8005b12:	1c6f      	adds	r7, r5, #1
 8005b14:	d116      	bne.n	8005b44 <HAL_SPI_Transmit+0x208>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005b16:	6821      	ldr	r1, [r4, #0]
 8005b18:	e7ee      	b.n	8005af8 <HAL_SPI_Transmit+0x1bc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005b1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b1c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005b20:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 8005b22:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b26:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8005b30:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d075      	beq.n	8005c26 <HAL_SPI_Transmit+0x2ea>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005b3a:	694b      	ldr	r3, [r1, #20]
 8005b3c:	079d      	lsls	r5, r3, #30
 8005b3e:	d4ec      	bmi.n	8005b1a <HAL_SPI_Transmit+0x1de>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b40:	f7fd fc7a 	bl	8003438 <HAL_GetTick>
          SPI_CloseTransfer(hspi);
 8005b44:	4620      	mov	r0, r4
 8005b46:	f7ff fdc9 	bl	80056dc <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b4a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b4e:	2101      	movs	r1, #1
          __HAL_UNLOCK(hspi);
 8005b50:	2400      	movs	r4, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
          return HAL_TIMEOUT;
 8005b56:	2203      	movs	r2, #3
          __HAL_UNLOCK(hspi);
 8005b58:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b5c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b60:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
}
 8005b64:	4610      	mov	r0, r2
 8005b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4610      	mov	r0, r2
    __HAL_UNLOCK(hspi);
 8005b6e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005b76:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d964      	bls.n	8005c4a <HAL_SPI_Transmit+0x30e>
 8005b80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d061      	beq.n	8005c4a <HAL_SPI_Transmit+0x30e>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005b86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b88:	f852 3b04 	ldr.w	r3, [r2], #4
 8005b8c:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8005b8e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b92:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005b94:	3b02      	subs	r3, #2
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8005b9c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d03f      	beq.n	8005c26 <HAL_SPI_Transmit+0x2ea>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ba6:	694b      	ldr	r3, [r1, #20]
 8005ba8:	079a      	lsls	r2, r3, #30
 8005baa:	d5c9      	bpl.n	8005b40 <HAL_SPI_Transmit+0x204>
 8005bac:	e7e3      	b.n	8005b76 <HAL_SPI_Transmit+0x23a>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005bae:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d919      	bls.n	8005bec <HAL_SPI_Transmit+0x2b0>
 8005bb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bba:	b1bb      	cbz	r3, 8005bec <HAL_SPI_Transmit+0x2b0>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bbc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005bbe:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005bc2:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005bc6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005bca:	3b02      	subs	r3, #2
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8005bd2:	e77a      	b.n	8005aca <HAL_SPI_Transmit+0x18e>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bd4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005bd6:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005bda:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bdc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8005bde:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8005bea:	e71b      	b.n	8005a24 <HAL_SPI_Transmit+0xe8>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bf4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005bf6:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8005bfc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8005c08:	e75f      	b.n	8005aca <HAL_SPI_Transmit+0x18e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0a:	f7fd fc15 	bl	8003438 <HAL_GetTick>
 8005c0e:	1b80      	subs	r0, r0, r6
 8005c10:	42a8      	cmp	r0, r5
 8005c12:	d301      	bcc.n	8005c18 <HAL_SPI_Transmit+0x2dc>
 8005c14:	1c68      	adds	r0, r5, #1
 8005c16:	d195      	bne.n	8005b44 <HAL_SPI_Transmit+0x208>
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	d093      	beq.n	8005b44 <HAL_SPI_Transmit+0x208>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c1c:	6821      	ldr	r1, [r4, #0]
 8005c1e:	e754      	b.n	8005aca <HAL_SPI_Transmit+0x18e>
 8005c20:	2d00      	cmp	r5, #0
 8005c22:	f47f af24 	bne.w	8005a6e <HAL_SPI_Transmit+0x132>
 8005c26:	694b      	ldr	r3, [r1, #20]
 8005c28:	071b      	lsls	r3, r3, #28
 8005c2a:	f53f af23 	bmi.w	8005a74 <HAL_SPI_Transmit+0x138>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2e:	f7fd fc03 	bl	8003438 <HAL_GetTick>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c32:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005c36:	f043 0320 	orr.w	r3, r3, #32
 8005c3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8005c3e:	e719      	b.n	8005a74 <HAL_SPI_Transmit+0x138>
    SPI_1LINE_TX(hspi);
 8005c40:	680b      	ldr	r3, [r1, #0]
 8005c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c46:	600b      	str	r3, [r1, #0]
 8005c48:	e6b8      	b.n	80059bc <HAL_SPI_Transmit+0x80>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c4c:	f832 3b02 	ldrh.w	r3, [r2], #2
 8005c50:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount--;
 8005c52:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c56:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8005c60:	e79c      	b.n	8005b9c <HAL_SPI_Transmit+0x260>
 8005c62:	bf00      	nop
 8005c64:	ffff0000 	.word	0xffff0000

08005c68 <HAL_SPI_TransmitReceive>:
{
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005c6e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8005c72:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8005c74:	2b01      	cmp	r3, #1
{
 8005c76:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8005c7a:	f000 80bd 	beq.w	8005df8 <HAL_SPI_TransmitReceive+0x190>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4604      	mov	r4, r0
 8005c82:	4689      	mov	r9, r1
 8005c84:	4693      	mov	fp, r2
 8005c86:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005c8a:	6803      	ldr	r3, [r0, #0]
 8005c8c:	9301      	str	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8005c8e:	f7fd fbd3 	bl	8003438 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005c92:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8005c96:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005c98:	2901      	cmp	r1, #1
 8005c9a:	b2cb      	uxtb	r3, r1
 8005c9c:	f040 80a4 	bne.w	8005de8 <HAL_SPI_TransmitReceive+0x180>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005ca0:	f1bb 0f00 	cmp.w	fp, #0
 8005ca4:	bf18      	it	ne
 8005ca6:	f1b9 0f00 	cmpne.w	r9, #0
 8005caa:	f000 8096 	beq.w	8005dda <HAL_SPI_TransmitReceive+0x172>
 8005cae:	fab5 f185 	clz	r1, r5
 8005cb2:	0949      	lsrs	r1, r1, #5
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	f000 8090 	beq.w	8005dda <HAL_SPI_TransmitReceive+0x172>
  SPI_2LINES(hspi);
 8005cba:	6826      	ldr	r6, [r4, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005cbc:	2305      	movs	r3, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cbe:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005cc2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8005cca:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 8005cce:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  SPI_2LINES(hspi);
 8005cd2:	68f3      	ldr	r3, [r6, #12]
  hspi->RxXferSize  = Size;
 8005cd4:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  SPI_2LINES(hspi);
 8005cd8:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005cdc:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005ce0:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8005ce4:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  SPI_2LINES(hspi);
 8005ce8:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005cea:	4ba3      	ldr	r3, [pc, #652]	; (8005f78 <HAL_SPI_TransmitReceive+0x310>)
 8005cec:	6871      	ldr	r1, [r6, #4]
 8005cee:	400b      	ands	r3, r1
 8005cf0:	432b      	orrs	r3, r5
 8005cf2:	6073      	str	r3, [r6, #4]
  __HAL_SPI_ENABLE(hspi);
 8005cf4:	6833      	ldr	r3, [r6, #0]
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6033      	str	r3, [r6, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d02:	f000 80bb 	beq.w	8005e7c <HAL_SPI_TransmitReceive+0x214>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d06:	f118 0a01 	adds.w	sl, r8, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d0a:	68e3      	ldr	r3, [r4, #12]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0c:	bf18      	it	ne
 8005d0e:	f04f 0a01 	movne.w	sl, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d875      	bhi.n	8005e02 <HAL_SPI_TransmitReceive+0x19a>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d16:	2b07      	cmp	r3, #7
 8005d18:	f240 80ed 	bls.w	8005ef6 <HAL_SPI_TransmitReceive+0x28e>
 8005d1c:	f1b8 0f00 	cmp.w	r8, #0
 8005d20:	f000 812c 	beq.w	8005f7c <HAL_SPI_TransmitReceive+0x314>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d24:	46a9      	mov	r9, r5
 8005d26:	e000      	b.n	8005d2a <HAL_SPI_TransmitReceive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005d28:	6826      	ldr	r6, [r4, #0]
 8005d2a:	6973      	ldr	r3, [r6, #20]
 8005d2c:	079b      	lsls	r3, r3, #30
 8005d2e:	d50f      	bpl.n	8005d50 <HAL_SPI_TransmitReceive+0xe8>
 8005d30:	b175      	cbz	r5, 8005d50 <HAL_SPI_TransmitReceive+0xe8>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d34:	9901      	ldr	r1, [sp, #4]
 8005d36:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005d3a:	840a      	strh	r2, [r1, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3c:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005d3e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d4a:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005d4e:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005d50:	6973      	ldr	r3, [r6, #20]
 8005d52:	07d8      	lsls	r0, r3, #31
 8005d54:	d512      	bpl.n	8005d7c <HAL_SPI_TransmitReceive+0x114>
 8005d56:	f1b9 0f00 	cmp.w	r9, #0
 8005d5a:	d00f      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x114>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d5c:	9b01      	ldr	r3, [sp, #4]
 8005d5e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8005d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d62:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d66:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005d68:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005d74:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005d78:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d7c:	f7fd fb5c 	bl	8003438 <HAL_GetTick>
 8005d80:	1bc0      	subs	r0, r0, r7
 8005d82:	4580      	cmp	r8, r0
 8005d84:	d803      	bhi.n	8005d8e <HAL_SPI_TransmitReceive+0x126>
 8005d86:	f1ba 0f00 	cmp.w	sl, #0
 8005d8a:	f040 80a0 	bne.w	8005ece <HAL_SPI_TransmitReceive+0x266>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d8e:	ea45 0309 	orr.w	r3, r5, r9
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1c7      	bne.n	8005d28 <HAL_SPI_TransmitReceive+0xc0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	071b      	lsls	r3, r3, #28
 8005d9e:	d40d      	bmi.n	8005dbc <HAL_SPI_TransmitReceive+0x154>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da0:	f7fd fb4a 	bl	8003438 <HAL_GetTick>
 8005da4:	1bc0      	subs	r0, r0, r7
 8005da6:	4580      	cmp	r8, r0
 8005da8:	d8f6      	bhi.n	8005d98 <HAL_SPI_TransmitReceive+0x130>
 8005daa:	f1ba 0f00 	cmp.w	sl, #0
 8005dae:	d0f3      	beq.n	8005d98 <HAL_SPI_TransmitReceive+0x130>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005db4:	f043 0320 	orr.w	r3, r3, #32
 8005db8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7ff fc8d 	bl	80056dc <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8005dc2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8005dc4:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005dc6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8005dce:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	bf18      	it	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	e002      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x178>
    __HAL_UNLOCK(hspi);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	b003      	add	sp, #12
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return errorcode;
 8005de8:	2302      	movs	r3, #2
    __HAL_UNLOCK(hspi);
 8005dea:	2200      	movs	r2, #0
}
 8005dec:	4618      	mov	r0, r3
    __HAL_UNLOCK(hspi);
 8005dee:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8005df2:	b003      	add	sp, #12
 8005df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hspi);
 8005df8:	2302      	movs	r3, #2
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	b003      	add	sp, #12
 8005dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e02:	f1b8 0f00 	cmp.w	r8, #0
 8005e06:	d03e      	beq.n	8005e86 <HAL_SPI_TransmitReceive+0x21e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e08:	46a9      	mov	r9, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005e0a:	f248 0b08 	movw	fp, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005e0e:	6973      	ldr	r3, [r6, #20]
 8005e10:	0799      	lsls	r1, r3, #30
 8005e12:	d50e      	bpl.n	8005e32 <HAL_SPI_TransmitReceive+0x1ca>
 8005e14:	b16d      	cbz	r5, 8005e32 <HAL_SPI_TransmitReceive+0x1ca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005e16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e1c:	6232      	str	r2, [r6, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e1e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8005e20:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005e2c:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005e30:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005e32:	6973      	ldr	r3, [r6, #20]
 8005e34:	ea13 0f0b 	tst.w	r3, fp
 8005e38:	d011      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x1f6>
 8005e3a:	f1b9 0f00 	cmp.w	r9, #0
 8005e3e:	d00e      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x1f6>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e40:	6b31      	ldr	r1, [r6, #48]	; 0x30
        hspi->RxXferCount --;
 8005e42:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005e48:	3b01      	subs	r3, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e4a:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 8005e4e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e50:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005e52:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005e56:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005e5a:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5e:	f7fd faeb 	bl	8003438 <HAL_GetTick>
 8005e62:	1bc0      	subs	r0, r0, r7
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e64:	ea45 0309 	orr.w	r3, r5, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e68:	4580      	cmp	r8, r0
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e6a:	b29b      	uxth	r3, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e6c:	d802      	bhi.n	8005e74 <HAL_SPI_TransmitReceive+0x20c>
 8005e6e:	f1ba 0f00 	cmp.w	sl, #0
 8005e72:	d12c      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x266>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d08f      	beq.n	8005d98 <HAL_SPI_TransmitReceive+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005e78:	6826      	ldr	r6, [r4, #0]
 8005e7a:	e7c8      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e82:	6033      	str	r3, [r6, #0]
 8005e84:	e73f      	b.n	8005d06 <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005e86:	6973      	ldr	r3, [r6, #20]
 8005e88:	079a      	lsls	r2, r3, #30
 8005e8a:	d50c      	bpl.n	8005ea6 <HAL_SPI_TransmitReceive+0x23e>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	f851 3b04 	ldr.w	r3, [r1], #4
 8005e92:	6233      	str	r3, [r6, #32]
        hspi->TxXferCount --;
 8005e94:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e98:	65e1      	str	r1, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ea2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005ea6:	6971      	ldr	r1, [r6, #20]
 8005ea8:	f248 0308 	movw	r3, #32776	; 0x8008
 8005eac:	4219      	tst	r1, r3
 8005eae:	d00c      	beq.n	8005eca <HAL_SPI_TransmitReceive+0x262>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005eb0:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8005eb2:	465a      	mov	r2, fp
        hspi->RxXferCount --;
 8005eb4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005eb8:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 8005ebc:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ebe:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005ec6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eca:	f7fd fab5 	bl	8003438 <HAL_GetTick>
        SPI_CloseTransfer(hspi);
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7ff fc04 	bl	80056dc <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ed4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005ed8:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 8005eda:	2400      	movs	r4, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
        __HAL_UNLOCK(hspi);
 8005ee2:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ee6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005eea:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	b003      	add	sp, #12
 8005ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef6:	f1b8 0f00 	cmp.w	r8, #0
 8005efa:	d062      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x35a>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005efc:	46a9      	mov	r9, r5
 8005efe:	e000      	b.n	8005f02 <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005f00:	6826      	ldr	r6, [r4, #0]
 8005f02:	6973      	ldr	r3, [r6, #20]
 8005f04:	079b      	lsls	r3, r3, #30
 8005f06:	d511      	bpl.n	8005f2c <HAL_SPI_TransmitReceive+0x2c4>
 8005f08:	b185      	cbz	r5, 8005f2c <HAL_SPI_TransmitReceive+0x2c4>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f886 3020 	strb.w	r3, [r6, #32]
        hspi->TxXferCount--;
 8005f12:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005f16:	6826      	ldr	r6, [r4, #0]
        hspi->TxXferCount--;
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        initial_TxXferCount = hspi->TxXferCount;
 8005f22:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f26:	3301      	adds	r3, #1
        initial_TxXferCount = hspi->TxXferCount;
 8005f28:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f2a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005f2c:	6973      	ldr	r3, [r6, #20]
 8005f2e:	07d8      	lsls	r0, r3, #31
 8005f30:	d513      	bpl.n	8005f5a <HAL_SPI_TransmitReceive+0x2f2>
 8005f32:	f1b9 0f00 	cmp.w	r9, #0
 8005f36:	d010      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0x2f2>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f38:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8005f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f3e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005f40:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
        initial_RxXferCount = hspi->RxXferCount;
 8005f4e:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f52:	3301      	adds	r3, #1
        initial_RxXferCount = hspi->RxXferCount;
 8005f54:	fa1f f989 	uxth.w	r9, r9
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f58:	6663      	str	r3, [r4, #100]	; 0x64
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5a:	f7fd fa6d 	bl	8003438 <HAL_GetTick>
 8005f5e:	1bc0      	subs	r0, r0, r7
 8005f60:	4580      	cmp	r8, r0
 8005f62:	d802      	bhi.n	8005f6a <HAL_SPI_TransmitReceive+0x302>
 8005f64:	f1ba 0f00 	cmp.w	sl, #0
 8005f68:	d1b1      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x266>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f6a:	ea45 0309 	orr.w	r3, r5, r9
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1c5      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x298>
 8005f74:	e710      	b.n	8005d98 <HAL_SPI_TransmitReceive+0x130>
 8005f76:	bf00      	nop
 8005f78:	ffff0000 	.word	0xffff0000
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005f7c:	6973      	ldr	r3, [r6, #20]
 8005f7e:	0799      	lsls	r1, r3, #30
 8005f80:	d50d      	bpl.n	8005f9e <HAL_SPI_TransmitReceive+0x336>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f82:	4649      	mov	r1, r9
 8005f84:	9a01      	ldr	r2, [sp, #4]
 8005f86:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005f8a:	8413      	strh	r3, [r2, #32]
        hspi->TxXferCount--;
 8005f8c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f90:	65e1      	str	r1, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005f9a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005f9e:	6973      	ldr	r3, [r6, #20]
 8005fa0:	07da      	lsls	r2, r3, #31
 8005fa2:	d592      	bpl.n	8005eca <HAL_SPI_TransmitReceive+0x262>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	465a      	mov	r2, fp
 8005fa8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005faa:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8005fae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb2:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005fbc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005fc0:	e783      	b.n	8005eca <HAL_SPI_TransmitReceive+0x262>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005fc2:	6973      	ldr	r3, [r6, #20]
 8005fc4:	0799      	lsls	r1, r3, #30
 8005fc6:	d50f      	bpl.n	8005fe8 <HAL_SPI_TransmitReceive+0x380>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fc8:	f899 3000 	ldrb.w	r3, [r9]
 8005fcc:	f886 3020 	strb.w	r3, [r6, #32]
        hspi->TxXferCount--;
 8005fd0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fd4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005fd6:	3b01      	subs	r3, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005fd8:	6826      	ldr	r6, [r4, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fda:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005fdc:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fde:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005fe0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005fe4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005fe8:	6973      	ldr	r3, [r6, #20]
 8005fea:	07da      	lsls	r2, r3, #31
 8005fec:	f57f af6d 	bpl.w	8005eca <HAL_SPI_TransmitReceive+0x262>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ff0:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8005ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ff6:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005ff8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ffc:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005ffe:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006000:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8006002:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006004:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8006006:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800600a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800600e:	e75c      	b.n	8005eca <HAL_SPI_TransmitReceive+0x262>

08006010 <HAL_SPI_TxCpltCallback>:
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop

08006014 <HAL_SPI_RxCpltCallback>:
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <HAL_SPI_TxRxCpltCallback>:
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop

0800601c <HAL_SPI_ErrorCallback>:
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <SPI_DMAAbortOnError>:
{
 8006020:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006022:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006024:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006026:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8006028:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800602c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006030:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006034:	f7ff fff2 	bl	800601c <HAL_SPI_ErrorCallback>
}
 8006038:	bd08      	pop	{r3, pc}
 800603a:	bf00      	nop

0800603c <HAL_SPI_SuspendCallback>:
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop

08006040 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 8006040:	6803      	ldr	r3, [r0, #0]
 8006042:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006044:	695a      	ldr	r2, [r3, #20]
{
 8006046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cfg1     = hspi->Instance->CFG1;
 800604a:	689f      	ldr	r7, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 800604c:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 8006050:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006054:	0512      	lsls	r2, r2, #20
{
 8006056:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 8006058:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800605a:	d502      	bpl.n	8006062 <HAL_SPI_IRQHandler+0x22>
 800605c:	0709      	lsls	r1, r1, #28
 800605e:	f100 80d2 	bmi.w	8006206 <HAL_SPI_IRQHandler+0x1c6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006062:	f005 0264 	and.w	r2, r5, #100	; 0x64
 8006066:	2a04      	cmp	r2, #4
 8006068:	d03e      	beq.n	80060e8 <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800606a:	f005 0245 	and.w	r2, r5, #69	; 0x45
 800606e:	2a01      	cmp	r2, #1
 8006070:	d044      	beq.n	80060fc <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006072:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8006076:	2a02      	cmp	r2, #2
 8006078:	f000 80dc 	beq.w	8006234 <HAL_SPI_IRQHandler+0x1f4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800607c:	072a      	lsls	r2, r5, #28
 800607e:	d55c      	bpl.n	800613a <HAL_SPI_IRQHandler+0xfa>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	f042 0208 	orr.w	r2, r2, #8
 8006086:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	f042 0210 	orr.w	r2, r2, #16
 800608e:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006096:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	f022 0208 	bic.w	r2, r2, #8
 800609e:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80060a6:	d133      	bne.n	8006110 <HAL_SPI_IRQHandler+0xd0>
      while (hspi->RxXferCount != 0UL)
 80060a8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80060ac:	b292      	uxth	r2, r2
 80060ae:	b37a      	cbz	r2, 8006110 <HAL_SPI_IRQHandler+0xd0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060b0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80060b2:	e00e      	b.n	80060d2 <HAL_SPI_IRQHandler+0x92>
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060b8:	f841 2b04 	str.w	r2, [r1], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80060bc:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 80060be:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80060c2:	3a01      	subs	r2, #1
 80060c4:	b292      	uxth	r2, r2
 80060c6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80060ca:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80060ce:	b292      	uxth	r2, r2
 80060d0:	b1f2      	cbz	r2, 8006110 <HAL_SPI_IRQHandler+0xd0>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80060d2:	68e2      	ldr	r2, [r4, #12]
 80060d4:	2a0f      	cmp	r2, #15
 80060d6:	d8ed      	bhi.n	80060b4 <HAL_SPI_IRQHandler+0x74>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060d8:	2a07      	cmp	r2, #7
 80060da:	f240 80a3 	bls.w	8006224 <HAL_SPI_IRQHandler+0x1e4>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060de:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80060e0:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060e4:	6661      	str	r1, [r4, #100]	; 0x64
 80060e6:	e7ea      	b.n	80060be <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 80060e8:	4620      	mov	r0, r4
 80060ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80060ec:	4798      	blx	r3
    hspi->RxISR(hspi);
 80060ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80060f0:	4620      	mov	r0, r4
 80060f2:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80060f4:	f005 0345 	and.w	r3, r5, #69	; 0x45
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d102      	bne.n	8006102 <HAL_SPI_IRQHandler+0xc2>
    hspi->RxISR(hspi);
 80060fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80060fe:	4620      	mov	r0, r4
 8006100:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006102:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8006106:	2d02      	cmp	r5, #2
 8006108:	f000 8094 	beq.w	8006234 <HAL_SPI_IRQHandler+0x1f4>
}
 800610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 8006110:	4620      	mov	r0, r4
 8006112:	f7ff fae3 	bl	80056dc <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8006116:	2301      	movs	r3, #1
 8006118:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800611c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006120:	2b00      	cmp	r3, #0
 8006122:	d17c      	bne.n	800621e <HAL_SPI_IRQHandler+0x1de>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006124:	2e05      	cmp	r6, #5
 8006126:	f000 808a 	beq.w	800623e <HAL_SPI_IRQHandler+0x1fe>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800612a:	2e04      	cmp	r6, #4
 800612c:	f000 808a 	beq.w	8006244 <HAL_SPI_IRQHandler+0x204>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006130:	2e03      	cmp	r6, #3
 8006132:	d1eb      	bne.n	800610c <HAL_SPI_IRQHandler+0xcc>
      HAL_SPI_TxCpltCallback(hspi);
 8006134:	f7ff ff6c 	bl	8006010 <HAL_SPI_TxCpltCallback>
 8006138:	e7e8      	b.n	800610c <HAL_SPI_IRQHandler+0xcc>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800613a:	f415 7f58 	tst.w	r5, #864	; 0x360
 800613e:	d0e5      	beq.n	800610c <HAL_SPI_IRQHandler+0xcc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006140:	066e      	lsls	r6, r5, #25
 8006142:	d509      	bpl.n	8006158 <HAL_SPI_IRQHandler+0x118>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006144:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006148:	f042 0204 	orr.w	r2, r2, #4
 800614c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006156:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006158:	05a8      	lsls	r0, r5, #22
 800615a:	d509      	bpl.n	8006170 <HAL_SPI_IRQHandler+0x130>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800615c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616e:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006170:	05e9      	lsls	r1, r5, #23
 8006172:	d509      	bpl.n	8006188 <HAL_SPI_IRQHandler+0x148>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006174:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006178:	f042 0208 	orr.w	r2, r2, #8
 800617c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006186:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006188:	06aa      	lsls	r2, r5, #26
 800618a:	d509      	bpl.n	80061a0 <HAL_SPI_IRQHandler+0x160>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800618c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006194:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	f042 0220 	orr.w	r2, r2, #32
 800619e:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	d0b1      	beq.n	800610c <HAL_SPI_IRQHandler+0xcc>
      __HAL_SPI_DISABLE(hspi);
 80061a8:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80061aa:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80061ae:	4a27      	ldr	r2, [pc, #156]	; (800624c <HAL_SPI_IRQHandler+0x20c>)
      __HAL_SPI_DISABLE(hspi);
 80061b0:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80061b4:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80061b8:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80061ba:	6919      	ldr	r1, [r3, #16]
 80061bc:	ea02 0201 	and.w	r2, r2, r1
 80061c0:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80061c2:	d128      	bne.n	8006216 <HAL_SPI_IRQHandler+0x1d6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80061c4:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80061c6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80061c8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80061cc:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80061ce:	b150      	cbz	r0, 80061e6 <HAL_SPI_IRQHandler+0x1a6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061d0:	4b1f      	ldr	r3, [pc, #124]	; (8006250 <HAL_SPI_IRQHandler+0x210>)
 80061d2:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061d4:	f7fd f9ac 	bl	8003530 <HAL_DMA_Abort_IT>
 80061d8:	b128      	cbz	r0, 80061e6 <HAL_SPI_IRQHandler+0x1a6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061da:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80061de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 80061e6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d08f      	beq.n	800610c <HAL_SPI_IRQHandler+0xcc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061ec:	4b18      	ldr	r3, [pc, #96]	; (8006250 <HAL_SPI_IRQHandler+0x210>)
 80061ee:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061f0:	f7fd f99e 	bl	8003530 <HAL_DMA_Abort_IT>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d089      	beq.n	800610c <HAL_SPI_IRQHandler+0xcc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80061fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006200:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006204:	e782      	b.n	800610c <HAL_SPI_IRQHandler+0xcc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800620c:	619a      	str	r2, [r3, #24]
    HAL_SPI_SuspendCallback(hspi);
 800620e:	f7ff ff15 	bl	800603c <HAL_SPI_SuspendCallback>
}
 8006212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8006216:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006218:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800621a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800621e:	f7ff fefd 	bl	800601c <HAL_SPI_ErrorCallback>
 8006222:	e773      	b.n	800610c <HAL_SPI_IRQHandler+0xcc>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800622a:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800622c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800622e:	3101      	adds	r1, #1
 8006230:	6661      	str	r1, [r4, #100]	; 0x64
 8006232:	e744      	b.n	80060be <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 8006234:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006236:	4620      	mov	r0, r4
}
 8006238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800623c:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800623e:	f7ff feeb 	bl	8006018 <HAL_SPI_TxRxCpltCallback>
 8006242:	e763      	b.n	800610c <HAL_SPI_IRQHandler+0xcc>
      HAL_SPI_RxCpltCallback(hspi);
 8006244:	f7ff fee6 	bl	8006014 <HAL_SPI_RxCpltCallback>
 8006248:	e760      	b.n	800610c <HAL_SPI_IRQHandler+0xcc>
 800624a:	bf00      	nop
 800624c:	fffffc94 	.word	0xfffffc94
 8006250:	08006021 	.word	0x08006021

08006254 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop

08006258 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006258:	2800      	cmp	r0, #0
 800625a:	f000 80a5 	beq.w	80063a8 <HAL_TIM_Base_Init+0x150>
{
 800625e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006260:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006264:	4604      	mov	r4, r0
 8006266:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800626a:	2b00      	cmp	r3, #0
 800626c:	d076      	beq.n	800635c <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006272:	494e      	ldr	r1, [pc, #312]	; (80063ac <HAL_TIM_Base_Init+0x154>)
 8006274:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8006280:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006282:	fab1 f181 	clz	r1, r1
 8006286:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800628a:	d027      	beq.n	80062dc <HAL_TIM_Base_Init+0x84>
 800628c:	bb31      	cbnz	r1, 80062dc <HAL_TIM_Base_Init+0x84>
 800628e:	4848      	ldr	r0, [pc, #288]	; (80063b0 <HAL_TIM_Base_Init+0x158>)
 8006290:	4d48      	ldr	r5, [pc, #288]	; (80063b4 <HAL_TIM_Base_Init+0x15c>)
 8006292:	4282      	cmp	r2, r0
 8006294:	d067      	beq.n	8006366 <HAL_TIM_Base_Init+0x10e>
 8006296:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800629a:	4282      	cmp	r2, r0
 800629c:	d063      	beq.n	8006366 <HAL_TIM_Base_Init+0x10e>
 800629e:	1b55      	subs	r5, r2, r5
 80062a0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80062a4:	fab5 f585 	clz	r5, r5
 80062a8:	4282      	cmp	r2, r0
 80062aa:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80062ae:	d063      	beq.n	8006378 <HAL_TIM_Base_Init+0x120>
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	d161      	bne.n	8006378 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b4:	4840      	ldr	r0, [pc, #256]	; (80063b8 <HAL_TIM_Base_Init+0x160>)
 80062b6:	4941      	ldr	r1, [pc, #260]	; (80063bc <HAL_TIM_Base_Init+0x164>)
 80062b8:	428a      	cmp	r2, r1
 80062ba:	bf18      	it	ne
 80062bc:	4282      	cmpne	r2, r0
 80062be:	d065      	beq.n	800638c <HAL_TIM_Base_Init+0x134>
 80062c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062c4:	428a      	cmp	r2, r1
 80062c6:	d061      	beq.n	800638c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c8:	69a0      	ldr	r0, [r4, #24]
 80062ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ce:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80062d2:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062d8:	6293      	str	r3, [r2, #40]	; 0x28
 80062da:	e023      	b.n	8006324 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062dc:	4d35      	ldr	r5, [pc, #212]	; (80063b4 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80062e2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062e4:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 80062e6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062e8:	fab5 f585 	clz	r5, r5
 80062ec:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ee:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062f4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f6:	69a0      	ldr	r0, [r4, #24]
 80062f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80062fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006300:	68e3      	ldr	r3, [r4, #12]
 8006302:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006304:	6863      	ldr	r3, [r4, #4]
 8006306:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006308:	b951      	cbnz	r1, 8006320 <HAL_TIM_Base_Init+0xc8>
 800630a:	b94d      	cbnz	r5, 8006320 <HAL_TIM_Base_Init+0xc8>
 800630c:	492a      	ldr	r1, [pc, #168]	; (80063b8 <HAL_TIM_Base_Init+0x160>)
 800630e:	4b2b      	ldr	r3, [pc, #172]	; (80063bc <HAL_TIM_Base_Init+0x164>)
 8006310:	429a      	cmp	r2, r3
 8006312:	bf18      	it	ne
 8006314:	428a      	cmpne	r2, r1
 8006316:	d003      	beq.n	8006320 <HAL_TIM_Base_Init+0xc8>
 8006318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631c:	429a      	cmp	r2, r3
 800631e:	d101      	bne.n	8006324 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006320:	6963      	ldr	r3, [r4, #20]
 8006322:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006324:	2301      	movs	r3, #1
  return HAL_OK;
 8006326:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8006328:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800632a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006332:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006336:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800633a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800633e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006346:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800634a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800634e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006352:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800635a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800635c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006360:	f7ff ff78 	bl	8006254 <HAL_TIM_Base_MspInit>
 8006364:	e783      	b.n	800626e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006366:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800636c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800636e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8006372:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006374:	096d      	lsrs	r5, r5, #5
 8006376:	e7ba      	b.n	80062ee <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 8006378:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800637e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	480f      	ldr	r0, [pc, #60]	; (80063c0 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006382:	4282      	cmp	r2, r0
 8006384:	d0b3      	beq.n	80062ee <HAL_TIM_Base_Init+0x96>
 8006386:	2d00      	cmp	r5, #0
 8006388:	d1b1      	bne.n	80062ee <HAL_TIM_Base_Init+0x96>
 800638a:	e793      	b.n	80062b4 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006392:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006394:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006396:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800639c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800639e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80063a0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063a4:	6291      	str	r1, [r2, #40]	; 0x28
 80063a6:	e7b1      	b.n	800630c <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 80063a8:	2001      	movs	r0, #1
}
 80063aa:	4770      	bx	lr
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40010400 	.word	0x40010400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40000c00 	.word	0x40000c00

080063c4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80063c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d141      	bne.n	8006450 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063cc:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80063ce:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d0:	4b24      	ldr	r3, [pc, #144]	; (8006464 <HAL_TIM_Base_Start_IT+0xa0>)
 80063d2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80063d6:	bf18      	it	ne
 80063d8:	429a      	cmpne	r2, r3
{
 80063da:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	4d21      	ldr	r5, [pc, #132]	; (8006468 <HAL_TIM_Base_Start_IT+0xa4>)
 80063e4:	4c21      	ldr	r4, [pc, #132]	; (800646c <HAL_TIM_Base_Start_IT+0xa8>)
 80063e6:	42aa      	cmp	r2, r5
 80063e8:	bf08      	it	eq
 80063ea:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80063ee:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f4:	42a2      	cmp	r2, r4
 80063f6:	bf08      	it	eq
 80063f8:	f043 0301 	orreq.w	r3, r3, #1
 80063fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006400:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006404:	481a      	ldr	r0, [pc, #104]	; (8006470 <HAL_TIM_Base_Start_IT+0xac>)
 8006406:	42a2      	cmp	r2, r4
 8006408:	bf08      	it	eq
 800640a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800640e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006410:	4282      	cmp	r2, r0
 8006412:	bf08      	it	eq
 8006414:	f043 0301 	orreq.w	r3, r3, #1
 8006418:	4916      	ldr	r1, [pc, #88]	; (8006474 <HAL_TIM_Base_Start_IT+0xb0>)
 800641a:	428a      	cmp	r2, r1
 800641c:	bf08      	it	eq
 800641e:	f043 0301 	orreq.w	r3, r3, #1
 8006422:	b933      	cbnz	r3, 8006432 <HAL_TIM_Base_Start_IT+0x6e>
 8006424:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8006428:	1a10      	subs	r0, r2, r0
 800642a:	fab0 f080 	clz	r0, r0
 800642e:	0940      	lsrs	r0, r0, #5
 8006430:	b198      	cbz	r0, 800645a <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006432:	6891      	ldr	r1, [r2, #8]
 8006434:	4b10      	ldr	r3, [pc, #64]	; (8006478 <HAL_TIM_Base_Start_IT+0xb4>)
 8006436:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	2b06      	cmp	r3, #6
 800643a:	d00b      	beq.n	8006454 <HAL_TIM_Base_Start_IT+0x90>
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006440:	d008      	beq.n	8006454 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 8006442:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8006444:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6013      	str	r3, [r2, #0]
}
 800644c:	bc30      	pop	{r4, r5}
 800644e:	4770      	bx	lr
    return HAL_ERROR;
 8006450:	2001      	movs	r0, #1
}
 8006452:	4770      	bx	lr
  return HAL_OK;
 8006454:	2000      	movs	r0, #0
}
 8006456:	bc30      	pop	{r4, r5}
 8006458:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800645a:	6813      	ldr	r3, [r2, #0]
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e7f3      	b.n	800644c <HAL_TIM_Base_Start_IT+0x88>
 8006464:	40010000 	.word	0x40010000
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800
 8006470:	40010400 	.word	0x40010400
 8006474:	40001800 	.word	0x40001800
 8006478:	00010007 	.word	0x00010007

0800647c <HAL_TIM_OC_DelayElapsedCallback>:
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop

08006480 <HAL_TIM_IC_CaptureCallback>:
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop

08006484 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop

08006488 <HAL_TIM_TriggerCallback>:
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop

0800648c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800648c:	6803      	ldr	r3, [r0, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	0791      	lsls	r1, r2, #30
{
 8006492:	b510      	push	{r4, lr}
 8006494:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006496:	d502      	bpl.n	800649e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	0792      	lsls	r2, r2, #30
 800649c:	d468      	bmi.n	8006570 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	0752      	lsls	r2, r2, #29
 80064a2:	d502      	bpl.n	80064aa <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	0750      	lsls	r0, r2, #29
 80064a8:	d44f      	bmi.n	800654a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	0711      	lsls	r1, r2, #28
 80064ae:	d502      	bpl.n	80064b6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	0712      	lsls	r2, r2, #28
 80064b4:	d437      	bmi.n	8006526 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	06d0      	lsls	r0, r2, #27
 80064ba:	d502      	bpl.n	80064c2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	06d1      	lsls	r1, r2, #27
 80064c0:	d41e      	bmi.n	8006500 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	07d2      	lsls	r2, r2, #31
 80064c6:	d502      	bpl.n	80064ce <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	07d0      	lsls	r0, r2, #31
 80064cc:	d469      	bmi.n	80065a2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	0611      	lsls	r1, r2, #24
 80064d2:	d502      	bpl.n	80064da <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	0612      	lsls	r2, r2, #24
 80064d8:	d46b      	bmi.n	80065b2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	05d0      	lsls	r0, r2, #23
 80064de:	d502      	bpl.n	80064e6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	0611      	lsls	r1, r2, #24
 80064e4:	d46d      	bmi.n	80065c2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	0652      	lsls	r2, r2, #25
 80064ea:	d502      	bpl.n	80064f2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	0650      	lsls	r0, r2, #25
 80064f0:	d46f      	bmi.n	80065d2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	0691      	lsls	r1, r2, #26
 80064f6:	d502      	bpl.n	80064fe <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	0692      	lsls	r2, r2, #26
 80064fc:	d449      	bmi.n	8006592 <HAL_TIM_IRQHandler+0x106>
}
 80064fe:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006500:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006504:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006508:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800650a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006512:	d16f      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006514:	f7ff ffb2 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006518:	4620      	mov	r0, r4
 800651a:	f7ff ffb3 	bl	8006484 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006520:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006522:	7722      	strb	r2, [r4, #28]
 8006524:	e7cd      	b.n	80064c2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006526:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800652a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800652c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800652e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006530:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	079b      	lsls	r3, r3, #30
 8006536:	d15a      	bne.n	80065ee <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006538:	f7ff ffa0 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff ffa1 	bl	8006484 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006542:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006544:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	7722      	strb	r2, [r4, #28]
 8006548:	e7b5      	b.n	80064b6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800654a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800654e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8006550:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006552:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006554:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f413 7f40 	tst.w	r3, #768	; 0x300
 800655c:	d144      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	f7ff ff8d 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006562:	4620      	mov	r0, r4
 8006564:	f7ff ff8e 	bl	8006484 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006568:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800656a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656c:	7722      	strb	r2, [r4, #28]
 800656e:	e79c      	b.n	80064aa <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006570:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006574:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006576:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006578:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	0799      	lsls	r1, r3, #30
 800657e:	d130      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006580:	f7ff ff7c 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006584:	4620      	mov	r0, r4
 8006586:	f7ff ff7d 	bl	8006484 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800658c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658e:	7722      	strb	r2, [r4, #28]
 8006590:	e785      	b.n	800649e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006592:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006596:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006598:	611a      	str	r2, [r3, #16]
}
 800659a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800659e:	f000 b82d 	b.w	80065fc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80065aa:	f7fb ff37 	bl	800241c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	e78d      	b.n	80064ce <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80065b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80065ba:	f000 f821 	bl	8006600 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	e78b      	b.n	80064da <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80065c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80065ca:	f000 f81b 	bl	8006604 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	e789      	b.n	80064e6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80065d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80065da:	f7ff ff55 	bl	8006488 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	e787      	b.n	80064f2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80065e2:	f7ff ff4d 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80065e6:	e7d0      	b.n	800658a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80065e8:	f7ff ff4a 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80065ec:	e7bc      	b.n	8006568 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	f7ff ff47 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80065f2:	e7a6      	b.n	8006542 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80065f4:	f7ff ff44 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80065f8:	e791      	b.n	800651e <HAL_TIM_IRQHandler+0x92>
 80065fa:	bf00      	nop

080065fc <HAL_TIMEx_CommutCallback>:
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <HAL_TIMEx_BreakCallback>:
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop

08006604 <HAL_TIMEx_Break2Callback>:
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop

08006608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800660c:	461d      	mov	r5, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800660e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006612:	2b20      	cmp	r3, #32
 8006614:	f040 8091 	bne.w	800673a <HAL_UART_Transmit+0x132>
 8006618:	4688      	mov	r8, r1
  {
    if ((pData == NULL) || (Size == 0U))
 800661a:	2900      	cmp	r1, #0
 800661c:	d03e      	beq.n	800669c <HAL_UART_Transmit+0x94>
 800661e:	fab2 f982 	clz	r9, r2
 8006622:	4616      	mov	r6, r2
 8006624:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8006628:	2a00      	cmp	r2, #0
 800662a:	d037      	beq.n	800669c <HAL_UART_Transmit+0x94>
    {
      return  HAL_ERROR;
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800662c:	2321      	movs	r3, #33	; 0x21
 800662e:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	f8c0 9090 	str.w	r9, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006634:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006638:	f7fc fefe 	bl	8003438 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800663e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006640:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006648:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664c:	f000 80b7 	beq.w	80067be <HAL_UART_Transmit+0x1b6>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 8006650:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006654:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006656:	b29b      	uxth	r3, r3
 8006658:	b1ab      	cbz	r3, 8006686 <HAL_UART_Transmit+0x7e>
 800665a:	1c6a      	adds	r2, r5, #1
 800665c:	d121      	bne.n	80066a2 <HAL_UART_Transmit+0x9a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665e:	69c2      	ldr	r2, [r0, #28]
 8006660:	0613      	lsls	r3, r2, #24
 8006662:	d5fc      	bpl.n	800665e <HAL_UART_Transmit+0x56>
      if (pdata8bits == NULL)
 8006664:	f1b8 0f00 	cmp.w	r8, #0
 8006668:	d062      	beq.n	8006730 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800666a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800666e:	6283      	str	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8006670:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8006674:	3b01      	subs	r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800667c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e9      	bne.n	800665a <HAL_UART_Transmit+0x52>
 8006686:	1c69      	adds	r1, r5, #1
 8006688:	d15a      	bne.n	8006740 <HAL_UART_Transmit+0x138>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668a:	69c3      	ldr	r3, [r0, #28]
 800668c:	065a      	lsls	r2, r3, #25
 800668e:	d5fc      	bpl.n	800668a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8006690:	2320      	movs	r3, #32
    return HAL_OK;
 8006692:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8006694:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8006698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800669c:	2001      	movs	r0, #1
}
 800669e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a2:	69c3      	ldr	r3, [r0, #28]
 80066a4:	061e      	lsls	r6, r3, #24
 80066a6:	d4dd      	bmi.n	8006664 <HAL_UART_Transmit+0x5c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a8:	f7fc fec6 	bl	8003438 <HAL_GetTick>
 80066ac:	1bc0      	subs	r0, r0, r7
 80066ae:	4285      	cmp	r5, r0
 80066b0:	d338      	bcc.n	8006724 <HAL_UART_Transmit+0x11c>
 80066b2:	2d00      	cmp	r5, #0
 80066b4:	d036      	beq.n	8006724 <HAL_UART_Transmit+0x11c>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	0752      	lsls	r2, r2, #29
 80066be:	d5cc      	bpl.n	800665a <HAL_UART_Transmit+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066c0:	69da      	ldr	r2, [r3, #28]
 80066c2:	0716      	lsls	r6, r2, #28
 80066c4:	f100 808b 	bmi.w	80067de <HAL_UART_Transmit+0x1d6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	0511      	lsls	r1, r2, #20
 80066cc:	d5c5      	bpl.n	800665a <HAL_UART_Transmit+0x52>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d2:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	e843 2100 	strex	r1, r2, [r3]
 80066e0:	b139      	cbz	r1, 80066f2 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	e853 2f00 	ldrex	r2, [r3]
 80066e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	e843 2100 	strex	r1, r2, [r3]
 80066ee:	2900      	cmp	r1, #0
 80066f0:	d1f7      	bne.n	80066e2 <HAL_UART_Transmit+0xda>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066f2:	4863      	ldr	r0, [pc, #396]	; (8006880 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	f103 0208 	add.w	r2, r3, #8
 80066f8:	e852 2f00 	ldrex	r2, [r2]
 80066fc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	f103 0508 	add.w	r5, r3, #8
 8006702:	e845 2100 	strex	r1, r2, [r5]
 8006706:	2900      	cmp	r1, #0
 8006708:	d1f4      	bne.n	80066f4 <HAL_UART_Transmit+0xec>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800670c:	2a01      	cmp	r2, #1
 800670e:	d05d      	beq.n	80067cc <HAL_UART_Transmit+0x1c4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006712:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006714:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800671a:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	66e3      	str	r3, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006720:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
      huart->gState = HAL_UART_STATE_READY;
 8006724:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006726:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8006728:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800672c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006730:	f839 3b02 	ldrh.w	r3, [r9], #2
 8006734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006738:	e799      	b.n	800666e <HAL_UART_Transmit+0x66>
    return HAL_BUSY;
 800673a:	2002      	movs	r0, #2
}
 800673c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006740:	69c3      	ldr	r3, [r0, #28]
 8006742:	065b      	lsls	r3, r3, #25
 8006744:	d4a4      	bmi.n	8006690 <HAL_UART_Transmit+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006746:	f7fc fe77 	bl	8003438 <HAL_GetTick>
 800674a:	1bc0      	subs	r0, r0, r7
 800674c:	4285      	cmp	r5, r0
 800674e:	d3e9      	bcc.n	8006724 <HAL_UART_Transmit+0x11c>
 8006750:	2d00      	cmp	r5, #0
 8006752:	d0e7      	beq.n	8006724 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	0751      	lsls	r1, r2, #29
 800675c:	d593      	bpl.n	8006686 <HAL_UART_Transmit+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	0712      	lsls	r2, r2, #28
 8006762:	d46a      	bmi.n	800683a <HAL_UART_Transmit+0x232>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	0516      	lsls	r6, r2, #20
 8006768:	d58d      	bpl.n	8006686 <HAL_UART_Transmit+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800676a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800676e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006774:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	e843 2100 	strex	r1, r2, [r3]
 800677c:	b139      	cbz	r1, 800678e <HAL_UART_Transmit+0x186>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	e853 2f00 	ldrex	r2, [r3]
 8006782:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	e843 2100 	strex	r1, r2, [r3]
 800678a:	2900      	cmp	r1, #0
 800678c:	d1f7      	bne.n	800677e <HAL_UART_Transmit+0x176>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800678e:	493c      	ldr	r1, [pc, #240]	; (8006880 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	f103 0208 	add.w	r2, r3, #8
 8006794:	e852 2f00 	ldrex	r2, [r2]
 8006798:	400a      	ands	r2, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	f103 0508 	add.w	r5, r3, #8
 800679e:	e845 2000 	strex	r0, r2, [r5]
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d1f4      	bne.n	8006790 <HAL_UART_Transmit+0x188>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80067a8:	2a01      	cmp	r2, #1
 80067aa:	d1b1      	bne.n	8006710 <HAL_UART_Transmit+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	e843 2100 	strex	r1, r2, [r3]
 80067b8:	2900      	cmp	r1, #0
 80067ba:	d1f7      	bne.n	80067ac <HAL_UART_Transmit+0x1a4>
 80067bc:	e7a8      	b.n	8006710 <HAL_UART_Transmit+0x108>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f47f af45 	bne.w	8006650 <HAL_UART_Transmit+0x48>
 80067c6:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80067c8:	4698      	mov	r8, r3
 80067ca:	e741      	b.n	8006650 <HAL_UART_Transmit+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	e843 2100 	strex	r1, r2, [r3]
 80067d8:	2900      	cmp	r1, #0
 80067da:	d1f7      	bne.n	80067cc <HAL_UART_Transmit+0x1c4>
 80067dc:	e798      	b.n	8006710 <HAL_UART_Transmit+0x108>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067de:	2208      	movs	r2, #8
 80067e0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	e843 2100 	strex	r1, r2, [r3]
 80067ee:	2900      	cmp	r1, #0
 80067f0:	d1f7      	bne.n	80067e2 <HAL_UART_Transmit+0x1da>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067f2:	4823      	ldr	r0, [pc, #140]	; (8006880 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	f103 0208 	add.w	r2, r3, #8
 80067f8:	e852 2f00 	ldrex	r2, [r2]
 80067fc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	f103 0508 	add.w	r5, r3, #8
 8006802:	e845 2100 	strex	r1, r2, [r5]
 8006806:	2900      	cmp	r1, #0
 8006808:	d1f4      	bne.n	80067f4 <HAL_UART_Transmit+0x1ec>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800680c:	2a01      	cmp	r2, #1
 800680e:	d00b      	beq.n	8006828 <HAL_UART_Transmit+0x220>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006810:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006812:	2120      	movs	r1, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006814:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006816:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800681a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681c:	66e3      	str	r3, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800681e:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006822:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006826:	e77d      	b.n	8006724 <HAL_UART_Transmit+0x11c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	e843 2100 	strex	r1, r2, [r3]
 8006834:	2900      	cmp	r1, #0
 8006836:	d1f7      	bne.n	8006828 <HAL_UART_Transmit+0x220>
 8006838:	e7ea      	b.n	8006810 <HAL_UART_Transmit+0x208>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800683a:	2208      	movs	r2, #8
 800683c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006842:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	e843 2100 	strex	r1, r2, [r3]
 800684a:	2900      	cmp	r1, #0
 800684c:	d1f7      	bne.n	800683e <HAL_UART_Transmit+0x236>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800684e:	490c      	ldr	r1, [pc, #48]	; (8006880 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	f103 0208 	add.w	r2, r3, #8
 8006854:	e852 2f00 	ldrex	r2, [r2]
 8006858:	400a      	ands	r2, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	f103 0508 	add.w	r5, r3, #8
 800685e:	e845 2000 	strex	r0, r2, [r5]
 8006862:	2800      	cmp	r0, #0
 8006864:	d1f4      	bne.n	8006850 <HAL_UART_Transmit+0x248>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006866:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006868:	2a01      	cmp	r2, #1
 800686a:	d1d1      	bne.n	8006810 <HAL_UART_Transmit+0x208>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006870:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	e843 2100 	strex	r1, r2, [r3]
 8006878:	2900      	cmp	r1, #0
 800687a:	d1f7      	bne.n	800686c <HAL_UART_Transmit+0x264>
 800687c:	e7c8      	b.n	8006810 <HAL_UART_Transmit+0x208>
 800687e:	bf00      	nop
 8006880:	effffffe 	.word	0xeffffffe

08006884 <HAL_UART_Receive>:
{
 8006884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800688a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800688e:	2b20      	cmp	r3, #32
 8006890:	d149      	bne.n	8006926 <HAL_UART_Receive+0xa2>
 8006892:	468a      	mov	sl, r1
    if ((pData == NULL) || (Size == 0U))
 8006894:	2900      	cmp	r1, #0
 8006896:	d043      	beq.n	8006920 <HAL_UART_Receive+0x9c>
 8006898:	fab2 f782 	clz	r7, r2
 800689c:	4614      	mov	r4, r2
 800689e:	097f      	lsrs	r7, r7, #5
 80068a0:	2a00      	cmp	r2, #0
 80068a2:	d03d      	beq.n	8006920 <HAL_UART_Receive+0x9c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068a4:	2322      	movs	r3, #34	; 0x22
 80068a6:	4605      	mov	r5, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ac:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b0:	66c7      	str	r7, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 80068b2:	f7fc fdc1 	bl	8003438 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80068b6:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80068b8:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 80068ba:	f8a5 405c 	strh.w	r4, [r5, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 80068c2:	f8a5 405e 	strh.w	r4, [r5, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 80068c6:	f000 8086 	beq.w	80069d6 <HAL_UART_Receive+0x152>
 80068ca:	b37b      	cbz	r3, 800692c <HAL_UART_Receive+0xa8>
 80068cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068d0:	f000 809c 	beq.w	8006a0c <HAL_UART_Receive+0x188>
 80068d4:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
      pdata16bits = NULL;
 80068d8:	f04f 0900 	mov.w	r9, #0
    while (huart->RxXferCount > 0U)
 80068dc:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	b1bb      	cbz	r3, 8006914 <HAL_UART_Receive+0x90>
 80068e4:	682c      	ldr	r4, [r5, #0]
 80068e6:	1c71      	adds	r1, r6, #1
 80068e8:	d127      	bne.n	800693a <HAL_UART_Receive+0xb6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ea:	69e2      	ldr	r2, [r4, #28]
 80068ec:	0692      	lsls	r2, r2, #26
 80068ee:	d5fc      	bpl.n	80068ea <HAL_UART_Receive+0x66>
      if (pdata8bits == NULL)
 80068f0:	f1ba 0f00 	cmp.w	sl, #0
 80068f4:	d05f      	beq.n	80069b6 <HAL_UART_Receive+0x132>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80068f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f8:	403b      	ands	r3, r7
 80068fa:	f80a 3b01 	strb.w	r3, [sl], #1
      huart->RxXferCount--;
 80068fe:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 8006902:	3b01      	subs	r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800690a:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e7      	bne.n	80068e4 <HAL_UART_Receive+0x60>
    huart->RxState = HAL_UART_STATE_READY;
 8006914:	2320      	movs	r3, #32
    return HAL_OK;
 8006916:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 8006918:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
}
 800691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8006920:	2001      	movs	r0, #1
}
 8006922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8006926:	2002      	movs	r0, #2
}
 8006928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 800692c:	692b      	ldr	r3, [r5, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d15a      	bne.n	80069e8 <HAL_UART_Receive+0x164>
 8006932:	27ff      	movs	r7, #255	; 0xff
 8006934:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
 8006938:	e7ce      	b.n	80068d8 <HAL_UART_Receive+0x54>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800693a:	69e3      	ldr	r3, [r4, #28]
 800693c:	069b      	lsls	r3, r3, #26
 800693e:	d4d7      	bmi.n	80068f0 <HAL_UART_Receive+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006940:	f7fc fd7a 	bl	8003438 <HAL_GetTick>
 8006944:	eba0 0008 	sub.w	r0, r0, r8
 8006948:	4286      	cmp	r6, r0
 800694a:	d32e      	bcc.n	80069aa <HAL_UART_Receive+0x126>
 800694c:	b36e      	cbz	r6, 80069aa <HAL_UART_Receive+0x126>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800694e:	682c      	ldr	r4, [r5, #0]
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	075a      	lsls	r2, r3, #29
 8006954:	d5c7      	bpl.n	80068e6 <HAL_UART_Receive+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006956:	69e3      	ldr	r3, [r4, #28]
 8006958:	071b      	lsls	r3, r3, #28
 800695a:	d45e      	bmi.n	8006a1a <HAL_UART_Receive+0x196>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800695c:	69e3      	ldr	r3, [r4, #28]
 800695e:	0518      	lsls	r0, r3, #20
 8006960:	d5c1      	bpl.n	80068e6 <HAL_UART_Receive+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006966:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	e854 3f00 	ldrex	r3, [r4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800696c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	e844 3200 	strex	r2, r3, [r4]
 8006974:	2a00      	cmp	r2, #0
 8006976:	d1f7      	bne.n	8006968 <HAL_UART_Receive+0xe4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006978:	493f      	ldr	r1, [pc, #252]	; (8006a78 <HAL_UART_Receive+0x1f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	f104 0308 	add.w	r3, r4, #8
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	f104 0008 	add.w	r0, r4, #8
 8006988:	e840 3200 	strex	r2, r3, [r0]
 800698c:	2a00      	cmp	r2, #0
 800698e:	d1f4      	bne.n	800697a <HAL_UART_Receive+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006990:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d031      	beq.n	80069fa <HAL_UART_Receive+0x176>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006998:	2220      	movs	r2, #32
  huart->RxISR = NULL;
 800699a:	676b      	str	r3, [r5, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800699c:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 80069a0:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	66eb      	str	r3, [r5, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069a6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
        huart->RxState = HAL_UART_STATE_READY;
 80069aa:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80069ac:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80069ae:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
}
 80069b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80069b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069b8:	403b      	ands	r3, r7
 80069ba:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 80069be:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80069ca:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d188      	bne.n	80068e6 <HAL_UART_Receive+0x62>
 80069d4:	e79e      	b.n	8006914 <HAL_UART_Receive+0x90>
    UART_MASK_COMPUTATION(huart);
 80069d6:	692b      	ldr	r3, [r5, #16]
 80069d8:	b953      	cbnz	r3, 80069f0 <HAL_UART_Receive+0x16c>
 80069da:	f240 17ff 	movw	r7, #511	; 0x1ff
 80069de:	46d1      	mov	r9, sl
      pdata8bits  = NULL;
 80069e0:	469a      	mov	sl, r3
 80069e2:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
 80069e6:	e779      	b.n	80068dc <HAL_UART_Receive+0x58>
    UART_MASK_COMPUTATION(huart);
 80069e8:	277f      	movs	r7, #127	; 0x7f
 80069ea:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
 80069ee:	e773      	b.n	80068d8 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 80069f0:	46b9      	mov	r9, r7
 80069f2:	27ff      	movs	r7, #255	; 0xff
 80069f4:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
 80069f8:	e770      	b.n	80068dc <HAL_UART_Receive+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	e844 3200 	strex	r2, r3, [r4]
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	d1f7      	bne.n	80069fa <HAL_UART_Receive+0x176>
 8006a0a:	e7c4      	b.n	8006996 <HAL_UART_Receive+0x112>
    UART_MASK_COMPUTATION(huart);
 8006a0c:	692b      	ldr	r3, [r5, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0ea      	beq.n	80069e8 <HAL_UART_Receive+0x164>
 8006a12:	273f      	movs	r7, #63	; 0x3f
 8006a14:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
 8006a18:	e75e      	b.n	80068d8 <HAL_UART_Receive+0x54>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a1a:	2308      	movs	r3, #8
 8006a1c:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	e854 3f00 	ldrex	r3, [r4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	e844 3200 	strex	r2, r3, [r4]
 8006a2a:	2a00      	cmp	r2, #0
 8006a2c:	d1f7      	bne.n	8006a1e <HAL_UART_Receive+0x19a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a2e:	4912      	ldr	r1, [pc, #72]	; (8006a78 <HAL_UART_Receive+0x1f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	f104 0308 	add.w	r3, r4, #8
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	f104 0008 	add.w	r0, r4, #8
 8006a3e:	e840 3200 	strex	r2, r3, [r0]
 8006a42:	2a00      	cmp	r2, #0
 8006a44:	d1f4      	bne.n	8006a30 <HAL_UART_Receive+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a46:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d00b      	beq.n	8006a64 <HAL_UART_Receive+0x1e0>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006a4e:	2120      	movs	r1, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a50:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006a52:	f8c5 108c 	str.w	r1, [r5, #140]	; 0x8c
  huart->RxISR = NULL;
 8006a56:	676b      	str	r3, [r5, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a58:	66eb      	str	r3, [r5, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 8006a5a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a5e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8006a62:	e7a2      	b.n	80069aa <HAL_UART_Receive+0x126>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a68:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	e844 3200 	strex	r2, r3, [r4]
 8006a70:	2a00      	cmp	r2, #0
 8006a72:	d1f7      	bne.n	8006a64 <HAL_UART_Receive+0x1e0>
 8006a74:	e7ea      	b.n	8006a4c <HAL_UART_Receive+0x1c8>
 8006a76:	bf00      	nop
 8006a78:	effffffe 	.word	0xeffffffe

08006a7c <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a7c:	6901      	ldr	r1, [r0, #16]
 8006a7e:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a80:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a82:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a84:	49c0      	ldr	r1, [pc, #768]	; (8006d88 <UART_SetConfig+0x30c>)
{
 8006a86:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a88:	6945      	ldr	r5, [r0, #20]
{
 8006a8a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a8c:	69c0      	ldr	r0, [r0, #28]
{
 8006a8e:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a90:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a92:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a94:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a96:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a98:	4dbc      	ldr	r5, [pc, #752]	; (8006d8c <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a9a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a9e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aa0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006aa8:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aac:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aae:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ab0:	f000 80e0 	beq.w	8006c74 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 8006ab4:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab6:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006ab8:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aba:	4ab5      	ldr	r2, [pc, #724]	; (8006d90 <UART_SetConfig+0x314>)
 8006abc:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006abe:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac0:	4311      	orrs	r1, r2
 8006ac2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	f022 020f 	bic.w	r2, r2, #15
 8006aca:	432a      	orrs	r2, r5
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ace:	4ab1      	ldr	r2, [pc, #708]	; (8006d94 <UART_SetConfig+0x318>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d023      	beq.n	8006b1c <UART_SetConfig+0xa0>
 8006ad4:	4ab0      	ldr	r2, [pc, #704]	; (8006d98 <UART_SetConfig+0x31c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d076      	beq.n	8006bc8 <UART_SetConfig+0x14c>
 8006ada:	4ab0      	ldr	r2, [pc, #704]	; (8006d9c <UART_SetConfig+0x320>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	f000 818f 	beq.w	8006e00 <UART_SetConfig+0x384>
 8006ae2:	4aaf      	ldr	r2, [pc, #700]	; (8006da0 <UART_SetConfig+0x324>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	f000 81e1 	beq.w	8006eac <UART_SetConfig+0x430>
 8006aea:	4aae      	ldr	r2, [pc, #696]	; (8006da4 <UART_SetConfig+0x328>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	f000 8121 	beq.w	8006d34 <UART_SetConfig+0x2b8>
 8006af2:	4aad      	ldr	r2, [pc, #692]	; (8006da8 <UART_SetConfig+0x32c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	f000 81e3 	beq.w	8006ec0 <UART_SetConfig+0x444>
 8006afa:	4aac      	ldr	r2, [pc, #688]	; (8006dac <UART_SetConfig+0x330>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	f000 8234 	beq.w	8006f6a <UART_SetConfig+0x4ee>
 8006b02:	4aab      	ldr	r2, [pc, #684]	; (8006db0 <UART_SetConfig+0x334>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	f000 81e7 	beq.w	8006ed8 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 8006b0a:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006b0c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006b0e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8006b12:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 8006b14:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006b16:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006b18:	b007      	add	sp, #28
 8006b1a:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b1c:	4ba5      	ldr	r3, [pc, #660]	; (8006db4 <UART_SetConfig+0x338>)
 8006b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b24:	2b28      	cmp	r3, #40	; 0x28
 8006b26:	d8f0      	bhi.n	8006b0a <UART_SetConfig+0x8e>
 8006b28:	4aa3      	ldr	r2, [pc, #652]	; (8006db8 <UART_SetConfig+0x33c>)
 8006b2a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006b30:	d055      	beq.n	8006bde <UART_SetConfig+0x162>
    switch (clocksource)
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	f200 814a 	bhi.w	8006dcc <UART_SetConfig+0x350>
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d8e6      	bhi.n	8006b0a <UART_SetConfig+0x8e>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <UART_SetConfig+0xc8>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006d83 	.word	0x08006d83
 8006b48:	08006d7d 	.word	0x08006d7d
 8006b4c:	08006b0b 	.word	0x08006b0b
 8006b50:	08006b0b 	.word	0x08006b0b
 8006b54:	08006d6d 	.word	0x08006d6d
 8006b58:	08006b0b 	.word	0x08006b0b
 8006b5c:	08006b0b 	.word	0x08006b0b
 8006b60:	08006b0b 	.word	0x08006b0b
 8006b64:	08006d5f 	.word	0x08006d5f
 8006b68:	08006b0b 	.word	0x08006b0b
 8006b6c:	08006b0b 	.word	0x08006b0b
 8006b70:	08006b0b 	.word	0x08006b0b
 8006b74:	08006b0b 	.word	0x08006b0b
 8006b78:	08006b0b 	.word	0x08006b0b
 8006b7c:	08006b0b 	.word	0x08006b0b
 8006b80:	08006b0b 	.word	0x08006b0b
 8006b84:	08006d49 	.word	0x08006d49
 8006b88:	08006b0b 	.word	0x08006b0b
 8006b8c:	08006b0b 	.word	0x08006b0b
 8006b90:	08006b0b 	.word	0x08006b0b
 8006b94:	08006b0b 	.word	0x08006b0b
 8006b98:	08006b0b 	.word	0x08006b0b
 8006b9c:	08006b0b 	.word	0x08006b0b
 8006ba0:	08006b0b 	.word	0x08006b0b
 8006ba4:	08006b0b 	.word	0x08006b0b
 8006ba8:	08006b0b 	.word	0x08006b0b
 8006bac:	08006b0b 	.word	0x08006b0b
 8006bb0:	08006b0b 	.word	0x08006b0b
 8006bb4:	08006b0b 	.word	0x08006b0b
 8006bb8:	08006b0b 	.word	0x08006b0b
 8006bbc:	08006b0b 	.word	0x08006b0b
 8006bc0:	08006b0b 	.word	0x08006b0b
 8006bc4:	08006eed 	.word	0x08006eed
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc8:	4b7a      	ldr	r3, [pc, #488]	; (8006db4 <UART_SetConfig+0x338>)
 8006bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d89a      	bhi.n	8006b0a <UART_SetConfig+0x8e>
 8006bd4:	4a79      	ldr	r2, [pc, #484]	; (8006dbc <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006bda:	5cd3      	ldrb	r3, [r2, r3]
 8006bdc:	d1a9      	bne.n	8006b32 <UART_SetConfig+0xb6>
    switch (clocksource)
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f200 8145 	bhi.w	8006e6e <UART_SetConfig+0x3f2>
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d890      	bhi.n	8006b0a <UART_SetConfig+0x8e>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <UART_SetConfig+0x174>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006f57 	.word	0x08006f57
 8006bf4:	08006f51 	.word	0x08006f51
 8006bf8:	08006b0b 	.word	0x08006b0b
 8006bfc:	08006b0b 	.word	0x08006b0b
 8006c00:	08006f5d 	.word	0x08006f5d
 8006c04:	08006b0b 	.word	0x08006b0b
 8006c08:	08006b0b 	.word	0x08006b0b
 8006c0c:	08006b0b 	.word	0x08006b0b
 8006c10:	08006f3f 	.word	0x08006f3f
 8006c14:	08006b0b 	.word	0x08006b0b
 8006c18:	08006b0b 	.word	0x08006b0b
 8006c1c:	08006b0b 	.word	0x08006b0b
 8006c20:	08006b0b 	.word	0x08006b0b
 8006c24:	08006b0b 	.word	0x08006b0b
 8006c28:	08006b0b 	.word	0x08006b0b
 8006c2c:	08006b0b 	.word	0x08006b0b
 8006c30:	08006f2b 	.word	0x08006f2b
 8006c34:	08006b0b 	.word	0x08006b0b
 8006c38:	08006b0b 	.word	0x08006b0b
 8006c3c:	08006b0b 	.word	0x08006b0b
 8006c40:	08006b0b 	.word	0x08006b0b
 8006c44:	08006b0b 	.word	0x08006b0b
 8006c48:	08006b0b 	.word	0x08006b0b
 8006c4c:	08006b0b 	.word	0x08006b0b
 8006c50:	08006b0b 	.word	0x08006b0b
 8006c54:	08006b0b 	.word	0x08006b0b
 8006c58:	08006b0b 	.word	0x08006b0b
 8006c5c:	08006b0b 	.word	0x08006b0b
 8006c60:	08006b0b 	.word	0x08006b0b
 8006c64:	08006b0b 	.word	0x08006b0b
 8006c68:	08006b0b 	.word	0x08006b0b
 8006c6c:	08006b0b 	.word	0x08006b0b
 8006c70:	08006f67 	.word	0x08006f67
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c74:	6898      	ldr	r0, [r3, #8]
 8006c76:	4a46      	ldr	r2, [pc, #280]	; (8006d90 <UART_SetConfig+0x314>)
 8006c78:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c7a:	484e      	ldr	r0, [pc, #312]	; (8006db4 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c84:	f022 020f 	bic.w	r2, r2, #15
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c8c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	f63f af39 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006c98:	4a49      	ldr	r2, [pc, #292]	; (8006dc0 <UART_SetConfig+0x344>)
 8006c9a:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	f200 80b9 	bhi.w	8006e14 <UART_SetConfig+0x398>
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	f67f af31 	bls.w	8006b0a <UART_SetConfig+0x8e>
 8006ca8:	3b02      	subs	r3, #2
 8006caa:	2b1e      	cmp	r3, #30
 8006cac:	f63f af2d 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006cb0:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0x23c>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006f21 	.word	0x08006f21
 8006cbc:	08006b0b 	.word	0x08006b0b
 8006cc0:	08006f17 	.word	0x08006f17
 8006cc4:	08006b0b 	.word	0x08006b0b
 8006cc8:	08006b0b 	.word	0x08006b0b
 8006ccc:	08006b0b 	.word	0x08006b0b
 8006cd0:	08006f05 	.word	0x08006f05
 8006cd4:	08006b0b 	.word	0x08006b0b
 8006cd8:	08006b0b 	.word	0x08006b0b
 8006cdc:	08006b0b 	.word	0x08006b0b
 8006ce0:	08006b0b 	.word	0x08006b0b
 8006ce4:	08006b0b 	.word	0x08006b0b
 8006ce8:	08006b0b 	.word	0x08006b0b
 8006cec:	08006b0b 	.word	0x08006b0b
 8006cf0:	08006ef1 	.word	0x08006ef1
 8006cf4:	08006b0b 	.word	0x08006b0b
 8006cf8:	08006b0b 	.word	0x08006b0b
 8006cfc:	08006b0b 	.word	0x08006b0b
 8006d00:	08006b0b 	.word	0x08006b0b
 8006d04:	08006b0b 	.word	0x08006b0b
 8006d08:	08006b0b 	.word	0x08006b0b
 8006d0c:	08006b0b 	.word	0x08006b0b
 8006d10:	08006b0b 	.word	0x08006b0b
 8006d14:	08006b0b 	.word	0x08006b0b
 8006d18:	08006b0b 	.word	0x08006b0b
 8006d1c:	08006b0b 	.word	0x08006b0b
 8006d20:	08006b0b 	.word	0x08006b0b
 8006d24:	08006b0b 	.word	0x08006b0b
 8006d28:	08006b0b 	.word	0x08006b0b
 8006d2c:	08006b0b 	.word	0x08006b0b
 8006d30:	08006f27 	.word	0x08006f27
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d34:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <UART_SetConfig+0x338>)
 8006d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	2b05      	cmp	r3, #5
 8006d3e:	f63f aee4 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006d42:	4a20      	ldr	r2, [pc, #128]	; (8006dc4 <UART_SetConfig+0x348>)
 8006d44:	5cd3      	ldrb	r3, [r2, r3]
 8006d46:	e6f1      	b.n	8006b2c <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d48:	4b1a      	ldr	r3, [pc, #104]	; (8006db4 <UART_SetConfig+0x338>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	0692      	lsls	r2, r2, #26
 8006d4e:	f140 80c1 	bpl.w	8006ed4 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	481c      	ldr	r0, [pc, #112]	; (8006dc8 <UART_SetConfig+0x34c>)
 8006d56:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006d5a:	40d8      	lsrs	r0, r3
 8006d5c:	e03b      	b.n	8006dd6 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d5e:	a803      	add	r0, sp, #12
 8006d60:	f7fe fc10 	bl	8005584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d64:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8006d66:	b938      	cbnz	r0, 8006d78 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 8006d68:	2000      	movs	r0, #0
 8006d6a:	e6cf      	b.n	8006b0c <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6c:	4668      	mov	r0, sp
 8006d6e:	f7fe fb5d 	bl	800542c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d72:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d0f7      	beq.n	8006d68 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d7a:	e02c      	b.n	8006dd6 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d7c:	f7fd fbe0 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
        break;
 8006d80:	e7f1      	b.n	8006d66 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d82:	f7fd fb95 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
        break;
 8006d86:	e7ee      	b.n	8006d66 <UART_SetConfig+0x2ea>
 8006d88:	cfff69f3 	.word	0xcfff69f3
 8006d8c:	58000c00 	.word	0x58000c00
 8006d90:	11fff4ff 	.word	0x11fff4ff
 8006d94:	40011000 	.word	0x40011000
 8006d98:	40004400 	.word	0x40004400
 8006d9c:	40004800 	.word	0x40004800
 8006da0:	40004c00 	.word	0x40004c00
 8006da4:	40005000 	.word	0x40005000
 8006da8:	40011400 	.word	0x40011400
 8006dac:	40007800 	.word	0x40007800
 8006db0:	40007c00 	.word	0x40007c00
 8006db4:	58024400 	.word	0x58024400
 8006db8:	0800b894 	.word	0x0800b894
 8006dbc:	0800b8c0 	.word	0x0800b8c0
 8006dc0:	0800b8c8 	.word	0x0800b8c8
 8006dc4:	0800b8c0 	.word	0x0800b8c0
 8006dc8:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	f47f ae9c 	bne.w	8006b0a <UART_SetConfig+0x8e>
 8006dd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd6:	4b6c      	ldr	r3, [pc, #432]	; (8006f88 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd8:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ddc:	6862      	ldr	r2, [r4, #4]
 8006dde:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8006de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006de6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006dea:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dee:	f1a3 0210 	sub.w	r2, r3, #16
 8006df2:	428a      	cmp	r2, r1
 8006df4:	f63f ae89 	bhi.w	8006b0a <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006df8:	6822      	ldr	r2, [r4, #0]
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	60d3      	str	r3, [r2, #12]
 8006dfe:	e685      	b.n	8006b0c <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e00:	4b62      	ldr	r3, [pc, #392]	; (8006f8c <UART_SetConfig+0x510>)
 8006e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	2b05      	cmp	r3, #5
 8006e0a:	f63f ae7e 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006e0e:	4a60      	ldr	r2, [pc, #384]	; (8006f90 <UART_SetConfig+0x514>)
 8006e10:	5cd3      	ldrb	r3, [r2, r3]
 8006e12:	e68b      	b.n	8006b2c <UART_SetConfig+0xb0>
    switch (clocksource)
 8006e14:	2b40      	cmp	r3, #64	; 0x40
 8006e16:	f47f ae78 	bne.w	8006b0a <UART_SetConfig+0x8e>
 8006e1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e1e:	4b5a      	ldr	r3, [pc, #360]	; (8006f88 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e20:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e22:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e26:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e2a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	f63f ae6b 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006e34:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006e38:	f63f ae67 	bhi.w	8006b0a <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f7f9 faa6 	bl	8000390 <__aeabi_uldivmod>
 8006e44:	462a      	mov	r2, r5
 8006e46:	0209      	lsls	r1, r1, #8
 8006e48:	0203      	lsls	r3, r0, #8
 8006e4a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006e4e:	0868      	lsrs	r0, r5, #1
 8006e50:	1818      	adds	r0, r3, r0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	f141 0100 	adc.w	r1, r1, #0
 8006e5a:	f7f9 fa99 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e5e:	4a4d      	ldr	r2, [pc, #308]	; (8006f94 <UART_SetConfig+0x518>)
 8006e60:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e64:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e66:	4291      	cmp	r1, r2
 8006e68:	f63f ae4f 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006e6c:	e7c4      	b.n	8006df8 <UART_SetConfig+0x37c>
    switch (clocksource)
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	f47f ae4b 	bne.w	8006b0a <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e74:	4b44      	ldr	r3, [pc, #272]	; (8006f88 <UART_SetConfig+0x50c>)
 8006e76:	6862      	ldr	r2, [r4, #4]
 8006e78:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8006e7c:	0853      	lsrs	r3, r2, #1
 8006e7e:	fbb0 f0f1 	udiv	r0, r0, r1
 8006e82:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e86:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e8a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e8e:	f1a0 0210 	sub.w	r2, r0, #16
 8006e92:	429a      	cmp	r2, r3
 8006e94:	f63f ae39 	bhi.w	8006b0a <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e98:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e9c:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8006ea0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ea2:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8006ea4:	4303      	orrs	r3, r0
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	60d3      	str	r3, [r2, #12]
 8006eaa:	e62f      	b.n	8006b0c <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eac:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <UART_SetConfig+0x510>)
 8006eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	2b05      	cmp	r3, #5
 8006eb6:	f63f ae28 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006eba:	4a37      	ldr	r2, [pc, #220]	; (8006f98 <UART_SetConfig+0x51c>)
 8006ebc:	5cd3      	ldrb	r3, [r2, r3]
 8006ebe:	e635      	b.n	8006b2c <UART_SetConfig+0xb0>
 8006ec0:	4b32      	ldr	r3, [pc, #200]	; (8006f8c <UART_SetConfig+0x510>)
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ec8:	2b28      	cmp	r3, #40	; 0x28
 8006eca:	f63f ae1e 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006ece:	4a33      	ldr	r2, [pc, #204]	; (8006f9c <UART_SetConfig+0x520>)
 8006ed0:	5cd3      	ldrb	r3, [r2, r3]
 8006ed2:	e62b      	b.n	8006b2c <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 8006ed4:	4832      	ldr	r0, [pc, #200]	; (8006fa0 <UART_SetConfig+0x524>)
 8006ed6:	e77e      	b.n	8006dd6 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ed8:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <UART_SetConfig+0x510>)
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	2b05      	cmp	r3, #5
 8006ee2:	f63f ae12 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006ee6:	4a2f      	ldr	r2, [pc, #188]	; (8006fa4 <UART_SetConfig+0x528>)
 8006ee8:	5cd3      	ldrb	r3, [r2, r3]
 8006eea:	e61f      	b.n	8006b2c <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 8006eec:	482e      	ldr	r0, [pc, #184]	; (8006fa8 <UART_SetConfig+0x52c>)
 8006eee:	e772      	b.n	8006dd6 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef0:	4b26      	ldr	r3, [pc, #152]	; (8006f8c <UART_SetConfig+0x510>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	0690      	lsls	r0, r2, #26
 8006ef6:	d542      	bpl.n	8006f7e <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4829      	ldr	r0, [pc, #164]	; (8006fa0 <UART_SetConfig+0x524>)
 8006efc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f00:	40d8      	lsrs	r0, r3
 8006f02:	e78c      	b.n	8006e1e <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f04:	a803      	add	r0, sp, #12
 8006f06:	f7fe fb3d 	bl	8005584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f0a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f43f af2b 	beq.w	8006d68 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f14:	e783      	b.n	8006e1e <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f16:	4668      	mov	r0, sp
 8006f18:	f7fe fa88 	bl	800542c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f1c:	9801      	ldr	r0, [sp, #4]
        break;
 8006f1e:	e7f5      	b.n	8006f0c <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f20:	f7fe fa72 	bl	8005408 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8006f24:	e7f2      	b.n	8006f0c <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 8006f26:	4820      	ldr	r0, [pc, #128]	; (8006fa8 <UART_SetConfig+0x52c>)
 8006f28:	e779      	b.n	8006e1e <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f2a:	4b18      	ldr	r3, [pc, #96]	; (8006f8c <UART_SetConfig+0x510>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	0691      	lsls	r1, r2, #26
 8006f30:	d527      	bpl.n	8006f82 <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	481a      	ldr	r0, [pc, #104]	; (8006fa0 <UART_SetConfig+0x524>)
 8006f36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f3a:	40d8      	lsrs	r0, r3
 8006f3c:	e79a      	b.n	8006e74 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f3e:	a803      	add	r0, sp, #12
 8006f40:	f7fe fb20 	bl	8005584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f44:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f43f af0e 	beq.w	8006d68 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f4c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f4e:	e791      	b.n	8006e74 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f50:	f7fd faf6 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
        break;
 8006f54:	e7f7      	b.n	8006f46 <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f56:	f7fd faab 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
        break;
 8006f5a:	e7f4      	b.n	8006f46 <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f5c:	4668      	mov	r0, sp
 8006f5e:	f7fe fa65 	bl	800542c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f62:	9801      	ldr	r0, [sp, #4]
        break;
 8006f64:	e7ef      	b.n	8006f46 <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 8006f66:	4810      	ldr	r0, [pc, #64]	; (8006fa8 <UART_SetConfig+0x52c>)
 8006f68:	e784      	b.n	8006e74 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <UART_SetConfig+0x510>)
 8006f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	2b05      	cmp	r3, #5
 8006f74:	f63f adc9 	bhi.w	8006b0a <UART_SetConfig+0x8e>
 8006f78:	4a0c      	ldr	r2, [pc, #48]	; (8006fac <UART_SetConfig+0x530>)
 8006f7a:	5cd3      	ldrb	r3, [r2, r3]
 8006f7c:	e5d6      	b.n	8006b2c <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 8006f7e:	4808      	ldr	r0, [pc, #32]	; (8006fa0 <UART_SetConfig+0x524>)
 8006f80:	e74d      	b.n	8006e1e <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 8006f82:	4807      	ldr	r0, [pc, #28]	; (8006fa0 <UART_SetConfig+0x524>)
 8006f84:	e776      	b.n	8006e74 <UART_SetConfig+0x3f8>
 8006f86:	bf00      	nop
 8006f88:	0800b8d0 	.word	0x0800b8d0
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	0800b8c0 	.word	0x0800b8c0
 8006f94:	000ffcff 	.word	0x000ffcff
 8006f98:	0800b8c0 	.word	0x0800b8c0
 8006f9c:	0800b894 	.word	0x0800b894
 8006fa0:	03d09000 	.word	0x03d09000
 8006fa4:	0800b8c0 	.word	0x0800b8c0
 8006fa8:	003d0900 	.word	0x003d0900
 8006fac:	0800b8c0 	.word	0x0800b8c0

08006fb0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006fb2:	07da      	lsls	r2, r3, #31
{
 8006fb4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb6:	d506      	bpl.n	8006fc6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fb8:	6801      	ldr	r1, [r0, #0]
 8006fba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006fbc:	684a      	ldr	r2, [r1, #4]
 8006fbe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006fc2:	4322      	orrs	r2, r4
 8006fc4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fc6:	079c      	lsls	r4, r3, #30
 8006fc8:	d506      	bpl.n	8006fd8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fca:	6801      	ldr	r1, [r0, #0]
 8006fcc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006fce:	684a      	ldr	r2, [r1, #4]
 8006fd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fd4:	4322      	orrs	r2, r4
 8006fd6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd8:	0759      	lsls	r1, r3, #29
 8006fda:	d506      	bpl.n	8006fea <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fdc:	6801      	ldr	r1, [r0, #0]
 8006fde:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006fe0:	684a      	ldr	r2, [r1, #4]
 8006fe2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fe6:	4322      	orrs	r2, r4
 8006fe8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fea:	071a      	lsls	r2, r3, #28
 8006fec:	d506      	bpl.n	8006ffc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fee:	6801      	ldr	r1, [r0, #0]
 8006ff0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006ff2:	684a      	ldr	r2, [r1, #4]
 8006ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ff8:	4322      	orrs	r2, r4
 8006ffa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ffc:	06dc      	lsls	r4, r3, #27
 8006ffe:	d506      	bpl.n	800700e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007000:	6801      	ldr	r1, [r0, #0]
 8007002:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007004:	688a      	ldr	r2, [r1, #8]
 8007006:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800700a:	4322      	orrs	r2, r4
 800700c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800700e:	0699      	lsls	r1, r3, #26
 8007010:	d506      	bpl.n	8007020 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007012:	6801      	ldr	r1, [r0, #0]
 8007014:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007016:	688a      	ldr	r2, [r1, #8]
 8007018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800701c:	4322      	orrs	r2, r4
 800701e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007020:	065a      	lsls	r2, r3, #25
 8007022:	d50a      	bpl.n	800703a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007024:	6801      	ldr	r1, [r0, #0]
 8007026:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007028:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800702a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800702e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007032:	ea42 0204 	orr.w	r2, r2, r4
 8007036:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007038:	d00b      	beq.n	8007052 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800703a:	061b      	lsls	r3, r3, #24
 800703c:	d506      	bpl.n	800704c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800703e:	6802      	ldr	r2, [r0, #0]
 8007040:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007042:	6853      	ldr	r3, [r2, #4]
 8007044:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007048:	430b      	orrs	r3, r1
 800704a:	6053      	str	r3, [r2, #4]
}
 800704c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007050:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007052:	684a      	ldr	r2, [r1, #4]
 8007054:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007056:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800705a:	4322      	orrs	r2, r4
 800705c:	604a      	str	r2, [r1, #4]
 800705e:	e7ec      	b.n	800703a <UART_AdvFeatureConfig+0x8a>

08007060 <UART_CheckIdleState>:
{
 8007060:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007062:	2300      	movs	r3, #0
{
 8007064:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007066:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800706a:	f7fc f9e5 	bl	8003438 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800706e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8007070:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007072:	6813      	ldr	r3, [r2, #0]
 8007074:	071b      	lsls	r3, r3, #28
 8007076:	d40e      	bmi.n	8007096 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007078:	6813      	ldr	r3, [r2, #0]
 800707a:	0759      	lsls	r1, r3, #29
 800707c:	d432      	bmi.n	80070e4 <UART_CheckIdleState+0x84>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007080:	2220      	movs	r2, #32
  return HAL_OK;
 8007082:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8007084:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007088:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800708c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007090:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007092:	6723      	str	r3, [r4, #112]	; 0x70
}
 8007094:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007096:	69d3      	ldr	r3, [r2, #28]
 8007098:	0298      	lsls	r0, r3, #10
 800709a:	d4ed      	bmi.n	8007078 <UART_CheckIdleState+0x18>
 800709c:	e00c      	b.n	80070b8 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800709e:	6819      	ldr	r1, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	0749      	lsls	r1, r1, #29
 80070a4:	d505      	bpl.n	80070b2 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070a6:	69d9      	ldr	r1, [r3, #28]
 80070a8:	0708      	lsls	r0, r1, #28
 80070aa:	d44f      	bmi.n	800714c <UART_CheckIdleState+0xec>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ac:	69d9      	ldr	r1, [r3, #28]
 80070ae:	0509      	lsls	r1, r1, #20
 80070b0:	d47a      	bmi.n	80071a8 <UART_CheckIdleState+0x148>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	0298      	lsls	r0, r3, #10
 80070b6:	d4df      	bmi.n	8007078 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b8:	f7fc f9be 	bl	8003438 <HAL_GetTick>
 80070bc:	1b43      	subs	r3, r0, r5
 80070be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	d3eb      	bcc.n	800709e <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	e843 2100 	strex	r1, r2, [r3]
 80070d2:	2900      	cmp	r1, #0
 80070d4:	d1f7      	bne.n	80070c6 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80070d6:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80070d8:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80070da:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 80070de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e4:	69d3      	ldr	r3, [r2, #28]
 80070e6:	025b      	lsls	r3, r3, #9
 80070e8:	d4c9      	bmi.n	800707e <UART_CheckIdleState+0x1e>
 80070ea:	e00d      	b.n	8007108 <UART_CheckIdleState+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	0750      	lsls	r0, r2, #29
 80070f0:	d507      	bpl.n	8007102 <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	0711      	lsls	r1, r2, #28
 80070f6:	f100 8085 	bmi.w	8007204 <UART_CheckIdleState+0x1a4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	0512      	lsls	r2, r2, #20
 80070fe:	f100 80af 	bmi.w	8007260 <UART_CheckIdleState+0x200>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	025b      	lsls	r3, r3, #9
 8007106:	d4ba      	bmi.n	800707e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007108:	f7fc f996 	bl	8003438 <HAL_GetTick>
 800710c:	1b43      	subs	r3, r0, r5
 800710e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	d3ea      	bcc.n	80070ec <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800711a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	e843 2100 	strex	r1, r2, [r3]
 8007122:	2900      	cmp	r1, #0
 8007124:	d1f7      	bne.n	8007116 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	f103 0208 	add.w	r2, r3, #8
 800712a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	f103 0008 	add.w	r0, r3, #8
 8007136:	e840 2100 	strex	r1, r2, [r0]
 800713a:	2900      	cmp	r1, #0
 800713c:	d1f3      	bne.n	8007126 <UART_CheckIdleState+0xc6>
      huart->RxState = HAL_UART_STATE_READY;
 800713e:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8007140:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8007142:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8007146:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800714a:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800714c:	2208      	movs	r2, #8
 800714e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007154:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	e843 2100 	strex	r1, r2, [r3]
 800715c:	2900      	cmp	r1, #0
 800715e:	d1f7      	bne.n	8007150 <UART_CheckIdleState+0xf0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007160:	4856      	ldr	r0, [pc, #344]	; (80072bc <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	f103 0208 	add.w	r2, r3, #8
 8007166:	e852 2f00 	ldrex	r2, [r2]
 800716a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	f103 0508 	add.w	r5, r3, #8
 8007170:	e845 2100 	strex	r1, r2, [r5]
 8007174:	2900      	cmp	r1, #0
 8007176:	d1f4      	bne.n	8007162 <UART_CheckIdleState+0x102>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007178:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800717a:	2a01      	cmp	r2, #1
 800717c:	d00b      	beq.n	8007196 <UART_CheckIdleState+0x136>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007180:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007182:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007184:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 8007188:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718a:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800718c:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007190:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 8007194:	e797      	b.n	80070c6 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	e843 2100 	strex	r1, r2, [r3]
 80071a2:	2900      	cmp	r1, #0
 80071a4:	d1f7      	bne.n	8007196 <UART_CheckIdleState+0x136>
 80071a6:	e7ea      	b.n	800717e <UART_CheckIdleState+0x11e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071ac:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	e843 2100 	strex	r1, r2, [r3]
 80071ba:	2900      	cmp	r1, #0
 80071bc:	d1f7      	bne.n	80071ae <UART_CheckIdleState+0x14e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071be:	483f      	ldr	r0, [pc, #252]	; (80072bc <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	f103 0208 	add.w	r2, r3, #8
 80071c4:	e852 2f00 	ldrex	r2, [r2]
 80071c8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	f103 0508 	add.w	r5, r3, #8
 80071ce:	e845 2100 	strex	r1, r2, [r5]
 80071d2:	2900      	cmp	r1, #0
 80071d4:	d1f4      	bne.n	80071c0 <UART_CheckIdleState+0x160>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80071d8:	2a01      	cmp	r2, #1
 80071da:	d00a      	beq.n	80071f2 <UART_CheckIdleState+0x192>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071dc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80071de:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 80071e0:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80071e2:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 80071e6:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071ec:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 80071f0:	e769      	b.n	80070c6 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	e843 2100 	strex	r1, r2, [r3]
 80071fe:	2900      	cmp	r1, #0
 8007200:	d1f7      	bne.n	80071f2 <UART_CheckIdleState+0x192>
 8007202:	e7eb      	b.n	80071dc <UART_CheckIdleState+0x17c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007204:	2208      	movs	r2, #8
 8007206:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800720c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	e843 2100 	strex	r1, r2, [r3]
 8007214:	2900      	cmp	r1, #0
 8007216:	d1f7      	bne.n	8007208 <UART_CheckIdleState+0x1a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007218:	4828      	ldr	r0, [pc, #160]	; (80072bc <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	f103 0208 	add.w	r2, r3, #8
 800721e:	e852 2f00 	ldrex	r2, [r2]
 8007222:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	f103 0508 	add.w	r5, r3, #8
 8007228:	e845 2100 	strex	r1, r2, [r5]
 800722c:	2900      	cmp	r1, #0
 800722e:	d1f4      	bne.n	800721a <UART_CheckIdleState+0x1ba>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007230:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007232:	2a01      	cmp	r2, #1
 8007234:	d00b      	beq.n	800724e <UART_CheckIdleState+0x1ee>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007238:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800723a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800723c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 8007240:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 8007244:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007248:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 800724c:	e763      	b.n	8007116 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007252:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	e843 2100 	strex	r1, r2, [r3]
 800725a:	2900      	cmp	r1, #0
 800725c:	d1f7      	bne.n	800724e <UART_CheckIdleState+0x1ee>
 800725e:	e7ea      	b.n	8007236 <UART_CheckIdleState+0x1d6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007264:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800726a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	e843 2100 	strex	r1, r2, [r3]
 8007272:	2900      	cmp	r1, #0
 8007274:	d1f7      	bne.n	8007266 <UART_CheckIdleState+0x206>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007276:	4811      	ldr	r0, [pc, #68]	; (80072bc <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	f103 0208 	add.w	r2, r3, #8
 800727c:	e852 2f00 	ldrex	r2, [r2]
 8007280:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	f103 0508 	add.w	r5, r3, #8
 8007286:	e845 2100 	strex	r1, r2, [r5]
 800728a:	2900      	cmp	r1, #0
 800728c:	d1f4      	bne.n	8007278 <UART_CheckIdleState+0x218>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007290:	2a01      	cmp	r2, #1
 8007292:	d00a      	beq.n	80072aa <UART_CheckIdleState+0x24a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007294:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007296:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8007298:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800729a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800729e:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072a4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 80072a8:	e735      	b.n	8007116 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	e843 2100 	strex	r1, r2, [r3]
 80072b6:	2900      	cmp	r1, #0
 80072b8:	d1f7      	bne.n	80072aa <UART_CheckIdleState+0x24a>
 80072ba:	e7eb      	b.n	8007294 <UART_CheckIdleState+0x234>
 80072bc:	effffffe 	.word	0xeffffffe

080072c0 <HAL_UART_Init>:
  if (huart == NULL)
 80072c0:	b380      	cbz	r0, 8007324 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80072c2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80072c6:	b510      	push	{r4, lr}
 80072c8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80072ca:	b333      	cbz	r3, 800731a <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 80072cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072ce:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072d0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80072d2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80072d6:	6813      	ldr	r3, [r2, #0]
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072de:	f7ff fbcd 	bl	8006a7c <UART_SetConfig>
 80072e2:	2801      	cmp	r0, #1
 80072e4:	d017      	beq.n	8007316 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072e8:	b98b      	cbnz	r3, 800730e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ea:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80072ec:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072fc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	f042 0201 	orr.w	r2, r2, #1
}
 8007304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8007308:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800730a:	f7ff bea9 	b.w	8007060 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800730e:	4620      	mov	r0, r4
 8007310:	f7ff fe4e 	bl	8006fb0 <UART_AdvFeatureConfig>
 8007314:	e7e9      	b.n	80072ea <HAL_UART_Init+0x2a>
}
 8007316:	2001      	movs	r0, #1
 8007318:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800731a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800731e:	f7fb fe67 	bl	8002ff0 <HAL_UART_MspInit>
 8007322:	e7d3      	b.n	80072cc <HAL_UART_Init+0xc>
}
 8007324:	2001      	movs	r0, #1
 8007326:	4770      	bx	lr

08007328 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007328:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800732c:	2a01      	cmp	r2, #1
 800732e:	d017      	beq.n	8007360 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007330:	6802      	ldr	r2, [r0, #0]
 8007332:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007334:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007336:	2100      	movs	r1, #0
{
 8007338:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800733a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800733e:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007340:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007342:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007344:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007348:	f024 0401 	bic.w	r4, r4, #1
 800734c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800734e:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007350:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8007352:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007354:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007358:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800735c:	bc30      	pop	{r4, r5}
 800735e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007360:	2002      	movs	r0, #2
}
 8007362:	4770      	bx	lr

08007364 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007364:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8007368:	2a01      	cmp	r2, #1
 800736a:	d037      	beq.n	80073dc <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800736c:	6802      	ldr	r2, [r0, #0]
 800736e:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007370:	2024      	movs	r0, #36	; 0x24
{
 8007372:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007374:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007378:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800737a:	6810      	ldr	r0, [r2, #0]
 800737c:	f020 0001 	bic.w	r0, r0, #1
 8007380:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007382:	6890      	ldr	r0, [r2, #8]
 8007384:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8007388:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800738a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800738c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800738e:	b310      	cbz	r0, 80073d6 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007390:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007392:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007394:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007398:	4911      	ldr	r1, [pc, #68]	; (80073e0 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800739a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800739e:	4d11      	ldr	r5, [pc, #68]	; (80073e4 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073a0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073a8:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073ac:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 80073ae:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073b2:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073b4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073b8:	fbb1 f1f5 	udiv	r1, r1, r5
 80073bc:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 80073c0:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 80073c2:	2100      	movs	r1, #0
 80073c4:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073c8:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 80073ca:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80073cc:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80073d0:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 80073d4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80073d6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80073d8:	4608      	mov	r0, r1
 80073da:	e7ef      	b.n	80073bc <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80073dc:	2002      	movs	r0, #2
}
 80073de:	4770      	bx	lr
 80073e0:	0800b8f0 	.word	0x0800b8f0
 80073e4:	0800b8e8 	.word	0x0800b8e8

080073e8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80073e8:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 80073ec:	2a01      	cmp	r2, #1
 80073ee:	d037      	beq.n	8007460 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073f0:	6802      	ldr	r2, [r0, #0]
 80073f2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80073f4:	2024      	movs	r0, #36	; 0x24
{
 80073f6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80073f8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073fc:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80073fe:	6810      	ldr	r0, [r2, #0]
 8007400:	f020 0001 	bic.w	r0, r0, #1
 8007404:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007406:	6890      	ldr	r0, [r2, #8]
 8007408:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800740c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800740e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007410:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007412:	b310      	cbz	r0, 800745a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007414:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007416:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007418:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800741c:	4911      	ldr	r1, [pc, #68]	; (8007464 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800741e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8007422:	4d11      	ldr	r5, [pc, #68]	; (8007468 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007424:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007428:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800742c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007430:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8007432:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007436:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007438:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800743c:	fbb1 f1f5 	udiv	r1, r1, r5
 8007440:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8007444:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8007446:	2100      	movs	r1, #0
 8007448:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800744c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800744e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007450:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007454:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8007458:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800745a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800745c:	4608      	mov	r0, r1
 800745e:	e7ef      	b.n	8007440 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007460:	2002      	movs	r0, #2
}
 8007462:	4770      	bx	lr
 8007464:	0800b8f0 	.word	0x0800b8f0
 8007468:	0800b8e8 	.word	0x0800b8e8

0800746c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800746c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800746e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007472:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007474:	f001 fbc0 	bl	8008bf8 <xTaskGetSchedulerState>
 8007478:	2801      	cmp	r0, #1
 800747a:	d100      	bne.n	800747e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800747c:	bd08      	pop	{r3, pc}
 800747e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8007482:	f001 bed7 	b.w	8009234 <xPortSysTickHandler>
 8007486:	bf00      	nop

08007488 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007488:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800748c:	b92b      	cbnz	r3, 800749a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <osKernelInitialize+0x20>)
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	b928      	cbnz	r0, 80074a0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	4770      	bx	lr
    stat = osErrorISR;
 800749a:	f06f 0005 	mvn.w	r0, #5
 800749e:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	24003a54 	.word	0x24003a54

080074ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074ac:	b510      	push	{r4, lr}
 80074ae:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80074b2:	b974      	cbnz	r4, 80074d2 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80074b4:	4b08      	ldr	r3, [pc, #32]	; (80074d8 <osKernelStart+0x2c>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	2a01      	cmp	r2, #1
 80074ba:	d107      	bne.n	80074cc <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074bc:	4907      	ldr	r1, [pc, #28]	; (80074dc <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074be:	2202      	movs	r2, #2
 80074c0:	77cc      	strb	r4, [r1, #31]
 80074c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074c4:	f001 f972 	bl	80087ac <vTaskStartScheduler>
      stat = osOK;
 80074c8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80074ca:	bd10      	pop	{r4, pc}
      stat = osError;
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80074d0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80074d2:	f06f 0005 	mvn.w	r0, #5
}
 80074d6:	bd10      	pop	{r4, pc}
 80074d8:	24003a54 	.word	0x24003a54
 80074dc:	e000ed00 	.word	0xe000ed00

080074e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074e2:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074e4:	b087      	sub	sp, #28
 80074e6:	4614      	mov	r4, r2
  hTask = NULL;
 80074e8:	9505      	str	r5, [sp, #20]
 80074ea:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80074ee:	bb4a      	cbnz	r2, 8007544 <osThreadNew+0x64>
 80074f0:	b340      	cbz	r0, 8007544 <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80074f2:	b1e4      	cbz	r4, 800752e <osThreadNew+0x4e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80074f4:	69a6      	ldr	r6, [r4, #24]
 80074f6:	bb4e      	cbnz	r6, 800754c <osThreadNew+0x6c>
 80074f8:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074fa:	6863      	ldr	r3, [r4, #4]
 80074fc:	07db      	lsls	r3, r3, #31
 80074fe:	d421      	bmi.n	8007544 <osThreadNew+0x64>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007500:	6963      	ldr	r3, [r4, #20]
 8007502:	b33b      	cbz	r3, 8007554 <osThreadNew+0x74>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007504:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007508:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 800750a:	6827      	ldr	r7, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800750c:	b33d      	cbz	r5, 800755e <osThreadNew+0x7e>
 800750e:	68e2      	ldr	r2, [r4, #12]
 8007510:	2abb      	cmp	r2, #187	; 0xbb
 8007512:	d917      	bls.n	8007544 <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007514:	6924      	ldr	r4, [r4, #16]
 8007516:	b1ab      	cbz	r3, 8007544 <osThreadNew+0x64>
 8007518:	b1a4      	cbz	r4, 8007544 <osThreadNew+0x64>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800751a:	460b      	mov	r3, r1
 800751c:	4662      	mov	r2, ip
 800751e:	4639      	mov	r1, r7
 8007520:	9600      	str	r6, [sp, #0]
 8007522:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8007526:	f000 ffb9 	bl	800849c <xTaskCreateStatic>
 800752a:	4605      	mov	r5, r0
 800752c:	e00b      	b.n	8007546 <osThreadNew+0x66>
 800752e:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8007530:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007532:	460b      	mov	r3, r1
 8007534:	4621      	mov	r1, r4
 8007536:	ac05      	add	r4, sp, #20
 8007538:	9600      	str	r6, [sp, #0]
 800753a:	9401      	str	r4, [sp, #4]
 800753c:	f000 ffe8 	bl	8008510 <xTaskCreate>
 8007540:	2801      	cmp	r0, #1
 8007542:	d00a      	beq.n	800755a <osThreadNew+0x7a>
        return (NULL);
 8007544:	2500      	movs	r5, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8007546:	4628      	mov	r0, r5
 8007548:	b007      	add	sp, #28
 800754a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800754c:	1e72      	subs	r2, r6, #1
 800754e:	2a37      	cmp	r2, #55	; 0x37
 8007550:	d9d3      	bls.n	80074fa <osThreadNew+0x1a>
 8007552:	e7f8      	b.n	8007546 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 8007554:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8007558:	e7d6      	b.n	8007508 <osThreadNew+0x28>
  return ((osThreadId_t)hTask);
 800755a:	9d05      	ldr	r5, [sp, #20]
 800755c:	e7f3      	b.n	8007546 <osThreadNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1f0      	bne.n	8007546 <osThreadNew+0x66>
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1ed      	bne.n	8007546 <osThreadNew+0x66>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800756a:	fa1f f28c 	uxth.w	r2, ip
 800756e:	463c      	mov	r4, r7
 8007570:	e7df      	b.n	8007532 <osThreadNew+0x52>
 8007572:	bf00      	nop

08007574 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	f3ef 8405 	mrs	r4, IPSR
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800757a:	b96c      	cbnz	r4, 8007598 <osThreadTerminate+0x24>
 800757c:	4605      	mov	r5, r0
    stat = osErrorISR;
  }
  else if (hTask == NULL) {
 800757e:	b170      	cbz	r0, 800759e <osThreadTerminate+0x2a>
    stat = osErrorParameter;
  }
  else {
    tstate = eTaskGetState (hTask);
 8007580:	f001 f8d4 	bl	800872c <eTaskGetState>

    if (tstate != eDeleted) {
 8007584:	2804      	cmp	r0, #4
 8007586:	d004      	beq.n	8007592 <osThreadTerminate+0x1e>
      stat = osOK;
      vTaskDelete (hTask);
 8007588:	4628      	mov	r0, r5
 800758a:	f000 fff3 	bl	8008574 <vTaskDelete>
      stat = osOK;
 800758e:	4620      	mov	r0, r4
#else
  stat = osError;
#endif

  return (stat);
}
 8007590:	bd38      	pop	{r3, r4, r5, pc}
      stat = osErrorResource;
 8007592:	f06f 0002 	mvn.w	r0, #2
}
 8007596:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8007598:	f06f 0005 	mvn.w	r0, #5
}
 800759c:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 800759e:	f06f 0003 	mvn.w	r0, #3
}
 80075a2:	bd38      	pop	{r3, r4, r5, pc}

080075a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075a4:	b510      	push	{r4, lr}
 80075a6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80075aa:	b92c      	cbnz	r4, 80075b8 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80075ac:	b900      	cbnz	r0, 80075b0 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80075ae:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 80075b0:	f001 f866 	bl	8008680 <vTaskDelay>
    stat = osOK;
 80075b4:	4620      	mov	r0, r4
}
 80075b6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80075b8:	f06f 0005 	mvn.w	r0, #5
}
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop

080075c0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075c2:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075c4:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075c6:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075c8:	4c03      	ldr	r4, [pc, #12]	; (80075d8 <vApplicationGetIdleTaskMemory+0x18>)
 80075ca:	600c      	str	r4, [r1, #0]
}
 80075cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075d0:	6013      	str	r3, [r2, #0]
}
 80075d2:	4770      	bx	lr
 80075d4:	24003998 	.word	0x24003998
 80075d8:	24003798 	.word	0x24003798

080075dc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075de:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075e0:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075e2:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075e6:	4c04      	ldr	r4, [pc, #16]	; (80075f8 <vApplicationGetTimerTaskMemory+0x1c>)
 80075e8:	600c      	str	r4, [r1, #0]
}
 80075ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075ee:	6013      	str	r3, [r2, #0]
}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	24003e58 	.word	0x24003e58
 80075f8:	24003a58 	.word	0x24003a58

080075fc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075fc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007600:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007604:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007606:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007608:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800760a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800760c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop

08007614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007614:	2300      	movs	r3, #0
 8007616:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop

0800761c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800761c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800761e:	6802      	ldr	r2, [r0, #0]
{
 8007620:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007622:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8007624:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8007626:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007628:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800762a:	689c      	ldr	r4, [r3, #8]
 800762c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800762e:	6099      	str	r1, [r3, #8]
}
 8007630:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8007634:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007636:	6002      	str	r2, [r0, #0]
}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop

0800763c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800763c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800763e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007640:	1c6b      	adds	r3, r5, #1
 8007642:	d010      	beq.n	8007666 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007644:	f100 0308 	add.w	r3, r0, #8
 8007648:	461c      	mov	r4, r3
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	42aa      	cmp	r2, r5
 8007650:	d9fa      	bls.n	8007648 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007652:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8007654:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8007656:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007658:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800765a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800765c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800765e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007660:	6002      	str	r2, [r0, #0]
}
 8007662:	bc30      	pop	{r4, r5}
 8007664:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8007666:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	e7f2      	b.n	8007652 <vListInsert+0x16>

0800766c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800766c:	6903      	ldr	r3, [r0, #16]
{
 800766e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007670:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007672:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8007676:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8007678:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800767c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800767e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8007680:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007684:	bf08      	it	eq
 8007686:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8007688:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800768a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800768c:	3a01      	subs	r2, #1
 800768e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8007690:	6818      	ldr	r0, [r3, #0]
}
 8007692:	4770      	bx	lr

08007694 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007698:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800769a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800769c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800769e:	b92a      	cbnz	r2, 80076ac <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076a0:	6805      	ldr	r5, [r0, #0]
 80076a2:	b365      	cbz	r5, 80076fe <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076a4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80076a6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076a8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80076aa:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80076ac:	b97d      	cbnz	r5, 80076ce <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076ae:	6840      	ldr	r0, [r0, #4]
 80076b0:	f002 f930 	bl	8009914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80076b8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076ba:	68a2      	ldr	r2, [r4, #8]
 80076bc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076be:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076c0:	d319      	bcc.n	80076f6 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076c2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076c4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80076c6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076c8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076ca:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80076cc:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076ce:	68c0      	ldr	r0, [r0, #12]
 80076d0:	f002 f920 	bl	8009914 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80076d6:	68e3      	ldr	r3, [r4, #12]
 80076d8:	4251      	negs	r1, r2
 80076da:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076dc:	6822      	ldr	r2, [r4, #0]
 80076de:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076e0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076e2:	d202      	bcs.n	80076ea <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076e4:	68a3      	ldr	r3, [r4, #8]
 80076e6:	440b      	add	r3, r1
 80076e8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80076ea:	2d02      	cmp	r5, #2
 80076ec:	d00d      	beq.n	800770a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076ee:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80076f0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076f2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80076f4:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076f6:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80076f8:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076fa:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80076fc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076fe:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007700:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007702:	f001 fa89 	bl	8008c18 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007706:	60a5      	str	r5, [r4, #8]
 8007708:	e7ce      	b.n	80076a8 <prvCopyDataToQueue+0x14>
 800770a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 800770c:	f04f 0000 	mov.w	r0, #0
 8007710:	bf38      	it	cc
 8007712:	2601      	movcc	r6, #1
 8007714:	e7c8      	b.n	80076a8 <prvCopyDataToQueue+0x14>
 8007716:	bf00      	nop

08007718 <xQueueGenericCreateStatic>:
	{
 8007718:	b530      	push	{r4, r5, lr}
 800771a:	b083      	sub	sp, #12
 800771c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007720:	b940      	cbnz	r0, 8007734 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	e7fe      	b.n	8007732 <xQueueGenericCreateStatic+0x1a>
 8007734:	461d      	mov	r5, r3
		configASSERT( pxStaticQueue != NULL );
 8007736:	b153      	cbz	r3, 800774e <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007738:	b30a      	cbz	r2, 800777e <xQueueGenericCreateStatic+0x66>
 800773a:	b989      	cbnz	r1, 8007760 <xQueueGenericCreateStatic+0x48>
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	e7fe      	b.n	800774c <xQueueGenericCreateStatic+0x34>
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	e7fe      	b.n	800775e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007760:	b16a      	cbz	r2, 800777e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007762:	2350      	movs	r3, #80	; 0x50
 8007764:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	2b50      	cmp	r3, #80	; 0x50
 800776a:	d013      	beq.n	8007794 <xQueueGenericCreateStatic+0x7c>
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	e7fe      	b.n	800777c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800777e:	2900      	cmp	r1, #0
 8007780:	d0ef      	beq.n	8007762 <xQueueGenericCreateStatic+0x4a>
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	e7fe      	b.n	8007792 <xQueueGenericCreateStatic+0x7a>
 8007794:	2900      	cmp	r1, #0
 8007796:	bf08      	it	eq
 8007798:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
 800779a:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800779c:	6429      	str	r1, [r5, #64]	; 0x40
 800779e:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077a0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077a2:	2201      	movs	r2, #1
 80077a4:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
 80077a8:	f001 fcdc 	bl	8009164 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077ac:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077ae:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077b0:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077b2:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077b4:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
 80077b8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077bc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077be:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077c0:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077c2:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80077c4:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077c6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077ca:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077cc:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077d0:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077d4:	f7ff ff12 	bl	80075fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077d8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80077dc:	f7ff ff0e 	bl	80075fc <vListInitialise>
	taskEXIT_CRITICAL();
 80077e0:	f001 fce2 	bl	80091a8 <vPortExitCritical>
	}
 80077e4:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 80077e6:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 80077ea:	b003      	add	sp, #12
 80077ec:	bd30      	pop	{r4, r5, pc}
 80077ee:	bf00      	nop

080077f0 <xQueueGenericSend>:
{
 80077f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f000 8103 	beq.w	8007a04 <xQueueGenericSend+0x214>
 80077fe:	4688      	mov	r8, r1
 8007800:	4604      	mov	r4, r0
 8007802:	461f      	mov	r7, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007804:	2900      	cmp	r1, #0
 8007806:	f000 8097 	beq.w	8007938 <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800780a:	2f02      	cmp	r7, #2
 800780c:	d10b      	bne.n	8007826 <xQueueGenericSend+0x36>
 800780e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007810:	2b01      	cmp	r3, #1
 8007812:	d008      	beq.n	8007826 <xQueueGenericSend+0x36>
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	e7fe      	b.n	8007824 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007826:	f001 f9e7 	bl	8008bf8 <xTaskGetSchedulerState>
 800782a:	2800      	cmp	r0, #0
 800782c:	f000 80f3 	beq.w	8007a16 <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007830:	f1a7 0902 	sub.w	r9, r7, #2
 8007834:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007836:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800783a:	fab9 f989 	clz	r9, r9
 800783e:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
 8007842:	f001 fc8f 	bl	8009164 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007846:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007848:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800784a:	429a      	cmp	r2, r3
 800784c:	f0c0 80f0 	bcc.w	8007a30 <xQueueGenericSend+0x240>
 8007850:	f1b9 0f00 	cmp.w	r9, #0
 8007854:	f040 80ec 	bne.w	8007a30 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007858:	9b01      	ldr	r3, [sp, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8101 	beq.w	8007a62 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
 8007860:	2d00      	cmp	r5, #0
 8007862:	f000 80cb 	beq.w	80079fc <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
 8007866:	f001 fc9f 	bl	80091a8 <vPortExitCritical>
		vTaskSuspendAll();
 800786a:	f001 f81b 	bl	80088a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800786e:	f001 fc79 	bl	8009164 <vPortEnterCritical>
 8007872:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007876:	2bff      	cmp	r3, #255	; 0xff
 8007878:	d102      	bne.n	8007880 <xQueueGenericSend+0x90>
 800787a:	2300      	movs	r3, #0
 800787c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007880:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007884:	2bff      	cmp	r3, #255	; 0xff
 8007886:	d102      	bne.n	800788e <xQueueGenericSend+0x9e>
 8007888:	2300      	movs	r3, #0
 800788a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800788e:	f001 fc8b 	bl	80091a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007892:	a901      	add	r1, sp, #4
 8007894:	a802      	add	r0, sp, #8
 8007896:	f001 f961 	bl	8008b5c <xTaskCheckForTimeOut>
 800789a:	2800      	cmp	r0, #0
 800789c:	f040 80e5 	bne.w	8007a6a <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078a0:	f001 fc60 	bl	8009164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80078a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d052      	beq.n	8007952 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80078ac:	f001 fc7c 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80078b0:	f001 fc58 	bl	8009164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80078b4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80078b8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078ba:	2d00      	cmp	r5, #0
 80078bc:	dc04      	bgt.n	80078c8 <xQueueGenericSend+0xd8>
 80078be:	e011      	b.n	80078e4 <xQueueGenericSend+0xf4>
 80078c0:	1e6a      	subs	r2, r5, #1
 80078c2:	b2d3      	uxtb	r3, r2
 80078c4:	b255      	sxtb	r5, r2
 80078c6:	b16b      	cbz	r3, 80078e4 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ca:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078cc:	b153      	cbz	r3, 80078e4 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ce:	f001 f8ef 	bl	8008ab0 <xTaskRemoveFromEventList>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d0f4      	beq.n	80078c0 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
 80078d6:	f001 f989 	bl	8008bec <vTaskMissedYield>
 80078da:	1e6a      	subs	r2, r5, #1
 80078dc:	b2d3      	uxtb	r3, r2
 80078de:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f1      	bne.n	80078c8 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 80078e4:	23ff      	movs	r3, #255	; 0xff
 80078e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80078ea:	f001 fc5d 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80078ee:	f001 fc39 	bl	8009164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80078f2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80078f6:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078f8:	2d00      	cmp	r5, #0
 80078fa:	dd14      	ble.n	8007926 <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078fc:	f104 0a10 	add.w	sl, r4, #16
 8007900:	e003      	b.n	800790a <xQueueGenericSend+0x11a>
 8007902:	1e6a      	subs	r2, r5, #1
 8007904:	b2d3      	uxtb	r3, r2
 8007906:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007908:	b16b      	cbz	r3, 8007926 <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800790a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800790c:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800790e:	b153      	cbz	r3, 8007926 <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007910:	f001 f8ce 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007914:	2800      	cmp	r0, #0
 8007916:	d0f4      	beq.n	8007902 <xQueueGenericSend+0x112>
					vTaskMissedYield();
 8007918:	f001 f968 	bl	8008bec <vTaskMissedYield>
 800791c:	1e6a      	subs	r2, r5, #1
 800791e:	b2d3      	uxtb	r3, r2
 8007920:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f1      	bne.n	800790a <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 8007926:	23ff      	movs	r3, #255	; 0xff
 8007928:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800792c:	f001 fc3c 	bl	80091a8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8007930:	f000 ffc0 	bl	80088b4 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007934:	2501      	movs	r5, #1
 8007936:	e784      	b.n	8007842 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007938:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	f43f af65 	beq.w	800780a <xQueueGenericSend+0x1a>
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	e7fe      	b.n	8007950 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007952:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 8007956:	f001 fc27 	bl	80091a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800795a:	9901      	ldr	r1, [sp, #4]
 800795c:	4650      	mov	r0, sl
 800795e:	f001 f819 	bl	8008994 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8007962:	f001 fbff 	bl	8009164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007966:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800796a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800796c:	2d00      	cmp	r5, #0
 800796e:	dc04      	bgt.n	800797a <xQueueGenericSend+0x18a>
 8007970:	e011      	b.n	8007996 <xQueueGenericSend+0x1a6>
 8007972:	1e6b      	subs	r3, r5, #1
 8007974:	b2da      	uxtb	r2, r3
 8007976:	b25d      	sxtb	r5, r3
 8007978:	b16a      	cbz	r2, 8007996 <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800797a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800797c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800797e:	b153      	cbz	r3, 8007996 <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007980:	f001 f896 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007984:	2800      	cmp	r0, #0
 8007986:	d0f4      	beq.n	8007972 <xQueueGenericSend+0x182>
						vTaskMissedYield();
 8007988:	f001 f930 	bl	8008bec <vTaskMissedYield>
 800798c:	1e6b      	subs	r3, r5, #1
 800798e:	b2da      	uxtb	r2, r3
 8007990:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007992:	2a00      	cmp	r2, #0
 8007994:	d1f1      	bne.n	800797a <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
 8007996:	23ff      	movs	r3, #255	; 0xff
 8007998:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800799c:	f001 fc04 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80079a0:	f001 fbe0 	bl	8009164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80079a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80079a8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	dc04      	bgt.n	80079b8 <xQueueGenericSend+0x1c8>
 80079ae:	e011      	b.n	80079d4 <xQueueGenericSend+0x1e4>
 80079b0:	1e6b      	subs	r3, r5, #1
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	b25d      	sxtb	r5, r3
 80079b6:	b16a      	cbz	r2, 80079d4 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079b8:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ba:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079bc:	b153      	cbz	r3, 80079d4 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079be:	f001 f877 	bl	8008ab0 <xTaskRemoveFromEventList>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d0f4      	beq.n	80079b0 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
 80079c6:	f001 f911 	bl	8008bec <vTaskMissedYield>
 80079ca:	1e6b      	subs	r3, r5, #1
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079d0:	2a00      	cmp	r2, #0
 80079d2:	d1f1      	bne.n	80079b8 <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
 80079d4:	23ff      	movs	r3, #255	; 0xff
 80079d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80079da:	f001 fbe5 	bl	80091a8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80079de:	f000 ff69 	bl	80088b4 <xTaskResumeAll>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d1a6      	bne.n	8007934 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
 80079e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80079ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	e79b      	b.n	8007934 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079fc:	a802      	add	r0, sp, #8
 80079fe:	f001 f8a1 	bl	8008b44 <vTaskInternalSetTimeOutState>
 8007a02:	e730      	b.n	8007866 <xQueueGenericSend+0x76>
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	e7fe      	b.n	8007a14 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f43f af09 	beq.w	8007830 <xQueueGenericSend+0x40>
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	e7fe      	b.n	8007a2e <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a30:	463a      	mov	r2, r7
 8007a32:	4641      	mov	r1, r8
 8007a34:	4620      	mov	r0, r4
 8007a36:	f7ff fe2d 	bl	8007694 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d152      	bne.n	8007ae6 <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
 8007a40:	b148      	cbz	r0, 8007a56 <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
 8007a42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007a56:	f001 fba7 	bl	80091a8 <vPortExitCritical>
				return pdPASS;
 8007a5a:	2001      	movs	r0, #1
}
 8007a5c:	b004      	add	sp, #16
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
 8007a62:	f001 fba1 	bl	80091a8 <vPortExitCritical>
					return errQUEUE_FULL;
 8007a66:	4648      	mov	r0, r9
 8007a68:	e7f8      	b.n	8007a5c <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
 8007a6a:	f001 fb7b 	bl	8009164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007a6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007a72:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	dd10      	ble.n	8007a9a <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a78:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8007a7c:	e003      	b.n	8007a86 <xQueueGenericSend+0x296>
 8007a7e:	1e6b      	subs	r3, r5, #1
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a84:	b14a      	cbz	r2, 8007a9a <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a88:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a8a:	b133      	cbz	r3, 8007a9a <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a8c:	f001 f810 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d0f4      	beq.n	8007a7e <xQueueGenericSend+0x28e>
						vTaskMissedYield();
 8007a94:	f001 f8aa 	bl	8008bec <vTaskMissedYield>
 8007a98:	e7f1      	b.n	8007a7e <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
 8007a9a:	23ff      	movs	r3, #255	; 0xff
 8007a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007aa0:	f001 fb82 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007aa4:	f001 fb5e 	bl	8009164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007aa8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007aac:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	dd10      	ble.n	8007ad4 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab2:	f104 0610 	add.w	r6, r4, #16
 8007ab6:	e003      	b.n	8007ac0 <xQueueGenericSend+0x2d0>
 8007ab8:	1e6b      	subs	r3, r5, #1
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007abe:	b14a      	cbz	r2, 8007ad4 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ac0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ac2:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ac4:	b133      	cbz	r3, 8007ad4 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ac6:	f000 fff3 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0f4      	beq.n	8007ab8 <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
 8007ace:	f001 f88d 	bl	8008bec <vTaskMissedYield>
 8007ad2:	e7f1      	b.n	8007ab8 <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
 8007ad4:	23ff      	movs	r3, #255	; 0xff
 8007ad6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007ada:	f001 fb65 	bl	80091a8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8007ade:	f000 fee9 	bl	80088b4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e7ba      	b.n	8007a5c <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ae6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007aea:	f000 ffe1 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d0b1      	beq.n	8007a56 <xQueueGenericSend+0x266>
 8007af2:	e7a6      	b.n	8007a42 <xQueueGenericSend+0x252>

08007af4 <xQueueReceive>:
{
 8007af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007af8:	b085      	sub	sp, #20
 8007afa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f000 815f 	beq.w	8007dc0 <xQueueReceive+0x2cc>
 8007b02:	460f      	mov	r7, r1
 8007b04:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b06:	2900      	cmp	r1, #0
 8007b08:	f000 8094 	beq.w	8007c34 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b0c:	f001 f874 	bl	8008bf8 <xTaskGetSchedulerState>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	f000 809c 	beq.w	8007c4e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8007b16:	f001 fb25 	bl	8009164 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b1a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b1c:	2d00      	cmp	r5, #0
 8007b1e:	d172      	bne.n	8007c06 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b20:	9b01      	ldr	r3, [sp, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80f1 	beq.w	8007d0a <xQueueReceive+0x216>
		prvLockQueue( pxQueue );
 8007b28:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b2a:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b2e:	a802      	add	r0, sp, #8
 8007b30:	f001 f808 	bl	8008b44 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007b34:	f001 fb38 	bl	80091a8 <vPortExitCritical>
		vTaskSuspendAll();
 8007b38:	f000 feb4 	bl	80088a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b3c:	f001 fb12 	bl	8009164 <vPortEnterCritical>
 8007b40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b44:	2bff      	cmp	r3, #255	; 0xff
 8007b46:	d101      	bne.n	8007b4c <xQueueReceive+0x58>
 8007b48:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8007b4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b50:	2bff      	cmp	r3, #255	; 0xff
 8007b52:	d101      	bne.n	8007b58 <xQueueReceive+0x64>
 8007b54:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8007b58:	f001 fb26 	bl	80091a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b5c:	a901      	add	r1, sp, #4
 8007b5e:	a802      	add	r0, sp, #8
 8007b60:	f000 fffc 	bl	8008b5c <xTaskCheckForTimeOut>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d17f      	bne.n	8007c68 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8007b68:	f001 fafc 	bl	8009164 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 80d1 	beq.w	8007d16 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8007b74:	f001 fb18 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b78:	f001 faf4 	bl	8009164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007b7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b80:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	dc04      	bgt.n	8007b90 <xQueueReceive+0x9c>
 8007b86:	e011      	b.n	8007bac <xQueueReceive+0xb8>
 8007b88:	1e6b      	subs	r3, r5, #1
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	b25d      	sxtb	r5, r3
 8007b8e:	b16a      	cbz	r2, 8007bac <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b92:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b94:	b153      	cbz	r3, 8007bac <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b96:	f000 ff8b 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d0f4      	beq.n	8007b88 <xQueueReceive+0x94>
						vTaskMissedYield();
 8007b9e:	f001 f825 	bl	8008bec <vTaskMissedYield>
 8007ba2:	1e6b      	subs	r3, r5, #1
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	d1f1      	bne.n	8007b90 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 8007bac:	23ff      	movs	r3, #255	; 0xff
 8007bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007bb2:	f001 faf9 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007bb6:	f001 fad5 	bl	8009164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007bba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007bbe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bc0:	2d00      	cmp	r5, #0
 8007bc2:	dd14      	ble.n	8007bee <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc4:	f104 0910 	add.w	r9, r4, #16
 8007bc8:	e003      	b.n	8007bd2 <xQueueReceive+0xde>
 8007bca:	1e6b      	subs	r3, r5, #1
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bd0:	b16a      	cbz	r2, 8007bee <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bd2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bd6:	b153      	cbz	r3, 8007bee <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd8:	f000 ff6a 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d0f4      	beq.n	8007bca <xQueueReceive+0xd6>
					vTaskMissedYield();
 8007be0:	f001 f804 	bl	8008bec <vTaskMissedYield>
 8007be4:	1e6b      	subs	r3, r5, #1
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	d1f1      	bne.n	8007bd2 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 8007bee:	23ff      	movs	r3, #255	; 0xff
 8007bf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007bf4:	f001 fad8 	bl	80091a8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8007bf8:	f000 fe5c 	bl	80088b4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007bfc:	f001 fab2 	bl	8009164 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c00:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c02:	2d00      	cmp	r5, #0
 8007c04:	d07d      	beq.n	8007d02 <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c08:	b152      	cbz	r2, 8007c20 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c0a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c0c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c0e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c10:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c12:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c14:	d301      	bcc.n	8007c1a <xQueueReceive+0x126>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c16:	6821      	ldr	r1, [r4, #0]
 8007c18:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	f001 fe7a 	bl	8009914 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c20:	3d01      	subs	r5, #1
 8007c22:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c24:	6923      	ldr	r3, [r4, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f040 80d3 	bne.w	8007dd2 <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 8007c2c:	f001 fabc 	bl	80091a8 <vPortExitCritical>
				return pdPASS;
 8007c30:	2001      	movs	r0, #1
 8007c32:	e06d      	b.n	8007d10 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f43f af68 	beq.w	8007b0c <xQueueReceive+0x18>
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	e7fe      	b.n	8007c4c <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f43f af60 	beq.w	8007b16 <xQueueReceive+0x22>
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	e7fe      	b.n	8007c66 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 8007c68:	f001 fa7c 	bl	8009164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007c6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007c70:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c72:	2d00      	cmp	r5, #0
 8007c74:	dc04      	bgt.n	8007c80 <xQueueReceive+0x18c>
 8007c76:	e011      	b.n	8007c9c <xQueueReceive+0x1a8>
 8007c78:	1e6b      	subs	r3, r5, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	b25d      	sxtb	r5, r3
 8007c7e:	b16a      	cbz	r2, 8007c9c <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c82:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c84:	b153      	cbz	r3, 8007c9c <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c86:	f000 ff13 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d0f4      	beq.n	8007c78 <xQueueReceive+0x184>
						vTaskMissedYield();
 8007c8e:	f000 ffad 	bl	8008bec <vTaskMissedYield>
 8007c92:	1e6b      	subs	r3, r5, #1
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c98:	2a00      	cmp	r2, #0
 8007c9a:	d1f1      	bne.n	8007c80 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 8007c9c:	23ff      	movs	r3, #255	; 0xff
 8007c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007ca2:	f001 fa81 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007ca6:	f001 fa5d 	bl	8009164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007caa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007cae:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	dd14      	ble.n	8007cde <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cb4:	f104 0910 	add.w	r9, r4, #16
 8007cb8:	e003      	b.n	8007cc2 <xQueueReceive+0x1ce>
 8007cba:	1e6b      	subs	r3, r5, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cc0:	b16a      	cbz	r2, 8007cde <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc6:	b153      	cbz	r3, 8007cde <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc8:	f000 fef2 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d0f4      	beq.n	8007cba <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8007cd0:	f000 ff8c 	bl	8008bec <vTaskMissedYield>
 8007cd4:	1e6b      	subs	r3, r5, #1
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	d1f1      	bne.n	8007cc2 <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8007cde:	23ff      	movs	r3, #255	; 0xff
 8007ce0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007ce4:	f001 fa60 	bl	80091a8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8007ce8:	f000 fde4 	bl	80088b4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8007cec:	f001 fa3a 	bl	8009164 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cf2:	b153      	cbz	r3, 8007d0a <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8007cf4:	f001 fa58 	bl	80091a8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8007cf8:	f001 fa34 	bl	8009164 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cfc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	d181      	bne.n	8007c06 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d02:	9b01      	ldr	r3, [sp, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f47f af15 	bne.w	8007b34 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8007d0a:	f001 fa4d 	bl	80091a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007d0e:	2000      	movs	r0, #0
}
 8007d10:	b005      	add	sp, #20
 8007d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8007d16:	f001 fa47 	bl	80091a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d1a:	9901      	ldr	r1, [sp, #4]
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f000 fe39 	bl	8008994 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8007d22:	f001 fa1f 	bl	8009164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007d26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007d2a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	dc04      	bgt.n	8007d3a <xQueueReceive+0x246>
 8007d30:	e011      	b.n	8007d56 <xQueueReceive+0x262>
 8007d32:	1e6b      	subs	r3, r5, #1
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	b25d      	sxtb	r5, r3
 8007d38:	b16a      	cbz	r2, 8007d56 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d3c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d3e:	b153      	cbz	r3, 8007d56 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d40:	f000 feb6 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d0f4      	beq.n	8007d32 <xQueueReceive+0x23e>
						vTaskMissedYield();
 8007d48:	f000 ff50 	bl	8008bec <vTaskMissedYield>
 8007d4c:	1e6b      	subs	r3, r5, #1
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	d1f1      	bne.n	8007d3a <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 8007d56:	23ff      	movs	r3, #255	; 0xff
 8007d58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007d5c:	f001 fa24 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007d60:	f001 fa00 	bl	8009164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007d64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007d68:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	dd14      	ble.n	8007d98 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d6e:	f104 0910 	add.w	r9, r4, #16
 8007d72:	e003      	b.n	8007d7c <xQueueReceive+0x288>
 8007d74:	1e6b      	subs	r3, r5, #1
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d7a:	b16a      	cbz	r2, 8007d98 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d7c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d7e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d80:	b153      	cbz	r3, 8007d98 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d82:	f000 fe95 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d0f4      	beq.n	8007d74 <xQueueReceive+0x280>
					vTaskMissedYield();
 8007d8a:	f000 ff2f 	bl	8008bec <vTaskMissedYield>
 8007d8e:	1e6b      	subs	r3, r5, #1
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	d1f1      	bne.n	8007d7c <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8007d98:	23ff      	movs	r3, #255	; 0xff
 8007d9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007d9e:	f001 fa03 	bl	80091a8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8007da2:	f000 fd87 	bl	80088b4 <xTaskResumeAll>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d1a6      	bne.n	8007cf8 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 8007daa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	e79b      	b.n	8007cf8 <xQueueReceive+0x204>
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	e7fe      	b.n	8007dd0 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dd2:	f104 0010 	add.w	r0, r4, #16
 8007dd6:	f000 fe6b 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f43f af26 	beq.w	8007c2c <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8007de0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	e71a      	b.n	8007c2c <xQueueReceive+0x138>
 8007df6:	bf00      	nop

08007df8 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007df8:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <vQueueAddToRegistry+0x4c>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	b17a      	cbz	r2, 8007e1e <vQueueAddToRegistry+0x26>
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	b162      	cbz	r2, 8007e1c <vQueueAddToRegistry+0x24>
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	b192      	cbz	r2, 8007e2c <vQueueAddToRegistry+0x34>
 8007e06:	699a      	ldr	r2, [r3, #24]
 8007e08:	b192      	cbz	r2, 8007e30 <vQueueAddToRegistry+0x38>
 8007e0a:	6a1a      	ldr	r2, [r3, #32]
 8007e0c:	b192      	cbz	r2, 8007e34 <vQueueAddToRegistry+0x3c>
 8007e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e10:	b192      	cbz	r2, 8007e38 <vQueueAddToRegistry+0x40>
 8007e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e14:	b192      	cbz	r2, 8007e3c <vQueueAddToRegistry+0x44>
 8007e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e18:	b192      	cbz	r2, 8007e40 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e1a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e1c:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e1e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e26:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8007e2a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	e7f6      	b.n	8007e1e <vQueueAddToRegistry+0x26>
 8007e30:	2203      	movs	r2, #3
 8007e32:	e7f4      	b.n	8007e1e <vQueueAddToRegistry+0x26>
 8007e34:	2204      	movs	r2, #4
 8007e36:	e7f2      	b.n	8007e1e <vQueueAddToRegistry+0x26>
 8007e38:	2205      	movs	r2, #5
 8007e3a:	e7f0      	b.n	8007e1e <vQueueAddToRegistry+0x26>
 8007e3c:	2206      	movs	r2, #6
 8007e3e:	e7ee      	b.n	8007e1e <vQueueAddToRegistry+0x26>
 8007e40:	2207      	movs	r2, #7
 8007e42:	e7ec      	b.n	8007e1e <vQueueAddToRegistry+0x26>
 8007e44:	24003f18 	.word	0x24003f18

08007e48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	460e      	mov	r6, r1
 8007e4e:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e50:	f001 f988 	bl	8009164 <vPortEnterCritical>
 8007e54:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8007e58:	2bff      	cmp	r3, #255	; 0xff
 8007e5a:	d102      	bne.n	8007e62 <vQueueWaitForMessageRestricted+0x1a>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8007e62:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8007e66:	2bff      	cmp	r3, #255	; 0xff
 8007e68:	d102      	bne.n	8007e70 <vQueueWaitForMessageRestricted+0x28>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8007e70:	f001 f99a 	bl	80091a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e74:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d043      	beq.n	8007f02 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8007e7a:	f001 f973 	bl	8009164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007e7e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8007e82:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	dd14      	ble.n	8007eb2 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e88:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8007e8c:	e003      	b.n	8007e96 <vQueueWaitForMessageRestricted+0x4e>
 8007e8e:	1e63      	subs	r3, r4, #1
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e94:	b16a      	cbz	r2, 8007eb2 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e98:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e9a:	b153      	cbz	r3, 8007eb2 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e9c:	f000 fe08 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d0f4      	beq.n	8007e8e <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8007ea4:	f000 fea2 	bl	8008bec <vTaskMissedYield>
 8007ea8:	1e63      	subs	r3, r4, #1
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	d1f1      	bne.n	8007e96 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007eb8:	f001 f976 	bl	80091a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007ebc:	f001 f952 	bl	8009164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007ec0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8007ec4:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	dd14      	ble.n	8007ef4 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eca:	f105 0610 	add.w	r6, r5, #16
 8007ece:	e003      	b.n	8007ed8 <vQueueWaitForMessageRestricted+0x90>
 8007ed0:	1e63      	subs	r3, r4, #1
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ed6:	b16a      	cbz	r2, 8007ef4 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed8:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eda:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007edc:	b153      	cbz	r3, 8007ef4 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ede:	f000 fde7 	bl	8008ab0 <xTaskRemoveFromEventList>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d0f4      	beq.n	8007ed0 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8007ee6:	f000 fe81 	bl	8008bec <vTaskMissedYield>
 8007eea:	1e63      	subs	r3, r4, #1
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	d1f1      	bne.n	8007ed8 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8007ef4:	23ff      	movs	r3, #255	; 0xff
 8007ef6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8007efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007efe:	f001 b953 	b.w	80091a8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f02:	4622      	mov	r2, r4
 8007f04:	4631      	mov	r1, r6
 8007f06:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007f0a:	f000 fd87 	bl	8008a1c <vTaskPlaceOnEventListRestricted>
 8007f0e:	e7b4      	b.n	8007e7a <vQueueWaitForMessageRestricted+0x32>

08007f10 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f14:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f16:	f001 f925 	bl	8009164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f1a:	4a34      	ldr	r2, [pc, #208]	; (8007fec <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8007f1c:	4e34      	ldr	r6, [pc, #208]	; (8007ff0 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8007f1e:	6813      	ldr	r3, [r2, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f24:	6833      	ldr	r3, [r6, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d032      	beq.n	8007f90 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f2a:	4c32      	ldr	r4, [pc, #200]	; (8007ff4 <prvAddNewTaskToReadyList+0xe4>)
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	b33b      	cbz	r3, 8007f80 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f30:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007f32:	4f31      	ldr	r7, [pc, #196]	; (8007ff8 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8007f34:	4a31      	ldr	r2, [pc, #196]	; (8007ffc <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8007f36:	4932      	ldr	r1, [pc, #200]	; (8008000 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8007f38:	6813      	ldr	r3, [r2, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f3e:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007f40:	680b      	ldr	r3, [r1, #0]
 8007f42:	4283      	cmp	r3, r0
 8007f44:	d200      	bcs.n	8007f48 <prvAddNewTaskToReadyList+0x38>
 8007f46:	6008      	str	r0, [r1, #0]
 8007f48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007f4c:	1d29      	adds	r1, r5, #4
 8007f4e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007f52:	f7ff fb63 	bl	800761c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f56:	f001 f927 	bl	80091a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	b173      	cbz	r3, 8007f7c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f5e:	6832      	ldr	r2, [r6, #0]
 8007f60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007f62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d209      	bcs.n	8007f7c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f80:	6833      	ldr	r3, [r6, #0]
 8007f82:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	4f1c      	ldr	r7, [pc, #112]	; (8007ff8 <prvAddNewTaskToReadyList+0xe8>)
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	d8d3      	bhi.n	8007f34 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8007f8c:	6035      	str	r5, [r6, #0]
 8007f8e:	e7d1      	b.n	8007f34 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8007f90:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d003      	beq.n	8007fa0 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8007f98:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007f9a:	4f17      	ldr	r7, [pc, #92]	; (8007ff8 <prvAddNewTaskToReadyList+0xe8>)
 8007f9c:	4c15      	ldr	r4, [pc, #84]	; (8007ff4 <prvAddNewTaskToReadyList+0xe4>)
 8007f9e:	e7c9      	b.n	8007f34 <prvAddNewTaskToReadyList+0x24>
 8007fa0:	4f15      	ldr	r7, [pc, #84]	; (8007ff8 <prvAddNewTaskToReadyList+0xe8>)
 8007fa2:	463c      	mov	r4, r7
 8007fa4:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fa8:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007faa:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fac:	f7ff fb26 	bl	80075fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fb0:	45a0      	cmp	r8, r4
 8007fb2:	d1f9      	bne.n	8007fa8 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fb4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8008018 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8007fb8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800801c <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8007fbc:	4648      	mov	r0, r9
 8007fbe:	4c0d      	ldr	r4, [pc, #52]	; (8007ff4 <prvAddNewTaskToReadyList+0xe4>)
 8007fc0:	f7ff fb1c 	bl	80075fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	f7ff fb19 	bl	80075fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fca:	480e      	ldr	r0, [pc, #56]	; (8008004 <prvAddNewTaskToReadyList+0xf4>)
 8007fcc:	f7ff fb16 	bl	80075fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fd0:	480d      	ldr	r0, [pc, #52]	; (8008008 <prvAddNewTaskToReadyList+0xf8>)
 8007fd2:	f7ff fb13 	bl	80075fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fd6:	480d      	ldr	r0, [pc, #52]	; (800800c <prvAddNewTaskToReadyList+0xfc>)
 8007fd8:	f7ff fb10 	bl	80075fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fdc:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8007fde:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fe0:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <prvAddNewTaskToReadyList+0x104>)
 8007fe6:	f8c3 8000 	str.w	r8, [r3]
}
 8007fea:	e7a3      	b.n	8007f34 <prvAddNewTaskToReadyList+0x24>
 8007fec:	240043c4 	.word	0x240043c4
 8007ff0:	24003f58 	.word	0x24003f58
 8007ff4:	24004420 	.word	0x24004420
 8007ff8:	24003f64 	.word	0x24003f64
 8007ffc:	240043d0 	.word	0x240043d0
 8008000:	240043d4 	.word	0x240043d4
 8008004:	2400440c 	.word	0x2400440c
 8008008:	24004438 	.word	0x24004438
 800800c:	24004424 	.word	0x24004424
 8008010:	24003f5c 	.word	0x24003f5c
 8008014:	24003f60 	.word	0x24003f60
 8008018:	240043d8 	.word	0x240043d8
 800801c:	240043ec 	.word	0x240043ec

08008020 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008026:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800802a:	4606      	mov	r6, r0
 800802c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800802e:	464a      	mov	r2, r9
 8008030:	21a5      	movs	r1, #165	; 0xa5
 8008032:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008034:	461f      	mov	r7, r3
 8008036:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800803a:	f1a9 0904 	sub.w	r9, r9, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800803e:	f001 fc77 	bl	8009930 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008042:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008044:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008046:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800804a:	2d00      	cmp	r5, #0
 800804c:	f000 808a 	beq.w	8008164 <prvInitialiseNewTask.constprop.0+0x144>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008050:	782b      	ldrb	r3, [r5, #0]
 8008052:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008056:	782b      	ldrb	r3, [r5, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d04d      	beq.n	80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800805c:	786b      	ldrb	r3, [r5, #1]
 800805e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8008062:	786b      	ldrb	r3, [r5, #1]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d047      	beq.n	80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008068:	78ab      	ldrb	r3, [r5, #2]
 800806a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800806e:	78ab      	ldrb	r3, [r5, #2]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d041      	beq.n	80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008074:	78eb      	ldrb	r3, [r5, #3]
 8008076:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 800807a:	78eb      	ldrb	r3, [r5, #3]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d03b      	beq.n	80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008080:	792b      	ldrb	r3, [r5, #4]
 8008082:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8008086:	792b      	ldrb	r3, [r5, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d035      	beq.n	80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800808c:	796b      	ldrb	r3, [r5, #5]
 800808e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8008092:	796b      	ldrb	r3, [r5, #5]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d02f      	beq.n	80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008098:	79ab      	ldrb	r3, [r5, #6]
 800809a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800809e:	79ab      	ldrb	r3, [r5, #6]
 80080a0:	b353      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080a2:	79eb      	ldrb	r3, [r5, #7]
 80080a4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80080a8:	79eb      	ldrb	r3, [r5, #7]
 80080aa:	b32b      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080ac:	7a2b      	ldrb	r3, [r5, #8]
 80080ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80080b2:	7a2b      	ldrb	r3, [r5, #8]
 80080b4:	b303      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080b6:	7a6b      	ldrb	r3, [r5, #9]
 80080b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80080bc:	7a6b      	ldrb	r3, [r5, #9]
 80080be:	b1db      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080c0:	7aab      	ldrb	r3, [r5, #10]
 80080c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80080c6:	7aab      	ldrb	r3, [r5, #10]
 80080c8:	b1b3      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080ca:	7aeb      	ldrb	r3, [r5, #11]
 80080cc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80080d0:	7aeb      	ldrb	r3, [r5, #11]
 80080d2:	b18b      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080d4:	7b2b      	ldrb	r3, [r5, #12]
 80080d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 80080da:	7b2b      	ldrb	r3, [r5, #12]
 80080dc:	b163      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080de:	7b6b      	ldrb	r3, [r5, #13]
 80080e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80080e4:	7b6b      	ldrb	r3, [r5, #13]
 80080e6:	b13b      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080e8:	7bab      	ldrb	r3, [r5, #14]
 80080ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 80080ee:	7bab      	ldrb	r3, [r5, #14]
 80080f0:	b113      	cbz	r3, 80080f8 <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080f2:	7beb      	ldrb	r3, [r5, #15]
 80080f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080f8:	2300      	movs	r3, #0
 80080fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fe:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008100:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008104:	1d20      	adds	r0, r4, #4
 8008106:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008108:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800810c:	bf28      	it	cs
 800810e:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008110:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008112:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008114:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008118:	f7ff fa7c 	bl	8007614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800811c:	f104 0018 	add.w	r0, r4, #24
 8008120:	f7ff fa78 	bl	8007614 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008124:	4651      	mov	r1, sl
 8008126:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8008128:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800812c:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008130:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008132:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008134:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008136:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800813a:	f001 fbf9 	bl	8009930 <memset>
 800813e:	4b0b      	ldr	r3, [pc, #44]	; (800816c <prvInitialiseNewTask.constprop.0+0x14c>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008140:	463a      	mov	r2, r7
 8008142:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008144:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008146:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008148:	4b09      	ldr	r3, [pc, #36]	; (8008170 <prvInitialiseNewTask.constprop.0+0x150>)
 800814a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <prvInitialiseNewTask.constprop.0+0x154>)
 800814e:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008150:	f000 ffdc 	bl	800910c <pxPortInitialiseStack>
 8008154:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008156:	f1b8 0f00 	cmp.w	r8, #0
 800815a:	d001      	beq.n	8008160 <prvInitialiseNewTask.constprop.0+0x140>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800815c:	f8c8 4000 	str.w	r4, [r8]
}
 8008160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008164:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8008168:	e7c9      	b.n	80080fe <prvInitialiseNewTask.constprop.0+0xde>
 800816a:	bf00      	nop
 800816c:	0800b930 	.word	0x0800b930
 8008170:	0800b950 	.word	0x0800b950
 8008174:	0800b910 	.word	0x0800b910

08008178 <prvIdleTask>:
{
 8008178:	b580      	push	{r7, lr}
 800817a:	4d23      	ldr	r5, [pc, #140]	; (8008208 <prvIdleTask+0x90>)
				taskYIELD();
 800817c:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
 8008180:	4f22      	ldr	r7, [pc, #136]	; (800820c <prvIdleTask+0x94>)
 8008182:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8008186:	4e22      	ldr	r6, [pc, #136]	; (8008210 <prvIdleTask+0x98>)
 8008188:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008214 <prvIdleTask+0x9c>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b35b      	cbz	r3, 80081e8 <prvIdleTask+0x70>
		{
			taskENTER_CRITICAL();
 8008190:	f000 ffe8 	bl	8009164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008198:	1d20      	adds	r0, r4, #4
 800819a:	f7ff fa67 	bl	800766c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800819e:	6833      	ldr	r3, [r6, #0]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 80081aa:	f000 fffd 	bl	80091a8 <vPortExitCritical>
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081ae:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80081b2:	f001 fd41 	bl	8009c38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081b6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80081ba:	b163      	cbz	r3, 80081d6 <prvIdleTask+0x5e>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d01e      	beq.n	80081fe <prvIdleTask+0x86>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d0e3      	beq.n	800818c <prvIdleTask+0x14>
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	e7fe      	b.n	80081d4 <prvIdleTask+0x5c>
				vPortFree( pxTCB->pxStack );
 80081d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80081d8:	f001 f9b2 	bl	8009540 <vPortFree>
				vPortFree( pxTCB );
 80081dc:	4620      	mov	r0, r4
 80081de:	f001 f9af 	bl	8009540 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1d3      	bne.n	8008190 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081e8:	f8d8 3000 	ldr.w	r3, [r8]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d9cd      	bls.n	800818c <prvIdleTask+0x14>
				taskYIELD();
 80081f0:	f8ca 9d04 	str.w	r9, [sl, #3332]	; 0xd04
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	e7c6      	b.n	800818c <prvIdleTask+0x14>
				vPortFree( pxTCB );
 80081fe:	4620      	mov	r0, r4
 8008200:	f001 f99e 	bl	8009540 <vPortFree>
 8008204:	e7c2      	b.n	800818c <prvIdleTask+0x14>
 8008206:	bf00      	nop
 8008208:	240043c8 	.word	0x240043c8
 800820c:	24004438 	.word	0x24004438
 8008210:	240043c4 	.word	0x240043c4
 8008214:	24003f64 	.word	0x24003f64

08008218 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008218:	4b4a      	ldr	r3, [pc, #296]	; (8008344 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
 800821a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800821e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
 8008220:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008222:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8008224:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008226:	2e00      	cmp	r6, #0
 8008228:	d040      	beq.n	80082ac <xTaskIncrementTick.part.0+0x94>
 800822a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008358 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800822e:	f8db 3000 	ldr.w	r3, [fp]
 8008232:	429e      	cmp	r6, r3
 8008234:	d347      	bcc.n	80082c6 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008236:	4f44      	ldr	r7, [pc, #272]	; (8008348 <xTaskIncrementTick.part.0+0x130>)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681d      	ldr	r5, [r3, #0]
 800823c:	2d00      	cmp	r5, #0
 800823e:	d077      	beq.n	8008330 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
 8008240:	2500      	movs	r5, #0
 8008242:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800835c <xTaskIncrementTick.part.0+0x144>
 8008246:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008360 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
 800824a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8008364 <xTaskIncrementTick.part.0+0x14c>
 800824e:	e022      	b.n	8008296 <xTaskIncrementTick.part.0+0x7e>
 8008250:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008252:	f7ff fa0b 	bl	800766c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008258:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800825c:	9901      	ldr	r1, [sp, #4]
 800825e:	b113      	cbz	r3, 8008266 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008260:	f7ff fa04 	bl	800766c <uxListRemove>
 8008264:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008268:	f8d8 2000 	ldr.w	r2, [r8]
 800826c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8008270:	4293      	cmp	r3, r2
 8008272:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8008276:	d901      	bls.n	800827c <xTaskIncrementTick.part.0+0x64>
 8008278:	f8c8 3000 	str.w	r3, [r8]
 800827c:	f7ff f9ce 	bl	800761c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008280:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008284:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008286:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008288:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800828a:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 800828c:	4291      	cmp	r1, r2
 800828e:	bf28      	it	cs
 8008290:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008292:	2b00      	cmp	r3, #0
 8008294:	d050      	beq.n	8008338 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800829c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800829e:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 80082a0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082a2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80082a4:	d2d4      	bcs.n	8008250 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 80082a6:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082aa:	e011      	b.n	80082d0 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 80082ac:	4b26      	ldr	r3, [pc, #152]	; (8008348 <xTaskIncrementTick.part.0+0x130>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	b30a      	cbz	r2, 80082f8 <xTaskIncrementTick.part.0+0xe0>
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	e7fe      	b.n	80082c4 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 80082c6:	2500      	movs	r5, #0
 80082c8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800835c <xTaskIncrementTick.part.0+0x144>
 80082cc:	f8df a090 	ldr.w	sl, [pc, #144]	; 8008360 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082d0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 80082d4:	491d      	ldr	r1, [pc, #116]	; (800834c <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 80082e2:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80082e4:	2a02      	cmp	r2, #2
 80082e6:	bf28      	it	cs
 80082e8:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 80082ea:	2b00      	cmp	r3, #0
}
 80082ec:	bf0c      	ite	eq
 80082ee:	4628      	moveq	r0, r5
 80082f0:	2001      	movne	r0, #1
 80082f2:	b003      	add	sp, #12
 80082f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80082f8:	4a15      	ldr	r2, [pc, #84]	; (8008350 <xTaskIncrementTick.part.0+0x138>)
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	6811      	ldr	r1, [r2, #0]
 80082fe:	6019      	str	r1, [r3, #0]
 8008300:	4914      	ldr	r1, [pc, #80]	; (8008354 <xTaskIncrementTick.part.0+0x13c>)
 8008302:	6010      	str	r0, [r2, #0]
 8008304:	680a      	ldr	r2, [r1, #0]
 8008306:	3201      	adds	r2, #1
 8008308:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	b932      	cbnz	r2, 800831e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008310:	f8df b044 	ldr.w	fp, [pc, #68]	; 8008358 <xTaskIncrementTick.part.0+0x140>
 8008314:	f04f 33ff 	mov.w	r3, #4294967295
 8008318:	f8cb 3000 	str.w	r3, [fp]
 800831c:	e787      	b.n	800822e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800831e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008320:	f8df b034 	ldr.w	fp, [pc, #52]	; 8008358 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008324:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f8cb 3000 	str.w	r3, [fp]
	}
}
 800832e:	e77e      	b.n	800822e <xTaskIncrementTick.part.0+0x16>
 8008330:	f8df 9028 	ldr.w	r9, [pc, #40]	; 800835c <xTaskIncrementTick.part.0+0x144>
 8008334:	f8df a028 	ldr.w	sl, [pc, #40]	; 8008360 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008338:	f04f 33ff 	mov.w	r3, #4294967295
 800833c:	f8cb 3000 	str.w	r3, [fp]
					break;
 8008340:	e7c6      	b.n	80082d0 <xTaskIncrementTick.part.0+0xb8>
 8008342:	bf00      	nop
 8008344:	2400444c 	.word	0x2400444c
 8008348:	24003f5c 	.word	0x24003f5c
 800834c:	24004450 	.word	0x24004450
 8008350:	24003f60 	.word	0x24003f60
 8008354:	24004404 	.word	0x24004404
 8008358:	24004400 	.word	0x24004400
 800835c:	24003f64 	.word	0x24003f64
 8008360:	24003f58 	.word	0x24003f58
 8008364:	240043d4 	.word	0x240043d4

08008368 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 800836c:	4d41      	ldr	r5, [pc, #260]	; (8008474 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 800836e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8008370:	f000 fef8 	bl	8009164 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	3b01      	subs	r3, #1
 8008378:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800837a:	682b      	ldr	r3, [r5, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d161      	bne.n	8008444 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008380:	4b3d      	ldr	r3, [pc, #244]	; (8008478 <xTaskResumeAll.part.0+0x110>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d05d      	beq.n	8008444 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008388:	4e3c      	ldr	r6, [pc, #240]	; (800847c <xTaskResumeAll.part.0+0x114>)
 800838a:	6833      	ldr	r3, [r6, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d06e      	beq.n	800846e <xTaskResumeAll.part.0+0x106>
 8008390:	4f3b      	ldr	r7, [pc, #236]	; (8008480 <xTaskResumeAll.part.0+0x118>)
 8008392:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8008490 <xTaskResumeAll.part.0+0x128>
 8008396:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8008494 <xTaskResumeAll.part.0+0x12c>
 800839a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8008498 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800839e:	68f3      	ldr	r3, [r6, #12]
 80083a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083a2:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083a6:	f104 0018 	add.w	r0, r4, #24
 80083aa:	f7ff f95f 	bl	800766c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ae:	4658      	mov	r0, fp
 80083b0:	f7ff f95c 	bl	800766c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	4659      	mov	r1, fp
 80083ba:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80083be:	4293      	cmp	r3, r2
 80083c0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80083c4:	d900      	bls.n	80083c8 <xTaskResumeAll.part.0+0x60>
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	f7ff f928 	bl	800761c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083cc:	f8d8 3000 	ldr.w	r3, [r8]
 80083d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d33d      	bcc.n	8008454 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 80083d8:	2301      	movs	r3, #1
 80083da:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083de:	6833      	ldr	r3, [r6, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1dc      	bne.n	800839e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <xTaskResumeAll.part.0+0x11c>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	d03a      	beq.n	8008464 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ee:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083f0:	4b25      	ldr	r3, [pc, #148]	; (8008488 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083f4:	68d2      	ldr	r2, [r2, #12]
 80083f6:	6852      	ldr	r2, [r2, #4]
 80083f8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80083fa:	4e24      	ldr	r6, [pc, #144]	; (800848c <xTaskResumeAll.part.0+0x124>)
 80083fc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80083fe:	b194      	cbz	r4, 8008426 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8008400:	2701      	movs	r7, #1
 8008402:	e006      	b.n	8008412 <xTaskResumeAll.part.0+0xaa>
 8008404:	f7ff ff08 	bl	8008218 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8008408:	b108      	cbz	r0, 800840e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 800840a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800840e:	3c01      	subs	r4, #1
 8008410:	d008      	beq.n	8008424 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0f5      	beq.n	8008404 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8008418:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800841a:	3c01      	subs	r4, #1
		++xPendedTicks;
 800841c:	f103 0301 	add.w	r3, r3, #1
 8008420:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008422:	d1f6      	bne.n	8008412 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8008424:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8008426:	f8da 3000 	ldr.w	r3, [sl]
 800842a:	b15b      	cbz	r3, 8008444 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 800842c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008434:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008440:	2001      	movs	r0, #1
 8008442:	e000      	b.n	8008446 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8008444:	2000      	movs	r0, #0
 8008446:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8008448:	f000 feae 	bl	80091a8 <vPortExitCritical>
}
 800844c:	9801      	ldr	r0, [sp, #4]
 800844e:	b003      	add	sp, #12
 8008450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008454:	6833      	ldr	r3, [r6, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1a1      	bne.n	800839e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800845a:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <xTaskResumeAll.part.0+0x11c>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	6812      	ldr	r2, [r2, #0]
 8008460:	2a00      	cmp	r2, #0
 8008462:	d1c4      	bne.n	80083ee <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008464:	4b08      	ldr	r3, [pc, #32]	; (8008488 <xTaskResumeAll.part.0+0x120>)
 8008466:	f04f 32ff 	mov.w	r2, #4294967295
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	e7c5      	b.n	80083fa <xTaskResumeAll.part.0+0x92>
 800846e:	f8df a028 	ldr.w	sl, [pc, #40]	; 8008498 <xTaskResumeAll.part.0+0x130>
 8008472:	e7c2      	b.n	80083fa <xTaskResumeAll.part.0+0x92>
 8008474:	240043cc 	.word	0x240043cc
 8008478:	240043c4 	.word	0x240043c4
 800847c:	2400440c 	.word	0x2400440c
 8008480:	240043d4 	.word	0x240043d4
 8008484:	24003f5c 	.word	0x24003f5c
 8008488:	24004400 	.word	0x24004400
 800848c:	24004408 	.word	0x24004408
 8008490:	24003f64 	.word	0x24003f64
 8008494:	24003f58 	.word	0x24003f58
 8008498:	24004450 	.word	0x24004450

0800849c <xTaskCreateStatic>:
	{
 800849c:	b530      	push	{r4, r5, lr}
 800849e:	b087      	sub	sp, #28
 80084a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80084a2:	b1c4      	cbz	r4, 80084d6 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80084a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084a6:	b16d      	cbz	r5, 80084c4 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80084a8:	25bc      	movs	r5, #188	; 0xbc
 80084aa:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084ac:	9d05      	ldr	r5, [sp, #20]
 80084ae:	2dbc      	cmp	r5, #188	; 0xbc
 80084b0:	d01a      	beq.n	80084e8 <xTaskCreateStatic+0x4c>
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	e7fe      	b.n	80084c2 <xTaskCreateStatic+0x26>
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	e7fe      	b.n	80084d4 <xTaskCreateStatic+0x38>
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	e7fe      	b.n	80084e6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084ea:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084ec:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084ee:	9502      	str	r5, [sp, #8]
 80084f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084f2:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084f6:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084fa:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084fc:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084fe:	9401      	str	r4, [sp, #4]
 8008500:	f7ff fd8e 	bl	8008020 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008504:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008506:	f7ff fd03 	bl	8007f10 <prvAddNewTaskToReadyList>
	}
 800850a:	9804      	ldr	r0, [sp, #16]
 800850c:	b007      	add	sp, #28
 800850e:	bd30      	pop	{r4, r5, pc}

08008510 <xTaskCreate>:
	{
 8008510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008514:	4607      	mov	r7, r0
 8008516:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008518:	0090      	lsls	r0, r2, #2
	{
 800851a:	4615      	mov	r5, r2
 800851c:	4688      	mov	r8, r1
 800851e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008520:	f000 ff52 	bl	80093c8 <pvPortMalloc>
			if( pxStack != NULL )
 8008524:	b1d8      	cbz	r0, 800855e <xTaskCreate+0x4e>
 8008526:	4604      	mov	r4, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008528:	20bc      	movs	r0, #188	; 0xbc
 800852a:	f000 ff4d 	bl	80093c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800852e:	4606      	mov	r6, r0
 8008530:	b1d0      	cbz	r0, 8008568 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8008532:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008534:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008536:	464b      	mov	r3, r9
 8008538:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800853a:	f886 40b9 	strb.w	r4, [r6, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800853e:	4641      	mov	r1, r8
 8008540:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008542:	4638      	mov	r0, r7
 8008544:	9602      	str	r6, [sp, #8]
 8008546:	9401      	str	r4, [sp, #4]
 8008548:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800854a:	9400      	str	r4, [sp, #0]
 800854c:	f7ff fd68 	bl	8008020 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008550:	4630      	mov	r0, r6
 8008552:	f7ff fcdd 	bl	8007f10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008556:	2001      	movs	r0, #1
	}
 8008558:	b005      	add	sp, #20
 800855a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008562:	b005      	add	sp, #20
 8008564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008568:	4620      	mov	r0, r4
 800856a:	f000 ffe9 	bl	8009540 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800856e:	f04f 30ff 	mov.w	r0, #4294967295
 8008572:	e7f1      	b.n	8008558 <xTaskCreate+0x48>

08008574 <vTaskDelete>:
	{
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008578:	4d38      	ldr	r5, [pc, #224]	; (800865c <vTaskDelete+0xe8>)
		taskENTER_CRITICAL();
 800857a:	f000 fdf3 	bl	8009164 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800857e:	2c00      	cmp	r4, #0
 8008580:	d048      	beq.n	8008614 <vTaskDelete+0xa0>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008582:	1d26      	adds	r6, r4, #4
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff f871 	bl	800766c <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800858a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800858c:	b11b      	cbz	r3, 8008596 <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800858e:	f104 0018 	add.w	r0, r4, #24
 8008592:	f7ff f86b 	bl	800766c <uxListRemove>
			uxTaskNumber++;
 8008596:	4a32      	ldr	r2, [pc, #200]	; (8008660 <vTaskDelete+0xec>)
 8008598:	6813      	ldr	r3, [r2, #0]
 800859a:	3301      	adds	r3, #1
 800859c:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d02e      	beq.n	8008602 <vTaskDelete+0x8e>
				--uxCurrentNumberOfTasks;
 80085a4:	4a2f      	ldr	r2, [pc, #188]	; (8008664 <vTaskDelete+0xf0>)
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80085a6:	f104 0054 	add.w	r0, r4, #84	; 0x54
				--uxCurrentNumberOfTasks;
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	6013      	str	r3, [r2, #0]
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80085b0:	f001 fb42 	bl	8009c38 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085b4:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80085b8:	b163      	cbz	r3, 80085d4 <vTaskDelete+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d03f      	beq.n	800863e <vTaskDelete+0xca>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d00e      	beq.n	80085e0 <vTaskDelete+0x6c>
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	e7fe      	b.n	80085d2 <vTaskDelete+0x5e>
				vPortFree( pxTCB->pxStack );
 80085d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80085d6:	f000 ffb3 	bl	8009540 <vPortFree>
				vPortFree( pxTCB );
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 ffb0 	bl	8009540 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085e0:	4b21      	ldr	r3, [pc, #132]	; (8008668 <vTaskDelete+0xf4>)
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	6812      	ldr	r2, [r2, #0]
 80085e6:	b9ba      	cbnz	r2, 8008618 <vTaskDelete+0xa4>
		xNextTaskUnblockTime = portMAX_DELAY;
 80085e8:	4b20      	ldr	r3, [pc, #128]	; (800866c <vTaskDelete+0xf8>)
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295
 80085ee:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 80085f0:	f000 fdda 	bl	80091a8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80085f4:	4b1e      	ldr	r3, [pc, #120]	; (8008670 <vTaskDelete+0xfc>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	b113      	cbz	r3, 8008600 <vTaskDelete+0x8c>
			if( pxTCB == pxCurrentTCB )
 80085fa:	682b      	ldr	r3, [r5, #0]
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	d012      	beq.n	8008626 <vTaskDelete+0xb2>
	}
 8008600:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008602:	4631      	mov	r1, r6
 8008604:	481b      	ldr	r0, [pc, #108]	; (8008674 <vTaskDelete+0x100>)
 8008606:	f7ff f809 	bl	800761c <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800860a:	4a1b      	ldr	r2, [pc, #108]	; (8008678 <vTaskDelete+0x104>)
 800860c:	6813      	ldr	r3, [r2, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	e7ed      	b.n	80085f0 <vTaskDelete+0x7c>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008614:	682c      	ldr	r4, [r5, #0]
 8008616:	e7b4      	b.n	8008582 <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008618:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800861a:	4b14      	ldr	r3, [pc, #80]	; (800866c <vTaskDelete+0xf8>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800861e:	68d2      	ldr	r2, [r2, #12]
 8008620:	6852      	ldr	r2, [r2, #4]
 8008622:	601a      	str	r2, [r3, #0]
}
 8008624:	e7e4      	b.n	80085f0 <vTaskDelete+0x7c>
				configASSERT( uxSchedulerSuspended == 0 );
 8008626:	4b15      	ldr	r3, [pc, #84]	; (800867c <vTaskDelete+0x108>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	b163      	cbz	r3, 8008646 <vTaskDelete+0xd2>
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	e7fe      	b.n	800863c <vTaskDelete+0xc8>
				vPortFree( pxTCB );
 800863e:	4620      	mov	r0, r4
 8008640:	f000 ff7e 	bl	8009540 <vPortFree>
 8008644:	e7cc      	b.n	80085e0 <vTaskDelete+0x6c>
				portYIELD_WITHIN_API();
 8008646:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800864a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	f3bf 8f6f 	isb	sy
	}
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	24003f58 	.word	0x24003f58
 8008660:	240043d0 	.word	0x240043d0
 8008664:	240043c4 	.word	0x240043c4
 8008668:	24003f5c 	.word	0x24003f5c
 800866c:	24004400 	.word	0x24004400
 8008670:	24004420 	.word	0x24004420
 8008674:	24004438 	.word	0x24004438
 8008678:	240043c8 	.word	0x240043c8
 800867c:	240043cc 	.word	0x240043cc

08008680 <vTaskDelay>:
	{
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008682:	b950      	cbnz	r0, 800869a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008684:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	f3bf 8f6f 	isb	sy
	}
 8008698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800869a:	4d1e      	ldr	r5, [pc, #120]	; (8008714 <vTaskDelay+0x94>)
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b143      	cbz	r3, 80086b2 <vTaskDelay+0x32>
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	e7fe      	b.n	80086b0 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	4604      	mov	r4, r0
 80086b6:	3301      	adds	r3, #1
 80086b8:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086ba:	4b17      	ldr	r3, [pc, #92]	; (8008718 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086bc:	4e17      	ldr	r6, [pc, #92]	; (800871c <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
 80086be:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086c0:	6830      	ldr	r0, [r6, #0]
 80086c2:	3004      	adds	r0, #4
 80086c4:	f7fe ffd2 	bl	800766c <uxListRemove>
 80086c8:	19e4      	adds	r4, r4, r7
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086ca:	6833      	ldr	r3, [r6, #0]
 80086cc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80086ce:	d315      	bcc.n	80086fc <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d0:	4b13      	ldr	r3, [pc, #76]	; (8008720 <vTaskDelay+0xa0>)
 80086d2:	6818      	ldr	r0, [r3, #0]
 80086d4:	6831      	ldr	r1, [r6, #0]
 80086d6:	3104      	adds	r1, #4
 80086d8:	f7fe ffb0 	bl	800763c <vListInsert>
	configASSERT( uxSchedulerSuspended );
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b943      	cbnz	r3, 80086f2 <vTaskDelay+0x72>
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	e7fe      	b.n	80086f0 <vTaskDelay+0x70>
 80086f2:	f7ff fe39 	bl	8008368 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d0c4      	beq.n	8008684 <vTaskDelay+0x4>
	}
 80086fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086fc:	4b09      	ldr	r3, [pc, #36]	; (8008724 <vTaskDelay+0xa4>)
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	6831      	ldr	r1, [r6, #0]
 8008702:	3104      	adds	r1, #4
 8008704:	f7fe ff9a 	bl	800763c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8008708:	4b07      	ldr	r3, [pc, #28]	; (8008728 <vTaskDelay+0xa8>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	4294      	cmp	r4, r2
 800870e:	d2e5      	bcs.n	80086dc <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8008710:	601c      	str	r4, [r3, #0]
 8008712:	e7e3      	b.n	80086dc <vTaskDelay+0x5c>
 8008714:	240043cc 	.word	0x240043cc
 8008718:	2400444c 	.word	0x2400444c
 800871c:	24003f58 	.word	0x24003f58
 8008720:	24003f60 	.word	0x24003f60
 8008724:	24003f5c 	.word	0x24003f5c
 8008728:	24004400 	.word	0x24004400

0800872c <eTaskGetState>:
	{
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 800872e:	b1e0      	cbz	r0, 800876a <eTaskGetState+0x3e>
		if( pxTCB == pxCurrentTCB )
 8008730:	4b19      	ldr	r3, [pc, #100]	; (8008798 <eTaskGetState+0x6c>)
 8008732:	4604      	mov	r4, r0
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4283      	cmp	r3, r0
 8008738:	d015      	beq.n	8008766 <eTaskGetState+0x3a>
			taskENTER_CRITICAL();
 800873a:	f000 fd13 	bl	8009164 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 800873e:	4a17      	ldr	r2, [pc, #92]	; (800879c <eTaskGetState+0x70>)
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008740:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 8008742:	6816      	ldr	r6, [r2, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008744:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <eTaskGetState+0x74>)
 8008746:	681f      	ldr	r7, [r3, #0]
			taskEXIT_CRITICAL();
 8008748:	f000 fd2e 	bl	80091a8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800874c:	42b5      	cmp	r5, r6
 800874e:	d017      	beq.n	8008780 <eTaskGetState+0x54>
 8008750:	42bd      	cmp	r5, r7
 8008752:	d015      	beq.n	8008780 <eTaskGetState+0x54>
				else if( pxStateList == &xSuspendedTaskList )
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <eTaskGetState+0x78>)
 8008756:	429d      	cmp	r5, r3
 8008758:	d010      	beq.n	800877c <eTaskGetState+0x50>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800875a:	4b13      	ldr	r3, [pc, #76]	; (80087a8 <eTaskGetState+0x7c>)
 800875c:	429d      	cmp	r5, r3
 800875e:	d011      	beq.n	8008784 <eTaskGetState+0x58>
 8008760:	b185      	cbz	r5, 8008784 <eTaskGetState+0x58>
				eReturn = eReady;
 8008762:	2001      	movs	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 8008766:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	e7fe      	b.n	800877a <eTaskGetState+0x4e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800877c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800877e:	b11b      	cbz	r3, 8008788 <eTaskGetState+0x5c>
				eReturn = eBlocked;
 8008780:	2002      	movs	r0, #2
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					eReturn = eDeleted;
 8008784:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008788:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
								eReturn = eSuspended;
 800878c:	2b01      	cmp	r3, #1
 800878e:	bf0c      	ite	eq
 8008790:	2002      	moveq	r0, #2
 8008792:	2003      	movne	r0, #3
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008796:	bf00      	nop
 8008798:	24003f58 	.word	0x24003f58
 800879c:	24003f5c 	.word	0x24003f5c
 80087a0:	24003f60 	.word	0x24003f60
 80087a4:	24004424 	.word	0x24004424
 80087a8:	24004438 	.word	0x24004438

080087ac <vTaskStartScheduler>:
{
 80087ac:	b530      	push	{r4, r5, lr}
 80087ae:	b08b      	sub	sp, #44	; 0x2c
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087b0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087b2:	aa07      	add	r2, sp, #28
 80087b4:	a906      	add	r1, sp, #24
 80087b6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087b8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087bc:	f7fe ff00 	bl	80075c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087c0:	9b06      	ldr	r3, [sp, #24]
		configASSERT( puxStackBuffer != NULL );
 80087c2:	b1cb      	cbz	r3, 80087f8 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087c4:	9d05      	ldr	r5, [sp, #20]
		configASSERT( pxTaskBuffer != NULL );
 80087c6:	b175      	cbz	r5, 80087e6 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80087c8:	21bc      	movs	r1, #188	; 0xbc
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087ca:	9a07      	ldr	r2, [sp, #28]
			volatile size_t xSize = sizeof( StaticTask_t );
 80087cc:	9109      	str	r1, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( TCB_t ) );
 80087ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087d0:	29bc      	cmp	r1, #188	; 0xbc
 80087d2:	d01a      	beq.n	800880a <vTaskStartScheduler+0x5e>
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	e7fe      	b.n	80087e4 <vTaskStartScheduler+0x38>
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	e7fe      	b.n	80087f6 <vTaskStartScheduler+0x4a>
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	e7fe      	b.n	8008808 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800880a:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800880c:	632b      	str	r3, [r5, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800880e:	481e      	ldr	r0, [pc, #120]	; (8008888 <vTaskStartScheduler+0xdc>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008810:	f885 10b9 	strb.w	r1, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008814:	a908      	add	r1, sp, #32
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008816:	9b09      	ldr	r3, [sp, #36]	; 0x24
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008818:	4623      	mov	r3, r4
 800881a:	9400      	str	r4, [sp, #0]
 800881c:	e9cd 1501 	strd	r1, r5, [sp, #4]
 8008820:	491a      	ldr	r1, [pc, #104]	; (800888c <vTaskStartScheduler+0xe0>)
 8008822:	f7ff fbfd 	bl	8008020 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008826:	4628      	mov	r0, r5
 8008828:	f7ff fb72 	bl	8007f10 <prvAddNewTaskToReadyList>
		return xReturn;
 800882c:	9b08      	ldr	r3, [sp, #32]
		if( xIdleTaskHandle != NULL )
 800882e:	b1eb      	cbz	r3, 800886c <vTaskStartScheduler+0xc0>
			xReturn = xTimerCreateTimerTask();
 8008830:	f000 fbd0 	bl	8008fd4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008834:	2801      	cmp	r0, #1
 8008836:	d11b      	bne.n	8008870 <vTaskStartScheduler+0xc4>
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008848:	4b11      	ldr	r3, [pc, #68]	; (8008890 <vTaskStartScheduler+0xe4>)
 800884a:	4a12      	ldr	r2, [pc, #72]	; (8008894 <vTaskStartScheduler+0xe8>)
 800884c:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800884e:	4912      	ldr	r1, [pc, #72]	; (8008898 <vTaskStartScheduler+0xec>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008850:	3354      	adds	r3, #84	; 0x54
 8008852:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008854:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8008858:	4a10      	ldr	r2, [pc, #64]	; (800889c <vTaskStartScheduler+0xf0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800885a:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800885c:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <vTaskStartScheduler+0xf4>)
		xSchedulerRunning = pdTRUE;
 800885e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008860:	601c      	str	r4, [r3, #0]
}
 8008862:	b00b      	add	sp, #44	; 0x2c
 8008864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008868:	f000 bd0e 	b.w	8009288 <xPortStartScheduler>
}
 800886c:	b00b      	add	sp, #44	; 0x2c
 800886e:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008870:	3001      	adds	r0, #1
 8008872:	d1fb      	bne.n	800886c <vTaskStartScheduler+0xc0>
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	e7fe      	b.n	8008884 <vTaskStartScheduler+0xd8>
 8008886:	bf00      	nop
 8008888:	08008179 	.word	0x08008179
 800888c:	0800b8f8 	.word	0x0800b8f8
 8008890:	24003f58 	.word	0x24003f58
 8008894:	240030dc 	.word	0x240030dc
 8008898:	24004400 	.word	0x24004400
 800889c:	24004420 	.word	0x24004420
 80088a0:	2400444c 	.word	0x2400444c

080088a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80088a4:	4a02      	ldr	r2, [pc, #8]	; (80088b0 <vTaskSuspendAll+0xc>)
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	6013      	str	r3, [r2, #0]
}
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	240043cc 	.word	0x240043cc

080088b4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80088b4:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <xTaskResumeAll+0x1c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	b943      	cbnz	r3, 80088cc <xTaskResumeAll+0x18>
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	e7fe      	b.n	80088ca <xTaskResumeAll+0x16>
 80088cc:	f7ff bd4c 	b.w	8008368 <xTaskResumeAll.part.0>
 80088d0:	240043cc 	.word	0x240043cc

080088d4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80088d4:	4b01      	ldr	r3, [pc, #4]	; (80088dc <xTaskGetTickCount+0x8>)
 80088d6:	6818      	ldr	r0, [r3, #0]
}
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	2400444c 	.word	0x2400444c

080088e0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088e0:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <xTaskIncrementTick+0x18>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	b90b      	cbnz	r3, 80088ea <xTaskIncrementTick+0xa>
 80088e6:	f7ff bc97 	b.w	8008218 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 80088ea:	4a04      	ldr	r2, [pc, #16]	; (80088fc <xTaskIncrementTick+0x1c>)
}
 80088ec:	2000      	movs	r0, #0
		++xPendedTicks;
 80088ee:	6813      	ldr	r3, [r2, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	6013      	str	r3, [r2, #0]
}
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	240043cc 	.word	0x240043cc
 80088fc:	24004408 	.word	0x24004408

08008900 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008900:	4b1e      	ldr	r3, [pc, #120]	; (800897c <vTaskSwitchContext+0x7c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	b11b      	cbz	r3, 800890e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008906:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <vTaskSwitchContext+0x80>)
 8008908:	2201      	movs	r2, #1
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800890e:	4a1c      	ldr	r2, [pc, #112]	; (8008980 <vTaskSwitchContext+0x80>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008910:	491c      	ldr	r1, [pc, #112]	; (8008984 <vTaskSwitchContext+0x84>)
{
 8008912:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008914:	4c1c      	ldr	r4, [pc, #112]	; (8008988 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 8008916:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800891e:	0098      	lsls	r0, r3, #2
 8008920:	0092      	lsls	r2, r2, #2
 8008922:	588a      	ldr	r2, [r1, r2]
 8008924:	b942      	cbnz	r2, 8008938 <vTaskSwitchContext+0x38>
 8008926:	b1e3      	cbz	r3, 8008962 <vTaskSwitchContext+0x62>
 8008928:	3b01      	subs	r3, #1
 800892a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800892e:	0098      	lsls	r0, r3, #2
 8008930:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008934:	2a00      	cmp	r2, #0
 8008936:	d0f6      	beq.n	8008926 <vTaskSwitchContext+0x26>
 8008938:	18c2      	adds	r2, r0, r3
 800893a:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800893e:	6841      	ldr	r1, [r0, #4]
 8008940:	4602      	mov	r2, r0
 8008942:	6849      	ldr	r1, [r1, #4]
 8008944:	3208      	adds	r2, #8
 8008946:	4291      	cmp	r1, r2
 8008948:	6041      	str	r1, [r0, #4]
 800894a:	d013      	beq.n	8008974 <vTaskSwitchContext+0x74>
 800894c:	4a0f      	ldr	r2, [pc, #60]	; (800898c <vTaskSwitchContext+0x8c>)
 800894e:	68c8      	ldr	r0, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008950:	490f      	ldr	r1, [pc, #60]	; (8008990 <vTaskSwitchContext+0x90>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008952:	6010      	str	r0, [r2, #0]
 8008954:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008956:	6813      	ldr	r3, [r2, #0]
}
 8008958:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800895c:	3354      	adds	r3, #84	; 0x54
 800895e:	600b      	str	r3, [r1, #0]
}
 8008960:	4770      	bx	lr
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	e7fe      	b.n	8008972 <vTaskSwitchContext+0x72>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008974:	6849      	ldr	r1, [r1, #4]
 8008976:	6041      	str	r1, [r0, #4]
 8008978:	e7e8      	b.n	800894c <vTaskSwitchContext+0x4c>
 800897a:	bf00      	nop
 800897c:	240043cc 	.word	0x240043cc
 8008980:	24004450 	.word	0x24004450
 8008984:	24003f64 	.word	0x24003f64
 8008988:	240043d4 	.word	0x240043d4
 800898c:	24003f58 	.word	0x24003f58
 8008990:	240030dc 	.word	0x240030dc

08008994 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008994:	b1f0      	cbz	r0, 80089d4 <vTaskPlaceOnEventList+0x40>
{
 8008996:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008998:	4d1a      	ldr	r5, [pc, #104]	; (8008a04 <vTaskPlaceOnEventList+0x70>)
 800899a:	460c      	mov	r4, r1
 800899c:	6829      	ldr	r1, [r5, #0]
 800899e:	3118      	adds	r1, #24
 80089a0:	f7fe fe4c 	bl	800763c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80089a4:	4b18      	ldr	r3, [pc, #96]	; (8008a08 <vTaskPlaceOnEventList+0x74>)
 80089a6:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089a8:	6828      	ldr	r0, [r5, #0]
 80089aa:	3004      	adds	r0, #4
 80089ac:	f7fe fe5e 	bl	800766c <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089b0:	1c63      	adds	r3, r4, #1
 80089b2:	d020      	beq.n	80089f6 <vTaskPlaceOnEventList+0x62>
 80089b4:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089b6:	682b      	ldr	r3, [r5, #0]
 80089b8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089ba:	d214      	bcs.n	80089e6 <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089bc:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <vTaskPlaceOnEventList+0x78>)
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	6829      	ldr	r1, [r5, #0]
 80089c2:	3104      	adds	r1, #4
 80089c4:	f7fe fe3a 	bl	800763c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089c8:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <vTaskPlaceOnEventList+0x7c>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	4294      	cmp	r4, r2
 80089ce:	d200      	bcs.n	80089d2 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
 80089d0:	601c      	str	r4, [r3, #0]
}
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	e7fe      	b.n	80089e4 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <vTaskPlaceOnEventList+0x80>)
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	6829      	ldr	r1, [r5, #0]
}
 80089ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089f0:	3104      	adds	r1, #4
 80089f2:	f7fe be23 	b.w	800763c <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089f6:	6829      	ldr	r1, [r5, #0]
 80089f8:	4807      	ldr	r0, [pc, #28]	; (8008a18 <vTaskPlaceOnEventList+0x84>)
 80089fa:	3104      	adds	r1, #4
}
 80089fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a00:	f7fe be0c 	b.w	800761c <vListInsertEnd>
 8008a04:	24003f58 	.word	0x24003f58
 8008a08:	2400444c 	.word	0x2400444c
 8008a0c:	24003f5c 	.word	0x24003f5c
 8008a10:	24004400 	.word	0x24004400
 8008a14:	24003f60 	.word	0x24003f60
 8008a18:	24004424 	.word	0x24004424

08008a1c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 8008a1c:	b358      	cbz	r0, 8008a76 <vTaskPlaceOnEventListRestricted+0x5a>
	{
 8008a1e:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a20:	4e1d      	ldr	r6, [pc, #116]	; (8008a98 <vTaskPlaceOnEventListRestricted+0x7c>)
 8008a22:	460c      	mov	r4, r1
 8008a24:	4615      	mov	r5, r2
 8008a26:	6831      	ldr	r1, [r6, #0]
 8008a28:	3118      	adds	r1, #24
 8008a2a:	f7fe fdf7 	bl	800761c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8008a2e:	b165      	cbz	r5, 8008a4a <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
 8008a30:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <vTaskPlaceOnEventListRestricted+0x80>)
 8008a32:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a34:	6830      	ldr	r0, [r6, #0]
 8008a36:	3004      	adds	r0, #4
 8008a38:	f7fe fe18 	bl	800766c <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a3c:	6831      	ldr	r1, [r6, #0]
 8008a3e:	4818      	ldr	r0, [pc, #96]	; (8008aa0 <vTaskPlaceOnEventListRestricted+0x84>)
 8008a40:	3104      	adds	r1, #4
	}
 8008a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a46:	f7fe bde9 	b.w	800761c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8008a4a:	4b14      	ldr	r3, [pc, #80]	; (8008a9c <vTaskPlaceOnEventListRestricted+0x80>)
 8008a4c:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a4e:	6830      	ldr	r0, [r6, #0]
 8008a50:	3004      	adds	r0, #4
 8008a52:	f7fe fe0b 	bl	800766c <uxListRemove>
 8008a56:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a58:	6833      	ldr	r3, [r6, #0]
 8008a5a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a5c:	d214      	bcs.n	8008a88 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a5e:	4b11      	ldr	r3, [pc, #68]	; (8008aa4 <vTaskPlaceOnEventListRestricted+0x88>)
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	6831      	ldr	r1, [r6, #0]
 8008a64:	3104      	adds	r1, #4
 8008a66:	f7fe fde9 	bl	800763c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	4294      	cmp	r4, r2
 8008a70:	d200      	bcs.n	8008a74 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8008a72:	601c      	str	r4, [r3, #0]
	}
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	e7fe      	b.n	8008a86 <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a88:	4b08      	ldr	r3, [pc, #32]	; (8008aac <vTaskPlaceOnEventListRestricted+0x90>)
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	6831      	ldr	r1, [r6, #0]
	}
 8008a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a92:	3104      	adds	r1, #4
 8008a94:	f7fe bdd2 	b.w	800763c <vListInsert>
 8008a98:	24003f58 	.word	0x24003f58
 8008a9c:	2400444c 	.word	0x2400444c
 8008aa0:	24004424 	.word	0x24004424
 8008aa4:	24003f5c 	.word	0x24003f5c
 8008aa8:	24004400 	.word	0x24004400
 8008aac:	24003f60 	.word	0x24003f60

08008ab0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab0:	68c3      	ldr	r3, [r0, #12]
{
 8008ab2:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab4:	68dc      	ldr	r4, [r3, #12]
{
 8008ab6:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8008ab8:	b35c      	cbz	r4, 8008b12 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008aba:	f104 0518 	add.w	r5, r4, #24
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f7fe fdd4 	bl	800766c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac4:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <xTaskRemoveFromEventList+0x7c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	b17b      	cbz	r3, 8008aea <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aca:	4629      	mov	r1, r5
 8008acc:	4818      	ldr	r0, [pc, #96]	; (8008b30 <xTaskRemoveFromEventList+0x80>)
 8008ace:	f7fe fda5 	bl	800761c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ad2:	4b18      	ldr	r3, [pc, #96]	; (8008b34 <xTaskRemoveFromEventList+0x84>)
 8008ad4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d922      	bls.n	8008b24 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 8008ae2:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8008ae4:	6013      	str	r3, [r2, #0]
}
 8008ae6:	b003      	add	sp, #12
 8008ae8:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008aea:	1d21      	adds	r1, r4, #4
 8008aec:	4608      	mov	r0, r1
 8008aee:	9101      	str	r1, [sp, #4]
 8008af0:	f7fe fdbc 	bl	800766c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008af4:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <xTaskRemoveFromEventList+0x8c>)
 8008af6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008af8:	6810      	ldr	r0, [r2, #0]
 8008afa:	9901      	ldr	r1, [sp, #4]
 8008afc:	4283      	cmp	r3, r0
 8008afe:	d900      	bls.n	8008b02 <xTaskRemoveFromEventList+0x52>
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008b06:	480e      	ldr	r0, [pc, #56]	; (8008b40 <xTaskRemoveFromEventList+0x90>)
 8008b08:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008b0c:	f7fe fd86 	bl	800761c <vListInsertEnd>
 8008b10:	e7df      	b.n	8008ad2 <xTaskRemoveFromEventList+0x22>
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	e7fe      	b.n	8008b22 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8008b24:	2000      	movs	r0, #0
}
 8008b26:	b003      	add	sp, #12
 8008b28:	bd30      	pop	{r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	240043cc 	.word	0x240043cc
 8008b30:	2400440c 	.word	0x2400440c
 8008b34:	24003f58 	.word	0x24003f58
 8008b38:	24004450 	.word	0x24004450
 8008b3c:	240043d4 	.word	0x240043d4
 8008b40:	24003f64 	.word	0x24003f64

08008b44 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b44:	4a03      	ldr	r2, [pc, #12]	; (8008b54 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b46:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b48:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	24004404 	.word	0x24004404
 8008b58:	2400444c 	.word	0x2400444c

08008b5c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8008b5c:	b328      	cbz	r0, 8008baa <xTaskCheckForTimeOut+0x4e>
{
 8008b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b60:	460d      	mov	r5, r1
 8008b62:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8008b64:	b1c1      	cbz	r1, 8008b98 <xTaskCheckForTimeOut+0x3c>
 8008b66:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008b68:	f000 fafc 	bl	8009164 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8008b6c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8008b6e:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8008b70:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8008b72:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008b74:	d030      	beq.n	8008bd8 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b76:	f8df c070 	ldr.w	ip, [pc, #112]	; 8008be8 <xTaskCheckForTimeOut+0x8c>
 8008b7a:	6826      	ldr	r6, [r4, #0]
 8008b7c:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b80:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b82:	42be      	cmp	r6, r7
 8008b84:	d01a      	beq.n	8008bbc <xTaskCheckForTimeOut+0x60>
 8008b86:	4288      	cmp	r0, r1
 8008b88:	d818      	bhi.n	8008bbc <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8008b8e:	f000 fb0b 	bl	80091a8 <vPortExitCritical>
}
 8008b92:	9801      	ldr	r0, [sp, #4]
 8008b94:	b003      	add	sp, #12
 8008b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	e7fe      	b.n	8008ba8 <xTaskCheckForTimeOut+0x4c>
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	e7fe      	b.n	8008bba <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bbc:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bc0:	4573      	cmp	r3, lr
 8008bc2:	d90b      	bls.n	8008bdc <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8008bc4:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bc6:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bca:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8008bcc:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8008bce:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8008bd0:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bd2:	e9c4 1200 	strd	r1, r2, [r4]
 8008bd6:	e7d9      	b.n	8008b8c <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8008bd8:	2000      	movs	r0, #0
 8008bda:	e7d7      	b.n	8008b8c <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8008bdc:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8008bde:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8008be0:	602b      	str	r3, [r5, #0]
 8008be2:	e7d3      	b.n	8008b8c <xTaskCheckForTimeOut+0x30>
 8008be4:	2400444c 	.word	0x2400444c
 8008be8:	24004404 	.word	0x24004404

08008bec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008bec:	4b01      	ldr	r3, [pc, #4]	; (8008bf4 <vTaskMissedYield+0x8>)
 8008bee:	2201      	movs	r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]
}
 8008bf2:	4770      	bx	lr
 8008bf4:	24004450 	.word	0x24004450

08008bf8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008bf8:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <xTaskGetSchedulerState+0x18>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	b133      	cbz	r3, 8008c0c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bfe:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <xTaskGetSchedulerState+0x1c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bf0c      	ite	eq
 8008c06:	2002      	moveq	r0, #2
 8008c08:	2000      	movne	r0, #0
 8008c0a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c0c:	2001      	movs	r0, #1
	}
 8008c0e:	4770      	bx	lr
 8008c10:	24004420 	.word	0x24004420
 8008c14:	240043cc 	.word	0x240043cc

08008c18 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008c18:	b318      	cbz	r0, 8008c62 <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 8008c1a:	4b1f      	ldr	r3, [pc, #124]	; (8008c98 <xTaskPriorityDisinherit+0x80>)
	{
 8008c1c:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8008c1e:	681c      	ldr	r4, [r3, #0]
	{
 8008c20:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8008c22:	4284      	cmp	r4, r0
 8008c24:	d008      	beq.n	8008c38 <xTaskPriorityDisinherit+0x20>
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	e7fe      	b.n	8008c36 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008c3a:	b14b      	cbz	r3, 8008c50 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8008c3e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c40:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008c42:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c44:	4291      	cmp	r1, r2
 8008c46:	d000      	beq.n	8008c4a <xTaskPriorityDisinherit+0x32>
 8008c48:	b16b      	cbz	r3, 8008c66 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8008c4a:	2000      	movs	r0, #0
	}
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd10      	pop	{r4, pc}
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	e7fe      	b.n	8008c60 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8008c62:	2000      	movs	r0, #0
	}
 8008c64:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c66:	1d21      	adds	r1, r4, #4
 8008c68:	4608      	mov	r0, r1
 8008c6a:	9101      	str	r1, [sp, #4]
 8008c6c:	f7fe fcfe 	bl	800766c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c70:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8008c72:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c74:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8008c78:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c7a:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c7c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4290      	cmp	r0, r2
 8008c82:	d900      	bls.n	8008c86 <xTaskPriorityDisinherit+0x6e>
 8008c84:	6018      	str	r0, [r3, #0]
 8008c86:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <xTaskPriorityDisinherit+0x88>)
 8008c88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008c8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c90:	f7fe fcc4 	bl	800761c <vListInsertEnd>
					xReturn = pdTRUE;
 8008c94:	2001      	movs	r0, #1
		return xReturn;
 8008c96:	e7d9      	b.n	8008c4c <xTaskPriorityDisinherit+0x34>
 8008c98:	24003f58 	.word	0x24003f58
 8008c9c:	240043d4 	.word	0x240043d4
 8008ca0:	24003f64 	.word	0x24003f64

08008ca4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	4e22      	ldr	r6, [pc, #136]	; (8008d34 <prvSwitchTimerLists+0x90>)
 8008caa:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8008cac:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008d3c <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
 8008cb0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cb4:	e00d      	b.n	8008cd2 <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cb6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cba:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbc:	1d25      	adds	r5, r4, #4
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7fe fcd4 	bl	800766c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cc4:	6a23      	ldr	r3, [r4, #32]
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008cce:	075b      	lsls	r3, r3, #29
 8008cd0:	d40a      	bmi.n	8008ce8 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cd2:	6833      	ldr	r3, [r6, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	d1ed      	bne.n	8008cb6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8008cda:	4a17      	ldr	r2, [pc, #92]	; (8008d38 <prvSwitchTimerLists+0x94>)
 8008cdc:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cde:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ce0:	6031      	str	r1, [r6, #0]
}
 8008ce2:	b005      	add	sp, #20
 8008ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ce8:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cea:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cec:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8008cee:	429f      	cmp	r7, r3
 8008cf0:	d205      	bcs.n	8008cfe <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cf2:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cf4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cf8:	f7fe fca0 	bl	800763c <vListInsert>
 8008cfc:	e7e9      	b.n	8008cd2 <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 8008cfe:	f8d9 3000 	ldr.w	r3, [r9]
 8008d02:	b16b      	cbz	r3, 8008d20 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d04:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d06:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d0a:	f7ff ff75 	bl	8008bf8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4669      	mov	r1, sp
 8008d12:	f8d9 0000 	ldr.w	r0, [r9]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f7fe fd6a 	bl	80077f0 <xQueueGenericSend>
				configASSERT( xResult );
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d1d8      	bne.n	8008cd2 <prvSwitchTimerLists+0x2e>
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	e7fe      	b.n	8008d30 <prvSwitchTimerLists+0x8c>
 8008d32:	bf00      	nop
 8008d34:	24004454 	.word	0x24004454
 8008d38:	24004458 	.word	0x24004458
 8008d3c:	24004578 	.word	0x24004578

08008d40 <prvTimerTask>:
{
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	4e9f      	ldr	r6, [pc, #636]	; (8008fc4 <prvTimerTask+0x284>)
 8008d46:	b089      	sub	sp, #36	; 0x24
 8008d48:	4d9f      	ldr	r5, [pc, #636]	; (8008fc8 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
 8008d4a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8008d4e:	4c9f      	ldr	r4, [pc, #636]	; (8008fcc <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d50:	6833      	ldr	r3, [r6, #0]
 8008d52:	681f      	ldr	r7, [r3, #0]
 8008d54:	2f00      	cmp	r7, #0
 8008d56:	f000 80b2 	beq.w	8008ebe <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8008d5e:	f7ff fda1 	bl	80088a4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008d62:	f7ff fdb7 	bl	80088d4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008d66:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008d68:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008d6a:	4290      	cmp	r0, r2
 8008d6c:	f0c0 80af 	bcc.w	8008ece <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d70:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8008d72:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d74:	f200 80d0 	bhi.w	8008f18 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
 8008d78:	f7ff fd9c 	bl	80088b4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7c:	6832      	ldr	r2, [r6, #0]
 8008d7e:	68d2      	ldr	r2, [r2, #12]
 8008d80:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d84:	f10b 0804 	add.w	r8, fp, #4
 8008d88:	4640      	mov	r0, r8
 8008d8a:	f7fe fc6f 	bl	800766c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d8e:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8008d92:	0741      	lsls	r1, r0, #29
 8008d94:	f100 80d0 	bmi.w	8008f38 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d98:	f020 0001 	bic.w	r0, r0, #1
 8008d9c:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008da0:	f8db 3020 	ldr.w	r3, [fp, #32]
 8008da4:	4658      	mov	r0, fp
 8008da6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008da8:	2200      	movs	r2, #0
 8008daa:	4669      	mov	r1, sp
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	f7fe fea1 	bl	8007af4 <xQueueReceive>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d0cc      	beq.n	8008d50 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	db77      	blt.n	8008eac <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008dbc:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	b113      	cbz	r3, 8008dc8 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dc2:	1d38      	adds	r0, r7, #4
 8008dc4:	f7fe fc52 	bl	800766c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008dc8:	f7ff fd84 	bl	80088d4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008dcc:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008dce:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8008dd0:	4298      	cmp	r0, r3
 8008dd2:	f0c0 8083 	bcc.w	8008edc <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
 8008dd6:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
 8008dd8:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8008ddc:	2b09      	cmp	r3, #9
 8008dde:	d8e3      	bhi.n	8008da8 <prvTimerTask+0x68>
 8008de0:	e8df f003 	tbb	[pc, r3]
 8008de4:	54050505 	.word	0x54050505
 8008de8:	05055b3e 	.word	0x05055b3e
 8008dec:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008df2:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008df4:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008df8:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dfa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008dfe:	9b01      	ldr	r3, [sp, #4]
 8008e00:	1899      	adds	r1, r3, r2
 8008e02:	bf2c      	ite	cs
 8008e04:	2001      	movcs	r0, #1
 8008e06:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8008e08:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e0a:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008e0c:	f200 8086 	bhi.w	8008f1c <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e10:	eba8 0303 	sub.w	r3, r8, r3
 8008e14:	429a      	cmp	r2, r3
 8008e16:	f200 80c0 	bhi.w	8008f9a <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e24:	075b      	lsls	r3, r3, #29
 8008e26:	d5bf      	bpl.n	8008da8 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	b183      	cbz	r3, 8008e4e <prvTimerTask+0x10e>
		xMessage.xMessageID = xCommandID;
 8008e2c:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e2e:	69bb      	ldr	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e30:	9706      	str	r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8008e32:	9204      	str	r2, [sp, #16]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e34:	9a01      	ldr	r2, [sp, #4]
 8008e36:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e38:	9305      	str	r3, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e3a:	f7ff fedd 	bl	8008bf8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e3e:	2300      	movs	r3, #0
 8008e40:	a904      	add	r1, sp, #16
 8008e42:	6820      	ldr	r0, [r4, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	f7fe fcd3 	bl	80077f0 <xQueueGenericSend>
							configASSERT( xResult );
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d1ac      	bne.n	8008da8 <prvTimerTask+0x68>
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	e7fe      	b.n	8008e5e <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 809e 	beq.w	8008fb2 <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e76:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e78:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e7a:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008e7c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e7e:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008e80:	d856      	bhi.n	8008f30 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e82:	4b53      	ldr	r3, [pc, #332]	; (8008fd0 <prvTimerTask+0x290>)
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f7fe fbd9 	bl	800763c <vListInsert>
 8008e8a:	e78d      	b.n	8008da8 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8008e98:	e786      	b.n	8008da8 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e9e:	079a      	lsls	r2, r3, #30
 8008ea0:	d572      	bpl.n	8008f88 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ea2:	f023 0301 	bic.w	r3, r3, #1
 8008ea6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008eaa:	e77d      	b.n	8008da8 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008eac:	9b01      	ldr	r3, [sp, #4]
 8008eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eb2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008eb4:	9b00      	ldr	r3, [sp, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f6ff af76 	blt.w	8008da8 <prvTimerTask+0x68>
 8008ebc:	e77e      	b.n	8008dbc <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8008ebe:	f7ff fcf1 	bl	80088a4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008ec2:	f7ff fd07 	bl	80088d4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008ec6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008ec8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008eca:	4282      	cmp	r2, r0
 8008ecc:	d909      	bls.n	8008ee2 <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
 8008ece:	f7ff fee9 	bl	8008ca4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008ed2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8008ed6:	f7ff fced 	bl	80088b4 <xTaskResumeAll>
 8008eda:	e765      	b.n	8008da8 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8008edc:	f7ff fee2 	bl	8008ca4 <prvSwitchTimerLists>
 8008ee0:	e779      	b.n	8008dd6 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ee2:	4b3b      	ldr	r3, [pc, #236]	; (8008fd0 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 8008ee4:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	fab2 f282 	clz	r2, r2
 8008ef0:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ef2:	eba7 010a 	sub.w	r1, r7, sl
 8008ef6:	6820      	ldr	r0, [r4, #0]
 8008ef8:	f7fe ffa6 	bl	8007e48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008efc:	f7ff fcda 	bl	80088b4 <xTaskResumeAll>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	f47f af51 	bne.w	8008da8 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8008f06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f0a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	e747      	b.n	8008da8 <prvTimerTask+0x68>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	e7ea      	b.n	8008ef2 <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f1c:	4543      	cmp	r3, r8
 8008f1e:	d902      	bls.n	8008f26 <prvTimerTask+0x1e6>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	f43f af7a 	beq.w	8008e1a <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f26:	1d39      	adds	r1, r7, #4
 8008f28:	6830      	ldr	r0, [r6, #0]
 8008f2a:	f7fe fb87 	bl	800763c <vListInsert>
 8008f2e:	e73b      	b.n	8008da8 <prvTimerTask+0x68>
 8008f30:	6830      	ldr	r0, [r6, #0]
 8008f32:	f7fe fb83 	bl	800763c <vListInsert>
 8008f36:	e737      	b.n	8008da8 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f38:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f3c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f40:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8008f42:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f44:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008f48:	d322      	bcc.n	8008f90 <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4a:	ebaa 0307 	sub.w	r3, sl, r7
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d829      	bhi.n	8008fa6 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	b17b      	cbz	r3, 8008f76 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
 8008f56:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f58:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f5a:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8008f5e:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f60:	f7ff fe4a 	bl	8008bf8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f64:	2300      	movs	r3, #0
 8008f66:	a904      	add	r1, sp, #16
 8008f68:	6820      	ldr	r0, [r4, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f7fe fc40 	bl	80077f0 <xQueueGenericSend>
			configASSERT( xResult );
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f47f af15 	bne.w	8008da0 <prvTimerTask+0x60>
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	e7fe      	b.n	8008f86 <prvTimerTask+0x246>
							vPortFree( pxTimer );
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f000 fad9 	bl	8009540 <vPortFree>
 8008f8e:	e70b      	b.n	8008da8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f90:	4641      	mov	r1, r8
 8008f92:	6830      	ldr	r0, [r6, #0]
 8008f94:	f7fe fb52 	bl	800763c <vListInsert>
 8008f98:	e702      	b.n	8008da0 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f9a:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <prvTimerTask+0x290>)
 8008f9c:	1d39      	adds	r1, r7, #4
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	f7fe fb4c 	bl	800763c <vListInsert>
 8008fa4:	e700      	b.n	8008da8 <prvTimerTask+0x68>
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	; (8008fd0 <prvTimerTask+0x290>)
 8008fa8:	4641      	mov	r1, r8
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	f7fe fb46 	bl	800763c <vListInsert>
 8008fb0:	e6f6      	b.n	8008da0 <prvTimerTask+0x60>
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	e7fe      	b.n	8008fc2 <prvTimerTask+0x282>
 8008fc4:	24004454 	.word	0x24004454
 8008fc8:	24004524 	.word	0x24004524
 8008fcc:	24004578 	.word	0x24004578
 8008fd0:	24004458 	.word	0x24004458

08008fd4 <xTimerCreateTimerTask>:
{
 8008fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008fd6:	4c23      	ldr	r4, [pc, #140]	; (8009064 <xTimerCreateTimerTask+0x90>)
{
 8008fd8:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8008fda:	f000 f8c3 	bl	8009164 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008fde:	6825      	ldr	r5, [r4, #0]
 8008fe0:	b335      	cbz	r5, 8009030 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fe2:	f000 f8e1 	bl	80091a8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	b1cb      	cbz	r3, 800901e <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fea:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fec:	aa07      	add	r2, sp, #28
 8008fee:	a906      	add	r1, sp, #24
 8008ff0:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ff2:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ff4:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ff8:	f7fe faf0 	bl	80075dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	9a07      	ldr	r2, [sp, #28]
 8009000:	9500      	str	r5, [sp, #0]
 8009002:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8009006:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800900a:	4917      	ldr	r1, [pc, #92]	; (8009068 <xTimerCreateTimerTask+0x94>)
 800900c:	4817      	ldr	r0, [pc, #92]	; (800906c <xTimerCreateTimerTask+0x98>)
 800900e:	f7ff fa45 	bl	800849c <xTaskCreateStatic>
 8009012:	4b17      	ldr	r3, [pc, #92]	; (8009070 <xTimerCreateTimerTask+0x9c>)
 8009014:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009016:	b110      	cbz	r0, 800901e <xTimerCreateTimerTask+0x4a>
}
 8009018:	2001      	movs	r0, #1
 800901a:	b009      	add	sp, #36	; 0x24
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	e7fe      	b.n	800902e <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8009030:	4f10      	ldr	r7, [pc, #64]	; (8009074 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8009032:	4e11      	ldr	r6, [pc, #68]	; (8009078 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8009034:	4638      	mov	r0, r7
 8009036:	f7fe fae1 	bl	80075fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800903a:	4630      	mov	r0, r6
 800903c:	f7fe fade 	bl	80075fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009040:	4a0e      	ldr	r2, [pc, #56]	; (800907c <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009042:	9500      	str	r5, [sp, #0]
 8009044:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8009046:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009048:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800904a:	4a0d      	ldr	r2, [pc, #52]	; (8009080 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800904e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009050:	4a0d      	ldr	r2, [pc, #52]	; (8009088 <xTimerCreateTimerTask+0xb4>)
 8009052:	f7fe fb61 	bl	8007718 <xQueueGenericCreateStatic>
 8009056:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8009058:	2800      	cmp	r0, #0
 800905a:	d0c2      	beq.n	8008fe2 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800905c:	490b      	ldr	r1, [pc, #44]	; (800908c <xTimerCreateTimerTask+0xb8>)
 800905e:	f7fe fecb 	bl	8007df8 <vQueueAddToRegistry>
 8009062:	e7be      	b.n	8008fe2 <xTimerCreateTimerTask+0xe>
 8009064:	24004578 	.word	0x24004578
 8009068:	0800b908 	.word	0x0800b908
 800906c:	08008d41 	.word	0x08008d41
 8009070:	2400457c 	.word	0x2400457c
 8009074:	240044fc 	.word	0x240044fc
 8009078:	24004510 	.word	0x24004510
 800907c:	24004454 	.word	0x24004454
 8009080:	24004458 	.word	0x24004458
 8009084:	24004528 	.word	0x24004528
 8009088:	2400445c 	.word	0x2400445c
 800908c:	0800b900 	.word	0x0800b900

08009090 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009090:	4808      	ldr	r0, [pc, #32]	; (80090b4 <prvPortStartFirstTask+0x24>)
 8009092:	6800      	ldr	r0, [r0, #0]
 8009094:	6800      	ldr	r0, [r0, #0]
 8009096:	f380 8808 	msr	MSP, r0
 800909a:	f04f 0000 	mov.w	r0, #0
 800909e:	f380 8814 	msr	CONTROL, r0
 80090a2:	b662      	cpsie	i
 80090a4:	b661      	cpsie	f
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	df00      	svc	0
 80090b0:	bf00      	nop
 80090b2:	0000      	.short	0x0000
 80090b4:	e000ed08 	.word	0xe000ed08

080090b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090c8 <vPortEnableVFP+0x10>
 80090bc:	6801      	ldr	r1, [r0, #0]
 80090be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090c2:	6001      	str	r1, [r0, #0]
 80090c4:	4770      	bx	lr
 80090c6:	0000      	.short	0x0000
 80090c8:	e000ed88 	.word	0xe000ed88

080090cc <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80090cc:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <prvTaskExitError+0x3c>)
{
 80090ce:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80090d0:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80090d2:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 80090d4:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80090d6:	3301      	adds	r3, #1
 80090d8:	d008      	beq.n	80090ec <prvTaskExitError+0x20>
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	e7fe      	b.n	80090ea <prvTaskExitError+0x1e>
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0fc      	beq.n	80090fc <prvTaskExitError+0x30>
}
 8009102:	b002      	add	sp, #8
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	240030d4 	.word	0x240030d4

0800910c <pxPortInitialiseStack>:
{
 800910c:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800910e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009112:	4809      	ldr	r0, [pc, #36]	; (8009138 <pxPortInitialiseStack+0x2c>)
{
 8009114:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009116:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800911a:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800911e:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8009122:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009126:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800912a:	f06f 0102 	mvn.w	r1, #2
}
 800912e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009132:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8009136:	4770      	bx	lr
 8009138:	080090cd 	.word	0x080090cd
 800913c:	00000000 	.word	0x00000000

08009140 <SVC_Handler>:
	__asm volatile (
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <pxCurrentTCBConst2>)
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	6808      	ldr	r0, [r1, #0]
 8009146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	f380 8809 	msr	PSP, r0
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	4770      	bx	lr
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst2>:
 8009160:	24003f58 	.word	0x24003f58

08009164 <vPortEnterCritical>:
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009174:	4a0b      	ldr	r2, [pc, #44]	; (80091a4 <vPortEnterCritical+0x40>)
 8009176:	6813      	ldr	r3, [r2, #0]
 8009178:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800917a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800917c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800917e:	d000      	beq.n	8009182 <vPortEnterCritical+0x1e>
}
 8009180:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009182:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009186:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0f7      	beq.n	8009180 <vPortEnterCritical+0x1c>
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	e7fe      	b.n	80091a0 <vPortEnterCritical+0x3c>
 80091a2:	bf00      	nop
 80091a4:	240030d4 	.word	0x240030d4

080091a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80091a8:	4a08      	ldr	r2, [pc, #32]	; (80091cc <vPortExitCritical+0x24>)
 80091aa:	6813      	ldr	r3, [r2, #0]
 80091ac:	b943      	cbnz	r3, 80091c0 <vPortExitCritical+0x18>
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	e7fe      	b.n	80091be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80091c0:	3b01      	subs	r3, #1
 80091c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091c4:	b90b      	cbnz	r3, 80091ca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091c6:	f383 8811 	msr	BASEPRI, r3
}
 80091ca:	4770      	bx	lr
 80091cc:	240030d4 	.word	0x240030d4

080091d0 <PendSV_Handler>:
	__asm volatile
 80091d0:	f3ef 8009 	mrs	r0, PSP
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	4b15      	ldr	r3, [pc, #84]	; (8009230 <pxCurrentTCBConst>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	f01e 0f10 	tst.w	lr, #16
 80091e0:	bf08      	it	eq
 80091e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ea:	6010      	str	r0, [r2, #0]
 80091ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091f4:	f380 8811 	msr	BASEPRI, r0
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f7ff fb7e 	bl	8008900 <vTaskSwitchContext>
 8009204:	f04f 0000 	mov.w	r0, #0
 8009208:	f380 8811 	msr	BASEPRI, r0
 800920c:	bc09      	pop	{r0, r3}
 800920e:	6819      	ldr	r1, [r3, #0]
 8009210:	6808      	ldr	r0, [r1, #0]
 8009212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009216:	f01e 0f10 	tst.w	lr, #16
 800921a:	bf08      	it	eq
 800921c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009220:	f380 8809 	msr	PSP, r0
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	f3af 8000 	nop.w

08009230 <pxCurrentTCBConst>:
 8009230:	24003f58 	.word	0x24003f58

08009234 <xPortSysTickHandler>:
{
 8009234:	b508      	push	{r3, lr}
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009246:	f7ff fb4b 	bl	80088e0 <xTaskIncrementTick>
 800924a:	b128      	cbz	r0, 8009258 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800924c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009254:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009258:	2300      	movs	r3, #0
 800925a:	f383 8811 	msr	BASEPRI, r3
}
 800925e:	bd08      	pop	{r3, pc}

08009260 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009260:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009264:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009268:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800926a:	4806      	ldr	r0, [pc, #24]	; (8009284 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800926c:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800926e:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	fba0 0303 	umull	r0, r3, r0, r3
 8009276:	099b      	lsrs	r3, r3, #6
 8009278:	3b01      	subs	r3, #1
 800927a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800927c:	6111      	str	r1, [r2, #16]
}
 800927e:	4770      	bx	lr
 8009280:	240030c4 	.word	0x240030c4
 8009284:	10624dd3 	.word	0x10624dd3

08009288 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009288:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800928c:	4a48      	ldr	r2, [pc, #288]	; (80093b0 <xPortStartScheduler+0x128>)
 800928e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8009292:	4291      	cmp	r1, r2
 8009294:	d041      	beq.n	800931a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009296:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800929a:	4b46      	ldr	r3, [pc, #280]	; (80093b4 <xPortStartScheduler+0x12c>)
 800929c:	429a      	cmp	r2, r3
 800929e:	d033      	beq.n	8009308 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092a0:	4b45      	ldr	r3, [pc, #276]	; (80093b8 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092a6:	4845      	ldr	r0, [pc, #276]	; (80093bc <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092a8:	4945      	ldr	r1, [pc, #276]	; (80093c0 <xPortStartScheduler+0x138>)
{
 80092aa:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ac:	781a      	ldrb	r2, [r3, #0]
{
 80092ae:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092b0:	b2d2      	uxtb	r2, r2
 80092b2:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092b4:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092b6:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092ba:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092bc:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092d0:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092d2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092d4:	d50f      	bpl.n	80092f6 <xPortStartScheduler+0x6e>
 80092d6:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80092dc:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092de:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80092ec:	061b      	lsls	r3, r3, #24
 80092ee:	d4f3      	bmi.n	80092d8 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092f0:	2903      	cmp	r1, #3
 80092f2:	d01b      	beq.n	800932c <xPortStartScheduler+0xa4>
 80092f4:	6001      	str	r1, [r0, #0]
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	e7fe      	b.n	8009306 <xPortStartScheduler+0x7e>
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	e7fe      	b.n	8009318 <xPortStartScheduler+0x90>
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	e7fe      	b.n	800932a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800932c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800932e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009332:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009336:	4a20      	ldr	r2, [pc, #128]	; (80093b8 <xPortStartScheduler+0x130>)
 8009338:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 800933a:	4e22      	ldr	r6, [pc, #136]	; (80093c4 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800933c:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
 800933e:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009340:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009342:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009346:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800934a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800934e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009352:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009356:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800935a:	f7ff ff81 	bl	8009260 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800935e:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
 8009360:	f7ff feaa 	bl	80090b8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009364:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8009368:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800936c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8009370:	f7ff fe8e 	bl	8009090 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009374:	f7ff fac4 	bl	8008900 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8009378:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
 800937a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800937c:	3301      	adds	r3, #1
 800937e:	d008      	beq.n	8009392 <xPortStartScheduler+0x10a>
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	e7fe      	b.n	8009390 <xPortStartScheduler+0x108>
 8009392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0fc      	beq.n	80093a2 <xPortStartScheduler+0x11a>
}
 80093a8:	2000      	movs	r0, #0
 80093aa:	b004      	add	sp, #16
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
 80093ae:	bf00      	nop
 80093b0:	410fc271 	.word	0x410fc271
 80093b4:	410fc270 	.word	0x410fc270
 80093b8:	e000e400 	.word	0xe000e400
 80093bc:	24004584 	.word	0x24004584
 80093c0:	24004580 	.word	0x24004580
 80093c4:	240030d4 	.word	0x240030d4

080093c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093cc:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80093ce:	f7ff fa69 	bl	80088a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093d2:	4b54      	ldr	r3, [pc, #336]	; (8009524 <pvPortMalloc+0x15c>)
 80093d4:	681d      	ldr	r5, [r3, #0]
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	d06f      	beq.n	80094ba <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093da:	4b53      	ldr	r3, [pc, #332]	; (8009528 <pvPortMalloc+0x160>)
 80093dc:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093de:	423e      	tst	r6, r7
 80093e0:	d12e      	bne.n	8009440 <pvPortMalloc+0x78>
 80093e2:	b36e      	cbz	r6, 8009440 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 80093e4:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093e8:	0776      	lsls	r6, r6, #29
 80093ea:	d002      	beq.n	80093f2 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ec:	f024 0407 	bic.w	r4, r4, #7
 80093f0:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093f2:	b32c      	cbz	r4, 8009440 <pvPortMalloc+0x78>
 80093f4:	f8df c144 	ldr.w	ip, [pc, #324]	; 800953c <pvPortMalloc+0x174>
 80093f8:	f8dc 6000 	ldr.w	r6, [ip]
 80093fc:	42a6      	cmp	r6, r4
 80093fe:	d31f      	bcc.n	8009440 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8009400:	484a      	ldr	r0, [pc, #296]	; (800952c <pvPortMalloc+0x164>)
 8009402:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009404:	e003      	b.n	800940e <pvPortMalloc+0x46>
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	b122      	cbz	r2, 8009414 <pvPortMalloc+0x4c>
 800940a:	4618      	mov	r0, r3
 800940c:	4613      	mov	r3, r2
 800940e:	6859      	ldr	r1, [r3, #4]
 8009410:	42a1      	cmp	r1, r4
 8009412:	d3f8      	bcc.n	8009406 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009414:	42ab      	cmp	r3, r5
 8009416:	d013      	beq.n	8009440 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009418:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800941a:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800941c:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009420:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009422:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009426:	d929      	bls.n	800947c <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009428:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800942a:	0748      	lsls	r0, r1, #29
 800942c:	d00f      	beq.n	800944e <pvPortMalloc+0x86>
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	e7fe      	b.n	800943e <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009440:	f04f 0800 	mov.w	r8, #0
 8009444:	f7ff fa36 	bl	80088b4 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8009448:	4640      	mov	r0, r8
 800944a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800944e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009450:	4a36      	ldr	r2, [pc, #216]	; (800952c <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
 8009452:	605c      	str	r4, [r3, #4]
 8009454:	4614      	mov	r4, r2
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009456:	6812      	ldr	r2, [r2, #0]
 8009458:	4291      	cmp	r1, r2
 800945a:	d8fb      	bhi.n	8009454 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800945c:	6860      	ldr	r0, [r4, #4]
 800945e:	eb04 0e00 	add.w	lr, r4, r0
 8009462:	4571      	cmp	r1, lr
 8009464:	d04e      	beq.n	8009504 <pvPortMalloc+0x13c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009466:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800946a:	eb01 000e 	add.w	r0, r1, lr
 800946e:	4282      	cmp	r2, r0
 8009470:	d04f      	beq.n	8009512 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009472:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009474:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009476:	bf18      	it	ne
 8009478:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800947a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800947c:	4a2c      	ldr	r2, [pc, #176]	; (8009530 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800947e:	1a76      	subs	r6, r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009480:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009482:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009484:	f8cc 6000 	str.w	r6, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009488:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800948a:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800948e:	bf38      	it	cc
 8009490:	6016      	strcc	r6, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 8009492:	4a28      	ldr	r2, [pc, #160]	; (8009534 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
 8009494:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8009498:	6813      	ldr	r3, [r2, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800949e:	f7ff fa09 	bl	80088b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094a2:	f018 0f07 	tst.w	r8, #7
 80094a6:	d0cf      	beq.n	8009448 <pvPortMalloc+0x80>
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	e7fe      	b.n	80094b8 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
 80094ba:	491f      	ldr	r1, [pc, #124]	; (8009538 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094bc:	074f      	lsls	r7, r1, #29
 80094be:	d11a      	bne.n	80094f6 <pvPortMalloc+0x12e>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094c0:	460a      	mov	r2, r1
 80094c2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80094c6:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 80094c8:	f1a1 0508 	sub.w	r5, r1, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094cc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094d0:	4916      	ldr	r1, [pc, #88]	; (800952c <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094d2:	f025 0507 	bic.w	r5, r5, #7
	pxEnd = ( void * ) uxAddress;
 80094d6:	601d      	str	r5, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094d8:	1aab      	subs	r3, r5, r2
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094da:	4a15      	ldr	r2, [pc, #84]	; (8009530 <pvPortMalloc+0x168>)
 80094dc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094de:	4a17      	ldr	r2, [pc, #92]	; (800953c <pvPortMalloc+0x174>)
 80094e0:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094e2:	4a11      	ldr	r2, [pc, #68]	; (8009528 <pvPortMalloc+0x160>)
 80094e4:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094e6:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094e8:	e9c1 0200 	strd	r0, r2, [r1]
	pxEnd->pxNextFreeBlock = NULL;
 80094ec:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094f0:	e9c0 5300 	strd	r5, r3, [r0]
}
 80094f4:	e773      	b.n	80093de <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094f6:	1dca      	adds	r2, r1, #7
 80094f8:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094fc:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009500:	4610      	mov	r0, r2
 8009502:	e7e1      	b.n	80094c8 <pvPortMalloc+0x100>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009504:	6849      	ldr	r1, [r1, #4]
 8009506:	eb00 0e01 	add.w	lr, r0, r1
 800950a:	4621      	mov	r1, r4
 800950c:	f8c4 e004 	str.w	lr, [r4, #4]
 8009510:	e7ab      	b.n	800946a <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009512:	42aa      	cmp	r2, r5
 8009514:	d0ad      	beq.n	8009472 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009516:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009518:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800951a:	4470      	add	r0, lr
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800951c:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800951e:	6048      	str	r0, [r1, #4]
 8009520:	e7a8      	b.n	8009474 <pvPortMalloc+0xac>
 8009522:	bf00      	nop
 8009524:	24004588 	.word	0x24004588
 8009528:	2400818c 	.word	0x2400818c
 800952c:	240081a0 	.word	0x240081a0
 8009530:	24008194 	.word	0x24008194
 8009534:	24008198 	.word	0x24008198
 8009538:	2400458c 	.word	0x2400458c
 800953c:	24008190 	.word	0x24008190

08009540 <vPortFree>:
	if( pv != NULL )
 8009540:	b1d0      	cbz	r0, 8009578 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009542:	4a2b      	ldr	r2, [pc, #172]	; (80095f0 <vPortFree+0xb0>)
 8009544:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009548:	6812      	ldr	r2, [r2, #0]
 800954a:	4213      	tst	r3, r2
 800954c:	d00b      	beq.n	8009566 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800954e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009552:	b191      	cbz	r1, 800957a <vPortFree+0x3a>
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	e7fe      	b.n	8009564 <vPortFree+0x24>
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	e7fe      	b.n	8009576 <vPortFree+0x36>
 8009578:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800957a:	ea23 0302 	bic.w	r3, r3, r2
{
 800957e:	b530      	push	{r4, r5, lr}
 8009580:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009582:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
 8009586:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800958a:	4d1a      	ldr	r5, [pc, #104]	; (80095f4 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800958c:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800958e:	f7ff f989 	bl	80088a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009592:	9801      	ldr	r0, [sp, #4]
 8009594:	682a      	ldr	r2, [r5, #0]
 8009596:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800959a:	4b17      	ldr	r3, [pc, #92]	; (80095f8 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800959c:	440a      	add	r2, r1
 800959e:	602a      	str	r2, [r5, #0]
 80095a0:	461a      	mov	r2, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	429c      	cmp	r4, r3
 80095a6:	d8fb      	bhi.n	80095a0 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095a8:	6850      	ldr	r0, [r2, #4]
 80095aa:	eb02 0c00 	add.w	ip, r2, r0
 80095ae:	4564      	cmp	r4, ip
 80095b0:	d019      	beq.n	80095e6 <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095b2:	1860      	adds	r0, r4, r1
 80095b4:	4283      	cmp	r3, r0
 80095b6:	d00c      	beq.n	80095d2 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095b8:	6023      	str	r3, [r4, #0]
	if( pxIterator != pxBlockToInsert )
 80095ba:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095bc:	bf18      	it	ne
 80095be:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
 80095c0:	4a0e      	ldr	r2, [pc, #56]	; (80095fc <vPortFree+0xbc>)
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	6013      	str	r3, [r2, #0]
}
 80095c8:	b003      	add	sp, #12
 80095ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
 80095ce:	f7ff b971 	b.w	80088b4 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095d2:	480b      	ldr	r0, [pc, #44]	; (8009600 <vPortFree+0xc0>)
 80095d4:	6800      	ldr	r0, [r0, #0]
 80095d6:	4283      	cmp	r3, r0
 80095d8:	d0ee      	beq.n	80095b8 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095da:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095de:	4401      	add	r1, r0
 80095e0:	e9c4 3100 	strd	r3, r1, [r4]
 80095e4:	e7e9      	b.n	80095ba <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095e6:	4401      	add	r1, r0
 80095e8:	4614      	mov	r4, r2
 80095ea:	6051      	str	r1, [r2, #4]
 80095ec:	e7e1      	b.n	80095b2 <vPortFree+0x72>
 80095ee:	bf00      	nop
 80095f0:	2400818c 	.word	0x2400818c
 80095f4:	24008190 	.word	0x24008190
 80095f8:	240081a0 	.word	0x240081a0
 80095fc:	2400819c 	.word	0x2400819c
 8009600:	24004588 	.word	0x24004588

08009604 <_ZdlPvj>:
 8009604:	f000 b814 	b.w	8009630 <_ZdlPv>

08009608 <_Znwj>:
 8009608:	2801      	cmp	r0, #1
 800960a:	bf38      	it	cc
 800960c:	2001      	movcc	r0, #1
 800960e:	b510      	push	{r4, lr}
 8009610:	4604      	mov	r4, r0
 8009612:	4620      	mov	r0, r4
 8009614:	f000 f96e 	bl	80098f4 <malloc>
 8009618:	b930      	cbnz	r0, 8009628 <_Znwj+0x20>
 800961a:	f000 f81d 	bl	8009658 <_ZSt15get_new_handlerv>
 800961e:	b908      	cbnz	r0, 8009624 <_Znwj+0x1c>
 8009620:	f000 f822 	bl	8009668 <abort>
 8009624:	4780      	blx	r0
 8009626:	e7f4      	b.n	8009612 <_Znwj+0xa>
 8009628:	bd10      	pop	{r4, pc}

0800962a <__cxa_pure_virtual>:
 800962a:	b508      	push	{r3, lr}
 800962c:	f000 f80e 	bl	800964c <_ZSt9terminatev>

08009630 <_ZdlPv>:
 8009630:	f000 b968 	b.w	8009904 <free>

08009634 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009634:	b508      	push	{r3, lr}
 8009636:	4780      	blx	r0
 8009638:	f000 f816 	bl	8009668 <abort>

0800963c <_ZSt13get_terminatev>:
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <_ZSt13get_terminatev+0xc>)
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	f3bf 8f5b 	dmb	ish
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	240030d8 	.word	0x240030d8

0800964c <_ZSt9terminatev>:
 800964c:	b508      	push	{r3, lr}
 800964e:	f7ff fff5 	bl	800963c <_ZSt13get_terminatev>
 8009652:	f7ff ffef 	bl	8009634 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009658 <_ZSt15get_new_handlerv>:
 8009658:	4b02      	ldr	r3, [pc, #8]	; (8009664 <_ZSt15get_new_handlerv+0xc>)
 800965a:	6818      	ldr	r0, [r3, #0]
 800965c:	f3bf 8f5b 	dmb	ish
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	240081a8 	.word	0x240081a8

08009668 <abort>:
 8009668:	b508      	push	{r3, lr}
 800966a:	2006      	movs	r0, #6
 800966c:	f000 fb78 	bl	8009d60 <raise>
 8009670:	2001      	movs	r0, #1
 8009672:	f7f9 fb23 	bl	8002cbc <_exit>
	...

08009678 <__errno>:
 8009678:	4b01      	ldr	r3, [pc, #4]	; (8009680 <__errno+0x8>)
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	240030dc 	.word	0x240030dc

08009684 <std>:
 8009684:	2300      	movs	r3, #0
 8009686:	b510      	push	{r4, lr}
 8009688:	4604      	mov	r4, r0
 800968a:	e9c0 3300 	strd	r3, r3, [r0]
 800968e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009692:	6083      	str	r3, [r0, #8]
 8009694:	8181      	strh	r1, [r0, #12]
 8009696:	6643      	str	r3, [r0, #100]	; 0x64
 8009698:	81c2      	strh	r2, [r0, #14]
 800969a:	6183      	str	r3, [r0, #24]
 800969c:	4619      	mov	r1, r3
 800969e:	2208      	movs	r2, #8
 80096a0:	305c      	adds	r0, #92	; 0x5c
 80096a2:	f000 f945 	bl	8009930 <memset>
 80096a6:	4b05      	ldr	r3, [pc, #20]	; (80096bc <std+0x38>)
 80096a8:	6263      	str	r3, [r4, #36]	; 0x24
 80096aa:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <std+0x3c>)
 80096ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <std+0x40>)
 80096b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096b2:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <std+0x44>)
 80096b4:	6224      	str	r4, [r4, #32]
 80096b6:	6323      	str	r3, [r4, #48]	; 0x30
 80096b8:	bd10      	pop	{r4, pc}
 80096ba:	bf00      	nop
 80096bc:	08009d99 	.word	0x08009d99
 80096c0:	08009dbb 	.word	0x08009dbb
 80096c4:	08009df3 	.word	0x08009df3
 80096c8:	08009e17 	.word	0x08009e17

080096cc <_cleanup_r>:
 80096cc:	4901      	ldr	r1, [pc, #4]	; (80096d4 <_cleanup_r+0x8>)
 80096ce:	f000 b8af 	b.w	8009830 <_fwalk_reent>
 80096d2:	bf00      	nop
 80096d4:	0800a175 	.word	0x0800a175

080096d8 <__sfmoreglue>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	2268      	movs	r2, #104	; 0x68
 80096dc:	1e4d      	subs	r5, r1, #1
 80096de:	4355      	muls	r5, r2
 80096e0:	460e      	mov	r6, r1
 80096e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096e6:	f000 f997 	bl	8009a18 <_malloc_r>
 80096ea:	4604      	mov	r4, r0
 80096ec:	b140      	cbz	r0, 8009700 <__sfmoreglue+0x28>
 80096ee:	2100      	movs	r1, #0
 80096f0:	e9c0 1600 	strd	r1, r6, [r0]
 80096f4:	300c      	adds	r0, #12
 80096f6:	60a0      	str	r0, [r4, #8]
 80096f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096fc:	f000 f918 	bl	8009930 <memset>
 8009700:	4620      	mov	r0, r4
 8009702:	bd70      	pop	{r4, r5, r6, pc}

08009704 <__sfp_lock_acquire>:
 8009704:	4801      	ldr	r0, [pc, #4]	; (800970c <__sfp_lock_acquire+0x8>)
 8009706:	f000 b8f2 	b.w	80098ee <__retarget_lock_acquire_recursive>
 800970a:	bf00      	nop
 800970c:	240081ad 	.word	0x240081ad

08009710 <__sfp_lock_release>:
 8009710:	4801      	ldr	r0, [pc, #4]	; (8009718 <__sfp_lock_release+0x8>)
 8009712:	f000 b8ed 	b.w	80098f0 <__retarget_lock_release_recursive>
 8009716:	bf00      	nop
 8009718:	240081ad 	.word	0x240081ad

0800971c <__sinit_lock_acquire>:
 800971c:	4801      	ldr	r0, [pc, #4]	; (8009724 <__sinit_lock_acquire+0x8>)
 800971e:	f000 b8e6 	b.w	80098ee <__retarget_lock_acquire_recursive>
 8009722:	bf00      	nop
 8009724:	240081ae 	.word	0x240081ae

08009728 <__sinit_lock_release>:
 8009728:	4801      	ldr	r0, [pc, #4]	; (8009730 <__sinit_lock_release+0x8>)
 800972a:	f000 b8e1 	b.w	80098f0 <__retarget_lock_release_recursive>
 800972e:	bf00      	nop
 8009730:	240081ae 	.word	0x240081ae

08009734 <__sinit>:
 8009734:	b510      	push	{r4, lr}
 8009736:	4604      	mov	r4, r0
 8009738:	f7ff fff0 	bl	800971c <__sinit_lock_acquire>
 800973c:	69a3      	ldr	r3, [r4, #24]
 800973e:	b11b      	cbz	r3, 8009748 <__sinit+0x14>
 8009740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009744:	f7ff bff0 	b.w	8009728 <__sinit_lock_release>
 8009748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800974c:	6523      	str	r3, [r4, #80]	; 0x50
 800974e:	4b13      	ldr	r3, [pc, #76]	; (800979c <__sinit+0x68>)
 8009750:	4a13      	ldr	r2, [pc, #76]	; (80097a0 <__sinit+0x6c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	62a2      	str	r2, [r4, #40]	; 0x28
 8009756:	42a3      	cmp	r3, r4
 8009758:	bf04      	itt	eq
 800975a:	2301      	moveq	r3, #1
 800975c:	61a3      	streq	r3, [r4, #24]
 800975e:	4620      	mov	r0, r4
 8009760:	f000 f820 	bl	80097a4 <__sfp>
 8009764:	6060      	str	r0, [r4, #4]
 8009766:	4620      	mov	r0, r4
 8009768:	f000 f81c 	bl	80097a4 <__sfp>
 800976c:	60a0      	str	r0, [r4, #8]
 800976e:	4620      	mov	r0, r4
 8009770:	f000 f818 	bl	80097a4 <__sfp>
 8009774:	2200      	movs	r2, #0
 8009776:	60e0      	str	r0, [r4, #12]
 8009778:	2104      	movs	r1, #4
 800977a:	6860      	ldr	r0, [r4, #4]
 800977c:	f7ff ff82 	bl	8009684 <std>
 8009780:	68a0      	ldr	r0, [r4, #8]
 8009782:	2201      	movs	r2, #1
 8009784:	2109      	movs	r1, #9
 8009786:	f7ff ff7d 	bl	8009684 <std>
 800978a:	68e0      	ldr	r0, [r4, #12]
 800978c:	2202      	movs	r2, #2
 800978e:	2112      	movs	r1, #18
 8009790:	f7ff ff78 	bl	8009684 <std>
 8009794:	2301      	movs	r3, #1
 8009796:	61a3      	str	r3, [r4, #24]
 8009798:	e7d2      	b.n	8009740 <__sinit+0xc>
 800979a:	bf00      	nop
 800979c:	0800b970 	.word	0x0800b970
 80097a0:	080096cd 	.word	0x080096cd

080097a4 <__sfp>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	4607      	mov	r7, r0
 80097a8:	f7ff ffac 	bl	8009704 <__sfp_lock_acquire>
 80097ac:	4b1e      	ldr	r3, [pc, #120]	; (8009828 <__sfp+0x84>)
 80097ae:	681e      	ldr	r6, [r3, #0]
 80097b0:	69b3      	ldr	r3, [r6, #24]
 80097b2:	b913      	cbnz	r3, 80097ba <__sfp+0x16>
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7ff ffbd 	bl	8009734 <__sinit>
 80097ba:	3648      	adds	r6, #72	; 0x48
 80097bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097c0:	3b01      	subs	r3, #1
 80097c2:	d503      	bpl.n	80097cc <__sfp+0x28>
 80097c4:	6833      	ldr	r3, [r6, #0]
 80097c6:	b30b      	cbz	r3, 800980c <__sfp+0x68>
 80097c8:	6836      	ldr	r6, [r6, #0]
 80097ca:	e7f7      	b.n	80097bc <__sfp+0x18>
 80097cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097d0:	b9d5      	cbnz	r5, 8009808 <__sfp+0x64>
 80097d2:	4b16      	ldr	r3, [pc, #88]	; (800982c <__sfp+0x88>)
 80097d4:	60e3      	str	r3, [r4, #12]
 80097d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097da:	6665      	str	r5, [r4, #100]	; 0x64
 80097dc:	f000 f886 	bl	80098ec <__retarget_lock_init_recursive>
 80097e0:	f7ff ff96 	bl	8009710 <__sfp_lock_release>
 80097e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80097ec:	6025      	str	r5, [r4, #0]
 80097ee:	61a5      	str	r5, [r4, #24]
 80097f0:	2208      	movs	r2, #8
 80097f2:	4629      	mov	r1, r5
 80097f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097f8:	f000 f89a 	bl	8009930 <memset>
 80097fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009804:	4620      	mov	r0, r4
 8009806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009808:	3468      	adds	r4, #104	; 0x68
 800980a:	e7d9      	b.n	80097c0 <__sfp+0x1c>
 800980c:	2104      	movs	r1, #4
 800980e:	4638      	mov	r0, r7
 8009810:	f7ff ff62 	bl	80096d8 <__sfmoreglue>
 8009814:	4604      	mov	r4, r0
 8009816:	6030      	str	r0, [r6, #0]
 8009818:	2800      	cmp	r0, #0
 800981a:	d1d5      	bne.n	80097c8 <__sfp+0x24>
 800981c:	f7ff ff78 	bl	8009710 <__sfp_lock_release>
 8009820:	230c      	movs	r3, #12
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	e7ee      	b.n	8009804 <__sfp+0x60>
 8009826:	bf00      	nop
 8009828:	0800b970 	.word	0x0800b970
 800982c:	ffff0001 	.word	0xffff0001

08009830 <_fwalk_reent>:
 8009830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009834:	4606      	mov	r6, r0
 8009836:	4688      	mov	r8, r1
 8009838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800983c:	2700      	movs	r7, #0
 800983e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009842:	f1b9 0901 	subs.w	r9, r9, #1
 8009846:	d505      	bpl.n	8009854 <_fwalk_reent+0x24>
 8009848:	6824      	ldr	r4, [r4, #0]
 800984a:	2c00      	cmp	r4, #0
 800984c:	d1f7      	bne.n	800983e <_fwalk_reent+0xe>
 800984e:	4638      	mov	r0, r7
 8009850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009854:	89ab      	ldrh	r3, [r5, #12]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d907      	bls.n	800986a <_fwalk_reent+0x3a>
 800985a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800985e:	3301      	adds	r3, #1
 8009860:	d003      	beq.n	800986a <_fwalk_reent+0x3a>
 8009862:	4629      	mov	r1, r5
 8009864:	4630      	mov	r0, r6
 8009866:	47c0      	blx	r8
 8009868:	4307      	orrs	r7, r0
 800986a:	3568      	adds	r5, #104	; 0x68
 800986c:	e7e9      	b.n	8009842 <_fwalk_reent+0x12>
	...

08009870 <__libc_init_array>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	4d0d      	ldr	r5, [pc, #52]	; (80098a8 <__libc_init_array+0x38>)
 8009874:	4c0d      	ldr	r4, [pc, #52]	; (80098ac <__libc_init_array+0x3c>)
 8009876:	1b64      	subs	r4, r4, r5
 8009878:	10a4      	asrs	r4, r4, #2
 800987a:	2600      	movs	r6, #0
 800987c:	42a6      	cmp	r6, r4
 800987e:	d109      	bne.n	8009894 <__libc_init_array+0x24>
 8009880:	4d0b      	ldr	r5, [pc, #44]	; (80098b0 <__libc_init_array+0x40>)
 8009882:	4c0c      	ldr	r4, [pc, #48]	; (80098b4 <__libc_init_array+0x44>)
 8009884:	f001 f858 	bl	800a938 <_init>
 8009888:	1b64      	subs	r4, r4, r5
 800988a:	10a4      	asrs	r4, r4, #2
 800988c:	2600      	movs	r6, #0
 800988e:	42a6      	cmp	r6, r4
 8009890:	d105      	bne.n	800989e <__libc_init_array+0x2e>
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	f855 3b04 	ldr.w	r3, [r5], #4
 8009898:	4798      	blx	r3
 800989a:	3601      	adds	r6, #1
 800989c:	e7ee      	b.n	800987c <__libc_init_array+0xc>
 800989e:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a2:	4798      	blx	r3
 80098a4:	3601      	adds	r6, #1
 80098a6:	e7f2      	b.n	800988e <__libc_init_array+0x1e>
 80098a8:	0800b9d4 	.word	0x0800b9d4
 80098ac:	0800b9d4 	.word	0x0800b9d4
 80098b0:	0800b9d4 	.word	0x0800b9d4
 80098b4:	0800b9d8 	.word	0x0800b9d8

080098b8 <__itoa>:
 80098b8:	1e93      	subs	r3, r2, #2
 80098ba:	2b22      	cmp	r3, #34	; 0x22
 80098bc:	b510      	push	{r4, lr}
 80098be:	460c      	mov	r4, r1
 80098c0:	d904      	bls.n	80098cc <__itoa+0x14>
 80098c2:	2300      	movs	r3, #0
 80098c4:	700b      	strb	r3, [r1, #0]
 80098c6:	461c      	mov	r4, r3
 80098c8:	4620      	mov	r0, r4
 80098ca:	bd10      	pop	{r4, pc}
 80098cc:	2a0a      	cmp	r2, #10
 80098ce:	d109      	bne.n	80098e4 <__itoa+0x2c>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	da07      	bge.n	80098e4 <__itoa+0x2c>
 80098d4:	232d      	movs	r3, #45	; 0x2d
 80098d6:	700b      	strb	r3, [r1, #0]
 80098d8:	4240      	negs	r0, r0
 80098da:	2101      	movs	r1, #1
 80098dc:	4421      	add	r1, r4
 80098de:	f000 fa9f 	bl	8009e20 <__utoa>
 80098e2:	e7f1      	b.n	80098c8 <__itoa+0x10>
 80098e4:	2100      	movs	r1, #0
 80098e6:	e7f9      	b.n	80098dc <__itoa+0x24>

080098e8 <itoa>:
 80098e8:	f7ff bfe6 	b.w	80098b8 <__itoa>

080098ec <__retarget_lock_init_recursive>:
 80098ec:	4770      	bx	lr

080098ee <__retarget_lock_acquire_recursive>:
 80098ee:	4770      	bx	lr

080098f0 <__retarget_lock_release_recursive>:
 80098f0:	4770      	bx	lr
	...

080098f4 <malloc>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <malloc+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f000 b88d 	b.w	8009a18 <_malloc_r>
 80098fe:	bf00      	nop
 8009900:	240030dc 	.word	0x240030dc

08009904 <free>:
 8009904:	4b02      	ldr	r3, [pc, #8]	; (8009910 <free+0xc>)
 8009906:	4601      	mov	r1, r0
 8009908:	6818      	ldr	r0, [r3, #0]
 800990a:	f000 b819 	b.w	8009940 <_free_r>
 800990e:	bf00      	nop
 8009910:	240030dc 	.word	0x240030dc

08009914 <memcpy>:
 8009914:	440a      	add	r2, r1
 8009916:	4291      	cmp	r1, r2
 8009918:	f100 33ff 	add.w	r3, r0, #4294967295
 800991c:	d100      	bne.n	8009920 <memcpy+0xc>
 800991e:	4770      	bx	lr
 8009920:	b510      	push	{r4, lr}
 8009922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800992a:	4291      	cmp	r1, r2
 800992c:	d1f9      	bne.n	8009922 <memcpy+0xe>
 800992e:	bd10      	pop	{r4, pc}

08009930 <memset>:
 8009930:	4402      	add	r2, r0
 8009932:	4603      	mov	r3, r0
 8009934:	4293      	cmp	r3, r2
 8009936:	d100      	bne.n	800993a <memset+0xa>
 8009938:	4770      	bx	lr
 800993a:	f803 1b01 	strb.w	r1, [r3], #1
 800993e:	e7f9      	b.n	8009934 <memset+0x4>

08009940 <_free_r>:
 8009940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009942:	2900      	cmp	r1, #0
 8009944:	d044      	beq.n	80099d0 <_free_r+0x90>
 8009946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800994a:	9001      	str	r0, [sp, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f1a1 0404 	sub.w	r4, r1, #4
 8009952:	bfb8      	it	lt
 8009954:	18e4      	addlt	r4, r4, r3
 8009956:	f000 fcc1 	bl	800a2dc <__malloc_lock>
 800995a:	4a1e      	ldr	r2, [pc, #120]	; (80099d4 <_free_r+0x94>)
 800995c:	9801      	ldr	r0, [sp, #4]
 800995e:	6813      	ldr	r3, [r2, #0]
 8009960:	b933      	cbnz	r3, 8009970 <_free_r+0x30>
 8009962:	6063      	str	r3, [r4, #4]
 8009964:	6014      	str	r4, [r2, #0]
 8009966:	b003      	add	sp, #12
 8009968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800996c:	f000 bcbc 	b.w	800a2e8 <__malloc_unlock>
 8009970:	42a3      	cmp	r3, r4
 8009972:	d908      	bls.n	8009986 <_free_r+0x46>
 8009974:	6825      	ldr	r5, [r4, #0]
 8009976:	1961      	adds	r1, r4, r5
 8009978:	428b      	cmp	r3, r1
 800997a:	bf01      	itttt	eq
 800997c:	6819      	ldreq	r1, [r3, #0]
 800997e:	685b      	ldreq	r3, [r3, #4]
 8009980:	1949      	addeq	r1, r1, r5
 8009982:	6021      	streq	r1, [r4, #0]
 8009984:	e7ed      	b.n	8009962 <_free_r+0x22>
 8009986:	461a      	mov	r2, r3
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b10b      	cbz	r3, 8009990 <_free_r+0x50>
 800998c:	42a3      	cmp	r3, r4
 800998e:	d9fa      	bls.n	8009986 <_free_r+0x46>
 8009990:	6811      	ldr	r1, [r2, #0]
 8009992:	1855      	adds	r5, r2, r1
 8009994:	42a5      	cmp	r5, r4
 8009996:	d10b      	bne.n	80099b0 <_free_r+0x70>
 8009998:	6824      	ldr	r4, [r4, #0]
 800999a:	4421      	add	r1, r4
 800999c:	1854      	adds	r4, r2, r1
 800999e:	42a3      	cmp	r3, r4
 80099a0:	6011      	str	r1, [r2, #0]
 80099a2:	d1e0      	bne.n	8009966 <_free_r+0x26>
 80099a4:	681c      	ldr	r4, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	6053      	str	r3, [r2, #4]
 80099aa:	4421      	add	r1, r4
 80099ac:	6011      	str	r1, [r2, #0]
 80099ae:	e7da      	b.n	8009966 <_free_r+0x26>
 80099b0:	d902      	bls.n	80099b8 <_free_r+0x78>
 80099b2:	230c      	movs	r3, #12
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	e7d6      	b.n	8009966 <_free_r+0x26>
 80099b8:	6825      	ldr	r5, [r4, #0]
 80099ba:	1961      	adds	r1, r4, r5
 80099bc:	428b      	cmp	r3, r1
 80099be:	bf04      	itt	eq
 80099c0:	6819      	ldreq	r1, [r3, #0]
 80099c2:	685b      	ldreq	r3, [r3, #4]
 80099c4:	6063      	str	r3, [r4, #4]
 80099c6:	bf04      	itt	eq
 80099c8:	1949      	addeq	r1, r1, r5
 80099ca:	6021      	streq	r1, [r4, #0]
 80099cc:	6054      	str	r4, [r2, #4]
 80099ce:	e7ca      	b.n	8009966 <_free_r+0x26>
 80099d0:	b003      	add	sp, #12
 80099d2:	bd30      	pop	{r4, r5, pc}
 80099d4:	240081b0 	.word	0x240081b0

080099d8 <sbrk_aligned>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	4e0e      	ldr	r6, [pc, #56]	; (8009a14 <sbrk_aligned+0x3c>)
 80099dc:	460c      	mov	r4, r1
 80099de:	6831      	ldr	r1, [r6, #0]
 80099e0:	4605      	mov	r5, r0
 80099e2:	b911      	cbnz	r1, 80099ea <sbrk_aligned+0x12>
 80099e4:	f000 f984 	bl	8009cf0 <_sbrk_r>
 80099e8:	6030      	str	r0, [r6, #0]
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 f97f 	bl	8009cf0 <_sbrk_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d00a      	beq.n	8009a0c <sbrk_aligned+0x34>
 80099f6:	1cc4      	adds	r4, r0, #3
 80099f8:	f024 0403 	bic.w	r4, r4, #3
 80099fc:	42a0      	cmp	r0, r4
 80099fe:	d007      	beq.n	8009a10 <sbrk_aligned+0x38>
 8009a00:	1a21      	subs	r1, r4, r0
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f974 	bl	8009cf0 <_sbrk_r>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d101      	bne.n	8009a10 <sbrk_aligned+0x38>
 8009a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a10:	4620      	mov	r0, r4
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	240081b4 	.word	0x240081b4

08009a18 <_malloc_r>:
 8009a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1c:	1ccd      	adds	r5, r1, #3
 8009a1e:	f025 0503 	bic.w	r5, r5, #3
 8009a22:	3508      	adds	r5, #8
 8009a24:	2d0c      	cmp	r5, #12
 8009a26:	bf38      	it	cc
 8009a28:	250c      	movcc	r5, #12
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	db01      	blt.n	8009a34 <_malloc_r+0x1c>
 8009a30:	42a9      	cmp	r1, r5
 8009a32:	d905      	bls.n	8009a40 <_malloc_r+0x28>
 8009a34:	230c      	movs	r3, #12
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	2600      	movs	r6, #0
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a40:	4e2e      	ldr	r6, [pc, #184]	; (8009afc <_malloc_r+0xe4>)
 8009a42:	f000 fc4b 	bl	800a2dc <__malloc_lock>
 8009a46:	6833      	ldr	r3, [r6, #0]
 8009a48:	461c      	mov	r4, r3
 8009a4a:	bb34      	cbnz	r4, 8009a9a <_malloc_r+0x82>
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff ffc2 	bl	80099d8 <sbrk_aligned>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	4604      	mov	r4, r0
 8009a58:	d14d      	bne.n	8009af6 <_malloc_r+0xde>
 8009a5a:	6834      	ldr	r4, [r6, #0]
 8009a5c:	4626      	mov	r6, r4
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	d140      	bne.n	8009ae4 <_malloc_r+0xcc>
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	4631      	mov	r1, r6
 8009a66:	4638      	mov	r0, r7
 8009a68:	eb04 0803 	add.w	r8, r4, r3
 8009a6c:	f000 f940 	bl	8009cf0 <_sbrk_r>
 8009a70:	4580      	cmp	r8, r0
 8009a72:	d13a      	bne.n	8009aea <_malloc_r+0xd2>
 8009a74:	6821      	ldr	r1, [r4, #0]
 8009a76:	3503      	adds	r5, #3
 8009a78:	1a6d      	subs	r5, r5, r1
 8009a7a:	f025 0503 	bic.w	r5, r5, #3
 8009a7e:	3508      	adds	r5, #8
 8009a80:	2d0c      	cmp	r5, #12
 8009a82:	bf38      	it	cc
 8009a84:	250c      	movcc	r5, #12
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ffa5 	bl	80099d8 <sbrk_aligned>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d02b      	beq.n	8009aea <_malloc_r+0xd2>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	442b      	add	r3, r5
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	e00e      	b.n	8009ab8 <_malloc_r+0xa0>
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	1b52      	subs	r2, r2, r5
 8009a9e:	d41e      	bmi.n	8009ade <_malloc_r+0xc6>
 8009aa0:	2a0b      	cmp	r2, #11
 8009aa2:	d916      	bls.n	8009ad2 <_malloc_r+0xba>
 8009aa4:	1961      	adds	r1, r4, r5
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	6025      	str	r5, [r4, #0]
 8009aaa:	bf18      	it	ne
 8009aac:	6059      	strne	r1, [r3, #4]
 8009aae:	6863      	ldr	r3, [r4, #4]
 8009ab0:	bf08      	it	eq
 8009ab2:	6031      	streq	r1, [r6, #0]
 8009ab4:	5162      	str	r2, [r4, r5]
 8009ab6:	604b      	str	r3, [r1, #4]
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f104 060b 	add.w	r6, r4, #11
 8009abe:	f000 fc13 	bl	800a2e8 <__malloc_unlock>
 8009ac2:	f026 0607 	bic.w	r6, r6, #7
 8009ac6:	1d23      	adds	r3, r4, #4
 8009ac8:	1af2      	subs	r2, r6, r3
 8009aca:	d0b6      	beq.n	8009a3a <_malloc_r+0x22>
 8009acc:	1b9b      	subs	r3, r3, r6
 8009ace:	50a3      	str	r3, [r4, r2]
 8009ad0:	e7b3      	b.n	8009a3a <_malloc_r+0x22>
 8009ad2:	6862      	ldr	r2, [r4, #4]
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	bf0c      	ite	eq
 8009ad8:	6032      	streq	r2, [r6, #0]
 8009ada:	605a      	strne	r2, [r3, #4]
 8009adc:	e7ec      	b.n	8009ab8 <_malloc_r+0xa0>
 8009ade:	4623      	mov	r3, r4
 8009ae0:	6864      	ldr	r4, [r4, #4]
 8009ae2:	e7b2      	b.n	8009a4a <_malloc_r+0x32>
 8009ae4:	4634      	mov	r4, r6
 8009ae6:	6876      	ldr	r6, [r6, #4]
 8009ae8:	e7b9      	b.n	8009a5e <_malloc_r+0x46>
 8009aea:	230c      	movs	r3, #12
 8009aec:	603b      	str	r3, [r7, #0]
 8009aee:	4638      	mov	r0, r7
 8009af0:	f000 fbfa 	bl	800a2e8 <__malloc_unlock>
 8009af4:	e7a1      	b.n	8009a3a <_malloc_r+0x22>
 8009af6:	6025      	str	r5, [r4, #0]
 8009af8:	e7de      	b.n	8009ab8 <_malloc_r+0xa0>
 8009afa:	bf00      	nop
 8009afc:	240081b0 	.word	0x240081b0

08009b00 <iprintf>:
 8009b00:	b40f      	push	{r0, r1, r2, r3}
 8009b02:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <iprintf+0x2c>)
 8009b04:	b513      	push	{r0, r1, r4, lr}
 8009b06:	681c      	ldr	r4, [r3, #0]
 8009b08:	b124      	cbz	r4, 8009b14 <iprintf+0x14>
 8009b0a:	69a3      	ldr	r3, [r4, #24]
 8009b0c:	b913      	cbnz	r3, 8009b14 <iprintf+0x14>
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f7ff fe10 	bl	8009734 <__sinit>
 8009b14:	ab05      	add	r3, sp, #20
 8009b16:	9a04      	ldr	r2, [sp, #16]
 8009b18:	68a1      	ldr	r1, [r4, #8]
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 fc13 	bl	800a348 <_vfiprintf_r>
 8009b22:	b002      	add	sp, #8
 8009b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b28:	b004      	add	sp, #16
 8009b2a:	4770      	bx	lr
 8009b2c:	240030dc 	.word	0x240030dc

08009b30 <_puts_r>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	460e      	mov	r6, r1
 8009b34:	4605      	mov	r5, r0
 8009b36:	b118      	cbz	r0, 8009b40 <_puts_r+0x10>
 8009b38:	6983      	ldr	r3, [r0, #24]
 8009b3a:	b90b      	cbnz	r3, 8009b40 <_puts_r+0x10>
 8009b3c:	f7ff fdfa 	bl	8009734 <__sinit>
 8009b40:	69ab      	ldr	r3, [r5, #24]
 8009b42:	68ac      	ldr	r4, [r5, #8]
 8009b44:	b913      	cbnz	r3, 8009b4c <_puts_r+0x1c>
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7ff fdf4 	bl	8009734 <__sinit>
 8009b4c:	4b2c      	ldr	r3, [pc, #176]	; (8009c00 <_puts_r+0xd0>)
 8009b4e:	429c      	cmp	r4, r3
 8009b50:	d120      	bne.n	8009b94 <_puts_r+0x64>
 8009b52:	686c      	ldr	r4, [r5, #4]
 8009b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b56:	07db      	lsls	r3, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <_puts_r+0x36>
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	0598      	lsls	r0, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_puts_r+0x36>
 8009b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b62:	f7ff fec4 	bl	80098ee <__retarget_lock_acquire_recursive>
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	0719      	lsls	r1, r3, #28
 8009b6a:	d51d      	bpl.n	8009ba8 <_puts_r+0x78>
 8009b6c:	6923      	ldr	r3, [r4, #16]
 8009b6e:	b1db      	cbz	r3, 8009ba8 <_puts_r+0x78>
 8009b70:	3e01      	subs	r6, #1
 8009b72:	68a3      	ldr	r3, [r4, #8]
 8009b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	60a3      	str	r3, [r4, #8]
 8009b7c:	bb39      	cbnz	r1, 8009bce <_puts_r+0x9e>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da38      	bge.n	8009bf4 <_puts_r+0xc4>
 8009b82:	4622      	mov	r2, r4
 8009b84:	210a      	movs	r1, #10
 8009b86:	4628      	mov	r0, r5
 8009b88:	f000 f98c 	bl	8009ea4 <__swbuf_r>
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d011      	beq.n	8009bb4 <_puts_r+0x84>
 8009b90:	250a      	movs	r5, #10
 8009b92:	e011      	b.n	8009bb8 <_puts_r+0x88>
 8009b94:	4b1b      	ldr	r3, [pc, #108]	; (8009c04 <_puts_r+0xd4>)
 8009b96:	429c      	cmp	r4, r3
 8009b98:	d101      	bne.n	8009b9e <_puts_r+0x6e>
 8009b9a:	68ac      	ldr	r4, [r5, #8]
 8009b9c:	e7da      	b.n	8009b54 <_puts_r+0x24>
 8009b9e:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <_puts_r+0xd8>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	bf08      	it	eq
 8009ba4:	68ec      	ldreq	r4, [r5, #12]
 8009ba6:	e7d5      	b.n	8009b54 <_puts_r+0x24>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4628      	mov	r0, r5
 8009bac:	f000 f9de 	bl	8009f6c <__swsetup_r>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d0dd      	beq.n	8009b70 <_puts_r+0x40>
 8009bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8009bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bba:	07da      	lsls	r2, r3, #31
 8009bbc:	d405      	bmi.n	8009bca <_puts_r+0x9a>
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	059b      	lsls	r3, r3, #22
 8009bc2:	d402      	bmi.n	8009bca <_puts_r+0x9a>
 8009bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bc6:	f7ff fe93 	bl	80098f0 <__retarget_lock_release_recursive>
 8009bca:	4628      	mov	r0, r5
 8009bcc:	bd70      	pop	{r4, r5, r6, pc}
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	da04      	bge.n	8009bdc <_puts_r+0xac>
 8009bd2:	69a2      	ldr	r2, [r4, #24]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	dc06      	bgt.n	8009be6 <_puts_r+0xb6>
 8009bd8:	290a      	cmp	r1, #10
 8009bda:	d004      	beq.n	8009be6 <_puts_r+0xb6>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	6022      	str	r2, [r4, #0]
 8009be2:	7019      	strb	r1, [r3, #0]
 8009be4:	e7c5      	b.n	8009b72 <_puts_r+0x42>
 8009be6:	4622      	mov	r2, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 f95b 	bl	8009ea4 <__swbuf_r>
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d1bf      	bne.n	8009b72 <_puts_r+0x42>
 8009bf2:	e7df      	b.n	8009bb4 <_puts_r+0x84>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	250a      	movs	r5, #10
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	6022      	str	r2, [r4, #0]
 8009bfc:	701d      	strb	r5, [r3, #0]
 8009bfe:	e7db      	b.n	8009bb8 <_puts_r+0x88>
 8009c00:	0800b930 	.word	0x0800b930
 8009c04:	0800b950 	.word	0x0800b950
 8009c08:	0800b910 	.word	0x0800b910

08009c0c <puts>:
 8009c0c:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <puts+0xc>)
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f7ff bf8d 	b.w	8009b30 <_puts_r>
 8009c16:	bf00      	nop
 8009c18:	240030dc 	.word	0x240030dc

08009c1c <cleanup_glue>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	460c      	mov	r4, r1
 8009c20:	6809      	ldr	r1, [r1, #0]
 8009c22:	4605      	mov	r5, r0
 8009c24:	b109      	cbz	r1, 8009c2a <cleanup_glue+0xe>
 8009c26:	f7ff fff9 	bl	8009c1c <cleanup_glue>
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c32:	f7ff be85 	b.w	8009940 <_free_r>
	...

08009c38 <_reclaim_reent>:
 8009c38:	4b2c      	ldr	r3, [pc, #176]	; (8009cec <_reclaim_reent+0xb4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4283      	cmp	r3, r0
 8009c3e:	b570      	push	{r4, r5, r6, lr}
 8009c40:	4604      	mov	r4, r0
 8009c42:	d051      	beq.n	8009ce8 <_reclaim_reent+0xb0>
 8009c44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009c46:	b143      	cbz	r3, 8009c5a <_reclaim_reent+0x22>
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d14a      	bne.n	8009ce4 <_reclaim_reent+0xac>
 8009c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c50:	6819      	ldr	r1, [r3, #0]
 8009c52:	b111      	cbz	r1, 8009c5a <_reclaim_reent+0x22>
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff fe73 	bl	8009940 <_free_r>
 8009c5a:	6961      	ldr	r1, [r4, #20]
 8009c5c:	b111      	cbz	r1, 8009c64 <_reclaim_reent+0x2c>
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f7ff fe6e 	bl	8009940 <_free_r>
 8009c64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c66:	b111      	cbz	r1, 8009c6e <_reclaim_reent+0x36>
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f7ff fe69 	bl	8009940 <_free_r>
 8009c6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c70:	b111      	cbz	r1, 8009c78 <_reclaim_reent+0x40>
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7ff fe64 	bl	8009940 <_free_r>
 8009c78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009c7a:	b111      	cbz	r1, 8009c82 <_reclaim_reent+0x4a>
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f7ff fe5f 	bl	8009940 <_free_r>
 8009c82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009c84:	b111      	cbz	r1, 8009c8c <_reclaim_reent+0x54>
 8009c86:	4620      	mov	r0, r4
 8009c88:	f7ff fe5a 	bl	8009940 <_free_r>
 8009c8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009c8e:	b111      	cbz	r1, 8009c96 <_reclaim_reent+0x5e>
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7ff fe55 	bl	8009940 <_free_r>
 8009c96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009c98:	b111      	cbz	r1, 8009ca0 <_reclaim_reent+0x68>
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f7ff fe50 	bl	8009940 <_free_r>
 8009ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ca2:	b111      	cbz	r1, 8009caa <_reclaim_reent+0x72>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f7ff fe4b 	bl	8009940 <_free_r>
 8009caa:	69a3      	ldr	r3, [r4, #24]
 8009cac:	b1e3      	cbz	r3, 8009ce8 <_reclaim_reent+0xb0>
 8009cae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4798      	blx	r3
 8009cb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009cb6:	b1b9      	cbz	r1, 8009ce8 <_reclaim_reent+0xb0>
 8009cb8:	4620      	mov	r0, r4
 8009cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cbe:	f7ff bfad 	b.w	8009c1c <cleanup_glue>
 8009cc2:	5949      	ldr	r1, [r1, r5]
 8009cc4:	b941      	cbnz	r1, 8009cd8 <_reclaim_reent+0xa0>
 8009cc6:	3504      	adds	r5, #4
 8009cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cca:	2d80      	cmp	r5, #128	; 0x80
 8009ccc:	68d9      	ldr	r1, [r3, #12]
 8009cce:	d1f8      	bne.n	8009cc2 <_reclaim_reent+0x8a>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f7ff fe35 	bl	8009940 <_free_r>
 8009cd6:	e7ba      	b.n	8009c4e <_reclaim_reent+0x16>
 8009cd8:	680e      	ldr	r6, [r1, #0]
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7ff fe30 	bl	8009940 <_free_r>
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	e7ef      	b.n	8009cc4 <_reclaim_reent+0x8c>
 8009ce4:	2500      	movs	r5, #0
 8009ce6:	e7ef      	b.n	8009cc8 <_reclaim_reent+0x90>
 8009ce8:	bd70      	pop	{r4, r5, r6, pc}
 8009cea:	bf00      	nop
 8009cec:	240030dc 	.word	0x240030dc

08009cf0 <_sbrk_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d06      	ldr	r5, [pc, #24]	; (8009d0c <_sbrk_r+0x1c>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	602b      	str	r3, [r5, #0]
 8009cfc:	f7f8 fff2 	bl	8002ce4 <_sbrk>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_sbrk_r+0x1a>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_sbrk_r+0x1a>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	240081b8 	.word	0x240081b8

08009d10 <_raise_r>:
 8009d10:	291f      	cmp	r1, #31
 8009d12:	b538      	push	{r3, r4, r5, lr}
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
 8009d18:	d904      	bls.n	8009d24 <_raise_r+0x14>
 8009d1a:	2316      	movs	r3, #22
 8009d1c:	6003      	str	r3, [r0, #0]
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d26:	b112      	cbz	r2, 8009d2e <_raise_r+0x1e>
 8009d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d2c:	b94b      	cbnz	r3, 8009d42 <_raise_r+0x32>
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 f830 	bl	8009d94 <_getpid_r>
 8009d34:	462a      	mov	r2, r5
 8009d36:	4601      	mov	r1, r0
 8009d38:	4620      	mov	r0, r4
 8009d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d3e:	f000 b817 	b.w	8009d70 <_kill_r>
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d00a      	beq.n	8009d5c <_raise_r+0x4c>
 8009d46:	1c59      	adds	r1, r3, #1
 8009d48:	d103      	bne.n	8009d52 <_raise_r+0x42>
 8009d4a:	2316      	movs	r3, #22
 8009d4c:	6003      	str	r3, [r0, #0]
 8009d4e:	2001      	movs	r0, #1
 8009d50:	e7e7      	b.n	8009d22 <_raise_r+0x12>
 8009d52:	2400      	movs	r4, #0
 8009d54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d58:	4628      	mov	r0, r5
 8009d5a:	4798      	blx	r3
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e7e0      	b.n	8009d22 <_raise_r+0x12>

08009d60 <raise>:
 8009d60:	4b02      	ldr	r3, [pc, #8]	; (8009d6c <raise+0xc>)
 8009d62:	4601      	mov	r1, r0
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f7ff bfd3 	b.w	8009d10 <_raise_r>
 8009d6a:	bf00      	nop
 8009d6c:	240030dc 	.word	0x240030dc

08009d70 <_kill_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d07      	ldr	r5, [pc, #28]	; (8009d90 <_kill_r+0x20>)
 8009d74:	2300      	movs	r3, #0
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	f7f8 ff93 	bl	8002ca8 <_kill>
 8009d82:	1c43      	adds	r3, r0, #1
 8009d84:	d102      	bne.n	8009d8c <_kill_r+0x1c>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	b103      	cbz	r3, 8009d8c <_kill_r+0x1c>
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	bd38      	pop	{r3, r4, r5, pc}
 8009d8e:	bf00      	nop
 8009d90:	240081b8 	.word	0x240081b8

08009d94 <_getpid_r>:
 8009d94:	f7f8 bf86 	b.w	8002ca4 <_getpid>

08009d98 <__sread>:
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da0:	f000 fd96 	bl	800a8d0 <_read_r>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	bfab      	itete	ge
 8009da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009daa:	89a3      	ldrhlt	r3, [r4, #12]
 8009dac:	181b      	addge	r3, r3, r0
 8009dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009db2:	bfac      	ite	ge
 8009db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009db6:	81a3      	strhlt	r3, [r4, #12]
 8009db8:	bd10      	pop	{r4, pc}

08009dba <__swrite>:
 8009dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	461f      	mov	r7, r3
 8009dc0:	898b      	ldrh	r3, [r1, #12]
 8009dc2:	05db      	lsls	r3, r3, #23
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	4616      	mov	r6, r2
 8009dca:	d505      	bpl.n	8009dd8 <__swrite+0x1e>
 8009dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f000 fa0a 	bl	800a1ec <_lseek_r>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	4632      	mov	r2, r6
 8009de6:	463b      	mov	r3, r7
 8009de8:	4628      	mov	r0, r5
 8009dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dee:	f000 b8ab 	b.w	8009f48 <_write_r>

08009df2 <__sseek>:
 8009df2:	b510      	push	{r4, lr}
 8009df4:	460c      	mov	r4, r1
 8009df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfa:	f000 f9f7 	bl	800a1ec <_lseek_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	bf15      	itete	ne
 8009e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e0e:	81a3      	strheq	r3, [r4, #12]
 8009e10:	bf18      	it	ne
 8009e12:	81a3      	strhne	r3, [r4, #12]
 8009e14:	bd10      	pop	{r4, pc}

08009e16 <__sclose>:
 8009e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1a:	f000 b915 	b.w	800a048 <_close_r>
	...

08009e20 <__utoa>:
 8009e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e22:	4c1f      	ldr	r4, [pc, #124]	; (8009ea0 <__utoa+0x80>)
 8009e24:	b08b      	sub	sp, #44	; 0x2c
 8009e26:	4605      	mov	r5, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	466e      	mov	r6, sp
 8009e2c:	f104 0c20 	add.w	ip, r4, #32
 8009e30:	6820      	ldr	r0, [r4, #0]
 8009e32:	6861      	ldr	r1, [r4, #4]
 8009e34:	4637      	mov	r7, r6
 8009e36:	c703      	stmia	r7!, {r0, r1}
 8009e38:	3408      	adds	r4, #8
 8009e3a:	4564      	cmp	r4, ip
 8009e3c:	463e      	mov	r6, r7
 8009e3e:	d1f7      	bne.n	8009e30 <__utoa+0x10>
 8009e40:	7921      	ldrb	r1, [r4, #4]
 8009e42:	7139      	strb	r1, [r7, #4]
 8009e44:	1e91      	subs	r1, r2, #2
 8009e46:	6820      	ldr	r0, [r4, #0]
 8009e48:	6038      	str	r0, [r7, #0]
 8009e4a:	2922      	cmp	r1, #34	; 0x22
 8009e4c:	f04f 0100 	mov.w	r1, #0
 8009e50:	d904      	bls.n	8009e5c <__utoa+0x3c>
 8009e52:	7019      	strb	r1, [r3, #0]
 8009e54:	460b      	mov	r3, r1
 8009e56:	4618      	mov	r0, r3
 8009e58:	b00b      	add	sp, #44	; 0x2c
 8009e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e5c:	1e58      	subs	r0, r3, #1
 8009e5e:	4684      	mov	ip, r0
 8009e60:	fbb5 f7f2 	udiv	r7, r5, r2
 8009e64:	fb02 5617 	mls	r6, r2, r7, r5
 8009e68:	3628      	adds	r6, #40	; 0x28
 8009e6a:	446e      	add	r6, sp
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009e72:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009e76:	462e      	mov	r6, r5
 8009e78:	42b2      	cmp	r2, r6
 8009e7a:	f101 0101 	add.w	r1, r1, #1
 8009e7e:	463d      	mov	r5, r7
 8009e80:	d9ee      	bls.n	8009e60 <__utoa+0x40>
 8009e82:	2200      	movs	r2, #0
 8009e84:	545a      	strb	r2, [r3, r1]
 8009e86:	1919      	adds	r1, r3, r4
 8009e88:	1aa5      	subs	r5, r4, r2
 8009e8a:	42aa      	cmp	r2, r5
 8009e8c:	dae3      	bge.n	8009e56 <__utoa+0x36>
 8009e8e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009e92:	780e      	ldrb	r6, [r1, #0]
 8009e94:	7006      	strb	r6, [r0, #0]
 8009e96:	3201      	adds	r2, #1
 8009e98:	f801 5901 	strb.w	r5, [r1], #-1
 8009e9c:	e7f4      	b.n	8009e88 <__utoa+0x68>
 8009e9e:	bf00      	nop
 8009ea0:	0800b974 	.word	0x0800b974

08009ea4 <__swbuf_r>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	460e      	mov	r6, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	4605      	mov	r5, r0
 8009eac:	b118      	cbz	r0, 8009eb6 <__swbuf_r+0x12>
 8009eae:	6983      	ldr	r3, [r0, #24]
 8009eb0:	b90b      	cbnz	r3, 8009eb6 <__swbuf_r+0x12>
 8009eb2:	f7ff fc3f 	bl	8009734 <__sinit>
 8009eb6:	4b21      	ldr	r3, [pc, #132]	; (8009f3c <__swbuf_r+0x98>)
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	d12b      	bne.n	8009f14 <__swbuf_r+0x70>
 8009ebc:	686c      	ldr	r4, [r5, #4]
 8009ebe:	69a3      	ldr	r3, [r4, #24]
 8009ec0:	60a3      	str	r3, [r4, #8]
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	071a      	lsls	r2, r3, #28
 8009ec6:	d52f      	bpl.n	8009f28 <__swbuf_r+0x84>
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	b36b      	cbz	r3, 8009f28 <__swbuf_r+0x84>
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	6820      	ldr	r0, [r4, #0]
 8009ed0:	1ac0      	subs	r0, r0, r3
 8009ed2:	6963      	ldr	r3, [r4, #20]
 8009ed4:	b2f6      	uxtb	r6, r6
 8009ed6:	4283      	cmp	r3, r0
 8009ed8:	4637      	mov	r7, r6
 8009eda:	dc04      	bgt.n	8009ee6 <__swbuf_r+0x42>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 f948 	bl	800a174 <_fflush_r>
 8009ee4:	bb30      	cbnz	r0, 8009f34 <__swbuf_r+0x90>
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	60a3      	str	r3, [r4, #8]
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	6022      	str	r2, [r4, #0]
 8009ef2:	701e      	strb	r6, [r3, #0]
 8009ef4:	6963      	ldr	r3, [r4, #20]
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	4283      	cmp	r3, r0
 8009efa:	d004      	beq.n	8009f06 <__swbuf_r+0x62>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	07db      	lsls	r3, r3, #31
 8009f00:	d506      	bpl.n	8009f10 <__swbuf_r+0x6c>
 8009f02:	2e0a      	cmp	r6, #10
 8009f04:	d104      	bne.n	8009f10 <__swbuf_r+0x6c>
 8009f06:	4621      	mov	r1, r4
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f000 f933 	bl	800a174 <_fflush_r>
 8009f0e:	b988      	cbnz	r0, 8009f34 <__swbuf_r+0x90>
 8009f10:	4638      	mov	r0, r7
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <__swbuf_r+0x9c>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	d101      	bne.n	8009f1e <__swbuf_r+0x7a>
 8009f1a:	68ac      	ldr	r4, [r5, #8]
 8009f1c:	e7cf      	b.n	8009ebe <__swbuf_r+0x1a>
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <__swbuf_r+0xa0>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	bf08      	it	eq
 8009f24:	68ec      	ldreq	r4, [r5, #12]
 8009f26:	e7ca      	b.n	8009ebe <__swbuf_r+0x1a>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 f81e 	bl	8009f6c <__swsetup_r>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d0cb      	beq.n	8009ecc <__swbuf_r+0x28>
 8009f34:	f04f 37ff 	mov.w	r7, #4294967295
 8009f38:	e7ea      	b.n	8009f10 <__swbuf_r+0x6c>
 8009f3a:	bf00      	nop
 8009f3c:	0800b930 	.word	0x0800b930
 8009f40:	0800b950 	.word	0x0800b950
 8009f44:	0800b910 	.word	0x0800b910

08009f48 <_write_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	; (8009f68 <_write_r+0x20>)
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f7f8 f93e 	bl	80021d8 <_write>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_write_r+0x1e>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_write_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	240081b8 	.word	0x240081b8

08009f6c <__swsetup_r>:
 8009f6c:	4b32      	ldr	r3, [pc, #200]	; (800a038 <__swsetup_r+0xcc>)
 8009f6e:	b570      	push	{r4, r5, r6, lr}
 8009f70:	681d      	ldr	r5, [r3, #0]
 8009f72:	4606      	mov	r6, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	b125      	cbz	r5, 8009f82 <__swsetup_r+0x16>
 8009f78:	69ab      	ldr	r3, [r5, #24]
 8009f7a:	b913      	cbnz	r3, 8009f82 <__swsetup_r+0x16>
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f7ff fbd9 	bl	8009734 <__sinit>
 8009f82:	4b2e      	ldr	r3, [pc, #184]	; (800a03c <__swsetup_r+0xd0>)
 8009f84:	429c      	cmp	r4, r3
 8009f86:	d10f      	bne.n	8009fa8 <__swsetup_r+0x3c>
 8009f88:	686c      	ldr	r4, [r5, #4]
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f90:	0719      	lsls	r1, r3, #28
 8009f92:	d42c      	bmi.n	8009fee <__swsetup_r+0x82>
 8009f94:	06dd      	lsls	r5, r3, #27
 8009f96:	d411      	bmi.n	8009fbc <__swsetup_r+0x50>
 8009f98:	2309      	movs	r3, #9
 8009f9a:	6033      	str	r3, [r6, #0]
 8009f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fa0:	81a3      	strh	r3, [r4, #12]
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	e03e      	b.n	800a026 <__swsetup_r+0xba>
 8009fa8:	4b25      	ldr	r3, [pc, #148]	; (800a040 <__swsetup_r+0xd4>)
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d101      	bne.n	8009fb2 <__swsetup_r+0x46>
 8009fae:	68ac      	ldr	r4, [r5, #8]
 8009fb0:	e7eb      	b.n	8009f8a <__swsetup_r+0x1e>
 8009fb2:	4b24      	ldr	r3, [pc, #144]	; (800a044 <__swsetup_r+0xd8>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	bf08      	it	eq
 8009fb8:	68ec      	ldreq	r4, [r5, #12]
 8009fba:	e7e6      	b.n	8009f8a <__swsetup_r+0x1e>
 8009fbc:	0758      	lsls	r0, r3, #29
 8009fbe:	d512      	bpl.n	8009fe6 <__swsetup_r+0x7a>
 8009fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc2:	b141      	cbz	r1, 8009fd6 <__swsetup_r+0x6a>
 8009fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc8:	4299      	cmp	r1, r3
 8009fca:	d002      	beq.n	8009fd2 <__swsetup_r+0x66>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff fcb7 	bl	8009940 <_free_r>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fdc:	81a3      	strh	r3, [r4, #12]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	6063      	str	r3, [r4, #4]
 8009fe2:	6923      	ldr	r3, [r4, #16]
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f043 0308 	orr.w	r3, r3, #8
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	6923      	ldr	r3, [r4, #16]
 8009ff0:	b94b      	cbnz	r3, 800a006 <__swsetup_r+0x9a>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ffc:	d003      	beq.n	800a006 <__swsetup_r+0x9a>
 8009ffe:	4621      	mov	r1, r4
 800a000:	4630      	mov	r0, r6
 800a002:	f000 f92b 	bl	800a25c <__smakebuf_r>
 800a006:	89a0      	ldrh	r0, [r4, #12]
 800a008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a00c:	f010 0301 	ands.w	r3, r0, #1
 800a010:	d00a      	beq.n	800a028 <__swsetup_r+0xbc>
 800a012:	2300      	movs	r3, #0
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	6963      	ldr	r3, [r4, #20]
 800a018:	425b      	negs	r3, r3
 800a01a:	61a3      	str	r3, [r4, #24]
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	b943      	cbnz	r3, 800a032 <__swsetup_r+0xc6>
 800a020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a024:	d1ba      	bne.n	8009f9c <__swsetup_r+0x30>
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	0781      	lsls	r1, r0, #30
 800a02a:	bf58      	it	pl
 800a02c:	6963      	ldrpl	r3, [r4, #20]
 800a02e:	60a3      	str	r3, [r4, #8]
 800a030:	e7f4      	b.n	800a01c <__swsetup_r+0xb0>
 800a032:	2000      	movs	r0, #0
 800a034:	e7f7      	b.n	800a026 <__swsetup_r+0xba>
 800a036:	bf00      	nop
 800a038:	240030dc 	.word	0x240030dc
 800a03c:	0800b930 	.word	0x0800b930
 800a040:	0800b950 	.word	0x0800b950
 800a044:	0800b910 	.word	0x0800b910

0800a048 <_close_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d06      	ldr	r5, [pc, #24]	; (800a064 <_close_r+0x1c>)
 800a04c:	2300      	movs	r3, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	f7f8 fe38 	bl	8002cc8 <_close>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_close_r+0x1a>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_close_r+0x1a>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	240081b8 	.word	0x240081b8

0800a068 <__sflush_r>:
 800a068:	898a      	ldrh	r2, [r1, #12]
 800a06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06e:	4605      	mov	r5, r0
 800a070:	0710      	lsls	r0, r2, #28
 800a072:	460c      	mov	r4, r1
 800a074:	d458      	bmi.n	800a128 <__sflush_r+0xc0>
 800a076:	684b      	ldr	r3, [r1, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dc05      	bgt.n	800a088 <__sflush_r+0x20>
 800a07c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dc02      	bgt.n	800a088 <__sflush_r+0x20>
 800a082:	2000      	movs	r0, #0
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a08a:	2e00      	cmp	r6, #0
 800a08c:	d0f9      	beq.n	800a082 <__sflush_r+0x1a>
 800a08e:	2300      	movs	r3, #0
 800a090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a094:	682f      	ldr	r7, [r5, #0]
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	d032      	beq.n	800a100 <__sflush_r+0x98>
 800a09a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	075a      	lsls	r2, r3, #29
 800a0a0:	d505      	bpl.n	800a0ae <__sflush_r+0x46>
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	1ac0      	subs	r0, r0, r3
 800a0a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0a8:	b10b      	cbz	r3, 800a0ae <__sflush_r+0x46>
 800a0aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ac:	1ac0      	subs	r0, r0, r3
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0b4:	6a21      	ldr	r1, [r4, #32]
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b0      	blx	r6
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	d106      	bne.n	800a0ce <__sflush_r+0x66>
 800a0c0:	6829      	ldr	r1, [r5, #0]
 800a0c2:	291d      	cmp	r1, #29
 800a0c4:	d82c      	bhi.n	800a120 <__sflush_r+0xb8>
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	; (800a170 <__sflush_r+0x108>)
 800a0c8:	40ca      	lsrs	r2, r1
 800a0ca:	07d6      	lsls	r6, r2, #31
 800a0cc:	d528      	bpl.n	800a120 <__sflush_r+0xb8>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	6062      	str	r2, [r4, #4]
 800a0d2:	04d9      	lsls	r1, r3, #19
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	6022      	str	r2, [r4, #0]
 800a0d8:	d504      	bpl.n	800a0e4 <__sflush_r+0x7c>
 800a0da:	1c42      	adds	r2, r0, #1
 800a0dc:	d101      	bne.n	800a0e2 <__sflush_r+0x7a>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	b903      	cbnz	r3, 800a0e4 <__sflush_r+0x7c>
 800a0e2:	6560      	str	r0, [r4, #84]	; 0x54
 800a0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0e6:	602f      	str	r7, [r5, #0]
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	d0ca      	beq.n	800a082 <__sflush_r+0x1a>
 800a0ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0f0:	4299      	cmp	r1, r3
 800a0f2:	d002      	beq.n	800a0fa <__sflush_r+0x92>
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f7ff fc23 	bl	8009940 <_free_r>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	6360      	str	r0, [r4, #52]	; 0x34
 800a0fe:	e7c1      	b.n	800a084 <__sflush_r+0x1c>
 800a100:	6a21      	ldr	r1, [r4, #32]
 800a102:	2301      	movs	r3, #1
 800a104:	4628      	mov	r0, r5
 800a106:	47b0      	blx	r6
 800a108:	1c41      	adds	r1, r0, #1
 800a10a:	d1c7      	bne.n	800a09c <__sflush_r+0x34>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0c4      	beq.n	800a09c <__sflush_r+0x34>
 800a112:	2b1d      	cmp	r3, #29
 800a114:	d001      	beq.n	800a11a <__sflush_r+0xb2>
 800a116:	2b16      	cmp	r3, #22
 800a118:	d101      	bne.n	800a11e <__sflush_r+0xb6>
 800a11a:	602f      	str	r7, [r5, #0]
 800a11c:	e7b1      	b.n	800a082 <__sflush_r+0x1a>
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	e7ad      	b.n	800a084 <__sflush_r+0x1c>
 800a128:	690f      	ldr	r7, [r1, #16]
 800a12a:	2f00      	cmp	r7, #0
 800a12c:	d0a9      	beq.n	800a082 <__sflush_r+0x1a>
 800a12e:	0793      	lsls	r3, r2, #30
 800a130:	680e      	ldr	r6, [r1, #0]
 800a132:	bf08      	it	eq
 800a134:	694b      	ldreq	r3, [r1, #20]
 800a136:	600f      	str	r7, [r1, #0]
 800a138:	bf18      	it	ne
 800a13a:	2300      	movne	r3, #0
 800a13c:	eba6 0807 	sub.w	r8, r6, r7
 800a140:	608b      	str	r3, [r1, #8]
 800a142:	f1b8 0f00 	cmp.w	r8, #0
 800a146:	dd9c      	ble.n	800a082 <__sflush_r+0x1a>
 800a148:	6a21      	ldr	r1, [r4, #32]
 800a14a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a14c:	4643      	mov	r3, r8
 800a14e:	463a      	mov	r2, r7
 800a150:	4628      	mov	r0, r5
 800a152:	47b0      	blx	r6
 800a154:	2800      	cmp	r0, #0
 800a156:	dc06      	bgt.n	800a166 <__sflush_r+0xfe>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	f04f 30ff 	mov.w	r0, #4294967295
 800a164:	e78e      	b.n	800a084 <__sflush_r+0x1c>
 800a166:	4407      	add	r7, r0
 800a168:	eba8 0800 	sub.w	r8, r8, r0
 800a16c:	e7e9      	b.n	800a142 <__sflush_r+0xda>
 800a16e:	bf00      	nop
 800a170:	20400001 	.word	0x20400001

0800a174 <_fflush_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	690b      	ldr	r3, [r1, #16]
 800a178:	4605      	mov	r5, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b913      	cbnz	r3, 800a184 <_fflush_r+0x10>
 800a17e:	2500      	movs	r5, #0
 800a180:	4628      	mov	r0, r5
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	b118      	cbz	r0, 800a18e <_fflush_r+0x1a>
 800a186:	6983      	ldr	r3, [r0, #24]
 800a188:	b90b      	cbnz	r3, 800a18e <_fflush_r+0x1a>
 800a18a:	f7ff fad3 	bl	8009734 <__sinit>
 800a18e:	4b14      	ldr	r3, [pc, #80]	; (800a1e0 <_fflush_r+0x6c>)
 800a190:	429c      	cmp	r4, r3
 800a192:	d11b      	bne.n	800a1cc <_fflush_r+0x58>
 800a194:	686c      	ldr	r4, [r5, #4]
 800a196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0ef      	beq.n	800a17e <_fflush_r+0xa>
 800a19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1a0:	07d0      	lsls	r0, r2, #31
 800a1a2:	d404      	bmi.n	800a1ae <_fflush_r+0x3a>
 800a1a4:	0599      	lsls	r1, r3, #22
 800a1a6:	d402      	bmi.n	800a1ae <_fflush_r+0x3a>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f7ff fba0 	bl	80098ee <__retarget_lock_acquire_recursive>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	f7ff ff59 	bl	800a068 <__sflush_r>
 800a1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b8:	07da      	lsls	r2, r3, #31
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	d4e0      	bmi.n	800a180 <_fflush_r+0xc>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	059b      	lsls	r3, r3, #22
 800a1c2:	d4dd      	bmi.n	800a180 <_fflush_r+0xc>
 800a1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c6:	f7ff fb93 	bl	80098f0 <__retarget_lock_release_recursive>
 800a1ca:	e7d9      	b.n	800a180 <_fflush_r+0xc>
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <_fflush_r+0x70>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d101      	bne.n	800a1d6 <_fflush_r+0x62>
 800a1d2:	68ac      	ldr	r4, [r5, #8]
 800a1d4:	e7df      	b.n	800a196 <_fflush_r+0x22>
 800a1d6:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <_fflush_r+0x74>)
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	bf08      	it	eq
 800a1dc:	68ec      	ldreq	r4, [r5, #12]
 800a1de:	e7da      	b.n	800a196 <_fflush_r+0x22>
 800a1e0:	0800b930 	.word	0x0800b930
 800a1e4:	0800b950 	.word	0x0800b950
 800a1e8:	0800b910 	.word	0x0800b910

0800a1ec <_lseek_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d07      	ldr	r5, [pc, #28]	; (800a20c <_lseek_r+0x20>)
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	602a      	str	r2, [r5, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f7f8 fd70 	bl	8002ce0 <_lseek>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_lseek_r+0x1e>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_lseek_r+0x1e>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	240081b8 	.word	0x240081b8

0800a210 <__swhatbuf_r>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	460e      	mov	r6, r1
 800a214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a218:	2900      	cmp	r1, #0
 800a21a:	b096      	sub	sp, #88	; 0x58
 800a21c:	4614      	mov	r4, r2
 800a21e:	461d      	mov	r5, r3
 800a220:	da08      	bge.n	800a234 <__swhatbuf_r+0x24>
 800a222:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	602a      	str	r2, [r5, #0]
 800a22a:	061a      	lsls	r2, r3, #24
 800a22c:	d410      	bmi.n	800a250 <__swhatbuf_r+0x40>
 800a22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a232:	e00e      	b.n	800a252 <__swhatbuf_r+0x42>
 800a234:	466a      	mov	r2, sp
 800a236:	f000 fb5d 	bl	800a8f4 <_fstat_r>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	dbf1      	blt.n	800a222 <__swhatbuf_r+0x12>
 800a23e:	9a01      	ldr	r2, [sp, #4]
 800a240:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a244:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a248:	425a      	negs	r2, r3
 800a24a:	415a      	adcs	r2, r3
 800a24c:	602a      	str	r2, [r5, #0]
 800a24e:	e7ee      	b.n	800a22e <__swhatbuf_r+0x1e>
 800a250:	2340      	movs	r3, #64	; 0x40
 800a252:	2000      	movs	r0, #0
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	b016      	add	sp, #88	; 0x58
 800a258:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a25c <__smakebuf_r>:
 800a25c:	898b      	ldrh	r3, [r1, #12]
 800a25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a260:	079d      	lsls	r5, r3, #30
 800a262:	4606      	mov	r6, r0
 800a264:	460c      	mov	r4, r1
 800a266:	d507      	bpl.n	800a278 <__smakebuf_r+0x1c>
 800a268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	6123      	str	r3, [r4, #16]
 800a270:	2301      	movs	r3, #1
 800a272:	6163      	str	r3, [r4, #20]
 800a274:	b002      	add	sp, #8
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	ab01      	add	r3, sp, #4
 800a27a:	466a      	mov	r2, sp
 800a27c:	f7ff ffc8 	bl	800a210 <__swhatbuf_r>
 800a280:	9900      	ldr	r1, [sp, #0]
 800a282:	4605      	mov	r5, r0
 800a284:	4630      	mov	r0, r6
 800a286:	f7ff fbc7 	bl	8009a18 <_malloc_r>
 800a28a:	b948      	cbnz	r0, 800a2a0 <__smakebuf_r+0x44>
 800a28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a290:	059a      	lsls	r2, r3, #22
 800a292:	d4ef      	bmi.n	800a274 <__smakebuf_r+0x18>
 800a294:	f023 0303 	bic.w	r3, r3, #3
 800a298:	f043 0302 	orr.w	r3, r3, #2
 800a29c:	81a3      	strh	r3, [r4, #12]
 800a29e:	e7e3      	b.n	800a268 <__smakebuf_r+0xc>
 800a2a0:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <__smakebuf_r+0x7c>)
 800a2a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	6020      	str	r0, [r4, #0]
 800a2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	9b00      	ldr	r3, [sp, #0]
 800a2b0:	6163      	str	r3, [r4, #20]
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	6120      	str	r0, [r4, #16]
 800a2b6:	b15b      	cbz	r3, 800a2d0 <__smakebuf_r+0x74>
 800a2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f000 fb2b 	bl	800a918 <_isatty_r>
 800a2c2:	b128      	cbz	r0, 800a2d0 <__smakebuf_r+0x74>
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	f023 0303 	bic.w	r3, r3, #3
 800a2ca:	f043 0301 	orr.w	r3, r3, #1
 800a2ce:	81a3      	strh	r3, [r4, #12]
 800a2d0:	89a0      	ldrh	r0, [r4, #12]
 800a2d2:	4305      	orrs	r5, r0
 800a2d4:	81a5      	strh	r5, [r4, #12]
 800a2d6:	e7cd      	b.n	800a274 <__smakebuf_r+0x18>
 800a2d8:	080096cd 	.word	0x080096cd

0800a2dc <__malloc_lock>:
 800a2dc:	4801      	ldr	r0, [pc, #4]	; (800a2e4 <__malloc_lock+0x8>)
 800a2de:	f7ff bb06 	b.w	80098ee <__retarget_lock_acquire_recursive>
 800a2e2:	bf00      	nop
 800a2e4:	240081ac 	.word	0x240081ac

0800a2e8 <__malloc_unlock>:
 800a2e8:	4801      	ldr	r0, [pc, #4]	; (800a2f0 <__malloc_unlock+0x8>)
 800a2ea:	f7ff bb01 	b.w	80098f0 <__retarget_lock_release_recursive>
 800a2ee:	bf00      	nop
 800a2f0:	240081ac 	.word	0x240081ac

0800a2f4 <__sfputc_r>:
 800a2f4:	6893      	ldr	r3, [r2, #8]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	b410      	push	{r4}
 800a2fc:	6093      	str	r3, [r2, #8]
 800a2fe:	da08      	bge.n	800a312 <__sfputc_r+0x1e>
 800a300:	6994      	ldr	r4, [r2, #24]
 800a302:	42a3      	cmp	r3, r4
 800a304:	db01      	blt.n	800a30a <__sfputc_r+0x16>
 800a306:	290a      	cmp	r1, #10
 800a308:	d103      	bne.n	800a312 <__sfputc_r+0x1e>
 800a30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a30e:	f7ff bdc9 	b.w	8009ea4 <__swbuf_r>
 800a312:	6813      	ldr	r3, [r2, #0]
 800a314:	1c58      	adds	r0, r3, #1
 800a316:	6010      	str	r0, [r2, #0]
 800a318:	7019      	strb	r1, [r3, #0]
 800a31a:	4608      	mov	r0, r1
 800a31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <__sfputs_r>:
 800a322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a324:	4606      	mov	r6, r0
 800a326:	460f      	mov	r7, r1
 800a328:	4614      	mov	r4, r2
 800a32a:	18d5      	adds	r5, r2, r3
 800a32c:	42ac      	cmp	r4, r5
 800a32e:	d101      	bne.n	800a334 <__sfputs_r+0x12>
 800a330:	2000      	movs	r0, #0
 800a332:	e007      	b.n	800a344 <__sfputs_r+0x22>
 800a334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a338:	463a      	mov	r2, r7
 800a33a:	4630      	mov	r0, r6
 800a33c:	f7ff ffda 	bl	800a2f4 <__sfputc_r>
 800a340:	1c43      	adds	r3, r0, #1
 800a342:	d1f3      	bne.n	800a32c <__sfputs_r+0xa>
 800a344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a348 <_vfiprintf_r>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	460d      	mov	r5, r1
 800a34e:	b09d      	sub	sp, #116	; 0x74
 800a350:	4614      	mov	r4, r2
 800a352:	4698      	mov	r8, r3
 800a354:	4606      	mov	r6, r0
 800a356:	b118      	cbz	r0, 800a360 <_vfiprintf_r+0x18>
 800a358:	6983      	ldr	r3, [r0, #24]
 800a35a:	b90b      	cbnz	r3, 800a360 <_vfiprintf_r+0x18>
 800a35c:	f7ff f9ea 	bl	8009734 <__sinit>
 800a360:	4b89      	ldr	r3, [pc, #548]	; (800a588 <_vfiprintf_r+0x240>)
 800a362:	429d      	cmp	r5, r3
 800a364:	d11b      	bne.n	800a39e <_vfiprintf_r+0x56>
 800a366:	6875      	ldr	r5, [r6, #4]
 800a368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a36a:	07d9      	lsls	r1, r3, #31
 800a36c:	d405      	bmi.n	800a37a <_vfiprintf_r+0x32>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	059a      	lsls	r2, r3, #22
 800a372:	d402      	bmi.n	800a37a <_vfiprintf_r+0x32>
 800a374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a376:	f7ff faba 	bl	80098ee <__retarget_lock_acquire_recursive>
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	071b      	lsls	r3, r3, #28
 800a37e:	d501      	bpl.n	800a384 <_vfiprintf_r+0x3c>
 800a380:	692b      	ldr	r3, [r5, #16]
 800a382:	b9eb      	cbnz	r3, 800a3c0 <_vfiprintf_r+0x78>
 800a384:	4629      	mov	r1, r5
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff fdf0 	bl	8009f6c <__swsetup_r>
 800a38c:	b1c0      	cbz	r0, 800a3c0 <_vfiprintf_r+0x78>
 800a38e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a390:	07dc      	lsls	r4, r3, #31
 800a392:	d50e      	bpl.n	800a3b2 <_vfiprintf_r+0x6a>
 800a394:	f04f 30ff 	mov.w	r0, #4294967295
 800a398:	b01d      	add	sp, #116	; 0x74
 800a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39e:	4b7b      	ldr	r3, [pc, #492]	; (800a58c <_vfiprintf_r+0x244>)
 800a3a0:	429d      	cmp	r5, r3
 800a3a2:	d101      	bne.n	800a3a8 <_vfiprintf_r+0x60>
 800a3a4:	68b5      	ldr	r5, [r6, #8]
 800a3a6:	e7df      	b.n	800a368 <_vfiprintf_r+0x20>
 800a3a8:	4b79      	ldr	r3, [pc, #484]	; (800a590 <_vfiprintf_r+0x248>)
 800a3aa:	429d      	cmp	r5, r3
 800a3ac:	bf08      	it	eq
 800a3ae:	68f5      	ldreq	r5, [r6, #12]
 800a3b0:	e7da      	b.n	800a368 <_vfiprintf_r+0x20>
 800a3b2:	89ab      	ldrh	r3, [r5, #12]
 800a3b4:	0598      	lsls	r0, r3, #22
 800a3b6:	d4ed      	bmi.n	800a394 <_vfiprintf_r+0x4c>
 800a3b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ba:	f7ff fa99 	bl	80098f0 <__retarget_lock_release_recursive>
 800a3be:	e7e9      	b.n	800a394 <_vfiprintf_r+0x4c>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c4:	2320      	movs	r3, #32
 800a3c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ce:	2330      	movs	r3, #48	; 0x30
 800a3d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a594 <_vfiprintf_r+0x24c>
 800a3d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3d8:	f04f 0901 	mov.w	r9, #1
 800a3dc:	4623      	mov	r3, r4
 800a3de:	469a      	mov	sl, r3
 800a3e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3e4:	b10a      	cbz	r2, 800a3ea <_vfiprintf_r+0xa2>
 800a3e6:	2a25      	cmp	r2, #37	; 0x25
 800a3e8:	d1f9      	bne.n	800a3de <_vfiprintf_r+0x96>
 800a3ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ee:	d00b      	beq.n	800a408 <_vfiprintf_r+0xc0>
 800a3f0:	465b      	mov	r3, fp
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	f7ff ff93 	bl	800a322 <__sfputs_r>
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	f000 80aa 	beq.w	800a556 <_vfiprintf_r+0x20e>
 800a402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a404:	445a      	add	r2, fp
 800a406:	9209      	str	r2, [sp, #36]	; 0x24
 800a408:	f89a 3000 	ldrb.w	r3, [sl]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 80a2 	beq.w	800a556 <_vfiprintf_r+0x20e>
 800a412:	2300      	movs	r3, #0
 800a414:	f04f 32ff 	mov.w	r2, #4294967295
 800a418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a41c:	f10a 0a01 	add.w	sl, sl, #1
 800a420:	9304      	str	r3, [sp, #16]
 800a422:	9307      	str	r3, [sp, #28]
 800a424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a428:	931a      	str	r3, [sp, #104]	; 0x68
 800a42a:	4654      	mov	r4, sl
 800a42c:	2205      	movs	r2, #5
 800a42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a432:	4858      	ldr	r0, [pc, #352]	; (800a594 <_vfiprintf_r+0x24c>)
 800a434:	f7f5 ff5c 	bl	80002f0 <memchr>
 800a438:	9a04      	ldr	r2, [sp, #16]
 800a43a:	b9d8      	cbnz	r0, 800a474 <_vfiprintf_r+0x12c>
 800a43c:	06d1      	lsls	r1, r2, #27
 800a43e:	bf44      	itt	mi
 800a440:	2320      	movmi	r3, #32
 800a442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a446:	0713      	lsls	r3, r2, #28
 800a448:	bf44      	itt	mi
 800a44a:	232b      	movmi	r3, #43	; 0x2b
 800a44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a450:	f89a 3000 	ldrb.w	r3, [sl]
 800a454:	2b2a      	cmp	r3, #42	; 0x2a
 800a456:	d015      	beq.n	800a484 <_vfiprintf_r+0x13c>
 800a458:	9a07      	ldr	r2, [sp, #28]
 800a45a:	4654      	mov	r4, sl
 800a45c:	2000      	movs	r0, #0
 800a45e:	f04f 0c0a 	mov.w	ip, #10
 800a462:	4621      	mov	r1, r4
 800a464:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a468:	3b30      	subs	r3, #48	; 0x30
 800a46a:	2b09      	cmp	r3, #9
 800a46c:	d94e      	bls.n	800a50c <_vfiprintf_r+0x1c4>
 800a46e:	b1b0      	cbz	r0, 800a49e <_vfiprintf_r+0x156>
 800a470:	9207      	str	r2, [sp, #28]
 800a472:	e014      	b.n	800a49e <_vfiprintf_r+0x156>
 800a474:	eba0 0308 	sub.w	r3, r0, r8
 800a478:	fa09 f303 	lsl.w	r3, r9, r3
 800a47c:	4313      	orrs	r3, r2
 800a47e:	9304      	str	r3, [sp, #16]
 800a480:	46a2      	mov	sl, r4
 800a482:	e7d2      	b.n	800a42a <_vfiprintf_r+0xe2>
 800a484:	9b03      	ldr	r3, [sp, #12]
 800a486:	1d19      	adds	r1, r3, #4
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	9103      	str	r1, [sp, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfbb      	ittet	lt
 800a490:	425b      	neglt	r3, r3
 800a492:	f042 0202 	orrlt.w	r2, r2, #2
 800a496:	9307      	strge	r3, [sp, #28]
 800a498:	9307      	strlt	r3, [sp, #28]
 800a49a:	bfb8      	it	lt
 800a49c:	9204      	strlt	r2, [sp, #16]
 800a49e:	7823      	ldrb	r3, [r4, #0]
 800a4a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4a2:	d10c      	bne.n	800a4be <_vfiprintf_r+0x176>
 800a4a4:	7863      	ldrb	r3, [r4, #1]
 800a4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a8:	d135      	bne.n	800a516 <_vfiprintf_r+0x1ce>
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	1d1a      	adds	r2, r3, #4
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	9203      	str	r2, [sp, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	bfb8      	it	lt
 800a4b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ba:	3402      	adds	r4, #2
 800a4bc:	9305      	str	r3, [sp, #20]
 800a4be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5a4 <_vfiprintf_r+0x25c>
 800a4c2:	7821      	ldrb	r1, [r4, #0]
 800a4c4:	2203      	movs	r2, #3
 800a4c6:	4650      	mov	r0, sl
 800a4c8:	f7f5 ff12 	bl	80002f0 <memchr>
 800a4cc:	b140      	cbz	r0, 800a4e0 <_vfiprintf_r+0x198>
 800a4ce:	2340      	movs	r3, #64	; 0x40
 800a4d0:	eba0 000a 	sub.w	r0, r0, sl
 800a4d4:	fa03 f000 	lsl.w	r0, r3, r0
 800a4d8:	9b04      	ldr	r3, [sp, #16]
 800a4da:	4303      	orrs	r3, r0
 800a4dc:	3401      	adds	r4, #1
 800a4de:	9304      	str	r3, [sp, #16]
 800a4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e4:	482c      	ldr	r0, [pc, #176]	; (800a598 <_vfiprintf_r+0x250>)
 800a4e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ea:	2206      	movs	r2, #6
 800a4ec:	f7f5 ff00 	bl	80002f0 <memchr>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d03f      	beq.n	800a574 <_vfiprintf_r+0x22c>
 800a4f4:	4b29      	ldr	r3, [pc, #164]	; (800a59c <_vfiprintf_r+0x254>)
 800a4f6:	bb1b      	cbnz	r3, 800a540 <_vfiprintf_r+0x1f8>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	3307      	adds	r3, #7
 800a4fc:	f023 0307 	bic.w	r3, r3, #7
 800a500:	3308      	adds	r3, #8
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a506:	443b      	add	r3, r7
 800a508:	9309      	str	r3, [sp, #36]	; 0x24
 800a50a:	e767      	b.n	800a3dc <_vfiprintf_r+0x94>
 800a50c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a510:	460c      	mov	r4, r1
 800a512:	2001      	movs	r0, #1
 800a514:	e7a5      	b.n	800a462 <_vfiprintf_r+0x11a>
 800a516:	2300      	movs	r3, #0
 800a518:	3401      	adds	r4, #1
 800a51a:	9305      	str	r3, [sp, #20]
 800a51c:	4619      	mov	r1, r3
 800a51e:	f04f 0c0a 	mov.w	ip, #10
 800a522:	4620      	mov	r0, r4
 800a524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a528:	3a30      	subs	r2, #48	; 0x30
 800a52a:	2a09      	cmp	r2, #9
 800a52c:	d903      	bls.n	800a536 <_vfiprintf_r+0x1ee>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0c5      	beq.n	800a4be <_vfiprintf_r+0x176>
 800a532:	9105      	str	r1, [sp, #20]
 800a534:	e7c3      	b.n	800a4be <_vfiprintf_r+0x176>
 800a536:	fb0c 2101 	mla	r1, ip, r1, r2
 800a53a:	4604      	mov	r4, r0
 800a53c:	2301      	movs	r3, #1
 800a53e:	e7f0      	b.n	800a522 <_vfiprintf_r+0x1da>
 800a540:	ab03      	add	r3, sp, #12
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	462a      	mov	r2, r5
 800a546:	4b16      	ldr	r3, [pc, #88]	; (800a5a0 <_vfiprintf_r+0x258>)
 800a548:	a904      	add	r1, sp, #16
 800a54a:	4630      	mov	r0, r6
 800a54c:	f3af 8000 	nop.w
 800a550:	4607      	mov	r7, r0
 800a552:	1c78      	adds	r0, r7, #1
 800a554:	d1d6      	bne.n	800a504 <_vfiprintf_r+0x1bc>
 800a556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a558:	07d9      	lsls	r1, r3, #31
 800a55a:	d405      	bmi.n	800a568 <_vfiprintf_r+0x220>
 800a55c:	89ab      	ldrh	r3, [r5, #12]
 800a55e:	059a      	lsls	r2, r3, #22
 800a560:	d402      	bmi.n	800a568 <_vfiprintf_r+0x220>
 800a562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a564:	f7ff f9c4 	bl	80098f0 <__retarget_lock_release_recursive>
 800a568:	89ab      	ldrh	r3, [r5, #12]
 800a56a:	065b      	lsls	r3, r3, #25
 800a56c:	f53f af12 	bmi.w	800a394 <_vfiprintf_r+0x4c>
 800a570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a572:	e711      	b.n	800a398 <_vfiprintf_r+0x50>
 800a574:	ab03      	add	r3, sp, #12
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	462a      	mov	r2, r5
 800a57a:	4b09      	ldr	r3, [pc, #36]	; (800a5a0 <_vfiprintf_r+0x258>)
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	4630      	mov	r0, r6
 800a580:	f000 f880 	bl	800a684 <_printf_i>
 800a584:	e7e4      	b.n	800a550 <_vfiprintf_r+0x208>
 800a586:	bf00      	nop
 800a588:	0800b930 	.word	0x0800b930
 800a58c:	0800b950 	.word	0x0800b950
 800a590:	0800b910 	.word	0x0800b910
 800a594:	0800b999 	.word	0x0800b999
 800a598:	0800b9a3 	.word	0x0800b9a3
 800a59c:	00000000 	.word	0x00000000
 800a5a0:	0800a323 	.word	0x0800a323
 800a5a4:	0800b99f 	.word	0x0800b99f

0800a5a8 <_printf_common>:
 800a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	4699      	mov	r9, r3
 800a5b0:	688a      	ldr	r2, [r1, #8]
 800a5b2:	690b      	ldr	r3, [r1, #16]
 800a5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	bfb8      	it	lt
 800a5bc:	4613      	movlt	r3, r2
 800a5be:	6033      	str	r3, [r6, #0]
 800a5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	b10a      	cbz	r2, 800a5ce <_printf_common+0x26>
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	6033      	str	r3, [r6, #0]
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	0699      	lsls	r1, r3, #26
 800a5d2:	bf42      	ittt	mi
 800a5d4:	6833      	ldrmi	r3, [r6, #0]
 800a5d6:	3302      	addmi	r3, #2
 800a5d8:	6033      	strmi	r3, [r6, #0]
 800a5da:	6825      	ldr	r5, [r4, #0]
 800a5dc:	f015 0506 	ands.w	r5, r5, #6
 800a5e0:	d106      	bne.n	800a5f0 <_printf_common+0x48>
 800a5e2:	f104 0a19 	add.w	sl, r4, #25
 800a5e6:	68e3      	ldr	r3, [r4, #12]
 800a5e8:	6832      	ldr	r2, [r6, #0]
 800a5ea:	1a9b      	subs	r3, r3, r2
 800a5ec:	42ab      	cmp	r3, r5
 800a5ee:	dc26      	bgt.n	800a63e <_printf_common+0x96>
 800a5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5f4:	1e13      	subs	r3, r2, #0
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	bf18      	it	ne
 800a5fa:	2301      	movne	r3, #1
 800a5fc:	0692      	lsls	r2, r2, #26
 800a5fe:	d42b      	bmi.n	800a658 <_printf_common+0xb0>
 800a600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a604:	4649      	mov	r1, r9
 800a606:	4638      	mov	r0, r7
 800a608:	47c0      	blx	r8
 800a60a:	3001      	adds	r0, #1
 800a60c:	d01e      	beq.n	800a64c <_printf_common+0xa4>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	68e5      	ldr	r5, [r4, #12]
 800a612:	6832      	ldr	r2, [r6, #0]
 800a614:	f003 0306 	and.w	r3, r3, #6
 800a618:	2b04      	cmp	r3, #4
 800a61a:	bf08      	it	eq
 800a61c:	1aad      	subeq	r5, r5, r2
 800a61e:	68a3      	ldr	r3, [r4, #8]
 800a620:	6922      	ldr	r2, [r4, #16]
 800a622:	bf0c      	ite	eq
 800a624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a628:	2500      	movne	r5, #0
 800a62a:	4293      	cmp	r3, r2
 800a62c:	bfc4      	itt	gt
 800a62e:	1a9b      	subgt	r3, r3, r2
 800a630:	18ed      	addgt	r5, r5, r3
 800a632:	2600      	movs	r6, #0
 800a634:	341a      	adds	r4, #26
 800a636:	42b5      	cmp	r5, r6
 800a638:	d11a      	bne.n	800a670 <_printf_common+0xc8>
 800a63a:	2000      	movs	r0, #0
 800a63c:	e008      	b.n	800a650 <_printf_common+0xa8>
 800a63e:	2301      	movs	r3, #1
 800a640:	4652      	mov	r2, sl
 800a642:	4649      	mov	r1, r9
 800a644:	4638      	mov	r0, r7
 800a646:	47c0      	blx	r8
 800a648:	3001      	adds	r0, #1
 800a64a:	d103      	bne.n	800a654 <_printf_common+0xac>
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a654:	3501      	adds	r5, #1
 800a656:	e7c6      	b.n	800a5e6 <_printf_common+0x3e>
 800a658:	18e1      	adds	r1, r4, r3
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	2030      	movs	r0, #48	; 0x30
 800a65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a662:	4422      	add	r2, r4
 800a664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a66c:	3302      	adds	r3, #2
 800a66e:	e7c7      	b.n	800a600 <_printf_common+0x58>
 800a670:	2301      	movs	r3, #1
 800a672:	4622      	mov	r2, r4
 800a674:	4649      	mov	r1, r9
 800a676:	4638      	mov	r0, r7
 800a678:	47c0      	blx	r8
 800a67a:	3001      	adds	r0, #1
 800a67c:	d0e6      	beq.n	800a64c <_printf_common+0xa4>
 800a67e:	3601      	adds	r6, #1
 800a680:	e7d9      	b.n	800a636 <_printf_common+0x8e>
	...

0800a684 <_printf_i>:
 800a684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a688:	7e0f      	ldrb	r7, [r1, #24]
 800a68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a68c:	2f78      	cmp	r7, #120	; 0x78
 800a68e:	4691      	mov	r9, r2
 800a690:	4680      	mov	r8, r0
 800a692:	460c      	mov	r4, r1
 800a694:	469a      	mov	sl, r3
 800a696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a69a:	d807      	bhi.n	800a6ac <_printf_i+0x28>
 800a69c:	2f62      	cmp	r7, #98	; 0x62
 800a69e:	d80a      	bhi.n	800a6b6 <_printf_i+0x32>
 800a6a0:	2f00      	cmp	r7, #0
 800a6a2:	f000 80d8 	beq.w	800a856 <_printf_i+0x1d2>
 800a6a6:	2f58      	cmp	r7, #88	; 0x58
 800a6a8:	f000 80a3 	beq.w	800a7f2 <_printf_i+0x16e>
 800a6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6b4:	e03a      	b.n	800a72c <_printf_i+0xa8>
 800a6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6ba:	2b15      	cmp	r3, #21
 800a6bc:	d8f6      	bhi.n	800a6ac <_printf_i+0x28>
 800a6be:	a101      	add	r1, pc, #4	; (adr r1, 800a6c4 <_printf_i+0x40>)
 800a6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6c4:	0800a71d 	.word	0x0800a71d
 800a6c8:	0800a731 	.word	0x0800a731
 800a6cc:	0800a6ad 	.word	0x0800a6ad
 800a6d0:	0800a6ad 	.word	0x0800a6ad
 800a6d4:	0800a6ad 	.word	0x0800a6ad
 800a6d8:	0800a6ad 	.word	0x0800a6ad
 800a6dc:	0800a731 	.word	0x0800a731
 800a6e0:	0800a6ad 	.word	0x0800a6ad
 800a6e4:	0800a6ad 	.word	0x0800a6ad
 800a6e8:	0800a6ad 	.word	0x0800a6ad
 800a6ec:	0800a6ad 	.word	0x0800a6ad
 800a6f0:	0800a83d 	.word	0x0800a83d
 800a6f4:	0800a761 	.word	0x0800a761
 800a6f8:	0800a81f 	.word	0x0800a81f
 800a6fc:	0800a6ad 	.word	0x0800a6ad
 800a700:	0800a6ad 	.word	0x0800a6ad
 800a704:	0800a85f 	.word	0x0800a85f
 800a708:	0800a6ad 	.word	0x0800a6ad
 800a70c:	0800a761 	.word	0x0800a761
 800a710:	0800a6ad 	.word	0x0800a6ad
 800a714:	0800a6ad 	.word	0x0800a6ad
 800a718:	0800a827 	.word	0x0800a827
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	1d1a      	adds	r2, r3, #4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	602a      	str	r2, [r5, #0]
 800a724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a72c:	2301      	movs	r3, #1
 800a72e:	e0a3      	b.n	800a878 <_printf_i+0x1f4>
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	6829      	ldr	r1, [r5, #0]
 800a734:	0606      	lsls	r6, r0, #24
 800a736:	f101 0304 	add.w	r3, r1, #4
 800a73a:	d50a      	bpl.n	800a752 <_printf_i+0xce>
 800a73c:	680e      	ldr	r6, [r1, #0]
 800a73e:	602b      	str	r3, [r5, #0]
 800a740:	2e00      	cmp	r6, #0
 800a742:	da03      	bge.n	800a74c <_printf_i+0xc8>
 800a744:	232d      	movs	r3, #45	; 0x2d
 800a746:	4276      	negs	r6, r6
 800a748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a74c:	485e      	ldr	r0, [pc, #376]	; (800a8c8 <_printf_i+0x244>)
 800a74e:	230a      	movs	r3, #10
 800a750:	e019      	b.n	800a786 <_printf_i+0x102>
 800a752:	680e      	ldr	r6, [r1, #0]
 800a754:	602b      	str	r3, [r5, #0]
 800a756:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a75a:	bf18      	it	ne
 800a75c:	b236      	sxthne	r6, r6
 800a75e:	e7ef      	b.n	800a740 <_printf_i+0xbc>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	6820      	ldr	r0, [r4, #0]
 800a764:	1d19      	adds	r1, r3, #4
 800a766:	6029      	str	r1, [r5, #0]
 800a768:	0601      	lsls	r1, r0, #24
 800a76a:	d501      	bpl.n	800a770 <_printf_i+0xec>
 800a76c:	681e      	ldr	r6, [r3, #0]
 800a76e:	e002      	b.n	800a776 <_printf_i+0xf2>
 800a770:	0646      	lsls	r6, r0, #25
 800a772:	d5fb      	bpl.n	800a76c <_printf_i+0xe8>
 800a774:	881e      	ldrh	r6, [r3, #0]
 800a776:	4854      	ldr	r0, [pc, #336]	; (800a8c8 <_printf_i+0x244>)
 800a778:	2f6f      	cmp	r7, #111	; 0x6f
 800a77a:	bf0c      	ite	eq
 800a77c:	2308      	moveq	r3, #8
 800a77e:	230a      	movne	r3, #10
 800a780:	2100      	movs	r1, #0
 800a782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a786:	6865      	ldr	r5, [r4, #4]
 800a788:	60a5      	str	r5, [r4, #8]
 800a78a:	2d00      	cmp	r5, #0
 800a78c:	bfa2      	ittt	ge
 800a78e:	6821      	ldrge	r1, [r4, #0]
 800a790:	f021 0104 	bicge.w	r1, r1, #4
 800a794:	6021      	strge	r1, [r4, #0]
 800a796:	b90e      	cbnz	r6, 800a79c <_printf_i+0x118>
 800a798:	2d00      	cmp	r5, #0
 800a79a:	d04d      	beq.n	800a838 <_printf_i+0x1b4>
 800a79c:	4615      	mov	r5, r2
 800a79e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a7a6:	5dc7      	ldrb	r7, [r0, r7]
 800a7a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7ac:	4637      	mov	r7, r6
 800a7ae:	42bb      	cmp	r3, r7
 800a7b0:	460e      	mov	r6, r1
 800a7b2:	d9f4      	bls.n	800a79e <_printf_i+0x11a>
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d10b      	bne.n	800a7d0 <_printf_i+0x14c>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	07de      	lsls	r6, r3, #31
 800a7bc:	d508      	bpl.n	800a7d0 <_printf_i+0x14c>
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	6861      	ldr	r1, [r4, #4]
 800a7c2:	4299      	cmp	r1, r3
 800a7c4:	bfde      	ittt	le
 800a7c6:	2330      	movle	r3, #48	; 0x30
 800a7c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7d0:	1b52      	subs	r2, r2, r5
 800a7d2:	6122      	str	r2, [r4, #16]
 800a7d4:	f8cd a000 	str.w	sl, [sp]
 800a7d8:	464b      	mov	r3, r9
 800a7da:	aa03      	add	r2, sp, #12
 800a7dc:	4621      	mov	r1, r4
 800a7de:	4640      	mov	r0, r8
 800a7e0:	f7ff fee2 	bl	800a5a8 <_printf_common>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d14c      	bne.n	800a882 <_printf_i+0x1fe>
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ec:	b004      	add	sp, #16
 800a7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f2:	4835      	ldr	r0, [pc, #212]	; (800a8c8 <_printf_i+0x244>)
 800a7f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7f8:	6829      	ldr	r1, [r5, #0]
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a800:	6029      	str	r1, [r5, #0]
 800a802:	061d      	lsls	r5, r3, #24
 800a804:	d514      	bpl.n	800a830 <_printf_i+0x1ac>
 800a806:	07df      	lsls	r7, r3, #31
 800a808:	bf44      	itt	mi
 800a80a:	f043 0320 	orrmi.w	r3, r3, #32
 800a80e:	6023      	strmi	r3, [r4, #0]
 800a810:	b91e      	cbnz	r6, 800a81a <_printf_i+0x196>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	f023 0320 	bic.w	r3, r3, #32
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	2310      	movs	r3, #16
 800a81c:	e7b0      	b.n	800a780 <_printf_i+0xfc>
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	f043 0320 	orr.w	r3, r3, #32
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	2378      	movs	r3, #120	; 0x78
 800a828:	4828      	ldr	r0, [pc, #160]	; (800a8cc <_printf_i+0x248>)
 800a82a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a82e:	e7e3      	b.n	800a7f8 <_printf_i+0x174>
 800a830:	0659      	lsls	r1, r3, #25
 800a832:	bf48      	it	mi
 800a834:	b2b6      	uxthmi	r6, r6
 800a836:	e7e6      	b.n	800a806 <_printf_i+0x182>
 800a838:	4615      	mov	r5, r2
 800a83a:	e7bb      	b.n	800a7b4 <_printf_i+0x130>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	6826      	ldr	r6, [r4, #0]
 800a840:	6961      	ldr	r1, [r4, #20]
 800a842:	1d18      	adds	r0, r3, #4
 800a844:	6028      	str	r0, [r5, #0]
 800a846:	0635      	lsls	r5, r6, #24
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	d501      	bpl.n	800a850 <_printf_i+0x1cc>
 800a84c:	6019      	str	r1, [r3, #0]
 800a84e:	e002      	b.n	800a856 <_printf_i+0x1d2>
 800a850:	0670      	lsls	r0, r6, #25
 800a852:	d5fb      	bpl.n	800a84c <_printf_i+0x1c8>
 800a854:	8019      	strh	r1, [r3, #0]
 800a856:	2300      	movs	r3, #0
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	4615      	mov	r5, r2
 800a85c:	e7ba      	b.n	800a7d4 <_printf_i+0x150>
 800a85e:	682b      	ldr	r3, [r5, #0]
 800a860:	1d1a      	adds	r2, r3, #4
 800a862:	602a      	str	r2, [r5, #0]
 800a864:	681d      	ldr	r5, [r3, #0]
 800a866:	6862      	ldr	r2, [r4, #4]
 800a868:	2100      	movs	r1, #0
 800a86a:	4628      	mov	r0, r5
 800a86c:	f7f5 fd40 	bl	80002f0 <memchr>
 800a870:	b108      	cbz	r0, 800a876 <_printf_i+0x1f2>
 800a872:	1b40      	subs	r0, r0, r5
 800a874:	6060      	str	r0, [r4, #4]
 800a876:	6863      	ldr	r3, [r4, #4]
 800a878:	6123      	str	r3, [r4, #16]
 800a87a:	2300      	movs	r3, #0
 800a87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a880:	e7a8      	b.n	800a7d4 <_printf_i+0x150>
 800a882:	6923      	ldr	r3, [r4, #16]
 800a884:	462a      	mov	r2, r5
 800a886:	4649      	mov	r1, r9
 800a888:	4640      	mov	r0, r8
 800a88a:	47d0      	blx	sl
 800a88c:	3001      	adds	r0, #1
 800a88e:	d0ab      	beq.n	800a7e8 <_printf_i+0x164>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	079b      	lsls	r3, r3, #30
 800a894:	d413      	bmi.n	800a8be <_printf_i+0x23a>
 800a896:	68e0      	ldr	r0, [r4, #12]
 800a898:	9b03      	ldr	r3, [sp, #12]
 800a89a:	4298      	cmp	r0, r3
 800a89c:	bfb8      	it	lt
 800a89e:	4618      	movlt	r0, r3
 800a8a0:	e7a4      	b.n	800a7ec <_printf_i+0x168>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	47d0      	blx	sl
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d09b      	beq.n	800a7e8 <_printf_i+0x164>
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	68e3      	ldr	r3, [r4, #12]
 800a8b4:	9903      	ldr	r1, [sp, #12]
 800a8b6:	1a5b      	subs	r3, r3, r1
 800a8b8:	42ab      	cmp	r3, r5
 800a8ba:	dcf2      	bgt.n	800a8a2 <_printf_i+0x21e>
 800a8bc:	e7eb      	b.n	800a896 <_printf_i+0x212>
 800a8be:	2500      	movs	r5, #0
 800a8c0:	f104 0619 	add.w	r6, r4, #25
 800a8c4:	e7f5      	b.n	800a8b2 <_printf_i+0x22e>
 800a8c6:	bf00      	nop
 800a8c8:	0800b9aa 	.word	0x0800b9aa
 800a8cc:	0800b9bb 	.word	0x0800b9bb

0800a8d0 <_read_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_read_r+0x20>)
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	4608      	mov	r0, r1
 800a8d8:	4611      	mov	r1, r2
 800a8da:	2200      	movs	r2, #0
 800a8dc:	602a      	str	r2, [r5, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f7f7 fc94 	bl	800220c <_read>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d102      	bne.n	800a8ee <_read_r+0x1e>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	b103      	cbz	r3, 800a8ee <_read_r+0x1e>
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	240081b8 	.word	0x240081b8

0800a8f4 <_fstat_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d07      	ldr	r5, [pc, #28]	; (800a914 <_fstat_r+0x20>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	4611      	mov	r1, r2
 800a900:	602b      	str	r3, [r5, #0]
 800a902:	f7f8 f9e5 	bl	8002cd0 <_fstat>
 800a906:	1c43      	adds	r3, r0, #1
 800a908:	d102      	bne.n	800a910 <_fstat_r+0x1c>
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	b103      	cbz	r3, 800a910 <_fstat_r+0x1c>
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	bd38      	pop	{r3, r4, r5, pc}
 800a912:	bf00      	nop
 800a914:	240081b8 	.word	0x240081b8

0800a918 <_isatty_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	; (800a934 <_isatty_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7f8 f9da 	bl	8002cdc <_isatty>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_isatty_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_isatty_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	240081b8 	.word	0x240081b8

0800a938 <_init>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	bf00      	nop
 800a93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93e:	bc08      	pop	{r3}
 800a940:	469e      	mov	lr, r3
 800a942:	4770      	bx	lr

0800a944 <_fini>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	bf00      	nop
 800a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94a:	bc08      	pop	{r3}
 800a94c:	469e      	mov	lr, r3
 800a94e:	4770      	bx	lr
