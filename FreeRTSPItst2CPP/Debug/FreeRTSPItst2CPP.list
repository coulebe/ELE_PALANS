
FreeRTSPItst2CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ffc  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af04  0800af04  0001af04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af0c  0800af0c  0001af0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800af10  0800af10  0001af10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000313c  24000000  0800af14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005078  24003140  0800e050  00023140  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240081b8  0800e050  000281b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002313c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ab1c  00000000  00000000  0002316a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000021cc  00000000  00000000  0002dc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001930  00000000  00000000  0002fe52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000037c0  00000000  00000000  00031782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001902b  00000000  00000000  00034f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001694fc  00000000  00000000  0004df6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b7469  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005d3c  00000000  00000000  001b74bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003407c  00000000  00000000  001bd1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003140 	.word	0x24003140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009ef0 	.word	0x08009ef0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003144 	.word	0x24003144
 80002dc:	08009ef0 	.word	0x08009ef0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <DisplayInit>:
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
}

void DisplayInit(const uint8_t *addr)
{
 8000694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000698:	4606      	mov	r6, r0
{
 800069a:	b083      	sub	sp, #12
    numCommands = *addr++;
 800069c:	f816 3b01 	ldrb.w	r3, [r6], #1
    while(numCommands--) {
 80006a0:	b3db      	cbz	r3, 800071a <DisplayInit+0x86>
 80006a2:	1e5d      	subs	r5, r3, #1
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80006a4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000720 <DisplayInit+0x8c>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80006a8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8000724 <DisplayInit+0x90>
 80006ac:	b2ed      	uxtb	r5, r5
 80006ae:	e00e      	b.n	80006ce <DisplayInit+0x3a>
        if(numArgs) {
            ST7735_WriteData((uint8_t*)addr, numArgs);
            addr += numArgs;
        }

        if(ms) {
 80006b0:	063b      	lsls	r3, r7, #24
            ms = *addr++;
 80006b2:	4626      	mov	r6, r4
        if(ms) {
 80006b4:	d507      	bpl.n	80006c6 <DisplayInit+0x32>
            ms = *addr++;
 80006b6:	f816 0b01 	ldrb.w	r0, [r6], #1
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
 80006ba:	28ff      	cmp	r0, #255	; 0xff
 80006bc:	bf08      	it	eq
 80006be:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80006c2:	f002 fdb3 	bl	800322c <HAL_Delay>
    while(numCommands--) {
 80006c6:	3d01      	subs	r5, #1
 80006c8:	b2ed      	uxtb	r5, r5
 80006ca:	2dff      	cmp	r5, #255	; 0xff
 80006cc:	d025      	beq.n	800071a <DisplayInit+0x86>
 80006ce:	4634      	mov	r4, r6
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80006d0:	4648      	mov	r0, r9
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	f814 3b02 	ldrb.w	r3, [r4], #2
 80006dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80006e0:	f003 f824 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	2201      	movs	r2, #1
 80006ea:	f10d 0107 	add.w	r1, sp, #7
 80006ee:	4640      	mov	r0, r8
 80006f0:	f005 f818 	bl	8005724 <HAL_SPI_Transmit>
        numArgs = *addr++;
 80006f4:	7877      	ldrb	r7, [r6, #1]
        if(numArgs) {
 80006f6:	f017 067f 	ands.w	r6, r7, #127	; 0x7f
 80006fa:	d0d9      	beq.n	80006b0 <DisplayInit+0x1c>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80006fc:	4648      	mov	r0, r9
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000704:	f003 f812 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000708:	4621      	mov	r1, r4
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	4632      	mov	r2, r6
 8000710:	4640      	mov	r0, r8
            addr += numArgs;
 8000712:	4434      	add	r4, r6
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000714:	f005 f806 	bl	8005724 <HAL_SPI_Transmit>
 8000718:	e7ca      	b.n	80006b0 <DisplayInit+0x1c>
        }
    }
}
 800071a:	b003      	add	sp, #12
 800071c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000720:	58021000 	.word	0x58021000
 8000724:	24003628 	.word	0x24003628

08000728 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800072c:	242a      	movs	r4, #42	; 0x2a
 800072e:	b083      	sub	sp, #12
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000730:	4d34      	ldr	r5, [pc, #208]	; (8000804 <ST7735_SetAddressWindow+0xdc>)
{
 8000732:	4691      	mov	r9, r2
 8000734:	f88d 4004 	strb.w	r4, [sp, #4]
 8000738:	4607      	mov	r7, r0
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800073a:	4c33      	ldr	r4, [pc, #204]	; (8000808 <ST7735_SetAddressWindow+0xe0>)
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800073c:	4628      	mov	r0, r5
{
 800073e:	460e      	mov	r6, r1
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 8000746:	4698      	mov	r8, r3
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000748:	f002 fff0 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800074c:	a901      	add	r1, sp, #4
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	2201      	movs	r2, #1
 8000754:	4620      	mov	r0, r4
 8000756:	f004 ffe5 	bl	8005724 <HAL_SPI_Transmit>
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <ST7735_SetAddressWindow+0xe4>)
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800075c:	4628      	mov	r0, r5
 800075e:	2201      	movs	r2, #1
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000760:	7819      	ldrb	r1, [r3, #0]
 8000762:	440f      	add	r7, r1
 8000764:	4449      	add	r1, r9
 8000766:	f88d 7005 	strb.w	r7, [sp, #5]
 800076a:	2700      	movs	r7, #0
 800076c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000774:	f88d 7004 	strb.w	r7, [sp, #4]
 8000778:	f88d 7006 	strb.w	r7, [sp, #6]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800077c:	f002 ffd6 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000780:	2204      	movs	r2, #4
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	4620      	mov	r0, r4
 8000788:	eb0d 0102 	add.w	r1, sp, r2
 800078c:	f004 ffca 	bl	8005724 <HAL_SPI_Transmit>
 8000790:	232b      	movs	r3, #43	; 0x2b
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000792:	463a      	mov	r2, r7
 8000794:	4628      	mov	r0, r5
 8000796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079a:	f88d 3003 	strb.w	r3, [sp, #3]
 800079e:	f002 ffc5 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007a2:	f10d 0103 	add.w	r1, sp, #3
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	2201      	movs	r2, #1
 80007ac:	4620      	mov	r0, r4
 80007ae:	f004 ffb9 	bl	8005724 <HAL_SPI_Transmit>
    ST7735_WriteData(data, sizeof(data));

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
    data[1] = y0 + _ystart;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <ST7735_SetAddressWindow+0xe8>)
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007b4:	4628      	mov	r0, r5
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    data[1] = y0 + _ystart;
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	4416      	add	r6, r2
    data[3] = y1 + _ystart;
 80007be:	4442      	add	r2, r8
 80007c0:	f88d 2007 	strb.w	r2, [sp, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
    data[1] = y0 + _ystart;
 80007c6:	f88d 6005 	strb.w	r6, [sp, #5]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007ca:	f002 ffaf 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007ce:	a901      	add	r1, sp, #4
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	2204      	movs	r2, #4
 80007d6:	4620      	mov	r0, r4
 80007d8:	f004 ffa4 	bl	8005724 <HAL_SPI_Transmit>
 80007dc:	232c      	movs	r3, #44	; 0x2c
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007de:	463a      	mov	r2, r7
 80007e0:	4628      	mov	r0, r5
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	f88d 3003 	strb.w	r3, [sp, #3]
 80007ea:	f002 ff9f 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	2201      	movs	r2, #1
 80007f4:	f10d 0103 	add.w	r1, sp, #3
 80007f8:	4620      	mov	r0, r4
 80007fa:	f004 ff93 	bl	8005724 <HAL_SPI_Transmit>
    ST7735_WriteData(data, sizeof(data));

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
}
 80007fe:	b003      	add	sp, #12
 8000800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000804:	58021000 	.word	0x58021000
 8000808:	24003628 	.word	0x24003628
 800080c:	24003164 	.word	0x24003164
 8000810:	24003165 	.word	0x24003165

08000814 <ST7735_SetRotation>:
void ST7735_SetRotation(uint8_t m)
{

  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 8000814:	f000 0003 	and.w	r0, r0, #3
  uint8_t madctl = 0;
 8000818:	2200      	movs	r2, #0
  rotation = m % 4; // can't be higher than 3
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <ST7735_SetRotation+0xe4>)

  switch (rotation)
 800081c:	2802      	cmp	r0, #2
{
 800081e:	b510      	push	{r4, lr}
 8000820:	b082      	sub	sp, #8
  rotation = m % 4; // can't be higher than 3
 8000822:	7018      	strb	r0, [r3, #0]
  uint8_t madctl = 0;
 8000824:	f88d 2006 	strb.w	r2, [sp, #6]
  switch (rotation)
 8000828:	d041      	beq.n	80008ae <ST7735_SetRotation+0x9a>
 800082a:	2803      	cmp	r0, #3
 800082c:	d060      	beq.n	80008f0 <ST7735_SetRotation+0xdc>
 800082e:	2801      	cmp	r0, #1
//	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
//#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
      _height = ST7735_HEIGHT;
      _width = ST7735_WIDTH;
      _xstart = _colstart;
 8000830:	4c32      	ldr	r4, [pc, #200]	; (80008fc <ST7735_SetRotation+0xe8>)
      _ystart = _rowstart;
 8000832:	4a33      	ldr	r2, [pc, #204]	; (8000900 <ST7735_SetRotation+0xec>)
  switch (rotation)
 8000834:	d04c      	beq.n	80008d0 <ST7735_SetRotation+0xbc>
      _height = ST7735_HEIGHT;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <ST7735_SetRotation+0xf0>)
 8000838:	21a2      	movs	r1, #162	; 0xa2
      _xstart = _colstart;
 800083a:	7824      	ldrb	r4, [r4, #0]
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800083c:	20c0      	movs	r0, #192	; 0xc0
      _height = ST7735_HEIGHT;
 800083e:	8019      	strh	r1, [r3, #0]
      _xstart = _colstart;
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <ST7735_SetRotation+0xf4>)
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000842:	f88d 0006 	strb.w	r0, [sp, #6]
      _width = ST7735_WIDTH;
 8000846:	2052      	movs	r0, #82	; 0x52
      _xstart = _colstart;
 8000848:	701c      	strb	r4, [r3, #0]
      _ystart = _rowstart;
 800084a:	7812      	ldrb	r2, [r2, #0]
      _width = ST7735_WIDTH;
 800084c:	492f      	ldr	r1, [pc, #188]	; (800090c <ST7735_SetRotation+0xf8>)
      _ystart = _rowstart;
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <ST7735_SetRotation+0xfc>)
      _width = ST7735_WIDTH;
 8000850:	8008      	strh	r0, [r1, #0]
      _ystart = _rowstart;
 8000852:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	482e      	ldr	r0, [pc, #184]	; (8000914 <ST7735_SetRotation+0x100>)
 800085c:	f002 ff66 	bl	800372c <HAL_GPIO_WritePin>
 8000860:	2336      	movs	r3, #54	; 0x36
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <ST7735_SetRotation+0x100>)
 800086a:	f88d 3007 	strb.w	r3, [sp, #7]
 800086e:	f002 ff5d 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	f10d 0107 	add.w	r1, sp, #7
 800087a:	2201      	movs	r2, #1
 800087c:	4826      	ldr	r0, [pc, #152]	; (8000918 <ST7735_SetRotation+0x104>)
 800087e:	f004 ff51 	bl	8005724 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <ST7735_SetRotation+0x100>)
 800088a:	f002 ff4f 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800088e:	f10d 0106 	add.w	r1, sp, #6
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	2201      	movs	r2, #1
 8000898:	481f      	ldr	r0, [pc, #124]	; (8000918 <ST7735_SetRotation+0x104>)
 800089a:	f004 ff43 	bl	8005724 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a4:	481b      	ldr	r0, [pc, #108]	; (8000914 <ST7735_SetRotation+0x100>)
 80008a6:	f002 ff41 	bl	800372c <HAL_GPIO_WritePin>
  }
  ST7735_Select();
  ST7735_WriteCommand(ST7735_MADCTL);
  ST7735_WriteData(&madctl,1);
  ST7735_Unselect();
}
 80008aa:	b002      	add	sp, #8
 80008ac:	bd10      	pop	{r4, pc}
      _height = ST7735_HEIGHT;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <ST7735_SetRotation+0xf0>)
 80008b0:	20a2      	movs	r0, #162	; 0xa2
    _xstart = _colstart;
 80008b2:	4c12      	ldr	r4, [pc, #72]	; (80008fc <ST7735_SetRotation+0xe8>)
      _height = ST7735_HEIGHT;
 80008b4:	8018      	strh	r0, [r3, #0]
      _width = ST7735_WIDTH;
 80008b6:	2052      	movs	r0, #82	; 0x52
    _xstart = _colstart;
 80008b8:	f894 c000 	ldrb.w	ip, [r4]
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <ST7735_SetRotation+0xf4>)
    _ystart = _rowstart;
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <ST7735_SetRotation+0xec>)
    _xstart = _colstart;
 80008c0:	f883 c000 	strb.w	ip, [r3]
    _ystart = _rowstart;
 80008c4:	7812      	ldrb	r2, [r2, #0]
      _width = ST7735_WIDTH;
 80008c6:	4911      	ldr	r1, [pc, #68]	; (800090c <ST7735_SetRotation+0xf8>)
    _ystart = _rowstart;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <ST7735_SetRotation+0xfc>)
      _width = ST7735_WIDTH;
 80008ca:	8008      	strh	r0, [r1, #0]
    _ystart = _rowstart;
 80008cc:	701a      	strb	r2, [r3, #0]
    break;
 80008ce:	e7c1      	b.n	8000854 <ST7735_SetRotation+0x40>
      _width = ST7735_HEIGHT;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <ST7735_SetRotation+0xf8>)
 80008d2:	21a2      	movs	r1, #162	; 0xa2
    _ystart = _colstart;
 80008d4:	7824      	ldrb	r4, [r4, #0]
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80008d6:	20a0      	movs	r0, #160	; 0xa0
      _width = ST7735_HEIGHT;
 80008d8:	8019      	strh	r1, [r3, #0]
    _ystart = _colstart;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <ST7735_SetRotation+0xfc>)
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80008dc:	f88d 0006 	strb.w	r0, [sp, #6]
      _height = ST7735_WIDTH;
 80008e0:	2052      	movs	r0, #82	; 0x52
    _ystart = _colstart;
 80008e2:	701c      	strb	r4, [r3, #0]
    _xstart = _rowstart;
 80008e4:	7812      	ldrb	r2, [r2, #0]
      _height = ST7735_WIDTH;
 80008e6:	4907      	ldr	r1, [pc, #28]	; (8000904 <ST7735_SetRotation+0xf0>)
    _xstart = _rowstart;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <ST7735_SetRotation+0xf4>)
      _height = ST7735_WIDTH;
 80008ea:	8008      	strh	r0, [r1, #0]
    _xstart = _rowstart;
 80008ec:	701a      	strb	r2, [r3, #0]
    break;
 80008ee:	e7b1      	b.n	8000854 <ST7735_SetRotation+0x40>
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
 80008f0:	2368      	movs	r3, #104	; 0x68
 80008f2:	f88d 3006 	strb.w	r3, [sp, #6]
    break;
 80008f6:	e7ad      	b.n	8000854 <ST7735_SetRotation+0x40>
 80008f8:	240032ac 	.word	0x240032ac
 80008fc:	2400315c 	.word	0x2400315c
 8000900:	24003160 	.word	0x24003160
 8000904:	2400315e 	.word	0x2400315e
 8000908:	24003164 	.word	0x24003164
 800090c:	24003162 	.word	0x24003162
 8000910:	24003165 	.word	0x24003165
 8000914:	58021000 	.word	0x58021000
 8000918:	24003628 	.word	0x24003628

0800091c <ST7735_Init>:
{
 800091c:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800091e:	4d11      	ldr	r5, [pc, #68]	; (8000964 <ST7735_Init+0x48>)
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 6100 	mov.w	r1, #2048	; 0x800
{
 8000926:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000928:	4628      	mov	r0, r5
 800092a:	f002 feff 	bl	800372c <HAL_GPIO_WritePin>
    DisplayInit(init_cmds1);
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <ST7735_Init+0x4c>)
 8000930:	f7ff feb0 	bl	8000694 <DisplayInit>
    DisplayInit(init_cmds2);
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <ST7735_Init+0x50>)
 8000936:	f7ff fead 	bl	8000694 <DisplayInit>
    DisplayInit(init_cmds3);
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <ST7735_Init+0x54>)
 800093c:	f7ff feaa 	bl	8000694 <DisplayInit>
    _colstart = 24;
 8000940:	2118      	movs	r1, #24
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <ST7735_Init+0x58>)
    ST7735_SetRotation (rotation);
 8000944:	4620      	mov	r0, r4
    _rowstart = 0;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <ST7735_Init+0x5c>)
    _colstart = 24;
 8000948:	7011      	strb	r1, [r2, #0]
    _rowstart = 0;
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
    ST7735_SetRotation (rotation);
 800094e:	f7ff ff61 	bl	8000814 <ST7735_SetRotation>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000952:	4628      	mov	r0, r5
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 800095a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800095e:	f002 bee5 	b.w	800372c <HAL_GPIO_WritePin>
 8000962:	bf00      	nop
 8000964:	58021000 	.word	0x58021000
 8000968:	08009f48 	.word	0x08009f48
 800096c:	08009f80 	.word	0x08009f80
 8000970:	08009f90 	.word	0x08009f90
 8000974:	2400315c 	.word	0x2400315c
 8000978:	24003160 	.word	0x24003160

0800097c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800097c:	b082      	sub	sp, #8
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800097e:	b2c0      	uxtb	r0, r0
 8000980:	b2c9      	uxtb	r1, r1
void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000986:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800098a:	b087      	sub	sp, #28
 800098c:	b2df      	uxtb	r7, r3
 800098e:	4614      	mov	r4, r2
 8000990:	9311      	str	r3, [sp, #68]	; 0x44
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000992:	1e6b      	subs	r3, r5, #1
 8000994:	1e7a      	subs	r2, r7, #1
void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000996:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800099a:	440b      	add	r3, r1
void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800099c:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009a0:	4402      	add	r2, r0
 80009a2:	9503      	str	r5, [sp, #12]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	f7ff febe 	bl	8000728 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d042      	beq.n	8000a36 <ST7735_WriteChar+0xba>
        b = font.data[(ch - 32) * font.height + i];
 80009b0:	3c20      	subs	r4, #32
        for(j = 0; j < font.width; j++) {
            if((b << j) & 0x8000)  {
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009b2:	ea4f 2319 	mov.w	r3, r9, lsr #8
                ST7735_WriteData(data, sizeof(data));
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80009b6:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
        b = font.data[(ch - 32) * font.height + i];
 80009ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80009bc:	fb05 f404 	mul.w	r4, r5, r4
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d037      	beq.n	8000a36 <ST7735_WriteChar+0xba>
 80009c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80009ca:	4d1d      	ldr	r5, [pc, #116]	; (8000a40 <ST7735_WriteChar+0xc4>)
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80009cc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000a44 <ST7735_WriteChar+0xc8>
 80009d0:	4423      	add	r3, r4
 80009d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80009d6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < font.height; i++) {
 80009d8:	2300      	movs	r3, #0
 80009da:	9301      	str	r3, [sp, #4]
        b = font.data[(ch - 32) * font.height + i];
 80009dc:	9b02      	ldr	r3, [sp, #8]
        for(j = 0; j < font.width; j++) {
 80009de:	2400      	movs	r4, #0
        b = font.data[(ch - 32) * font.height + i];
 80009e0:	f833 6f02 	ldrh.w	r6, [r3, #2]!
 80009e4:	9302      	str	r3, [sp, #8]
 80009e6:	e010      	b.n	8000a0a <ST7735_WriteChar+0x8e>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009e8:	9b00      	ldr	r3, [sp, #0]
 80009ea:	f88d 9015 	strb.w	r9, [sp, #21]
 80009ee:	f88d 3014 	strb.w	r3, [sp, #20]
        for(j = 0; j < font.width; j++) {
 80009f2:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80009f4:	f002 fe9a 	bl	800372c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	2202      	movs	r2, #2
 80009fe:	a905      	add	r1, sp, #20
 8000a00:	4640      	mov	r0, r8
 8000a02:	f004 fe8f 	bl	8005724 <HAL_SPI_Transmit>
        for(j = 0; j < font.width; j++) {
 8000a06:	42bc      	cmp	r4, r7
 8000a08:	d00f      	beq.n	8000a2a <ST7735_WriteChar+0xae>
            if((b << j) & 0x8000)  {
 8000a0a:	fa06 f304 	lsl.w	r3, r6, r4
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a0e:	4628      	mov	r0, r5
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
            if((b << j) & 0x8000)  {
 8000a16:	041b      	lsls	r3, r3, #16
 8000a18:	d4e6      	bmi.n	80009e8 <ST7735_WriteChar+0x6c>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a20:	f88d b014 	strb.w	fp, [sp, #20]
 8000a24:	f88d a015 	strb.w	sl, [sp, #21]
 8000a28:	e7e3      	b.n	80009f2 <ST7735_WriteChar+0x76>
    for(i = 0; i < font.height; i++) {
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	9a03      	ldr	r2, [sp, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4293      	cmp	r3, r2
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	d1d2      	bne.n	80009dc <ST7735_WriteChar+0x60>
                ST7735_WriteData(data, sizeof(data));
            }
        }
    }
}
 8000a36:	b007      	add	sp, #28
 8000a38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a3c:	b002      	add	sp, #8
 8000a3e:	4770      	bx	lr
 8000a40:	58021000 	.word	0x58021000
 8000a44:	24003628 	.word	0x24003628

08000a48 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a48:	b082      	sub	sp, #8
 8000a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4e:	4690      	mov	r8, r2
 8000a50:	b087      	sub	sp, #28
 8000a52:	4604      	mov	r4, r0
 8000a54:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5c:	4823      	ldr	r0, [pc, #140]	; (8000aec <ST7735_WriteString+0xa4>)
 8000a5e:	b2df      	uxtb	r7, r3
 8000a60:	f3c3 2607 	ubfx	r6, r3, #8, #8
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a64:	9311      	str	r3, [sp, #68]	; 0x44
 8000a66:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 8000a6a:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000a6e:	f002 fe5d 	bl	800372c <HAL_GPIO_WritePin>
    ST7735_Select();

    while(*str) {
 8000a72:	f898 3000 	ldrb.w	r3, [r8]
 8000a76:	b37b      	cbz	r3, 8000ad8 <ST7735_WriteString+0x90>
        if(x + font.width >= _width) {
            x = 0;
            y += font.height;
            if(y + font.height >= _height) {
 8000a78:	4652      	mov	r2, sl
 8000a7a:	f108 0801 	add.w	r8, r8, #1
 8000a7e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8000af4 <ST7735_WriteString+0xac>
 8000a82:	46aa      	mov	sl, r5
 8000a84:	9205      	str	r2, [sp, #20]
        if(x + font.width >= _width) {
 8000a86:	19e1      	adds	r1, r4, r7
 8000a88:	f9b9 0000 	ldrsh.w	r0, [r9]
            y += font.height;
 8000a8c:	eb0a 0c06 	add.w	ip, sl, r6
                str++;
                continue;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000a90:	461a      	mov	r2, r3
        if(x + font.width >= _width) {
 8000a92:	4281      	cmp	r1, r0
 8000a94:	db0c      	blt.n	8000ab0 <ST7735_WriteString+0x68>
            if(y + font.height >= _height) {
 8000a96:	4916      	ldr	r1, [pc, #88]	; (8000af0 <ST7735_WriteString+0xa8>)
            y += font.height;
 8000a98:	fa1f fa8c 	uxth.w	sl, ip
            x = 0;
 8000a9c:	2400      	movs	r4, #0
            if(y + font.height >= _height) {
 8000a9e:	f9b1 0000 	ldrsh.w	r0, [r1]
 8000aa2:	eb0a 0c06 	add.w	ip, sl, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	4584      	cmp	ip, r0
 8000aaa:	da15      	bge.n	8000ad8 <ST7735_WriteString+0x90>
            if(*str == ' ') {
 8000aac:	2b20      	cmp	r3, #32
 8000aae:	d00f      	beq.n	8000ad0 <ST7735_WriteString+0x88>
        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ab0:	9d05      	ldr	r5, [sp, #20]
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
        x += font.width;
 8000ab8:	b28c      	uxth	r4, r1
        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000aba:	9501      	str	r5, [sp, #4]
 8000abc:	4651      	mov	r1, sl
 8000abe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000ac0:	f88d 6045 	strb.w	r6, [sp, #69]	; 0x45
 8000ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ac6:	f8cd b008 	str.w	fp, [sp, #8]
 8000aca:	9500      	str	r5, [sp, #0]
 8000acc:	f7ff ff56 	bl	800097c <ST7735_WriteChar>
    while(*str) {
 8000ad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1d6      	bne.n	8000a86 <ST7735_WriteString+0x3e>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <ST7735_WriteString+0xa4>)
        str++;
    }

    ST7735_Unselect();
}
 8000ae0:	b007      	add	sp, #28
 8000ae2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae6:	b002      	add	sp, #8
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ae8:	f002 be20 	b.w	800372c <HAL_GPIO_WritePin>
 8000aec:	58021000 	.word	0x58021000
 8000af0:	2400315e 	.word	0x2400315e
 8000af4:	24003162 	.word	0x24003162

08000af8 <ST7735_FillRectangle>:

uint16_t linearray[ST7735_HEIGHT];

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000afc:	461c      	mov	r4, r3
    if((x >= _width) || (y >= _height)) return;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <ST7735_FillRectangle+0xa4>)
{
 8000b00:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    if((x >= _width) || (y >= _height)) return;
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	da44      	bge.n	8000b96 <ST7735_FillRectangle+0x9e>
 8000b0c:	4617      	mov	r7, r2
 8000b0e:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <ST7735_FillRectangle+0xa8>)
 8000b10:	460e      	mov	r6, r1
 8000b12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b16:	4291      	cmp	r1, r2
 8000b18:	da3d      	bge.n	8000b96 <ST7735_FillRectangle+0x9e>
    if((x + w - 1) >= _width) w = _width - x;
 8000b1a:	19c1      	adds	r1, r0, r7
 8000b1c:	4605      	mov	r5, r0
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	da01      	bge.n	8000b26 <ST7735_FillRectangle+0x2e>
 8000b22:	1a1b      	subs	r3, r3, r0
 8000b24:	b29f      	uxth	r7, r3
    if((y + h - 1) >= _height) h = _height - y;
 8000b26:	19a3      	adds	r3, r4, r6
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	da01      	bge.n	8000b30 <ST7735_FillRectangle+0x38>
 8000b2c:	1b92      	subs	r2, r2, r6
 8000b2e:	b294      	uxth	r4, r2
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <ST7735_FillRectangle+0xac>)
 8000b38:	f002 fdf8 	bl	800372c <HAL_GPIO_WritePin>

    ST7735_Select();
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b3c:	b2e8      	uxtb	r0, r5
 8000b3e:	b2f1      	uxtb	r1, r6
 8000b40:	1e42      	subs	r2, r0, #1


    uint32_t color2=color;
    color2<=16;
    color2|=color;
    memset(linearray, color2, w*2);
 8000b42:	007d      	lsls	r5, r7, #1
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b44:	1e4b      	subs	r3, r1, #1
 8000b46:	443a      	add	r2, r7
 8000b48:	4423      	add	r3, r4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f7ff fdeb 	bl	8000728 <ST7735_SetAddressWindow>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <ST7735_FillRectangle+0xac>)
 8000b5a:	f002 fde7 	bl	800372c <HAL_GPIO_WritePin>
    memset(linearray, color2, w*2);
 8000b5e:	462a      	mov	r2, r5
 8000b60:	4641      	mov	r1, r8
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <ST7735_FillRectangle+0xb0>)
 8000b64:	f008 fa79 	bl	800905a <memset>

    for(y = h; y > 0; y--)
 8000b68:	b16c      	cbz	r4, 8000b86 <ST7735_FillRectangle+0x8e>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, (uint8_t*)&linearray, w*2, HAL_MAX_DELAY);
 8000b6a:	b2ad      	uxth	r5, r5
 8000b6c:	4f0e      	ldr	r7, [pc, #56]	; (8000ba8 <ST7735_FillRectangle+0xb0>)
 8000b6e:	4e0f      	ldr	r6, [pc, #60]	; (8000bac <ST7735_FillRectangle+0xb4>)
    for(y = h; y > 0; y--)
 8000b70:	3c01      	subs	r4, #1
    HAL_SPI_Transmit(&ST7735_SPI_PORT, (uint8_t*)&linearray, w*2, HAL_MAX_DELAY);
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	462a      	mov	r2, r5
 8000b78:	4639      	mov	r1, r7
    for(y = h; y > 0; y--)
 8000b7a:	b2a4      	uxth	r4, r4
    HAL_SPI_Transmit(&ST7735_SPI_PORT, (uint8_t*)&linearray, w*2, HAL_MAX_DELAY);
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f004 fdd1 	bl	8005724 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d1f4      	bne.n	8000b70 <ST7735_FillRectangle+0x78>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <ST7735_FillRectangle+0xac>)

    ST7735_Unselect();
}
 8000b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000b92:	f002 bdcb 	b.w	800372c <HAL_GPIO_WritePin>
}
 8000b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24003162 	.word	0x24003162
 8000ba0:	2400315e 	.word	0x2400315e
 8000ba4:	58021000 	.word	0x58021000
 8000ba8:	24003168 	.word	0x24003168
 8000bac:	24003628 	.word	0x24003628

08000bb0 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb4:	461f      	mov	r7, r3
    if((x >= _width) || (y >= _height)) return;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <ST7735_DrawImage+0x84>)
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000bb8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if((x >= _width) || (y >= _height)) return;
 8000bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	da0d      	bge.n	8000be0 <ST7735_DrawImage+0x30>
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <ST7735_DrawImage+0x88>)
 8000bc8:	460e      	mov	r6, r1
 8000bca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bce:	4291      	cmp	r1, r2
 8000bd0:	da06      	bge.n	8000be0 <ST7735_DrawImage+0x30>
    if((x + w - 1) >= _width) return;
 8000bd2:	1829      	adds	r1, r5, r0
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	db02      	blt.n	8000be0 <ST7735_DrawImage+0x30>
    if((y + h - 1) >= _height) return;
 8000bda:	19bb      	adds	r3, r7, r6
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	da01      	bge.n	8000be4 <ST7735_DrawImage+0x34>

    ST7735_Select();
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ST7735_Unselect();
}
 8000be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <ST7735_DrawImage+0x8c>)
 8000bec:	f002 fd9e 	bl	800372c <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bf0:	1e7b      	subs	r3, r7, #1
 8000bf2:	b2e0      	uxtb	r0, r4
 8000bf4:	1e6a      	subs	r2, r5, #1
 8000bf6:	b2f1      	uxtb	r1, r6
 8000bf8:	4402      	add	r2, r0
 8000bfa:	440b      	add	r3, r1
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f7ff fd92 	bl	8000728 <ST7735_SetAddressWindow>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <ST7735_DrawImage+0x8c>)
 8000c0c:	f002 fd8e 	bl	800372c <HAL_GPIO_WritePin>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000c10:	fb07 f205 	mul.w	r2, r7, r5
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000c14:	4641      	mov	r1, r8
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000c1a:	0052      	lsls	r2, r2, #1
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <ST7735_DrawImage+0x90>)
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	f004 fd80 	bl	8005724 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2a:	4804      	ldr	r0, [pc, #16]	; (8000c3c <ST7735_DrawImage+0x8c>)
}
 8000c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000c30:	f002 bd7c 	b.w	800372c <HAL_GPIO_WritePin>
 8000c34:	24003162 	.word	0x24003162
 8000c38:	2400315e 	.word	0x2400315e
 8000c3c:	58021000 	.word	0x58021000
 8000c40:	24003628 	.word	0x24003628

08000c44 <alt_main>:
#include "main.h"



int alt_main()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	/* Initialization */

//	while (1)
//	{
		/* Super loop */
		printf( "Hello World CPP\n\r") ;
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <alt_main+0x10>)
 8000c4a:	f008 faa3 	bl	8009194 <iprintf>



//	}
	return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08009f08 	.word	0x08009f08

08000c58 <isCalibratingMode>:
	return calibration_mode>= CALIB_INIT && calibration_mode <=CALIB_END;
}

uint8_t isCalibratingMode(uint8_t mode)
{
	return mode>= CALIB_INIT && mode <=CALIB_END;
 8000c58:	3801      	subs	r0, #1
}
 8000c5a:	280a      	cmp	r0, #10
 8000c5c:	bf8c      	ite	hi
 8000c5e:	2000      	movhi	r0, #0
 8000c60:	2001      	movls	r0, #1
 8000c62:	4770      	bx	lr

08000c64 <startDemo>:
	calibration_mode=CALIB_UNCAL;
}

void startDemo()
{
	calibration_mode = CALIB_DEMO_BEGIN;
 8000c64:	4b01      	ldr	r3, [pc, #4]	; (8000c6c <startDemo+0x8>)
 8000c66:	220e      	movs	r2, #14
 8000c68:	701a      	strb	r2, [r3, #0]
}
 8000c6a:	4770      	bx	lr
 8000c6c:	240032af 	.word	0x240032af

08000c70 <stopDemo>:

void stopDemo()
{
	calibration_mode=CALIB_UNCAL;
 8000c70:	4b01      	ldr	r3, [pc, #4]	; (8000c78 <stopDemo+0x8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	4770      	bx	lr
 8000c78:	240032af 	.word	0x240032af

08000c7c <computePD>:
		 17,
		  7
};

void computePD(int32_t* pcounter, int32_t* pvelocity, int32_t* pwm_out)
{
 8000c7c:	b430      	push	{r4, r5}
	++pdcounter;
 8000c7e:	4c4e      	ldr	r4, [pc, #312]	; (8000db8 <computePD+0x13c>)
	{
		int8_t noise= somenoise[pdcounter%24];
//		float v_x =  ( (float)(pvelocity[0] ) + (float)noise*.0005f)*( PPR_TO_DISTANCE_X/ mydt ); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);

		float velocity_closer_to_zero = (float)pvelocity[0] ;
		if(velocity_closer_to_zero>1.f)velocity_closer_to_zero-=.5f;
 8000c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	++pdcounter;
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	6023      	str	r3, [r4, #0]
		float velocity_closer_to_zero = (float)pvelocity[0] ;
 8000c8a:	edd1 7a00 	vldr	s15, [r1]
 8000c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if(velocity_closer_to_zero>1.f)velocity_closer_to_zero-=.5f;
 8000c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9a:	dd7e      	ble.n	8000d9a <computePD+0x11e>
 8000c9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ca0:	ee37 7ac7 	vsub.f32	s14, s15, s14
		else if(velocity_closer_to_zero<-1.f)velocity_closer_to_zero+=.5f;
		else velocity_closer_to_zero=0;

		float v_x =  ( (float)(velocity_closer_to_zero) )*( PPR_TO_DISTANCE_X/ mydt ); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000ca4:	4d45      	ldr	r5, [pc, #276]	; (8000dbc <computePD+0x140>)
 8000ca6:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8000dc0 <computePD+0x144>
 8000caa:	ed95 5a00 	vldr	s10, [r5]
		float p_x =   ( (float)(pcounter[0] ))*PPR_TO_DISTANCE_X; //((float)mycounter[0]) / PPM_X;

		float target_p_x = target[0];
 8000cae:	4c45      	ldr	r4, [pc, #276]	; (8000dc4 <computePD+0x148>)
		float v_x =  ( (float)(velocity_closer_to_zero) )*( PPR_TO_DISTANCE_X/ mydt ); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000cb0:	eec6 6a05 	vdiv.f32	s13, s12, s10

		float error_P = target_p_x - p_x;

		float error_acceptable = 0.02f;// + 0.001f*(pdcounter%8);

		if(error_P>error_acceptable)error_P-=error_acceptable;	//Allow 1cm error.
 8000cb4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8000dc8 <computePD+0x14c>
		float target_p_x = target[0];
 8000cb8:	edd4 7a00 	vldr	s15, [r4]
		float target_v_x = target_v[0];
 8000cbc:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <computePD+0x150>)
		float v_x =  ( (float)(velocity_closer_to_zero) )*( PPR_TO_DISTANCE_X/ mydt ); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000cbe:	ee66 6a87 	vmul.f32	s13, s13, s14
		float p_x =   ( (float)(pcounter[0] ))*PPR_TO_DISTANCE_X; //((float)mycounter[0]) / PPM_X;
 8000cc2:	ed90 7a00 	vldr	s14, [r0]
 8000cc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		float error_P = target_p_x - p_x;
 8000cca:	eee7 7a46 	vfms.f32	s15, s14, s12
		float target_v_x = target_v[0];
 8000cce:	ed93 7a00 	vldr	s14, [r3]
		if(error_P>error_acceptable)error_P-=error_acceptable;	//Allow 1cm error.
 8000cd2:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cda:	dd4d      	ble.n	8000d78 <computePD+0xfc>
 8000cdc:	ee77 7ae5 	vsub.f32	s15, s15, s11
		else error_P=0;

		float error_D = target_v_x - v_x;
		//total_error_I += error_P*dt;

		float pwm_output = error_P*(K_P) /* + total_error_I* (K_I)*/ + error_D*(K_D);
 8000ce0:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8000dd0 <computePD+0x154>
 8000ce4:	ee67 7a86 	vmul.f32	s15, s15, s12
		float error_D = target_v_x - v_x;
 8000ce8:	ee37 7a66 	vsub.f32	s14, s14, s13
//		if(vPWMX_out<-12000)vPWMX_out=-12000;

 		pwm_out[0]=vPWMX_out;
	}
	{
		float v_y =  ( (float)pvelocity[1])*( PPR_TO_DISTANCE_Y/ mydt); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000cec:	ed95 4a00 	vldr	s8, [r5]
		float pwm_output = error_P*(K_P) /* + total_error_I* (K_I)*/ + error_D*(K_D);
 8000cf0:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
		float p_y =   ( (float)pcounter[1])*PPR_TO_DISTANCE_Y; //((float)mycounter[0]) / PPM_X;

		float target_p_y = target[1];
		float target_v_y = target_v[1];

		float error_P = target_p_y - p_y;
 8000cf4:	eddf 4a37 	vldr	s9, [pc, #220]	; 8000dd4 <computePD+0x158>
 8000cf8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		int32_t vPWMX_out = (int32_t)(pwm_output*12000);
 8000cfc:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8000dd8 <computePD+0x15c>
		float v_y =  ( (float)pvelocity[1])*( PPR_TO_DISTANCE_Y/ mydt); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000d00:	ee84 2a84 	vdiv.f32	s4, s9, s8
		float target_p_y = target[1];
 8000d04:	edd4 6a01 	vldr	s13, [r4, #4]
		float error_D = target_v_y - v_y;
		//total_error_I += error_P*dt;

		float pwm_output = error_P*(K_P_Y) /* + total_error_I* (K_I)*/ + error_D*(K_D_Y);
 8000d08:	eddf 2a34 	vldr	s5, [pc, #208]	; 8000ddc <computePD+0x160>
 8000d0c:	ed9f 3a34 	vldr	s6, [pc, #208]	; 8000de0 <computePD+0x164>

		if(pwm_output>.8f)pwm_output=.8f;
		if(pwm_output<-.8f)pwm_output=-.8f;


		int32_t vPWMY_out = (int32_t)(pwm_output*12000);
 8000d10:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8000de4 <computePD+0x168>
		float pwm_output = error_P*(K_P) /* + total_error_I* (K_I)*/ + error_D*(K_D);
 8000d14:	eee7 7a23 	vfma.f32	s15, s14, s7
		float target_v_y = target_v[1];
 8000d18:	ed93 7a01 	vldr	s14, [r3, #4]
		int32_t vPWMX_out = (int32_t)(pwm_output*12000);
 8000d1c:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8000d20:	eddf 3a31 	vldr	s7, [pc, #196]	; 8000de8 <computePD+0x16c>
//		if(vPWMY_out>8000)vPWMY_out=8000;
//		if(vPWMY_out<-8000)vPWMY_out=-8000;
		pwm_out[1] = vPWMY_out;
	}

}
 8000d24:	bc30      	pop	{r4, r5}
 8000d26:	fec7 7ae5 	vminnm.f32	s15, s15, s11
		int32_t vPWMX_out = (int32_t)(pwm_output*12000);
 8000d2a:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
 8000d2e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8000d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d36:	edc2 7a00 	vstr	s15, [r2]
		float error_D = target_v_y - v_y;
 8000d3a:	eef0 7a47 	vmov.f32	s15, s14
		float v_y =  ( (float)pvelocity[1])*( PPR_TO_DISTANCE_Y/ mydt); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000d3e:	edd1 5a01 	vldr	s11, [r1, #4]
		float error_P = target_p_y - p_y;
 8000d42:	eeb0 7a66 	vmov.f32	s14, s13
		float p_y =   ( (float)pcounter[1])*PPR_TO_DISTANCE_Y; //((float)mycounter[0]) / PPM_X;
 8000d46:	ed90 6a01 	vldr	s12, [r0, #4]
		float v_y =  ( (float)pvelocity[1])*( PPR_TO_DISTANCE_Y/ mydt); //counterToVelocityX(pvelocity[0]);// ( (float)myvelocity[0] )/ (dt* PPM_X);
 8000d4a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
		float p_y =   ( (float)pcounter[1])*PPR_TO_DISTANCE_Y; //((float)mycounter[0]) / PPM_X;
 8000d4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		float error_D = target_v_y - v_y;
 8000d52:	eee5 7ac2 	vfms.f32	s15, s11, s4
		float error_P = target_p_y - p_y;
 8000d56:	eea6 7a64 	vfms.f32	s14, s12, s9
		float pwm_output = error_P*(K_P_Y) /* + total_error_I* (K_I)*/ + error_D*(K_D_Y);
 8000d5a:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8000d5e:	eee7 7a03 	vfma.f32	s15, s14, s6
 8000d62:	fec7 7ae3 	vminnm.f32	s15, s15, s7
		int32_t vPWMY_out = (int32_t)(pwm_output*12000);
 8000d66:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8000d6a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8000d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d72:	edc2 7a01 	vstr	s15, [r2, #4]
}
 8000d76:	4770      	bx	lr
		else if(error_P<-error_acceptable)error_P+=error_acceptable;
 8000d78:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8000dec <computePD+0x170>
 8000d7c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d84:	d506      	bpl.n	8000d94 <computePD+0x118>
 8000d86:	ee77 7aa5 	vadd.f32	s15, s15, s11
		float pwm_output = error_P*(K_P) /* + total_error_I* (K_I)*/ + error_D*(K_D);
 8000d8a:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8000dd0 <computePD+0x154>
 8000d8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d92:	e7a9      	b.n	8000ce8 <computePD+0x6c>
 8000d94:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000df0 <computePD+0x174>
 8000d98:	e7a6      	b.n	8000ce8 <computePD+0x6c>
		else if(velocity_closer_to_zero<-1.f)velocity_closer_to_zero+=.5f;
 8000d9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da6:	d402      	bmi.n	8000dae <computePD+0x132>
		else velocity_closer_to_zero=0;
 8000da8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000df0 <computePD+0x174>
 8000dac:	e77a      	b.n	8000ca4 <computePD+0x28>
		else if(velocity_closer_to_zero<-1.f)velocity_closer_to_zero+=.5f;
 8000dae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000db6:	e775      	b.n	8000ca4 <computePD+0x28>
 8000db8:	240032d8 	.word	0x240032d8
 8000dbc:	24000008 	.word	0x24000008
 8000dc0:	3727c5ac 	.word	0x3727c5ac
 8000dc4:	240032dc 	.word	0x240032dc
 8000dc8:	3ca3d70a 	.word	0x3ca3d70a
 8000dcc:	240032e4 	.word	0x240032e4
 8000dd0:	43c80000 	.word	0x43c80000
 8000dd4:	3627c5ac 	.word	0x3627c5ac
 8000dd8:	463b8000 	.word	0x463b8000
 8000ddc:	3f19999a 	.word	0x3f19999a
 8000de0:	42a00000 	.word	0x42a00000
 8000de4:	bf4ccccd 	.word	0xbf4ccccd
 8000de8:	3f4ccccd 	.word	0x3f4ccccd
 8000dec:	bca3d70a 	.word	0xbca3d70a
 8000df0:	00000000 	.word	0x00000000

08000df4 <getCalibrationMode>:

uint8_t getCalibrationMode()
{
	return calibration_mode;
 8000df4:	4b01      	ldr	r3, [pc, #4]	; (8000dfc <getCalibrationMode+0x8>)
 8000df6:	7818      	ldrb	r0, [r3, #0]
}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	240032af 	.word	0x240032af

08000e00 <updateCalibration>:
int32_t theta_min=0;
int32_t theta_max=0;

//Feedback loop called on timer callback at current update rate.
void updateCalibration(int32_t* pcounter, int32_t* pvelocity, uint8_t _limit_status,  int32_t* rPWM)
{
 8000e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	my_limit_status = _limit_status;
 8000e04:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80010f8 <updateCalibration+0x2f8>
{
 8000e08:	460d      	mov	r5, r1

	for(int i=0;i<3;++i)
	{
		mycounter[i] = pcounter[i];
 8000e0a:	4ea9      	ldr	r6, [pc, #676]	; (80010b0 <updateCalibration+0x2b0>)
{
 8000e0c:	461f      	mov	r7, r3
	my_limit_status = _limit_status;
 8000e0e:	f888 2000 	strb.w	r2, [r8]
{
 8000e12:	4604      	mov	r4, r0
		mycounter[i] = pcounter[i];
 8000e14:	6802      	ldr	r2, [r0, #0]
 8000e16:	6843      	ldr	r3, [r0, #4]
 8000e18:	6032      	str	r2, [r6, #0]
		myvelocity[i] = pvelocity[i];
 8000e1a:	680a      	ldr	r2, [r1, #0]
 8000e1c:	49a5      	ldr	r1, [pc, #660]	; (80010b4 <updateCalibration+0x2b4>)
 8000e1e:	600a      	str	r2, [r1, #0]
		mycounter[i] = pcounter[i];
 8000e20:	6073      	str	r3, [r6, #4]
 8000e22:	6883      	ldr	r3, [r0, #8]
		myvelocity[i] = pvelocity[i];
 8000e24:	686a      	ldr	r2, [r5, #4]
 8000e26:	604a      	str	r2, [r1, #4]
		mycounter[i] = pcounter[i];
 8000e28:	60b3      	str	r3, [r6, #8]
		myvelocity[i] = pvelocity[i];
 8000e2a:	68ab      	ldr	r3, [r5, #8]
 8000e2c:	608b      	str	r3, [r1, #8]
	}

	mydt = getDt();
 8000e2e:	f000 fda3 	bl	8001978 <getDt>
 8000e32:	4ba1      	ldr	r3, [pc, #644]	; (80010b8 <updateCalibration+0x2b8>)

	if(calibration_mode == CALIB_INIT)
 8000e34:	4aa1      	ldr	r2, [pc, #644]	; (80010bc <updateCalibration+0x2bc>)
	mydt = getDt();
 8000e36:	ed83 0a00 	vstr	s0, [r3]
	if(calibration_mode == CALIB_INIT)
 8000e3a:	7811      	ldrb	r1, [r2, #0]
 8000e3c:	2901      	cmp	r1, #1
 8000e3e:	d129      	bne.n	8000e94 <updateCalibration+0x94>
	{
		//Set target to current position.
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8000e40:	ed94 7a00 	vldr	s14, [r4]
		target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
		target_v[0]= 0;
 8000e44:	f04f 0c00 	mov.w	ip, #0
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8000e48:	eddf 7a9d 	vldr	s15, [pc, #628]	; 80010c0 <updateCalibration+0x2c0>
		target_v[1]= -calib_speed_y;
		calibration_mode = CALIB_MOVE_DOWN;
		wait_time=1.f;
 8000e4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8000e50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 8000e54:	eddf 6a9b 	vldr	s13, [pc, #620]	; 80010c4 <updateCalibration+0x2c4>
		target_v[1]= -calib_speed_y;
 8000e58:	499b      	ldr	r1, [pc, #620]	; (80010c8 <updateCalibration+0x2c8>)
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8000e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
		target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 8000e5e:	edd4 7a01 	vldr	s15, [r4, #4]
 8000e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e66:	ee67 7aa6 	vmul.f32	s15, s15, s13
		target_v[1]= -calib_speed_y;
 8000e6a:	edd1 6a00 	vldr	s13, [r1]
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8000e6e:	4997      	ldr	r1, [pc, #604]	; (80010cc <updateCalibration+0x2cc>)
		target_v[1]= -calib_speed_y;
 8000e70:	eef1 6a66 	vneg.f32	s13, s13
		target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8000e74:	ed81 7a00 	vstr	s14, [r1]
		target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 8000e78:	edc1 7a01 	vstr	s15, [r1, #4]
		target_v[0]= 0;
 8000e7c:	4994      	ldr	r1, [pc, #592]	; (80010d0 <updateCalibration+0x2d0>)
 8000e7e:	f8c1 c000 	str.w	ip, [r1]
		target_v[1]= -calib_speed_y;
 8000e82:	edc1 6a01 	vstr	s13, [r1, #4]
		calibration_mode = CALIB_MOVE_DOWN;
 8000e86:	2102      	movs	r1, #2
 8000e88:	7011      	strb	r1, [r2, #0]
		wait_time=1.f;
 8000e8a:	4992      	ldr	r1, [pc, #584]	; (80010d4 <updateCalibration+0x2d4>)
 8000e8c:	6008      	str	r0, [r1, #0]

		calib_failed=0;
 8000e8e:	2000      	movs	r0, #0
 8000e90:	4991      	ldr	r1, [pc, #580]	; (80010d8 <updateCalibration+0x2d8>)
 8000e92:	7008      	strb	r0, [r1, #0]
	{
		return;
	}*/


	switch(calibration_mode)
 8000e94:	7811      	ldrb	r1, [r2, #0]
 8000e96:	3902      	subs	r1, #2
 8000e98:	2910      	cmp	r1, #16
 8000e9a:	d82c      	bhi.n	8000ef6 <updateCalibration+0xf6>
 8000e9c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000ea0:	00600048 	.word	0x00600048
 8000ea4:	008e00e4 	.word	0x008e00e4
 8000ea8:	012e00b4 	.word	0x012e00b4
 8000eac:	019901d3 	.word	0x019901d3
 8000eb0:	002b01b6 	.word	0x002b01b6
 8000eb4:	002b002b 	.word	0x002b002b
 8000eb8:	0011017a 	.word	0x0011017a
 8000ebc:	02370215 	.word	0x02370215
 8000ec0:	002d      	.short	0x002d
			computePD(pcounter, pvelocity, rPWM);
		}break;

		case CALIB_DEMO_LEFT:
		{
			wait_time-=mydt;
 8000ec2:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80010d4 <updateCalibration+0x2d4>
 8000ec6:	ed93 7a00 	vldr	s14, [r3]
 8000eca:	edd9 7a00 	vldr	s15, [r9]
 8000ece:	ee77 7ac7 	vsub.f32	s15, s15, s14

			if(wait_time<0 || my_limit_status &LIMIT_LEFT)
 8000ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time-=mydt;
 8000ed6:	edc9 7a00 	vstr	s15, [r9]
			if(wait_time<0 || my_limit_status &LIMIT_LEFT)
 8000eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ede:	f140 825b 	bpl.w	8001398 <updateCalibration+0x598>
			{
				target_v[0]=0;
 8000ee2:	4b7b      	ldr	r3, [pc, #492]	; (80010d0 <updateCalibration+0x2d0>)
 8000ee4:	2100      	movs	r1, #0
				target_v[1]=0;
				calibration_mode = CALIB_DEMO_UP;
 8000ee6:	2010      	movs	r0, #16
				target_v[0]=0;
 8000ee8:	6019      	str	r1, [r3, #0]
				target_v[1]=0;
 8000eea:	6059      	str	r1, [r3, #4]
				wait_time=2.f;
 8000eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
				calibration_mode = CALIB_DEMO_UP;
 8000ef0:	7010      	strb	r0, [r2, #0]
				wait_time=2.f;
 8000ef2:	f8c9 3000 	str.w	r3, [r9]
			computePD(pcounter, pvelocity, rPWM);
		}break;

	}

}
 8000ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			wait_time-=mydt;
 8000efa:	4976      	ldr	r1, [pc, #472]	; (80010d4 <updateCalibration+0x2d4>)
			if(wait_time<0)
 8000efc:	2000      	movs	r0, #0
			wait_time-=mydt;
 8000efe:	ed93 7a00 	vldr	s14, [r3]
 8000f02:	edd1 7a00 	vldr	s15, [r1]
 8000f06:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<0)
 8000f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time-=mydt;
 8000f0e:	edc1 7a00 	vstr	s15, [r1]
			if(wait_time<0)
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	f100 8272 	bmi.w	80013fe <updateCalibration+0x5fe>
			if(wait_time<1.75f)target_v[1]=-calib_speed_y*.75f;
 8000f1a:	eeb7 7a0c 	vmov.f32	s14, #124	; 0x3fe00000  1.750
 8000f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	f140 81a0 	bpl.w	800126a <updateCalibration+0x46a>
 8000f2a:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 8000f2e:	e1e5      	b.n	80012fc <updateCalibration+0x4fc>
			wait_time -= mydt;
 8000f30:	4968      	ldr	r1, [pc, #416]	; (80010d4 <updateCalibration+0x2d4>)
 8000f32:	ed93 7a00 	vldr	s14, [r3]
 8000f36:	edd1 7a00 	vldr	s15, [r1]
 8000f3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0)
 8000f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8000f42:	edc1 7a00 	vstr	s15, [r1]
			if(wait_time<=0)
 8000f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4a:	f200 818e 	bhi.w	800126a <updateCalibration+0x46a>
				target_v[1]=calib_speed_y;
 8000f4e:	485e      	ldr	r0, [pc, #376]	; (80010c8 <updateCalibration+0x2c8>)
 8000f50:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <updateCalibration+0x2d0>)
 8000f52:	6800      	ldr	r0, [r0, #0]
				wait_time=20;//max 10 seconds up... Who knows, maybe that pulley thing is not connected...
 8000f54:	4c61      	ldr	r4, [pc, #388]	; (80010dc <updateCalibration+0x2dc>)
				target_v[1]=calib_speed_y;
 8000f56:	6058      	str	r0, [r3, #4]
				calibration_mode = CALIB_MOVE_UP;
 8000f58:	2303      	movs	r3, #3
				wait_time=20;//max 10 seconds up... Who knows, maybe that pulley thing is not connected...
 8000f5a:	600c      	str	r4, [r1, #0]
				calibration_mode = CALIB_MOVE_UP;
 8000f5c:	7013      	strb	r3, [r2, #0]
				break;
 8000f5e:	e7ca      	b.n	8000ef6 <updateCalibration+0xf6>
			wait_time -= mydt;
 8000f60:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80010d4 <updateCalibration+0x2d4>
 8000f64:	ed93 7a00 	vldr	s14, [r3]
 8000f68:	edd9 7a00 	vldr	s15, [r9]
 8000f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0 || my_limit_status & LIMIT_Y_UP || fabs(calibGetDeltaY())>.08f )
 8000f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8000f74:	edc9 7a00 	vstr	s15, [r9]
			if(wait_time<=0 || my_limit_status & LIMIT_Y_UP || fabs(calibGetDeltaY())>.08f )
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	f240 827e 	bls.w	800147c <updateCalibration+0x67c>
 8000f80:	f898 1000 	ldrb.w	r1, [r8]
 8000f84:	0708      	lsls	r0, r1, #28
 8000f86:	f140 82b3 	bpl.w	80014f0 <updateCalibration+0x6f0>
 8000f8a:	4950      	ldr	r1, [pc, #320]	; (80010cc <updateCalibration+0x2cc>)
				target_v[0]=-calib_speed;
 8000f8c:	4854      	ldr	r0, [pc, #336]	; (80010e0 <updateCalibration+0x2e0>)
 8000f8e:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <updateCalibration+0x2d0>)
 8000f90:	edd0 7a00 	vldr	s15, [r0]
				target_v[1]=0;
 8000f94:	2000      	movs	r0, #0
				target[1]-=.025f;
 8000f96:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80010e4 <updateCalibration+0x2e4>
				target_v[0]=-calib_speed;
 8000f9a:	eef1 7a67 	vneg.f32	s15, s15
				wait_time=10.f;
 8000f9e:	4c52      	ldr	r4, [pc, #328]	; (80010e8 <updateCalibration+0x2e8>)
 8000fa0:	f8c9 4000 	str.w	r4, [r9]
				target_v[0]=-calib_speed;
 8000fa4:	edc3 7a00 	vstr	s15, [r3]
				target[1]-=.025f;
 8000fa8:	edd1 7a01 	vldr	s15, [r1, #4]
 8000fac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fb0:	edc1 7a01 	vstr	s15, [r1, #4]
				calibration_mode = CALIB_MOVE_LEFT_IF_NECESSARY;
 8000fb4:	2104      	movs	r1, #4
				target_v[1]=0;
 8000fb6:	6058      	str	r0, [r3, #4]
				calibration_mode = CALIB_MOVE_LEFT_IF_NECESSARY;
 8000fb8:	7011      	strb	r1, [r2, #0]
				break;
 8000fba:	e79c      	b.n	8000ef6 <updateCalibration+0xf6>
			wait_time -= mydt;
 8000fbc:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80010d4 <updateCalibration+0x2d4>
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	edd9 7a00 	vldr	s15, [r9]
			if( my_limit_status & LIMIT_MAXRIGHT || wait_time<=0)
 8000fc8:	f898 1000 	ldrb.w	r1, [r8]
			wait_time -= mydt;
 8000fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if( my_limit_status & LIMIT_MAXRIGHT || wait_time<=0)
 8000fd0:	0788      	lsls	r0, r1, #30
			wait_time -= mydt;
 8000fd2:	edc9 7a00 	vstr	s15, [r9]
			if( my_limit_status & LIMIT_MAXRIGHT || wait_time<=0)
 8000fd6:	d405      	bmi.n	8000fe4 <updateCalibration+0x1e4>
 8000fd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	f200 8143 	bhi.w	800126a <updateCalibration+0x46a>
				if(wait_time<=0)calib_failed=1;
 8000fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	f240 8257 	bls.w	800149e <updateCalibration+0x69e>
				target_v[0]=0;//-calib_speed;
 8000ff0:	4937      	ldr	r1, [pc, #220]	; (80010d0 <updateCalibration+0x2d0>)
 8000ff2:	2000      	movs	r0, #0
				wait_time = 10.f;
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <updateCalibration+0x2e8>)
				target_v[0]=0;//-calib_speed;
 8000ff6:	6008      	str	r0, [r1, #0]
				calibration_mode = CALIB_MOVE_LEFT;
 8000ff8:	2106      	movs	r1, #6
				wait_time = 10.f;
 8000ffa:	f8c9 3000 	str.w	r3, [r9]
				calibration_mode = CALIB_MOVE_LEFT;
 8000ffe:	7011      	strb	r1, [r2, #0]
				counter_limit_right = pcounter[0];
 8001000:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <updateCalibration+0x2ec>)
 8001002:	6822      	ldr	r2, [r4, #0]
 8001004:	601a      	str	r2, [r3, #0]
				break;
 8001006:	e776      	b.n	8000ef6 <updateCalibration+0xf6>
			wait_time -= mydt;
 8001008:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80010d4 <updateCalibration+0x2d4>
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	edd9 7a00 	vldr	s15, [r9]
			if( my_limit_status & LIMIT_MAXLEFT || wait_time<=0)
 8001014:	f898 1000 	ldrb.w	r1, [r8]
			wait_time -= mydt;
 8001018:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if( my_limit_status & LIMIT_MAXLEFT || wait_time<=0)
 800101c:	b2c9      	uxtb	r1, r1
 800101e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8001022:	edc9 7a00 	vstr	s15, [r9]
			if( my_limit_status & LIMIT_MAXLEFT || wait_time<=0)
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	f240 822c 	bls.w	8001486 <updateCalibration+0x686>
 800102e:	07c9      	lsls	r1, r1, #31
 8001030:	f140 829d 	bpl.w	800156e <updateCalibration+0x76e>
				if(wait_time<=0)calib_failed=1;
 8001034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	f240 8223 	bls.w	8001486 <updateCalibration+0x686>
				target_v[0]=0;//calib_speed;
 8001040:	4923      	ldr	r1, [pc, #140]	; (80010d0 <updateCalibration+0x2d0>)
 8001042:	2000      	movs	r0, #0
				wait_time=10.f;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <updateCalibration+0x2e8>)
				target_v[0]=0;//calib_speed;
 8001046:	6008      	str	r0, [r1, #0]
				wait_time=10.f;
 8001048:	f8c9 3000 	str.w	r3, [r9]
				calibration_mode = CALIB_MOVE_CENTER;
 800104c:	2307      	movs	r3, #7
				counter_center = (counter_limit_left+counter_limit_right)/2;
 800104e:	4827      	ldr	r0, [pc, #156]	; (80010ec <updateCalibration+0x2ec>)
				counter_limit_left = pcounter[0];
 8001050:	4927      	ldr	r1, [pc, #156]	; (80010f0 <updateCalibration+0x2f0>)
				calibration_mode = CALIB_MOVE_CENTER;
 8001052:	7013      	strb	r3, [r2, #0]
				counter_center = (counter_limit_left+counter_limit_right)/2;
 8001054:	6802      	ldr	r2, [r0, #0]
				counter_limit_left = pcounter[0];
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	600b      	str	r3, [r1, #0]
				counter_center = (counter_limit_left+counter_limit_right)/2;
 800105a:	189b      	adds	r3, r3, r2
 800105c:	4925      	ldr	r1, [pc, #148]	; (80010f4 <updateCalibration+0x2f4>)
 800105e:	bf48      	it	mi
 8001060:	3301      	addmi	r3, #1
 8001062:	105b      	asrs	r3, r3, #1
 8001064:	600b      	str	r3, [r1, #0]
				break;
 8001066:	e746      	b.n	8000ef6 <updateCalibration+0xf6>
			wait_time -= mydt;
 8001068:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80010d4 <updateCalibration+0x2d4>
 800106c:	ed93 7a00 	vldr	s14, [r3]
 8001070:	edd9 7a00 	vldr	s15, [r9]
			if(!( my_limit_status & LIMIT_MAXRIGHT) || wait_time<=0 )
 8001074:	f898 1000 	ldrb.w	r1, [r8]
			wait_time -= mydt;
 8001078:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(!( my_limit_status & LIMIT_MAXRIGHT) || wait_time<=0 )
 800107c:	0789      	lsls	r1, r1, #30
			wait_time -= mydt;
 800107e:	edc9 7a00 	vstr	s15, [r9]
			if(!( my_limit_status & LIMIT_MAXRIGHT) || wait_time<=0 )
 8001082:	d505      	bpl.n	8001090 <updateCalibration+0x290>
 8001084:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108c:	f200 80ed 	bhi.w	800126a <updateCalibration+0x46a>
				if(wait_time<=0)calib_failed=1;
 8001090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	f240 81fd 	bls.w	8001496 <updateCalibration+0x696>
				target_v[0]= calib_speed;
 800109c:	4910      	ldr	r1, [pc, #64]	; (80010e0 <updateCalibration+0x2e0>)
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <updateCalibration+0x2d0>)
 80010a0:	6809      	ldr	r1, [r1, #0]
				wait_time=10.f;
 80010a2:	4811      	ldr	r0, [pc, #68]	; (80010e8 <updateCalibration+0x2e8>)
				target_v[0]= calib_speed;
 80010a4:	6019      	str	r1, [r3, #0]
				calibration_mode = CALIB_MOVE_RIGHT;
 80010a6:	2305      	movs	r3, #5
				wait_time=10.f;
 80010a8:	f8c9 0000 	str.w	r0, [r9]
				calibration_mode = CALIB_MOVE_RIGHT;
 80010ac:	7013      	strb	r3, [r2, #0]
				break;
 80010ae:	e722      	b.n	8000ef6 <updateCalibration+0xf6>
 80010b0:	240032c0 	.word	0x240032c0
 80010b4:	240032cc 	.word	0x240032cc
 80010b8:	24000008 	.word	0x24000008
 80010bc:	240032af 	.word	0x240032af
 80010c0:	3727c5ac 	.word	0x3727c5ac
 80010c4:	3627c5ac 	.word	0x3627c5ac
 80010c8:	24000004 	.word	0x24000004
 80010cc:	240032dc 	.word	0x240032dc
 80010d0:	240032e4 	.word	0x240032e4
 80010d4:	240032f4 	.word	0x240032f4
 80010d8:	240032ae 	.word	0x240032ae
 80010dc:	41a00000 	.word	0x41a00000
 80010e0:	24000000 	.word	0x24000000
 80010e4:	3ccccccd 	.word	0x3ccccccd
 80010e8:	41200000 	.word	0x41200000
 80010ec:	240032b8 	.word	0x240032b8
 80010f0:	240032b4 	.word	0x240032b4
 80010f4:	240032b0 	.word	0x240032b0
 80010f8:	240032bc 	.word	0x240032bc
			wait_time -= mydt;
 80010fc:	f8df 935c 	ldr.w	r9, [pc, #860]	; 800145c <updateCalibration+0x65c>
			if(pcounter[0]>=counter_center || wait_time<=0)
 8001100:	49cd      	ldr	r1, [pc, #820]	; (8001438 <updateCalibration+0x638>)
			wait_time -= mydt;
 8001102:	edd9 7a00 	vldr	s15, [r9]
 8001106:	ed93 7a00 	vldr	s14, [r3]
			if(pcounter[0]>=counter_center || wait_time<=0)
 800110a:	6808      	ldr	r0, [r1, #0]
 800110c:	6821      	ldr	r1, [r4, #0]
			wait_time -= mydt;
 800110e:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(pcounter[0]>=counter_center || wait_time<=0)
 8001112:	4281      	cmp	r1, r0
			wait_time -= mydt;
 8001114:	edc9 7a00 	vstr	s15, [r9]
			if(pcounter[0]>=counter_center || wait_time<=0)
 8001118:	f280 811e 	bge.w	8001358 <updateCalibration+0x558>
 800111c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	f240 8118 	bls.w	8001358 <updateCalibration+0x558>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001128:	edd6 6a00 	vldr	s13, [r6]
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 800112c:	4ac3      	ldr	r2, [pc, #780]	; (800143c <updateCalibration+0x63c>)
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 800112e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001132:	eddf 5ac3 	vldr	s11, [pc, #780]	; 8001440 <updateCalibration+0x640>
 8001136:	ed92 7a00 	vldr	s14, [r2]
 800113a:	ed9f 6ac2 	vldr	s12, [pc, #776]	; 8001444 <updateCalibration+0x644>
 800113e:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8001142:	eeb0 7ac7 	vabs.f32	s14, s14
 8001146:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d514      	bpl.n	800117a <updateCalibration+0x37a>
		target[0] += target_v[0]*mydt;
 8001150:	49bd      	ldr	r1, [pc, #756]	; (8001448 <updateCalibration+0x648>)
 8001152:	ed91 6a00 	vldr	s12, [r1]
 8001156:	edd3 6a00 	vldr	s13, [r3]
 800115a:	ed92 7a00 	vldr	s14, [r2]
 800115e:	eea6 7a26 	vfma.f32	s14, s12, s13
 8001162:	ed82 7a00 	vstr	s14, [r2]
		target[1] += target_v[1]*mydt;
 8001166:	ed91 6a01 	vldr	s12, [r1, #4]
 800116a:	edd3 6a00 	vldr	s13, [r3]
 800116e:	ed92 7a01 	vldr	s14, [r2, #4]
 8001172:	eea6 7a26 	vfma.f32	s14, s12, s13
 8001176:	ed82 7a01 	vstr	s14, [r2, #4]
			if(wait_time<9.75f)target_v[0]=calib_speed;
 800117a:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800144c <updateCalibration+0x64c>
 800117e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	f140 8099 	bpl.w	80012bc <updateCalibration+0x4bc>
 800118a:	4ab1      	ldr	r2, [pc, #708]	; (8001450 <updateCalibration+0x650>)
 800118c:	4bae      	ldr	r3, [pc, #696]	; (8001448 <updateCalibration+0x648>)
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e093      	b.n	80012bc <updateCalibration+0x4bc>
			target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 8001194:	ed94 7a00 	vldr	s14, [r4]
			target_v[0]=0 ;//-calib_speed*.75f;
 8001198:	2100      	movs	r1, #0
			target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 800119a:	edd4 7a01 	vldr	s15, [r4, #4]
			target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 800119e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80011a2:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 8001440 <updateCalibration+0x640>
			target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 80011a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011aa:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8001454 <updateCalibration+0x654>
			target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 80011ae:	48a3      	ldr	r0, [pc, #652]	; (800143c <updateCalibration+0x63c>)
 80011b0:	ee27 7a06 	vmul.f32	s14, s14, s12
			target_v[0]=0 ;//-calib_speed*.75f;
 80011b4:	4ba4      	ldr	r3, [pc, #656]	; (8001448 <updateCalibration+0x648>)
			target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 80011b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
			wait_time=10.f;
 80011ba:	4ca7      	ldr	r4, [pc, #668]	; (8001458 <updateCalibration+0x658>)
			target[0]= ( (float)pcounter[0])*PPR_TO_DISTANCE_X;//counterToPositionX(mycounter[0]);
 80011bc:	ed80 7a00 	vstr	s14, [r0]
			target[1]= ( (float)pcounter[1])*PPR_TO_DISTANCE_Y;
 80011c0:	edc0 7a01 	vstr	s15, [r0, #4]
			calibration_mode = CALIB_DEMO_RIGHT;
 80011c4:	2011      	movs	r0, #17
			target_v[0]=0 ;//-calib_speed*.75f;
 80011c6:	6019      	str	r1, [r3, #0]
			target_v[1]= 0;
 80011c8:	6059      	str	r1, [r3, #4]
			wait_time=10.f;
 80011ca:	4ba4      	ldr	r3, [pc, #656]	; (800145c <updateCalibration+0x65c>)
			calibration_mode = CALIB_DEMO_RIGHT;
 80011cc:	7010      	strb	r0, [r2, #0]
			wait_time=10.f;
 80011ce:	601c      	str	r4, [r3, #0]
		}break;
 80011d0:	e691      	b.n	8000ef6 <updateCalibration+0xf6>
			wait_time -= mydt;
 80011d2:	ed93 7a00 	vldr	s14, [r3]
 80011d6:	4ba1      	ldr	r3, [pc, #644]	; (800145c <updateCalibration+0x65c>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0)
 80011e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 80011e4:	edc3 7a00 	vstr	s15, [r3]
			if(wait_time<=0)
 80011e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ec:	f240 815b 	bls.w	80014a6 <updateCalibration+0x6a6>
			if(wait_time>4.5f)
 80011f0:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	f340 8167 	ble.w	80014ce <updateCalibration+0x6ce>
				theta_min=pcounter[2];
 8001200:	68a3      	ldr	r3, [r4, #8]
 8001202:	4a97      	ldr	r2, [pc, #604]	; (8001460 <updateCalibration+0x660>)
 8001204:	6013      	str	r3, [r2, #0]
				theta_max=theta_min;
 8001206:	4a97      	ldr	r2, [pc, #604]	; (8001464 <updateCalibration+0x664>)
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e057      	b.n	80012bc <updateCalibration+0x4bc>
			wait_time -= mydt;
 800120c:	4e93      	ldr	r6, [pc, #588]	; (800145c <updateCalibration+0x65c>)
			float k_mul = 1/(5000.f*mydt);
 800120e:	edd3 6a00 	vldr	s13, [r3]
			wait_time -= mydt;
 8001212:	edd6 7a00 	vldr	s15, [r6]
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0)
 800121e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 8001222:	edc6 7a00 	vstr	s15, [r6]
			if(wait_time<=0)
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	f200 80c5 	bhi.w	80013b8 <updateCalibration+0x5b8>
				rPWM[0]=0;
 800122e:	2300      	movs	r3, #0
				if(calib_failed)
 8001230:	498d      	ldr	r1, [pc, #564]	; (8001468 <updateCalibration+0x668>)
				rPWM[0]=0;
 8001232:	603b      	str	r3, [r7, #0]
				if(calib_failed)
 8001234:	7809      	ldrb	r1, [r1, #0]
				rPWM[1]=0;
 8001236:	607b      	str	r3, [r7, #4]
				if(calib_failed)
 8001238:	2900      	cmp	r1, #0
 800123a:	f000 8155 	beq.w	80014e8 <updateCalibration+0x6e8>
					calibration_mode = CALIB_ERROR;
 800123e:	210d      	movs	r1, #13
 8001240:	7011      	strb	r1, [r2, #0]
					rPWM[0]=0;
 8001242:	603b      	str	r3, [r7, #0]
					break;
 8001244:	e657      	b.n	8000ef6 <updateCalibration+0xf6>
			wait_time -= mydt;
 8001246:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800145c <updateCalibration+0x65c>
			if(wait_time<=0)
 800124a:	f04f 0900 	mov.w	r9, #0
			wait_time -= mydt;
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	edd8 7a00 	vldr	s15, [r8]
 8001256:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<=0)
 800125a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time -= mydt;
 800125e:	edc8 7a00 	vstr	s15, [r8]
			if(wait_time<=0)
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	f240 80d5 	bls.w	8001414 <updateCalibration+0x614>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 800126a:	ed96 7a00 	vldr	s14, [r6]
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 800126e:	4a73      	ldr	r2, [pc, #460]	; (800143c <updateCalibration+0x63c>)
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001274:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8001440 <updateCalibration+0x640>
 8001278:	edd2 7a00 	vldr	s15, [r2]
 800127c:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001444 <updateCalibration+0x644>
 8001280:	eee7 7a46 	vfms.f32	s15, s14, s12
 8001284:	eef0 7ae7 	vabs.f32	s15, s15
 8001288:	eef4 7ae6 	vcmpe.f32	s15, s13
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	d514      	bpl.n	80012bc <updateCalibration+0x4bc>
		target[0] += target_v[0]*mydt;
 8001292:	496d      	ldr	r1, [pc, #436]	; (8001448 <updateCalibration+0x648>)
 8001294:	edd1 6a00 	vldr	s13, [r1]
 8001298:	ed93 7a00 	vldr	s14, [r3]
 800129c:	edd2 7a00 	vldr	s15, [r2]
 80012a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80012a4:	edc2 7a00 	vstr	s15, [r2]
		target[1] += target_v[1]*mydt;
 80012a8:	edd1 6a01 	vldr	s13, [r1, #4]
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	edd2 7a01 	vldr	s15, [r2, #4]
 80012b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80012b8:	edc2 7a01 	vstr	s15, [r2, #4]
			computePD(pcounter, pvelocity, rPWM);
 80012bc:	463a      	mov	r2, r7
 80012be:	4629      	mov	r1, r5
 80012c0:	4620      	mov	r0, r4
}
 80012c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			computePD(pcounter, pvelocity, rPWM);
 80012c6:	f7ff bcd9 	b.w	8000c7c <computePD>
			wait_time-=mydt;
 80012ca:	4964      	ldr	r1, [pc, #400]	; (800145c <updateCalibration+0x65c>)
			if(wait_time<0 )
 80012cc:	2000      	movs	r0, #0
			wait_time-=mydt;
 80012ce:	ed93 7a00 	vldr	s14, [r3]
 80012d2:	edd1 7a00 	vldr	s15, [r1]
 80012d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<0 )
 80012da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time-=mydt;
 80012de:	edc1 7a00 	vstr	s15, [r1]
			if(wait_time<0 )
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e6:	f100 8092 	bmi.w	800140e <updateCalibration+0x60e>
			if(wait_time<1.75f)target_v[1]=calib_speed_y*.75f;
 80012ea:	eeb7 7a0c 	vmov.f32	s14, #124	; 0x3fe00000  1.750
 80012ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	d5b8      	bpl.n	800126a <updateCalibration+0x46a>
 80012f8:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80012fc:	4a5b      	ldr	r2, [pc, #364]	; (800146c <updateCalibration+0x66c>)
 80012fe:	edd2 7a00 	vldr	s15, [r2]
 8001302:	4a51      	ldr	r2, [pc, #324]	; (8001448 <updateCalibration+0x648>)
 8001304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001308:	edc2 7a01 	vstr	s15, [r2, #4]
 800130c:	e7ad      	b.n	800126a <updateCalibration+0x46a>
			wait_time-=mydt;
 800130e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 800145c <updateCalibration+0x65c>
 8001312:	ed93 7a00 	vldr	s14, [r3]
 8001316:	edd9 7a00 	vldr	s15, [r9]
 800131a:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(wait_time<0 || my_limit_status & LIMIT_RIGHT)
 800131e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			wait_time-=mydt;
 8001322:	edc9 7a00 	vstr	s15, [r9]
			if(wait_time<0 || my_limit_status & LIMIT_RIGHT)
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d464      	bmi.n	80013f6 <updateCalibration+0x5f6>
 800132c:	f898 1000 	ldrb.w	r1, [r8]
 8001330:	0688      	lsls	r0, r1, #26
 8001332:	d460      	bmi.n	80013f6 <updateCalibration+0x5f6>
			if(wait_time<9.75f)target_v[0]=calib_speed*.75f;
 8001334:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800144c <updateCalibration+0x64c>
 8001338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d593      	bpl.n	800126a <updateCalibration+0x46a>
 8001342:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
			if(wait_time<9.75f)target_v[0]=-calib_speed*.75f;
 8001346:	4a42      	ldr	r2, [pc, #264]	; (8001450 <updateCalibration+0x650>)
 8001348:	edd2 7a00 	vldr	s15, [r2]
 800134c:	4a3e      	ldr	r2, [pc, #248]	; (8001448 <updateCalibration+0x648>)
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	edc2 7a00 	vstr	s15, [r2]
 8001356:	e788      	b.n	800126a <updateCalibration+0x46a>
				if(wait_time<=0)calib_failed=1;
 8001358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	f240 8095 	bls.w	800148e <updateCalibration+0x68e>
				target_v[1]=-calib_speed_y;
 8001364:	4d41      	ldr	r5, [pc, #260]	; (800146c <updateCalibration+0x66c>)
				target_v[0]=0.f;
 8001366:	2400      	movs	r4, #0
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <updateCalibration+0x648>)
				resetCounter(0);
 800136a:	2000      	movs	r0, #0
				target_v[1]=-calib_speed_y;
 800136c:	edd5 7a00 	vldr	s15, [r5]
				target_v[0]=0.f;
 8001370:	601c      	str	r4, [r3, #0]
				target_v[1]=-calib_speed_y;
 8001372:	eef1 7a67 	vneg.f32	s15, s15
 8001376:	edc3 7a01 	vstr	s15, [r3, #4]
				calibration_mode = CALIB_MOVE_DOWN_AGAIN;
 800137a:	2308      	movs	r3, #8
 800137c:	7013      	strb	r3, [r2, #0]
				resetCounter(0);
 800137e:	f000 fb17 	bl	80019b0 <resetCounter>
				wait_time = LIMIT_Y_UP_VALUE/calib_speed_y; //Go down 1 meter.
 8001382:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001470 <updateCalibration+0x670>
 8001386:	ed95 7a00 	vldr	s14, [r5]
				target[0]=0;
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <updateCalibration+0x63c>)
				wait_time = LIMIT_Y_UP_VALUE/calib_speed_y; //Go down 1 meter.
 800138c:	eec6 7a87 	vdiv.f32	s15, s13, s14
				target[0]=0;
 8001390:	601c      	str	r4, [r3, #0]
				wait_time = LIMIT_Y_UP_VALUE/calib_speed_y; //Go down 1 meter.
 8001392:	edc9 7a00 	vstr	s15, [r9]
				break;
 8001396:	e5ae      	b.n	8000ef6 <updateCalibration+0xf6>
			if(wait_time<0 || my_limit_status &LIMIT_LEFT)
 8001398:	f898 1000 	ldrb.w	r1, [r8]
 800139c:	06c9      	lsls	r1, r1, #27
 800139e:	f53f ada0 	bmi.w	8000ee2 <updateCalibration+0xe2>
			if(wait_time<9.75f)target_v[0]=-calib_speed*.75f;
 80013a2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800144c <updateCalibration+0x64c>
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	f57f af5c 	bpl.w	800126a <updateCalibration+0x46a>
 80013b2:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 80013b6:	e7c6      	b.n	8001346 <updateCalibration+0x546>
			float k_mul = 1/(5000.f*mydt);
 80013b8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8001474 <updateCalibration+0x674>
			computePD(pcounter, pvelocity, rPWM);
 80013bc:	463a      	mov	r2, r7
 80013be:	4629      	mov	r1, r5
 80013c0:	4620      	mov	r0, r4
			float k_mul = 1/(5000.f*mydt);
 80013c2:	eec7 1aa6 	vdiv.f32	s3, s15, s13
			computePD(pcounter, pvelocity, rPWM);
 80013c6:	f7ff fc59 	bl	8000c7c <computePD>
			if(calib_failed)
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <updateCalibration+0x668>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8107 	beq.w	80015e2 <updateCalibration+0x7e2>
				if( (uint16_t)(wait_time*10)%2==0)
 80013d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013d8:	edd6 7a00 	vldr	s15, [r6]
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	07de      	lsls	r6, r3, #31
 80013ea:	f140 8122 	bpl.w	8001632 <updateCalibration+0x832>
					rPWM[1]=0;
 80013ee:	2300      	movs	r3, #0
					rPWM[0]=0;
 80013f0:	e9c7 3300 	strd	r3, r3, [r7]
 80013f4:	e57f      	b.n	8000ef6 <updateCalibration+0xf6>
				target_v[0]=0;//-calib_speed*.75f;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <updateCalibration+0x648>)
 80013f8:	2100      	movs	r1, #0
				calibration_mode = CALIB_DEMO_DOWN;
 80013fa:	2012      	movs	r0, #18
 80013fc:	e574      	b.n	8000ee8 <updateCalibration+0xe8>
				target_v[0]=0;//-calib_speed*.75f;
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <updateCalibration+0x648>)
				calibration_mode = CALIB_DEMO_LEFT;
 8001400:	240f      	movs	r4, #15
				target_v[0]=0;//-calib_speed*.75f;
 8001402:	6018      	str	r0, [r3, #0]
				target_v[1]=0;
 8001404:	6058      	str	r0, [r3, #4]
				wait_time=10.f;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <updateCalibration+0x658>)
				calibration_mode = CALIB_DEMO_RIGHT;
 8001408:	7014      	strb	r4, [r2, #0]
				wait_time=10.f;
 800140a:	600b      	str	r3, [r1, #0]
				break;
 800140c:	e573      	b.n	8000ef6 <updateCalibration+0xf6>
				target_v[0]=0;//-calib_speed*.75f;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <updateCalibration+0x648>)
				calibration_mode = CALIB_DEMO_RIGHT;
 8001410:	2411      	movs	r4, #17
 8001412:	e7f6      	b.n	8001402 <updateCalibration+0x602>
				target_v[1]=0;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <updateCalibration+0x648>)
				resetCounter(1);
 8001416:	2001      	movs	r0, #1
				wait_time=10;
 8001418:	490f      	ldr	r1, [pc, #60]	; (8001458 <updateCalibration+0x658>)
				target_v[1]=0;
 800141a:	f8c3 9004 	str.w	r9, [r3, #4]
				calibration_mode = CALIB_MEASURE_THETA;
 800141e:	2309      	movs	r3, #9
				wait_time=10;
 8001420:	f8c8 1000 	str.w	r1, [r8]
				calibration_mode = CALIB_MEASURE_THETA;
 8001424:	7013      	strb	r3, [r2, #0]
				resetCounter(1);
 8001426:	f000 fac3 	bl	80019b0 <resetCounter>
				wait_time=5.f;	//wait 5 seconds and measure min/max on theta.
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <updateCalibration+0x678>)
				target[1]=0;
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <updateCalibration+0x63c>)
				wait_time=5.f;	//wait 5 seconds and measure min/max on theta.
 800142e:	f8c8 3000 	str.w	r3, [r8]
				target[1]=0;
 8001432:	f8c2 9004 	str.w	r9, [r2, #4]
				break;
 8001436:	e55e      	b.n	8000ef6 <updateCalibration+0xf6>
 8001438:	240032b0 	.word	0x240032b0
 800143c:	240032dc 	.word	0x240032dc
 8001440:	3727c5ac 	.word	0x3727c5ac
 8001444:	3e19999a 	.word	0x3e19999a
 8001448:	240032e4 	.word	0x240032e4
 800144c:	411c0000 	.word	0x411c0000
 8001450:	24000000 	.word	0x24000000
 8001454:	3627c5ac 	.word	0x3627c5ac
 8001458:	41200000 	.word	0x41200000
 800145c:	240032f4 	.word	0x240032f4
 8001460:	240032f0 	.word	0x240032f0
 8001464:	240032ec 	.word	0x240032ec
 8001468:	240032ae 	.word	0x240032ae
 800146c:	24000004 	.word	0x24000004
 8001470:	3f4ccccd 	.word	0x3f4ccccd
 8001474:	3951b717 	.word	0x3951b717
 8001478:	40a00000 	.word	0x40a00000
				if(wait_time<=0)calib_failed=1;
 800147c:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <updateCalibration+0x874>)
 800147e:	2001      	movs	r0, #1
 8001480:	497d      	ldr	r1, [pc, #500]	; (8001678 <updateCalibration+0x878>)
 8001482:	7018      	strb	r0, [r3, #0]
 8001484:	e582      	b.n	8000f8c <updateCalibration+0x18c>
				if(wait_time<=0)calib_failed=1;
 8001486:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <updateCalibration+0x874>)
 8001488:	2101      	movs	r1, #1
 800148a:	7019      	strb	r1, [r3, #0]
 800148c:	e5d8      	b.n	8001040 <updateCalibration+0x240>
				if(wait_time<=0)calib_failed=1;
 800148e:	4b79      	ldr	r3, [pc, #484]	; (8001674 <updateCalibration+0x874>)
 8001490:	2101      	movs	r1, #1
 8001492:	7019      	strb	r1, [r3, #0]
 8001494:	e766      	b.n	8001364 <updateCalibration+0x564>
				if(wait_time<=0)calib_failed=1;
 8001496:	4b77      	ldr	r3, [pc, #476]	; (8001674 <updateCalibration+0x874>)
 8001498:	2101      	movs	r1, #1
 800149a:	7019      	strb	r1, [r3, #0]
 800149c:	e5fe      	b.n	800109c <updateCalibration+0x29c>
				if(wait_time<=0)calib_failed=1;
 800149e:	4b75      	ldr	r3, [pc, #468]	; (8001674 <updateCalibration+0x874>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	7019      	strb	r1, [r3, #0]
 80014a4:	e5a4      	b.n	8000ff0 <updateCalibration+0x1f0>
				int32_t middle = (theta_min + theta_max)/2;
 80014a6:	4d75      	ldr	r5, [pc, #468]	; (800167c <updateCalibration+0x87c>)
				wait_time=1.5f;
 80014a8:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
				int32_t middle = (theta_min + theta_max)/2;
 80014ac:	4974      	ldr	r1, [pc, #464]	; (8001680 <updateCalibration+0x880>)
				wait_time=1.5f;
 80014ae:	6018      	str	r0, [r3, #0]
				calibration_mode = CALIB_BEEP;
 80014b0:	200a      	movs	r0, #10
				int32_t middle = (theta_min + theta_max)/2;
 80014b2:	682b      	ldr	r3, [r5, #0]
 80014b4:	6809      	ldr	r1, [r1, #0]
				calibration_mode = CALIB_BEEP;
 80014b6:	7010      	strb	r0, [r2, #0]
				setCounter(2, pcounter[2] - middle);
 80014b8:	2002      	movs	r0, #2
				int32_t middle = (theta_min + theta_max)/2;
 80014ba:	185b      	adds	r3, r3, r1
				setCounter(2, pcounter[2] - middle);
 80014bc:	68a1      	ldr	r1, [r4, #8]
				int32_t middle = (theta_min + theta_max)/2;
 80014be:	bf48      	it	mi
 80014c0:	3301      	addmi	r3, #1
				setCounter(2, pcounter[2] - middle);
 80014c2:	eba1 0163 	sub.w	r1, r1, r3, asr #1
}
 80014c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
				setCounter(2, pcounter[2] - middle);
 80014ca:	f000 ba79 	b.w	80019c0 <setCounter>
				if(theta<theta_min)theta_min=theta;
 80014ce:	4a6b      	ldr	r2, [pc, #428]	; (800167c <updateCalibration+0x87c>)
				int32_t theta=pcounter[2];
 80014d0:	68a3      	ldr	r3, [r4, #8]
				if(theta<theta_min)theta_min=theta;
 80014d2:	6811      	ldr	r1, [r2, #0]
 80014d4:	4299      	cmp	r1, r3
 80014d6:	bfc8      	it	gt
 80014d8:	6013      	strgt	r3, [r2, #0]
				if(theta>theta_max)theta_max=theta;
 80014da:	4a69      	ldr	r2, [pc, #420]	; (8001680 <updateCalibration+0x880>)
 80014dc:	6811      	ldr	r1, [r2, #0]
 80014de:	4299      	cmp	r1, r3
 80014e0:	f6bf aeec 	bge.w	80012bc <updateCalibration+0x4bc>
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e6e9      	b.n	80012bc <updateCalibration+0x4bc>
					calibration_mode = CALIB_DONE;
 80014e8:	230c      	movs	r3, #12
 80014ea:	7013      	strb	r3, [r2, #0]
					rPWM[0]=0;
 80014ec:	6039      	str	r1, [r7, #0]
					break;
 80014ee:	e502      	b.n	8000ef6 <updateCalibration+0xf6>
	float p_y =  ( (float)mycounter[1])*(DISTANCE_PER_TURN_Y/PPRY);
 80014f0:	ed96 7a01 	vldr	s14, [r6, #4]
	return target[1]-p_y;
 80014f4:	4960      	ldr	r1, [pc, #384]	; (8001678 <updateCalibration+0x878>)
	float p_y =  ( (float)mycounter[1])*(DISTANCE_PER_TURN_Y/PPRY);
 80014f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	return target[1]-p_y;
 80014fa:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8001684 <updateCalibration+0x884>
 80014fe:	edd1 7a01 	vldr	s15, [r1, #4]
			if(wait_time<=0 || my_limit_status & LIMIT_Y_UP || fabs(calibGetDeltaY())>.08f )
 8001502:	eddf 6a61 	vldr	s13, [pc, #388]	; 8001688 <updateCalibration+0x888>
	return target[1]-p_y;
 8001506:	eee7 7a46 	vfms.f32	s15, s14, s12
			if(wait_time<=0 || my_limit_status & LIMIT_Y_UP || fabs(calibGetDeltaY())>.08f )
 800150a:	eef0 7ae7 	vabs.f32	s15, s15
 800150e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	f73f ad39 	bgt.w	8000f8c <updateCalibration+0x18c>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 800151a:	ed96 7a00 	vldr	s14, [r6]
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 800151e:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800168c <updateCalibration+0x88c>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001526:	edd1 7a00 	vldr	s15, [r1]
 800152a:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001690 <updateCalibration+0x890>
 800152e:	eee7 7a46 	vfms.f32	s15, s14, s12
 8001532:	eef0 7ae7 	vabs.f32	s15, s15
 8001536:	eef4 7ae6 	vcmpe.f32	s15, s13
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	f57f aebd 	bpl.w	80012bc <updateCalibration+0x4bc>
		target[0] += target_v[0]*mydt;
 8001542:	4a54      	ldr	r2, [pc, #336]	; (8001694 <updateCalibration+0x894>)
 8001544:	edd2 6a00 	vldr	s13, [r2]
 8001548:	ed93 7a00 	vldr	s14, [r3]
 800154c:	edd1 7a00 	vldr	s15, [r1]
 8001550:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001554:	edc1 7a00 	vstr	s15, [r1]
		target[1] += target_v[1]*mydt;
 8001558:	edd2 6a01 	vldr	s13, [r2, #4]
 800155c:	ed93 7a00 	vldr	s14, [r3]
 8001560:	edd1 7a01 	vldr	s15, [r1, #4]
 8001564:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001568:	edc1 7a01 	vstr	s15, [r1, #4]
}
 800156c:	e6a6      	b.n	80012bc <updateCalibration+0x4bc>
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 800156e:	edd6 6a00 	vldr	s13, [r6]
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001572:	4a41      	ldr	r2, [pc, #260]	; (8001678 <updateCalibration+0x878>)
	float p_x =   ( (float)mycounter[0])*(DISTANCE_PER_TURN_X/PPRX) ;
 8001574:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	if(fabs(target[0]-p_x)<.15f) //only move it if it manages to follow.
 8001578:	eddf 5a44 	vldr	s11, [pc, #272]	; 800168c <updateCalibration+0x88c>
 800157c:	ed92 7a00 	vldr	s14, [r2]
 8001580:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8001690 <updateCalibration+0x890>
 8001584:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8001588:	eeb0 7ac7 	vabs.f32	s14, s14
 800158c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d514      	bpl.n	80015c0 <updateCalibration+0x7c0>
		target[0] += target_v[0]*mydt;
 8001596:	493f      	ldr	r1, [pc, #252]	; (8001694 <updateCalibration+0x894>)
 8001598:	ed91 6a00 	vldr	s12, [r1]
 800159c:	edd3 6a00 	vldr	s13, [r3]
 80015a0:	ed92 7a00 	vldr	s14, [r2]
 80015a4:	eea6 7a26 	vfma.f32	s14, s12, s13
 80015a8:	ed82 7a00 	vstr	s14, [r2]
		target[1] += target_v[1]*mydt;
 80015ac:	ed91 6a01 	vldr	s12, [r1, #4]
 80015b0:	edd3 6a00 	vldr	s13, [r3]
 80015b4:	ed92 7a01 	vldr	s14, [r2, #4]
 80015b8:	eea6 7a26 	vfma.f32	s14, s12, s13
 80015bc:	ed82 7a01 	vstr	s14, [r2, #4]
			if(wait_time<9.75f)target_v[0]=-calib_speed;
 80015c0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001698 <updateCalibration+0x898>
 80015c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	f57f ae76 	bpl.w	80012bc <updateCalibration+0x4bc>
 80015d0:	4a32      	ldr	r2, [pc, #200]	; (800169c <updateCalibration+0x89c>)
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <updateCalibration+0x894>)
 80015d4:	edd2 7a00 	vldr	s15, [r2]
 80015d8:	eef1 7a67 	vneg.f32	s15, s15
 80015dc:	edc3 7a00 	vstr	s15, [r3]
 80015e0:	e66c      	b.n	80012bc <updateCalibration+0x4bc>
				if(wait_time>1.f)
 80015e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e6:	edd6 7a00 	vldr	s15, [r6]
 80015ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	dd2f      	ble.n	8001654 <updateCalibration+0x854>
					beep_up = (beep_up+1)%8;
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <updateCalibration+0x8a0>)
 80015f6:	7813      	ldrb	r3, [r2, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	f003 0107 	and.w	r1, r3, #7
					if(beep_up>=4)
 80015fe:	075d      	lsls	r5, r3, #29
					beep_up = (beep_up+1)%8;
 8001600:	7011      	strb	r1, [r2, #0]
					if(beep_up>=4)
 8001602:	d524      	bpl.n	800164e <updateCalibration+0x84e>
						rPWM[1]+=7000*k_mul;
 8001604:	eddf 6a27 	vldr	s13, [pc, #156]	; 80016a4 <updateCalibration+0x8a4>
						rPWM[1]+=-7000*k_mul;
 8001608:	edd7 7a01 	vldr	s15, [r7, #4]
 800160c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						rPWM[0]+=-7000*k_mul;
 8001610:	edd7 7a00 	vldr	s15, [r7]
 8001614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						rPWM[1]+=-7000*k_mul;
 8001618:	eea1 7aa6 	vfma.f32	s14, s3, s13
						rPWM[0]+=-7000*k_mul;
 800161c:	eee1 7aa6 	vfma.f32	s15, s3, s13
						rPWM[1]+=-7000*k_mul;
 8001620:	eebd 7ac7 	vcvt.s32.f32	s14, s14
						rPWM[0]+=-7000*k_mul;
 8001624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						rPWM[1]+=-7000*k_mul;
 8001628:	ed87 7a01 	vstr	s14, [r7, #4]
						rPWM[0]+=-7000*k_mul;
 800162c:	edc7 7a00 	vstr	s15, [r7]
 8001630:	e461      	b.n	8000ef6 <updateCalibration+0xf6>
					beep_up = (beep_up+1)%6;
 8001632:	491b      	ldr	r1, [pc, #108]	; (80016a0 <updateCalibration+0x8a0>)
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <updateCalibration+0x8a8>)
 8001636:	780a      	ldrb	r2, [r1, #0]
 8001638:	3201      	adds	r2, #1
 800163a:	fba3 0302 	umull	r0, r3, r3, r2
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001644:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
					if(beep_up>=3)
 8001648:	2b02      	cmp	r3, #2
					beep_up = (beep_up+1)%6;
 800164a:	700b      	strb	r3, [r1, #0]
					if(beep_up>=3)
 800164c:	dcda      	bgt.n	8001604 <updateCalibration+0x804>
						rPWM[1]+=-7000*k_mul;
 800164e:	eddf 6a17 	vldr	s13, [pc, #92]	; 80016ac <updateCalibration+0x8ac>
 8001652:	e7d9      	b.n	8001608 <updateCalibration+0x808>
				if(wait_time>.5f)
 8001654:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	dce7      	bgt.n	8001632 <updateCalibration+0x832>
					beep_up = (beep_up+1)%4;
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <updateCalibration+0x8a0>)
 8001664:	7813      	ldrb	r3, [r2, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	f003 0103 	and.w	r1, r3, #3
					if(beep_up>=2)
 800166c:	079c      	lsls	r4, r3, #30
					beep_up = (beep_up+1)%4;
 800166e:	7011      	strb	r1, [r2, #0]
					if(beep_up>=2)
 8001670:	d5ed      	bpl.n	800164e <updateCalibration+0x84e>
 8001672:	e7c7      	b.n	8001604 <updateCalibration+0x804>
 8001674:	240032ae 	.word	0x240032ae
 8001678:	240032dc 	.word	0x240032dc
 800167c:	240032f0 	.word	0x240032f0
 8001680:	240032ec 	.word	0x240032ec
 8001684:	3627c5ac 	.word	0x3627c5ac
 8001688:	3da3d70a 	.word	0x3da3d70a
 800168c:	3727c5ac 	.word	0x3727c5ac
 8001690:	3e19999a 	.word	0x3e19999a
 8001694:	240032e4 	.word	0x240032e4
 8001698:	411c0000 	.word	0x411c0000
 800169c:	24000000 	.word	0x24000000
 80016a0:	240032ad 	.word	0x240032ad
 80016a4:	45dac000 	.word	0x45dac000
 80016a8:	aaaaaaab 	.word	0xaaaaaaab
 80016ac:	c5dac000 	.word	0xc5dac000

080016b0 <SlowThisDown>:


#pragma GCC optimize ("O0")

void SlowThisDown()
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<2;i++)dummy+=dummy+1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	e008      	b.n	80016ce <SlowThisDown+0x1e>
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <SlowThisDown+0x34>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <SlowThisDown+0x34>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3301      	adds	r3, #1
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d9f3      	bls.n	80016bc <SlowThisDown+0xc>
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	24003320 	.word	0x24003320

080016e8 <SPITransmitReceive>:
#pragma GCC pop_options


void SPITransmitReceive()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09a      	sub	sp, #104	; 0x68
 80016ec:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2102      	movs	r1, #2
 80016f2:	487f      	ldr	r0, [pc, #508]	; (80018f0 <SPITransmitReceive+0x208>)
 80016f4:	f002 f81a 	bl	800372c <HAL_GPIO_WritePin>

	SlowThisDown();
 80016f8:	f7ff ffda 	bl	80016b0 <SlowThisDown>

	uint8_t* pHDR=(uint8_t*)(aTxBuffer);
 80016fc:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <SPITransmitReceive+0x20c>)
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t* pCMD=(uint8_t*)(aTxBuffer+1);
 8001700:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <SPITransmitReceive+0x210>)
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t* pEMG=(uint8_t*)(aTxBuffer+2);
 8001704:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <SPITransmitReceive+0x214>)
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t* pPWMX=(uint16_t*)(aTxBuffer+12);
 8001708:	4b7d      	ldr	r3, [pc, #500]	; (8001900 <SPITransmitReceive+0x218>)
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t* pPWMY=(uint16_t*)(aTxBuffer+14); //Write these last! So we can compute them in the middle of the message!
 800170c:	4b7d      	ldr	r3, [pc, #500]	; (8001904 <SPITransmitReceive+0x21c>)
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38

	uint8_t vCMD=1;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(b_startcalib)
 8001716:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <SPITransmitReceive+0x220>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <SPITransmitReceive+0x44>
	{
		vCMD=2;
 8001720:	2302      	movs	r3, #2
 8001722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		b_startcalib=0;
 8001726:	4b78      	ldr	r3, [pc, #480]	; (8001908 <SPITransmitReceive+0x220>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
	}
	*pHDR='C';
 800172c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800172e:	2243      	movs	r2, #67	; 0x43
 8001730:	701a      	strb	r2, [r3, #0]
	*pCMD=vCMD;
 8001732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001734:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001738:	701a      	strb	r2, [r3, #0]
	*pEMG=emagnet;
 800173a:	4b74      	ldr	r3, [pc, #464]	; (800190c <SPITransmitReceive+0x224>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001742:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, 8, 100);
 8001744:	2364      	movs	r3, #100	; 0x64
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2308      	movs	r3, #8
 800174a:	4a71      	ldr	r2, [pc, #452]	; (8001910 <SPITransmitReceive+0x228>)
 800174c:	4969      	ldr	r1, [pc, #420]	; (80018f4 <SPITransmitReceive+0x20c>)
 800174e:	4871      	ldr	r0, [pc, #452]	; (8001914 <SPITransmitReceive+0x22c>)
 8001750:	f004 f97e 	bl	8005a50 <HAL_SPI_TransmitReceive>
 8001754:	4603      	mov	r3, r0
 8001756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	{ //Update counter x and y.
		int32_t* pT5 = (int32_t*)(aRxBuffer);
 800175a:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <SPITransmitReceive+0x228>)
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
		int32_t* pT2 = (int32_t*)(aRxBuffer+4);
 800175e:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <SPITransmitReceive+0x230>)
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c

		uint32_t old_counter[2];
		for(int i=0;i<2;++i)old_counter[i]=counter[i];
 8001762:	2300      	movs	r3, #0
 8001764:	65bb      	str	r3, [r7, #88]	; 0x58
 8001766:	e00d      	b.n	8001784 <SPITransmitReceive+0x9c>
 8001768:	4a6c      	ldr	r2, [pc, #432]	; (800191c <SPITransmitReceive+0x234>)
 800176a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	461a      	mov	r2, r3
 8001772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	3360      	adds	r3, #96	; 0x60
 8001778:	443b      	add	r3, r7
 800177a:	f843 2c4c 	str.w	r2, [r3, #-76]
 800177e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001780:	3301      	adds	r3, #1
 8001782:	65bb      	str	r3, [r7, #88]	; 0x58
 8001784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001786:	2b01      	cmp	r3, #1
 8001788:	ddee      	ble.n	8001768 <SPITransmitReceive+0x80>

		counter[0]=*pT5;
 800178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a63      	ldr	r2, [pc, #396]	; (800191c <SPITransmitReceive+0x234>)
 8001790:	6013      	str	r3, [r2, #0]
		counter[1]=*pT2;
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a61      	ldr	r2, [pc, #388]	; (800191c <SPITransmitReceive+0x234>)
 8001798:	6053      	str	r3, [r2, #4]

		for(int i=0;i<2;++i)velocity[i] = counter[i]-old_counter[i];
 800179a:	2300      	movs	r3, #0
 800179c:	657b      	str	r3, [r7, #84]	; 0x54
 800179e:	e013      	b.n	80017c8 <SPITransmitReceive+0xe0>
 80017a0:	4a5e      	ldr	r2, [pc, #376]	; (800191c <SPITransmitReceive+0x234>)
 80017a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	461a      	mov	r2, r3
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	3360      	adds	r3, #96	; 0x60
 80017b0:	443b      	add	r3, r7
 80017b2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4619      	mov	r1, r3
 80017ba:	4a59      	ldr	r2, [pc, #356]	; (8001920 <SPITransmitReceive+0x238>)
 80017bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80017c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c4:	3301      	adds	r3, #1
 80017c6:	657b      	str	r3, [r7, #84]	; 0x54
 80017c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	dde8      	ble.n	80017a0 <SPITransmitReceive+0xb8>
	}


	if(b_demo)
 80017ce:	4b55      	ldr	r3, [pc, #340]	; (8001924 <SPITransmitReceive+0x23c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d010      	beq.n	80017fa <SPITransmitReceive+0x112>
	{
		int32_t rPWM[2];
		updateCalibration(counter, velocity, limit_status, &rPWM);
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <SPITransmitReceive+0x240>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	494f      	ldr	r1, [pc, #316]	; (8001920 <SPITransmitReceive+0x238>)
 80017e4:	484d      	ldr	r0, [pc, #308]	; (800191c <SPITransmitReceive+0x234>)
 80017e6:	f7ff fb0b 	bl	8000e00 <updateCalibration>

		vPWMX = rPWM[0];
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	4b4f      	ldr	r3, [pc, #316]	; (800192c <SPITransmitReceive+0x244>)
 80017f0:	801a      	strh	r2, [r3, #0]
		vPWMY = rPWM[1];
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <SPITransmitReceive+0x248>)
 80017f8:	801a      	strh	r2, [r3, #0]
	}
	*pPWMX=vPWMX;
 80017fa:	4b4c      	ldr	r3, [pc, #304]	; (800192c <SPITransmitReceive+0x244>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	b29a      	uxth	r2, r3
 8001802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001804:	801a      	strh	r2, [r3, #0]
	*pPWMY=vPWMY;
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <SPITransmitReceive+0x248>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b21b      	sxth	r3, r3
 800180c:	b29a      	uxth	r2, r3
 800180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001810:	801a      	strh	r2, [r3, #0]

	state = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)(aTxBuffer+8), (uint8_t*)(aRxBuffer+8), 8, 100);
 8001812:	4948      	ldr	r1, [pc, #288]	; (8001934 <SPITransmitReceive+0x24c>)
 8001814:	4a48      	ldr	r2, [pc, #288]	; (8001938 <SPITransmitReceive+0x250>)
 8001816:	2364      	movs	r3, #100	; 0x64
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2308      	movs	r3, #8
 800181c:	483d      	ldr	r0, [pc, #244]	; (8001914 <SPITransmitReceive+0x22c>)
 800181e:	f004 f917 	bl	8005a50 <HAL_SPI_TransmitReceive>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	2102      	movs	r1, #2
 800182c:	4830      	ldr	r0, [pc, #192]	; (80018f0 <SPITransmitReceive+0x208>)
 800182e:	f001 ff7d 	bl	800372c <HAL_GPIO_WritePin>

	int16_t* pT3 = (int16_t*)(aRxBuffer+8);
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <SPITransmitReceive+0x250>)
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
    pHDR = (uint8_t*)(aRxBuffer+10);
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <SPITransmitReceive+0x254>)
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t* plimit = (uint8_t*)(aRxBuffer+11);
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <SPITransmitReceive+0x258>)
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t* pcalibrationmode = (uint8_t*)(aRxBuffer+12);
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <SPITransmitReceive+0x25c>)
 8001840:	623b      	str	r3, [r7, #32]
	uint8_t* pvFreqDiv = (uint8_t*)(aRxBuffer+13);
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <SPITransmitReceive+0x260>)
 8001844:	61fb      	str	r3, [r7, #28]

	hdr_received = *pHDR;
 8001846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	4b40      	ldr	r3, [pc, #256]	; (800194c <SPITransmitReceive+0x264>)
 800184c:	701a      	strb	r2, [r3, #0]

	if(*pHDR=='C')
 800184e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b43      	cmp	r3, #67	; 0x43
 8001854:	d147      	bne.n	80018e6 <SPITransmitReceive+0x1fe>
	{
		uint32_t old_counter[3];
		for(int i=2;i<3;++i)old_counter[i]=counter[i];
 8001856:	2302      	movs	r3, #2
 8001858:	653b      	str	r3, [r7, #80]	; 0x50
 800185a:	e00d      	b.n	8001878 <SPITransmitReceive+0x190>
 800185c:	4a2f      	ldr	r2, [pc, #188]	; (800191c <SPITransmitReceive+0x234>)
 800185e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	461a      	mov	r2, r3
 8001866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	3360      	adds	r3, #96	; 0x60
 800186c:	443b      	add	r3, r7
 800186e:	f843 2c60 	str.w	r2, [r3, #-96]
 8001872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001874:	3301      	adds	r3, #1
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
 8001878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800187a:	2b02      	cmp	r3, #2
 800187c:	ddee      	ble.n	800185c <SPITransmitReceive+0x174>

//		counter[0]=*pT5; //0 and 1 are being updated before the transmission of the second group of 8 characters.
//		counter[1]=*pT2; // so only update the angle Theta counter. (Which will be one frame late to the control loop, but this is not critical.
		counter[2]=*pT3;
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	461a      	mov	r2, r3
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <SPITransmitReceive+0x234>)
 8001888:	609a      	str	r2, [r3, #8]

		for(int i=2;i<3;++i)velocity[i]=counter[i]-old_counter[i];
 800188a:	2302      	movs	r3, #2
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800188e:	e013      	b.n	80018b8 <SPITransmitReceive+0x1d0>
 8001890:	4a22      	ldr	r2, [pc, #136]	; (800191c <SPITransmitReceive+0x234>)
 8001892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	461a      	mov	r2, r3
 800189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	3360      	adds	r3, #96	; 0x60
 80018a0:	443b      	add	r3, r7
 80018a2:	f853 3c60 	ldr.w	r3, [r3, #-96]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	4619      	mov	r1, r3
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <SPITransmitReceive+0x238>)
 80018ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80018b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b4:	3301      	adds	r3, #1
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	dde8      	ble.n	8001890 <SPITransmitReceive+0x1a8>

		limit_status=*plimit;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <SPITransmitReceive+0x240>)
 80018c4:	701a      	strb	r2, [r3, #0]
		controller_calibration_mode = *pcalibrationmode;
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <SPITransmitReceive+0x268>)
 80018cc:	701a      	strb	r2, [r3, #0]
		vFreqDiv = *pvFreqDiv;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <SPITransmitReceive+0x26c>)
 80018d4:	701a      	strb	r2, [r3, #0]

		if(vFreqDiv==0)vFreqDiv=1;
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <SPITransmitReceive+0x26c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <SPITransmitReceive+0x1fe>
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <SPITransmitReceive+0x26c>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
	}

}
 80018e6:	bf00      	nop
 80018e8:	3760      	adds	r7, #96	; 0x60
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	58020800 	.word	0x58020800
 80018f4:	24000058 	.word	0x24000058
 80018f8:	24000059 	.word	0x24000059
 80018fc:	2400005a 	.word	0x2400005a
 8001900:	24000064 	.word	0x24000064
 8001904:	24000066 	.word	0x24000066
 8001908:	240032f8 	.word	0x240032f8
 800190c:	24003301 	.word	0x24003301
 8001910:	24000018 	.word	0x24000018
 8001914:	240035a0 	.word	0x240035a0
 8001918:	2400001c 	.word	0x2400001c
 800191c:	24003310 	.word	0x24003310
 8001920:	24003304 	.word	0x24003304
 8001924:	24003300 	.word	0x24003300
 8001928:	2400331c 	.word	0x2400331c
 800192c:	240032fc 	.word	0x240032fc
 8001930:	240032fa 	.word	0x240032fa
 8001934:	24000060 	.word	0x24000060
 8001938:	24000020 	.word	0x24000020
 800193c:	24000022 	.word	0x24000022
 8001940:	24000023 	.word	0x24000023
 8001944:	24000024 	.word	0x24000024
 8001948:	24000025 	.word	0x24000025
 800194c:	240032fe 	.word	0x240032fe
 8001950:	240032ff 	.word	0x240032ff
 8001954:	24000014 	.word	0x24000014

08001958 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SPULSE_Pin)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001968:	d101      	bne.n	800196e <HAL_GPIO_EXTI_Callback+0x16>
	{
		SPITransmitReceive();
 800196a:	f7ff febd 	bl	80016e8 <SPITransmitReceive>
/*	if(GPIO_Pin == CSS_Pin)
	{


	}*/
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop

08001978 <getDt>:



float getDt()
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	return 1.f/ ( (float)( 20000/vFreqDiv));
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <getDt+0x34>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001988:	fb93 f3f2 	sdiv	r3, r3, r2
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001998:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800199c:	eef0 7a66 	vmov.f32	s15, s13
}
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	24000014 	.word	0x24000014

080019b0 <resetCounter>:
	return ( (float)( 20000/vFreqDiv));
}

//Can't do that from here! For compatibility with calibration.c
void resetCounter()
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <setCounter>:

//same
void setCounter(uint8_t id_tim, int32_t value)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <StartDefaultTask>:
{
 80019d8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	  printf("LCD Init:%i\n",counter[0]);
 80019dc:	4dab      	ldr	r5, [pc, #684]	; (8001c8c <StartDefaultTask+0x2b4>)
      ST7735_FillRectangle(0, 0, 162, 82, BLACK);
 80019de:	262a      	movs	r6, #42	; 0x2a
 80019e0:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8001ccc <StartDefaultTask+0x2f4>
 80019e4:	f04f 0901 	mov.w	r9, #1
 80019e8:	f04f 0802 	mov.w	r8, #2
{
 80019ec:	ed2d 8b02 	vpush	{d8}
 80019f0:	b086      	sub	sp, #24
	alt_main();
 80019f2:	f7ff f927 	bl	8000c44 <alt_main>
	  printf("LCD Init:%i\n",counter[0]);
 80019f6:	6829      	ldr	r1, [r5, #0]
 80019f8:	48a5      	ldr	r0, [pc, #660]	; (8001c90 <StartDefaultTask+0x2b8>)
 80019fa:	f007 fbcb 	bl	8009194 <iprintf>
	  ST7735_Init(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7fe ff8c 	bl	800091c <ST7735_Init>
	  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0a:	48a2      	ldr	r0, [pc, #648]	; (8001c94 <StartDefaultTask+0x2bc>)
 8001a0c:	f001 fe8e 	bl	800372c <HAL_GPIO_WritePin>
      ST7735_FillRectangle(0, 0, 162, 82, BLACK);
 8001a10:	2100      	movs	r1, #0
 8001a12:	2352      	movs	r3, #82	; 0x52
 8001a14:	22a2      	movs	r2, #162	; 0xa2
 8001a16:	4608      	mov	r0, r1
 8001a18:	9100      	str	r1, [sp, #0]
 8001a1a:	f7ff f86d 	bl	8000af8 <ST7735_FillRectangle>
 8001a1e:	e023      	b.n	8001a68 <StartDefaultTask+0x90>
			  ST7735_DrawImage(0,82-y-38, 162, 38+y, logo);
 8001a20:	4623      	mov	r3, r4
 8001a22:	4c9d      	ldr	r4, [pc, #628]	; (8001c98 <StartDefaultTask+0x2c0>)
 8001a24:	4631      	mov	r1, r6
 8001a26:	22a2      	movs	r2, #162	; 0xa2
 8001a28:	2000      	movs	r0, #0
 8001a2a:	9400      	str	r4, [sp, #0]
 8001a2c:	f7ff f8c0 	bl	8000bb0 <ST7735_DrawImage>
			  ST7735_DrawImage(0,82-y-39, 162, 1, logo + 162*37); //black line
 8001a30:	4c9a      	ldr	r4, [pc, #616]	; (8001c9c <StartDefaultTask+0x2c4>)
 8001a32:	1e71      	subs	r1, r6, #1
 8001a34:	2301      	movs	r3, #1
 8001a36:	22a2      	movs	r2, #162	; 0xa2
 8001a38:	2000      	movs	r0, #0
 8001a3a:	b289      	uxth	r1, r1
 8001a3c:	9400      	str	r4, [sp, #0]
 8001a3e:	f7ff f8b7 	bl	8000bb0 <ST7735_DrawImage>
		  osDelay(20);
 8001a42:	2014      	movs	r0, #20
 8001a44:	f005 fa50 	bl	8006ee8 <osDelay>
	  while(y>-39)
 8001a48:	f64f 73d9 	movw	r3, #65497	; 0xffd9
 8001a4c:	4599      	cmp	r9, r3
 8001a4e:	d04e      	beq.n	8001aee <StartDefaultTask+0x116>
 8001a50:	f108 38ff 	add.w	r8, r8, #4294967295
 8001a54:	f109 39ff 	add.w	r9, r9, #4294967295
 8001a58:	3601      	adds	r6, #1
 8001a5a:	f50b 7ba2 	add.w	fp, fp, #324	; 0x144
 8001a5e:	fa1f f888 	uxth.w	r8, r8
 8001a62:	fa1f f989 	uxth.w	r9, r9
 8001a66:	b2b6      	uxth	r6, r6
			  ST7735_DrawImage(0,0, 162, 38+y, logo - 162*y);
 8001a68:	f1c6 0452 	rsb	r4, r6, #82	; 0x52
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	fa0f fa88 	sxth.w	sl, r8
 8001a72:	22a2      	movs	r2, #162	; 0xa2
 8001a74:	b2a4      	uxth	r4, r4
		  if(y>0)
 8001a76:	458a      	cmp	sl, r1
			  ST7735_DrawImage(0,0, 162, 38+y, logo - 162*y);
 8001a78:	4623      	mov	r3, r4
		  if(y>0)
 8001a7a:	dc15      	bgt.n	8001aa8 <StartDefaultTask+0xd0>
			  ST7735_DrawImage(0,0, 162, 38+y, logo - 162*y);
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	f8cd b000 	str.w	fp, [sp]
 8001a82:	f7ff f895 	bl	8000bb0 <ST7735_DrawImage>
			  if(y==-10)
 8001a86:	f11a 0f0a 	cmn.w	sl, #10
 8001a8a:	d1c9      	bne.n	8001a20 <StartDefaultTask+0x48>
				  ST7735_WriteString(0,40-18/2, "Palans --> SP", Font_11x18, WHITE, BLACK);
 8001a8c:	4984      	ldr	r1, [pc, #528]	; (8001ca0 <StartDefaultTask+0x2c8>)
 8001a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a92:	2000      	movs	r0, #0
 8001a94:	684b      	ldr	r3, [r1, #4]
 8001a96:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4a81      	ldr	r2, [pc, #516]	; (8001ca4 <StartDefaultTask+0x2cc>)
 8001a9e:	680b      	ldr	r3, [r1, #0]
 8001aa0:	211f      	movs	r1, #31
 8001aa2:	f7fe ffd1 	bl	8000a48 <ST7735_WriteString>
 8001aa6:	e7bb      	b.n	8001a20 <StartDefaultTask+0x48>
			  ST7735_DrawImage(0,y, 162, 38, logo);
 8001aa8:	4b7b      	ldr	r3, [pc, #492]	; (8001c98 <StartDefaultTask+0x2c0>)
 8001aaa:	4641      	mov	r1, r8
 8001aac:	2000      	movs	r0, #0
 8001aae:	461c      	mov	r4, r3
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2326      	movs	r3, #38	; 0x26
 8001ab4:	f7ff f87c 	bl	8000bb0 <ST7735_DrawImage>
			  ST7735_DrawImage(0,82-y - 38, 162, 38, logo);
 8001ab8:	4631      	mov	r1, r6
 8001aba:	2326      	movs	r3, #38	; 0x26
 8001abc:	22a2      	movs	r2, #162	; 0xa2
 8001abe:	2000      	movs	r0, #0
 8001ac0:	9400      	str	r4, [sp, #0]
 8001ac2:	f7ff f875 	bl	8000bb0 <ST7735_DrawImage>
			  ST7735_DrawImage(0,82-y-39, 162, 1, logo + 162*37); //black line
 8001ac6:	4b75      	ldr	r3, [pc, #468]	; (8001c9c <StartDefaultTask+0x2c4>)
 8001ac8:	1e71      	subs	r1, r6, #1
 8001aca:	2000      	movs	r0, #0
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	22a2      	movs	r2, #162	; 0xa2
 8001ad0:	b289      	uxth	r1, r1
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f7ff f86c 	bl	8000bb0 <ST7735_DrawImage>
		  if(y==2)osDelay(500);
 8001ad8:	f1ba 0f02 	cmp.w	sl, #2
 8001adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ae0:	d101      	bne.n	8001ae6 <StartDefaultTask+0x10e>
 8001ae2:	f005 fa01 	bl	8006ee8 <osDelay>
		  osDelay(20);
 8001ae6:	2014      	movs	r0, #20
 8001ae8:	f005 f9fe 	bl	8006ee8 <osDelay>
 8001aec:	e7b0      	b.n	8001a50 <StartDefaultTask+0x78>
 8001aee:	4c6e      	ldr	r4, [pc, #440]	; (8001ca8 <StartDefaultTask+0x2d0>)
 8001af0:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8001cd0 <StartDefaultTask+0x2f8>
 8001af4:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8001cd4 <StartDefaultTask+0x2fc>
 8001af8:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8001cd8 <StartDefaultTask+0x300>
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001afc:	eddf 8a6b 	vldr	s17, [pc, #428]	; 8001cac <StartDefaultTask+0x2d4>
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001b00:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 8001cb0 <StartDefaultTask+0x2d8>
 8001b04:	4e6b      	ldr	r6, [pc, #428]	; (8001cb4 <StartDefaultTask+0x2dc>)
 8001b06:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8001cdc <StartDefaultTask+0x304>
		    SystemCoreClockUpdate();
 8001b0a:	f001 f869 	bl	8002be0 <SystemCoreClockUpdate>
			scanKeyboard();
 8001b0e:	f000 fa07 	bl	8001f20 <scanKeyboard>
			if(!b_demo)
 8001b12:	7823      	ldrb	r3, [r4, #0]
 8001b14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8087 	beq.w	8001c2c <StartDefaultTask+0x254>
			if(keyClicked('#'))
 8001b1e:	2023      	movs	r0, #35	; 0x23
 8001b20:	f000 f9ea 	bl	8001ef8 <keyClicked>
				screeninfo.page = (screeninfo.page+1)%2;
 8001b24:	f89b 3000 	ldrb.w	r3, [fp]
			if(keyClicked('#'))
 8001b28:	b120      	cbz	r0, 8001b34 <StartDefaultTask+0x15c>
				screeninfo.page = (screeninfo.page+1)%2;
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	f88b 3000 	strb.w	r3, [fp]
			if(screeninfo.page==0)
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d069      	beq.n	8001c0c <StartDefaultTask+0x234>
			if(keyClicked('D'))
 8001b38:	2044      	movs	r0, #68	; 0x44
 8001b3a:	f000 f9dd 	bl	8001ef8 <keyClicked>
 8001b3e:	b160      	cbz	r0, 8001b5a <StartDefaultTask+0x182>
				b_demo = (b_demo+1)%2;
 8001b40:	7823      	ldrb	r3, [r4, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	7023      	strb	r3, [r4, #0]
				if(b_demo)
 8001b4a:	7823      	ldrb	r3, [r4, #0]
 8001b4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8092 	beq.w	8001c7a <StartDefaultTask+0x2a2>
					startDemo();
 8001b56:	f7ff f885 	bl	8000c64 <startDemo>
			if(keyClicked('*'))
 8001b5a:	202a      	movs	r0, #42	; 0x2a
 8001b5c:	f000 f9cc 	bl	8001ef8 <keyClicked>
 8001b60:	b110      	cbz	r0, 8001b68 <StartDefaultTask+0x190>
				b_startcalib=1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <StartDefaultTask+0x2e0>)
 8001b66:	7013      	strb	r3, [r2, #0]
				screeninfo.counter[i] = counter[i];
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	f8cb 3004 	str.w	r3, [fp, #4]
				screeninfo.velocity[i] = velocity[i];
 8001b6e:	6833      	ldr	r3, [r6, #0]
 8001b70:	f8cb 3010 	str.w	r3, [fp, #16]
				screeninfo.counter[i] = counter[i];
 8001b74:	686b      	ldr	r3, [r5, #4]
 8001b76:	f8cb 3008 	str.w	r3, [fp, #8]
				screeninfo.velocity[i] = velocity[i];
 8001b7a:	6873      	ldr	r3, [r6, #4]
 8001b7c:	f8cb 3014 	str.w	r3, [fp, #20]
				screeninfo.counter[i] = counter[i];
 8001b80:	68ab      	ldr	r3, [r5, #8]
 8001b82:	f8cb 300c 	str.w	r3, [fp, #12]
				screeninfo.velocity[i] = velocity[i];
 8001b86:	68b3      	ldr	r3, [r6, #8]
 8001b88:	f8cb 3018 	str.w	r3, [fp, #24]
			screeninfo.header_char = hdr_received;
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <StartDefaultTask+0x2e4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	f88b 3021 	strb.w	r3, [fp, #33]	; 0x21
			screeninfo.freq_update = 20000/vFreqDiv;
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <StartDefaultTask+0x2e8>)
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ba0:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
			screeninfo.emagnet = emagnet;
 8001ba4:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <StartDefaultTask+0x2ec>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
			screeninfo.limit_status = limit_status;
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <StartDefaultTask+0x2f0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f88b 3020 	strb.w	r3, [fp, #32]
			screeninfo.pwm[0]=vPWMX;
 8001bb4:	f8ba 3000 	ldrh.w	r3, [sl]
 8001bb8:	f8ab 301c 	strh.w	r3, [fp, #28]
			screeninfo.pwm[1]=vPWMY;
 8001bbc:	f8b9 3000 	ldrh.w	r3, [r9]
			screeninfo.b_controlloop = isCalibratingMode(controller_calibration_mode);
 8001bc0:	f898 0000 	ldrb.w	r0, [r8]
			screeninfo.pwm[1]=vPWMY;
 8001bc4:	f8ab 301e 	strh.w	r3, [fp, #30]
			screeninfo.b_controlloop = isCalibratingMode(controller_calibration_mode);
 8001bc8:	f7ff f846 	bl	8000c58 <isCalibratingMode>
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001bcc:	eddb 7a01 	vldr	s15, [fp, #4]
			screeninfo.calibration_mode = controller_calibration_mode;// getCalibrationMode();
 8001bd0:	f898 3000 	ldrb.w	r3, [r8]
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001bd8:	eddb 7a02 	vldr	s15, [fp, #8]
			screeninfo.calibration_mode = controller_calibration_mode;// getCalibrationMode();
 8001bdc:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if(b_demo)
 8001be4:	7823      	ldrb	r3, [r4, #0]
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001be6:	ee27 7a28 	vmul.f32	s14, s14, s17
			screeninfo.b_controlloop = isCalibratingMode(controller_calibration_mode);
 8001bea:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001bee:	ee67 7a88 	vmul.f32	s15, s15, s16
				screeninfo.target[0]= ((float)screeninfo.counter[0])*PPR_TO_DISTANCE_X;
 8001bf2:	ed8b 7a0b 	vstr	s14, [fp, #44]	; 0x2c
				screeninfo.target[1]= ((float)screeninfo.counter[1])*PPR_TO_DISTANCE_Y;
 8001bf6:	edcb 7a0c 	vstr	s15, [fp, #48]	; 0x30
			if(b_demo)
 8001bfa:	b11b      	cbz	r3, 8001c04 <StartDefaultTask+0x22c>
				screeninfo.calibration_mode= getCalibrationMode();
 8001bfc:	f7ff f8fa 	bl	8000df4 <getCalibrationMode>
 8001c00:	f88b 0029 	strb.w	r0, [fp, #41]	; 0x29
			updateScreen(&screeninfo);
 8001c04:	4658      	mov	r0, fp
 8001c06:	f000 fddb 	bl	80027c0 <updateScreen>
	  {
 8001c0a:	e77e      	b.n	8001b0a <StartDefaultTask+0x132>
				if(keyClicked('A')){emagnet=100;}
 8001c0c:	2041      	movs	r0, #65	; 0x41
 8001c0e:	f000 f973 	bl	8001ef8 <keyClicked>
 8001c12:	b110      	cbz	r0, 8001c1a <StartDefaultTask+0x242>
 8001c14:	2364      	movs	r3, #100	; 0x64
 8001c16:	4a2b      	ldr	r2, [pc, #172]	; (8001cc4 <StartDefaultTask+0x2ec>)
 8001c18:	7013      	strb	r3, [r2, #0]
				if(keyClicked('B')){emagnet=0;}
 8001c1a:	2042      	movs	r0, #66	; 0x42
 8001c1c:	f000 f96c 	bl	8001ef8 <keyClicked>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d089      	beq.n	8001b38 <StartDefaultTask+0x160>
 8001c24:	2300      	movs	r3, #0
 8001c26:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <StartDefaultTask+0x2ec>)
 8001c28:	7013      	strb	r3, [r2, #0]
 8001c2a:	e785      	b.n	8001b38 <StartDefaultTask+0x160>
				if(keyPressed('6'))
 8001c2c:	2036      	movs	r0, #54	; 0x36
				vPWMX=0;
 8001c2e:	f8aa 2000 	strh.w	r2, [sl]
				vPWMY=0;
 8001c32:	f8a9 2000 	strh.w	r2, [r9]
				if(keyPressed('6'))
 8001c36:	f000 f96d 	bl	8001f14 <keyPressed>
 8001c3a:	b118      	cbz	r0, 8001c44 <StartDefaultTask+0x26c>
					vPWMX=12000;
 8001c3c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001c40:	f8aa 3000 	strh.w	r3, [sl]
				if(keyPressed('4'))
 8001c44:	2034      	movs	r0, #52	; 0x34
 8001c46:	f000 f965 	bl	8001f14 <keyPressed>
 8001c4a:	b118      	cbz	r0, 8001c54 <StartDefaultTask+0x27c>
					vPWMX=-12000;
 8001c4c:	f24d 1320 	movw	r3, #53536	; 0xd120
 8001c50:	f8aa 3000 	strh.w	r3, [sl]
				if(keyPressed('2'))
 8001c54:	2032      	movs	r0, #50	; 0x32
 8001c56:	f000 f95d 	bl	8001f14 <keyPressed>
 8001c5a:	b118      	cbz	r0, 8001c64 <StartDefaultTask+0x28c>
					vPWMY=5000;
 8001c5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c60:	f8a9 3000 	strh.w	r3, [r9]
				if(keyPressed('8'))
 8001c64:	2038      	movs	r0, #56	; 0x38
 8001c66:	f000 f955 	bl	8001f14 <keyPressed>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	f43f af57 	beq.w	8001b1e <StartDefaultTask+0x146>
					vPWMY=-5000;
 8001c70:	f64e 4378 	movw	r3, #60536	; 0xec78
 8001c74:	f8a9 3000 	strh.w	r3, [r9]
 8001c78:	e751      	b.n	8001b1e <StartDefaultTask+0x146>
 8001c7a:	9205      	str	r2, [sp, #20]
					stopDemo();
 8001c7c:	f7fe fff8 	bl	8000c70 <stopDemo>
					vPWMX=0;
 8001c80:	9a05      	ldr	r2, [sp, #20]
 8001c82:	f8aa 2000 	strh.w	r2, [sl]
					vPWMY=0;
 8001c86:	f8a9 2000 	strh.w	r2, [r9]
 8001c8a:	e766      	b.n	8001b5a <StartDefaultTask+0x182>
 8001c8c:	24003310 	.word	0x24003310
 8001c90:	08009f1c 	.word	0x08009f1c
 8001c94:	58021000 	.word	0x58021000
 8001c98:	240000ac 	.word	0x240000ac
 8001c9c:	24002f80 	.word	0x24002f80
 8001ca0:	2400000c 	.word	0x2400000c
 8001ca4:	08009f2c 	.word	0x08009f2c
 8001ca8:	24003300 	.word	0x24003300
 8001cac:	3727c5ac 	.word	0x3727c5ac
 8001cb0:	3627c5ac 	.word	0x3627c5ac
 8001cb4:	24003304 	.word	0x24003304
 8001cb8:	240032f8 	.word	0x240032f8
 8001cbc:	240032fe 	.word	0x240032fe
 8001cc0:	24000014 	.word	0x24000014
 8001cc4:	24003301 	.word	0x24003301
 8001cc8:	2400331c 	.word	0x2400331c
 8001ccc:	23fffe24 	.word	0x23fffe24
 8001cd0:	240032fc 	.word	0x240032fc
 8001cd4:	240032fa 	.word	0x240032fa
 8001cd8:	24003328 	.word	0x24003328
 8001cdc:	240032ff 	.word	0x240032ff

08001ce0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001ce0:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <MX_FREERTOS_Init+0x14>)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <MX_FREERTOS_Init+0x18>)
 8001ce8:	f005 f8b4 	bl	8006e54 <osThreadNew>
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <MX_FREERTOS_Init+0x1c>)
 8001cee:	6018      	str	r0, [r3, #0]
}
 8001cf0:	bd08      	pop	{r3, pc}
 8001cf2:	bf00      	nop
 8001cf4:	0800ad18 	.word	0x0800ad18
 8001cf8:	080019d9 	.word	0x080019d9
 8001cfc:	24003324 	.word	0x24003324

08001d00 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d04:	4b77      	ldr	r3, [pc, #476]	; (8001ee4 <MX_GPIO_Init+0x1e4>)
{
 8001d06:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001d0a:	4f77      	ldr	r7, [pc, #476]	; (8001ee8 <MX_GPIO_Init+0x1e8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSS_Pin|KB_COL0_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001d0c:	4d77      	ldr	r5, [pc, #476]	; (8001eec <MX_GPIO_Init+0x1ec>)
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001d0e:	f242 0108 	movw	r1, #8200	; 0x2008
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001d14:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_LED_Pin|LCD_CSS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSSF1_GPIO_Port, CSSF1_Pin, GPIO_PIN_SET);
 8001d16:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8001ef4 <MX_GPIO_Init+0x1f4>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSSF0_GPIO_Port, CSSF0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_LED_Pin|LCD_CSS_Pin|LCD_WR_RS_Pin;
 8001d1a:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_WritePin(CSSF0_GPIO_Port, CSSF0_Pin, GPIO_PIN_SET);
 8001d1e:	4e74      	ldr	r6, [pc, #464]	; (8001ef0 <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pin = LED_Pin|LCD_LED_Pin|LCD_CSS_Pin|LCD_WR_RS_Pin;
 8001d20:	f04f 0900 	mov.w	r9, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d24:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001d2c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d34:	f042 0210 	orr.w	r2, r2, #16
 8001d38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d40:	f002 0210 	and.w	r2, r2, #16
 8001d44:	9200      	str	r2, [sp, #0]
 8001d46:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d4c:	f042 0204 	orr.w	r2, r2, #4
 8001d50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d58:	f002 0204 	and.w	r2, r2, #4
 8001d5c:	9201      	str	r2, [sp, #4]
 8001d5e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d70:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d74:	9202      	str	r2, [sp, #8]
 8001d76:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d88:	f002 0201 	and.w	r2, r2, #1
 8001d8c:	9203      	str	r2, [sp, #12]
 8001d8e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d94:	f042 0208 	orr.w	r2, r2, #8
 8001d98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001da0:	f002 0208 	and.w	r2, r2, #8
 8001da4:	9204      	str	r2, [sp, #16]
 8001da6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001dac:	f042 0202 	orr.w	r2, r2, #2
 8001db0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001db4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	9305      	str	r3, [sp, #20]
 8001dc0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, LED_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001dc2:	f001 fcb3 	bl	800372c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CSS_Pin|KB_COL0_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f240 31c2 	movw	r1, #962	; 0x3c2
 8001dce:	f001 fcad 	bl	800372c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LCD_LED_Pin|LCD_CSS_Pin, GPIO_PIN_SET);
 8001dd2:	4638      	mov	r0, r7
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001dda:	f001 fca7 	bl	800372c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CSSF1_GPIO_Port, CSSF1_Pin, GPIO_PIN_SET);
 8001dde:	4650      	mov	r0, sl
 8001de0:	2201      	movs	r2, #1
 8001de2:	2140      	movs	r1, #64	; 0x40
 8001de4:	f001 fca2 	bl	800372c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CSSF0_GPIO_Port, CSSF0_Pin, GPIO_PIN_SET);
 8001de8:	4630      	mov	r0, r6
 8001dea:	2201      	movs	r2, #1
 8001dec:	2140      	movs	r1, #64	; 0x40
 8001dee:	f001 fc9d 	bl	800372c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin|LCD_LED_Pin|LCD_CSS_Pin|LCD_WR_RS_Pin;
 8001df2:	f642 4208 	movw	r2, #11272	; 0x2c08
 8001df6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df8:	4638      	mov	r0, r7
 8001dfa:	a906      	add	r1, sp, #24

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
  GPIO_InitStruct.Pin = LED_Pin|LCD_LED_Pin|LCD_CSS_Pin|LCD_WR_RS_Pin;
 8001e00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e04:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e08:	f001 fb50 	bl	80034ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = K1_Pin;
 8001e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e10:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(K1_GPIO_Port, &GPIO_InitStruct);
 8001e14:	a906      	add	r1, sp, #24
 8001e16:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e18:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pin = K1_Pin;
 8001e1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(K1_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f001 fb44 	bl	80034ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CSS_Pin;
 8001e24:	2202      	movs	r2, #2
 8001e26:	2301      	movs	r3, #1
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 8001e28:	a906      	add	r1, sp, #24
 8001e2a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CSS_Pin;
 8001e2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e30:	2201      	movs	r2, #1
 8001e32:	2302      	movs	r3, #2
 8001e34:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f001 fb38 	bl	80034ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	a906      	add	r1, sp, #24
 8001e42:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f001 fb2f 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = KB_COL0_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e4e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001e52:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e54:	4628      	mov	r0, r5
 8001e56:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = KB_COL0_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e64:	f001 fb22 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = KB_ROW0_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001e68:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001e6c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	4638      	mov	r0, r7
 8001e70:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e72:	f8cd b020 	str.w	fp, [sp, #32]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSSF1_Pin;
 8001e76:	f04f 0b01 	mov.w	fp, #1
  GPIO_InitStruct.Pin = KB_ROW0_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001e7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7e:	f001 fb15 	bl	80034ac <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CSSF1_GPIO_Port, &GPIO_InitStruct);
 8001e82:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = CSSF1_Pin;
 8001e84:	f04f 0a40 	mov.w	sl, #64	; 0x40
  HAL_GPIO_Init(CSSF1_GPIO_Port, &GPIO_InitStruct);
 8001e88:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CSSF1_Pin;
 8001e8a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001e8e:	e9cd ab06 	strd	sl, fp, [sp, #24]
  HAL_GPIO_Init(CSSF1_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f001 fb0b 	bl	80034ac <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSSF0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CSSF0_GPIO_Port, &GPIO_InitStruct);
 8001e96:	a906      	add	r1, sp, #24
 8001e98:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = CSSF0_Pin;
 8001e9a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001e9e:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(CSSF0_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f001 fb03 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPULSE_Pin;
 8001ea6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SPULSE_GPIO_Port, &GPIO_InitStruct);
 8001eae:	a906      	add	r1, sp, #24
 8001eb0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = SPULSE_Pin;
 8001eb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(SPULSE_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f001 faf8 	bl	80034ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001ebc:	4622      	mov	r2, r4
 8001ebe:	2105      	movs	r1, #5
 8001ec0:	2017      	movs	r0, #23
 8001ec2:	f001 f9dd 	bl	8003280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ec6:	2017      	movs	r0, #23
 8001ec8:	f001 fa18 	bl	80032fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001ecc:	4622      	mov	r2, r4
 8001ece:	2105      	movs	r1, #5
 8001ed0:	2028      	movs	r0, #40	; 0x28
 8001ed2:	f001 f9d5 	bl	8003280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ed6:	2028      	movs	r0, #40	; 0x28
 8001ed8:	f001 fa10 	bl	80032fc <HAL_NVIC_EnableIRQ>

}
 8001edc:	b00d      	add	sp, #52	; 0x34
 8001ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ee2:	bf00      	nop
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	58021000 	.word	0x58021000
 8001eec:	58020800 	.word	0x58020800
 8001ef0:	58020400 	.word	0x58020400
 8001ef4:	58020c00 	.word	0x58020c00

08001ef8 <keyClicked>:
uint8_t last_keystatetable[256];


uint8_t keyClicked(char c)
{
	return keystatetable[ (uint8_t)c] && !last_keystatetable[ (uint8_t)c];
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <keyClicked+0x14>)
{
 8001efa:	4603      	mov	r3, r0
	return keystatetable[ (uint8_t)c] && !last_keystatetable[ (uint8_t)c];
 8001efc:	5c10      	ldrb	r0, [r2, r0]
 8001efe:	b120      	cbz	r0, 8001f0a <keyClicked+0x12>
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <keyClicked+0x18>)
 8001f02:	5cd0      	ldrb	r0, [r2, r3]
 8001f04:	fab0 f080 	clz	r0, r0
 8001f08:	0940      	lsrs	r0, r0, #5
}
 8001f0a:	4770      	bx	lr
 8001f0c:	24003360 	.word	0x24003360
 8001f10:	24003460 	.word	0x24003460

08001f14 <keyPressed>:
	return !keystatetable[ (uint8_t)c] && last_keystatetable[ (uint8_t)c];
}

uint8_t keyPressed(char c)
{
	return keystatetable[ (uint8_t)c];
 8001f14:	4b01      	ldr	r3, [pc, #4]	; (8001f1c <keyPressed+0x8>)
}
 8001f16:	5c18      	ldrb	r0, [r3, r0]
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	24003360 	.word	0x24003360

08001f20 <scanKeyboard>:


char scanKeyboard()
{
 8001f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f24:	4e24      	ldr	r6, [pc, #144]	; (8001fb8 <scanKeyboard+0x98>)
 8001f26:	2500      	movs	r5, #0
 8001f28:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001fcc <scanKeyboard+0xac>
 8001f2c:	4c23      	ldr	r4, [pc, #140]	; (8001fbc <scanKeyboard+0x9c>)
	for(uint8_t x=0;x<4;++x)
	{
		HAL_GPIO_WritePin(KB_COL0_GPIO_Port, KB_COL0_Pin | (KB_COL0_Pin<<1) | (KB_COL0_Pin<<2) | (KB_COL0_Pin<<3) , GPIO_PIN_RESET);
 8001f2e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8001fd0 <scanKeyboard+0xb0>
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001f38:	4650      	mov	r0, sl
 8001f3a:	f001 fbf7 	bl	800372c <HAL_GPIO_WritePin>

		//Output 1 on the x column.
		for(uint8_t i=0;i<4;++i)
		{
			uint16_t pin_column = KB_COL0_Pin<<x;
 8001f3e:	2140      	movs	r1, #64	; 0x40
 8001f40:	b2ea      	uxtb	r2, r5
 8001f42:	40a9      	lsls	r1, r5
 8001f44:	b289      	uxth	r1, r1
			if(i==x)HAL_GPIO_WritePin(KB_COL0_GPIO_Port, pin_column, GPIO_PIN_SET);
 8001f46:	b38d      	cbz	r5, 8001fac <scanKeyboard+0x8c>
 8001f48:	2a01      	cmp	r2, #1
 8001f4a:	d030      	beq.n	8001fae <scanKeyboard+0x8e>
 8001f4c:	2a02      	cmp	r2, #2
 8001f4e:	d02d      	beq.n	8001fac <scanKeyboard+0x8c>
 8001f50:	2d03      	cmp	r5, #3
 8001f52:	d02b      	beq.n	8001fac <scanKeyboard+0x8c>

		}
		for(uint32_t i=0;i<10;i++)dummy_kbd+=i;
 8001f54:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <scanKeyboard+0xa0>)
 8001f56:	f04f 0b00 	mov.w	fp, #0

		for(uint8_t y=0;y<4;++y)
		{
			//Read x,y key
			GPIO_PinState pstate = HAL_GPIO_ReadPin(KB_ROW0_GPIO_Port, KB_ROW0_Pin<<y);
 8001f5a:	f44f 7880 	mov.w	r8, #256	; 0x100
 8001f5e:	4f19      	ldr	r7, [pc, #100]	; (8001fc4 <scanKeyboard+0xa4>)
		for(uint32_t i=0;i<10;i++)dummy_kbd+=i;
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	322d      	adds	r2, #45	; 0x2d
 8001f64:	601a      	str	r2, [r3, #0]
			GPIO_PinState pstate = HAL_GPIO_ReadPin(KB_ROW0_GPIO_Port, KB_ROW0_Pin<<y);
 8001f66:	fa08 f10b 	lsl.w	r1, r8, fp
 8001f6a:	4638      	mov	r0, r7
 8001f6c:	b289      	uxth	r1, r1
 8001f6e:	f001 fbd7 	bl	8003720 <HAL_GPIO_ReadPin>

			char c = keytable[x+y*4];
			last_keystatetable[c] = keystatetable[c];
 8001f72:	f816 102b 	ldrb.w	r1, [r6, fp, lsl #2]
		for(uint8_t y=0;y<4;++y)
 8001f76:	f10b 0b01 	add.w	fp, fp, #1
			last_keystatetable[c] = keystatetable[c];
 8001f7a:	5c62      	ldrb	r2, [r4, r1]
			keystatetable[ c ]= (uint8_t)pstate;
 8001f7c:	5460      	strb	r0, [r4, r1]
			last_keystatetable[c] = keystatetable[c];
 8001f7e:	f809 2001 	strb.w	r2, [r9, r1]

			if(pstate)printf("%c\n", c);
 8001f82:	b978      	cbnz	r0, 8001fa4 <scanKeyboard+0x84>
		for(uint8_t y=0;y<4;++y)
 8001f84:	f1bb 0f04 	cmp.w	fp, #4
 8001f88:	d1ed      	bne.n	8001f66 <scanKeyboard+0x46>
	for(uint8_t x=0;x<4;++x)
 8001f8a:	3501      	adds	r5, #1
		}

		HAL_GPIO_WritePin(KB_COL0_GPIO_Port, KB_COL0_Pin | (KB_COL0_Pin<<1) | (KB_COL0_Pin<<2) | (KB_COL0_Pin<<3) , GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001f92:	4650      	mov	r0, sl
 8001f94:	f001 fbca 	bl	800372c <HAL_GPIO_WritePin>
	for(uint8_t x=0;x<4;++x)
 8001f98:	2d04      	cmp	r5, #4
 8001f9a:	f106 0601 	add.w	r6, r6, #1
 8001f9e:	d1c8      	bne.n	8001f32 <scanKeyboard+0x12>

	}
}
 8001fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(pstate)printf("%c\n", c);
 8001fa4:	4808      	ldr	r0, [pc, #32]	; (8001fc8 <scanKeyboard+0xa8>)
 8001fa6:	f007 f8f5 	bl	8009194 <iprintf>
 8001faa:	e7eb      	b.n	8001f84 <scanKeyboard+0x64>
			if(i==x)HAL_GPIO_WritePin(KB_COL0_GPIO_Port, pin_column, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	4650      	mov	r0, sl
 8001fb0:	f001 fbbc 	bl	800372c <HAL_GPIO_WritePin>
 8001fb4:	e7ce      	b.n	8001f54 <scanKeyboard+0x34>
 8001fb6:	bf00      	nop
 8001fb8:	24000098 	.word	0x24000098
 8001fbc:	24003360 	.word	0x24003360
 8001fc0:	2400335c 	.word	0x2400335c
 8001fc4:	58020000 	.word	0x58020000
 8001fc8:	0800ad3c 	.word	0x0800ad3c
 8001fcc:	24003460 	.word	0x24003460
 8001fd0:	58020800 	.word	0x58020800

08001fd4 <_write>:
#undef FLASH_LATENCY_0
#define FLASH_LATENCY_0 FLASH_LATENCY_4 //HACK IT!

int _write(int file, char *ptr, int len)
{
	for(int i=0;i<len;++i)
 8001fd4:	1e10      	subs	r0, r2, #0
 8001fd6:	dd29      	ble.n	800202c <_write+0x58>
 8001fd8:	eb01 0c00 	add.w	ip, r1, r0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fe0:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
	{
		ITM_SendChar( (*ptr++));
 8001fe4:	3101      	adds	r1, #1
 8001fe6:	07d2      	lsls	r2, r2, #31
 8001fe8:	d51d      	bpl.n	8002026 <_write+0x52>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001fea:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fee:	07d2      	lsls	r2, r2, #31
 8001ff0:	d519      	bpl.n	8002026 <_write+0x52>
{
 8001ff2:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ff4:	681a      	ldr	r2, [r3, #0]
		ITM_SendChar( (*ptr++));
 8001ff6:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 8001ffa:	b91a      	cbnz	r2, 8002004 <_write+0x30>
    {
      __NOP();
 8001ffc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2a00      	cmp	r2, #0
 8002002:	d0fb      	beq.n	8001ffc <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002004:	f883 e000 	strb.w	lr, [r3]
	for(int i=0;i<len;++i)
 8002008:	4561      	cmp	r1, ip
 800200a:	d00a      	beq.n	8002022 <_write+0x4e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800200c:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
		ITM_SendChar( (*ptr++));
 8002010:	3101      	adds	r1, #1
 8002012:	07d2      	lsls	r2, r2, #31
 8002014:	d5f8      	bpl.n	8002008 <_write+0x34>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002016:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800201a:	07d2      	lsls	r2, r2, #31
 800201c:	d4ea      	bmi.n	8001ff4 <_write+0x20>
	for(int i=0;i<len;++i)
 800201e:	4561      	cmp	r1, ip
 8002020:	d1f4      	bne.n	800200c <_write+0x38>
	}
	return len;
}
 8002022:	f85d fb04 	ldr.w	pc, [sp], #4
	for(int i=0;i<len;++i)
 8002026:	4561      	cmp	r1, ip
 8002028:	d1da      	bne.n	8001fe0 <_write+0xc>
 800202a:	4770      	bx	lr
}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002030:	b500      	push	{lr}
 8002032:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002034:	224c      	movs	r2, #76	; 0x4c
 8002036:	2100      	movs	r1, #0
 8002038:	a808      	add	r0, sp, #32
 800203a:	f007 f80e 	bl	800905a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203e:	2220      	movs	r2, #32
 8002040:	2100      	movs	r1, #0
 8002042:	4668      	mov	r0, sp
 8002044:	f007 f809 	bl	800905a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002048:	2002      	movs	r0, #2
 800204a:	f001 fb81 	bl	8003750 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800204e:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <SystemClock_Config+0xb8>)
 8002050:	6993      	ldr	r3, [r2, #24]
 8002052:	049b      	lsls	r3, r3, #18
 8002054:	d5fc      	bpl.n	8002050 <SystemClock_Config+0x20>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002056:	4a25      	ldr	r2, [pc, #148]	; (80020ec <SystemClock_Config+0xbc>)
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002058:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800205a:	a808      	add	r0, sp, #32
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800205c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002068:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 5;
 800206a:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800206c:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800206e:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002070:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002072:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002074:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002076:	921a      	str	r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002078:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80020d0 <SystemClock_Config+0xa0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800207c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002080:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002084:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002088:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208c:	f001 fc08 	bl	80038a0 <HAL_RCC_OscConfig>
 8002090:	b108      	cbz	r0, 8002096 <SystemClock_Config+0x66>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002092:	b672      	cpsid	i
 8002094:	e7fe      	b.n	8002094 <SystemClock_Config+0x64>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002096:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80020d8 <SystemClock_Config+0xa8>
 800209a:	2200      	movs	r2, #0
 800209c:	2308      	movs	r3, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800209e:	4668      	mov	r0, sp
 80020a0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	ed8d 7b00 	vstr	d7, [sp]
 80020a6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80020e0 <SystemClock_Config+0xb0>
 80020aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b2:	2340      	movs	r3, #64	; 0x40
 80020b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80020b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020bc:	f001 ff84 	bl	8003fc8 <HAL_RCC_ClockConfig>
 80020c0:	b108      	cbz	r0, 80020c6 <SystemClock_Config+0x96>
 80020c2:	b672      	cpsid	i
 80020c4:	e7fe      	b.n	80020c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
  }
}
 80020c6:	b01d      	add	sp, #116	; 0x74
 80020c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80020cc:	f3af 8000 	nop.w
 80020d0:	00000001 	.word	0x00000001
 80020d4:	00010000 	.word	0x00010000
 80020d8:	0000003f 	.word	0x0000003f
 80020dc:	00000003 	.word	0x00000003
 80020e0:	00000040 	.word	0x00000040
 80020e4:	00000040 	.word	0x00000040
 80020e8:	58024800 	.word	0x58024800
 80020ec:	58024400 	.word	0x58024400

080020f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020f0:	b500      	push	{lr}
 80020f2:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f4:	22a0      	movs	r2, #160	; 0xa0
 80020f6:	2100      	movs	r1, #0
 80020f8:	a808      	add	r0, sp, #32
 80020fa:	f006 ffae 	bl	800905a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_UART4;
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80020fe:	2105      	movs	r1, #5
  PeriphClkInitStruct.PLL2.PLL2N = 40;
 8002100:	2228      	movs	r2, #40	; 0x28
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002102:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8002104:	9102      	str	r1, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002106:	2180      	movs	r1, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2N = 40;
 8002108:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 800210a:	2201      	movs	r2, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210c:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800210e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002110:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8002112:	921e      	str	r2, [sp, #120]	; 0x78
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI4
 8002114:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8002138 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002118:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI4
 800211c:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8002120:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002140 <PeriphCommonClock_Config+0x50>
 8002124:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002128:	f002 fa66 	bl	80045f8 <HAL_RCCEx_PeriphCLKConfig>
 800212c:	b108      	cbz	r0, 8002132 <PeriphCommonClock_Config+0x42>
 800212e:	b672      	cpsid	i
 8002130:	e7fe      	b.n	8002130 <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
  }
}
 8002132:	b031      	add	sp, #196	; 0xc4
 8002134:	f85d fb04 	ldr.w	pc, [sp], #4
 8002138:	00003002 	.word	0x00003002
 800213c:	00000000 	.word	0x00000000
 8002140:	00001000 	.word	0x00001000
 8002144:	00010000 	.word	0x00010000

08002148 <main>:
{
 8002148:	b500      	push	{lr}
 800214a:	b085      	sub	sp, #20
  HAL_Init();
 800214c:	f001 f82c 	bl	80031a8 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002150:	2002      	movs	r0, #2
 8002152:	f001 fafd 	bl	8003750 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <main+0xb4>)
 8002158:	2100      	movs	r1, #0
 800215a:	4a29      	ldr	r2, [pc, #164]	; (8002200 <main+0xb8>)
 800215c:	9101      	str	r1, [sp, #4]
 800215e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002160:	f021 0101 	bic.w	r1, r1, #1
 8002164:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	6993      	ldr	r3, [r2, #24]
 8002170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002174:	6193      	str	r3, [r2, #24]
 8002176:	6993      	ldr	r3, [r2, #24]
 8002178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002180:	6993      	ldr	r3, [r2, #24]
 8002182:	0499      	lsls	r1, r3, #18
 8002184:	d5fc      	bpl.n	8002180 <main+0x38>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	491f      	ldr	r1, [pc, #124]	; (8002204 <main+0xbc>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002188:	2400      	movs	r4, #0
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <main+0xb4>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218c:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
 8002190:	f040 0002 	orr.w	r0, r0, #2
 8002194:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
 8002198:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
 800219c:	f001 0102 	and.w	r1, r1, #2
 80021a0:	9102      	str	r1, [sp, #8]
 80021a2:	9802      	ldr	r0, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80021a4:	9403      	str	r4, [sp, #12]
 80021a6:	6990      	ldr	r0, [r2, #24]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80021a8:	4915      	ldr	r1, [pc, #84]	; (8002200 <main+0xb8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80021aa:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80021ae:	6190      	str	r0, [r2, #24]
 80021b0:	6992      	ldr	r2, [r2, #24]
 80021b2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80021b6:	9203      	str	r2, [sp, #12]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	9303      	str	r3, [sp, #12]
 80021c8:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80021ca:	698b      	ldr	r3, [r1, #24]
 80021cc:	049b      	lsls	r3, r3, #18
 80021ce:	d5fc      	bpl.n	80021ca <main+0x82>
  SystemClock_Config();
 80021d0:	f7ff ff2e 	bl	8002030 <SystemClock_Config>
  PeriphCommonClock_Config();
 80021d4:	f7ff ff8c 	bl	80020f0 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80021d8:	f7ff fd92 	bl	8001d00 <MX_GPIO_Init>
  MX_SPI4_Init();
 80021dc:	f000 fb30 	bl	8002840 <MX_SPI4_Init>
  MX_SPI1_Init();
 80021e0:	f000 fb00 	bl	80027e4 <MX_SPI1_Init>
  MX_UART4_Init();
 80021e4:	f000 fdb2 	bl	8002d4c <MX_UART4_Init>
  printf( "Hello World\n\r") ;
 80021e8:	4807      	ldr	r0, [pc, #28]	; (8002208 <main+0xc0>)
 80021ea:	f006 ffd3 	bl	8009194 <iprintf>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80021ee:	f004 fe05 	bl	8006dfc <osKernelInitialize>
  MX_FREERTOS_Init();
 80021f2:	f7ff fd75 	bl	8001ce0 <MX_FREERTOS_Init>
  osKernelStart();
 80021f6:	f004 fe13 	bl	8006e20 <osKernelStart>
 80021fa:	e7fe      	b.n	80021fa <main+0xb2>
 80021fc:	58000400 	.word	0x58000400
 8002200:	58024800 	.word	0x58024800
 8002204:	58024400 	.word	0x58024400
 8002208:	0800ad40 	.word	0x0800ad40

0800220c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800220e:	6802      	ldr	r2, [r0, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d000      	beq.n	8002216 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002214:	4770      	bx	lr
    HAL_IncTick();
 8002216:	f000 bff7 	b.w	8003208 <HAL_IncTick>
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000

08002220 <Error_Handler>:
 8002220:	b672      	cpsid	i
 8002222:	e7fe      	b.n	8002222 <Error_Handler+0x2>

08002224 <writeScrLine>:


char buffer[64];

void writeScrLine(char* beginning, uint16_t pos_y, int32_t num)
{
 8002224:	b530      	push	{r4, r5, lr}
	char bline[14]="              ";
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <writeScrLine+0x78>)
{
 8002228:	b089      	sub	sp, #36	; 0x24
 800222a:	4696      	mov	lr, r2
 800222c:	4605      	mov	r5, r0
	char bline[14]="              ";
 800222e:	f10d 0c10 	add.w	ip, sp, #16
{
 8002232:	460c      	mov	r4, r1
	char bline[14]="              ";
 8002234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002236:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}

	itoa(num, buffer, 10);
 800223a:	4670      	mov	r0, lr
 800223c:	220a      	movs	r2, #10
 800223e:	4918      	ldr	r1, [pc, #96]	; (80022a0 <writeScrLine+0x7c>)
	char bline[14]="              ";
 8002240:	f8ac 3000 	strh.w	r3, [ip]
	itoa(num, buffer, 10);
 8002244:	f006 fef6 	bl	8009034 <itoa>

	memcpy(bline, beginning, strlen(beginning)-1);
 8002248:	4628      	mov	r0, r5
 800224a:	f7fe f849 	bl	80002e0 <strlen>
 800224e:	4629      	mov	r1, r5
 8002250:	1e42      	subs	r2, r0, #1
 8002252:	a804      	add	r0, sp, #16
 8002254:	f006 fef3 	bl	800903e <memcpy>

	int len_itoa=strlen(buffer);
 8002258:	4811      	ldr	r0, [pc, #68]	; (80022a0 <writeScrLine+0x7c>)
 800225a:	f7fe f841 	bl	80002e0 <strlen>

	if(len_itoa<14)strcpy(bline+14-len_itoa, buffer);
 800225e:	280d      	cmp	r0, #13
 8002260:	d912      	bls.n	8002288 <writeScrLine+0x64>

	ST7735_WriteString(0,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002262:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8002266:	2000      	movs	r0, #0
 8002268:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <writeScrLine+0x80>)
 800226e:	0049      	lsls	r1, r1, #1
 8002270:	9002      	str	r0, [sp, #8]
 8002272:	9401      	str	r4, [sp, #4]
 8002274:	aa04      	add	r2, sp, #16
 8002276:	3101      	adds	r1, #1
 8002278:	e9d3 3400 	ldrd	r3, r4, [r3]
 800227c:	b289      	uxth	r1, r1
 800227e:	9400      	str	r4, [sp, #0]
 8002280:	f7fe fbe2 	bl	8000a48 <ST7735_WriteString>
}
 8002284:	b009      	add	sp, #36	; 0x24
 8002286:	bd30      	pop	{r4, r5, pc}
	if(len_itoa<14)strcpy(bline+14-len_itoa, buffer);
 8002288:	a904      	add	r1, sp, #16
 800228a:	f1c0 030e 	rsb	r3, r0, #14
 800228e:	1c42      	adds	r2, r0, #1
 8002290:	18c8      	adds	r0, r1, r3
 8002292:	4903      	ldr	r1, [pc, #12]	; (80022a0 <writeScrLine+0x7c>)
 8002294:	f006 fed3 	bl	800903e <memcpy>
 8002298:	e7e3      	b.n	8002262 <writeScrLine+0x3e>
 800229a:	bf00      	nop
 800229c:	0800ad50 	.word	0x0800ad50
 80022a0:	24003560 	.word	0x24003560
 80022a4:	2400000c 	.word	0x2400000c

080022a8 <drawPage0>:


void drawPage0(ScreenInfo* pscrinfo)
{
 80022a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ac:	4605      	mov	r5, r0
 80022ae:	b088      	sub	sp, #32

	writeScrLine("x:", 0, pscrinfo->counter[0]);
 80022b0:	2100      	movs	r1, #0
 80022b2:	4888      	ldr	r0, [pc, #544]	; (80024d4 <drawPage0+0x22c>)
 80022b4:	686a      	ldr	r2, [r5, #4]
 80022b6:	f7ff ffb5 	bl	8002224 <writeScrLine>
	writeScrLine("y:", 1, pscrinfo->counter[1]);
	writeScrLine("t:", 2, pscrinfo->counter[2]);

	uint8_t limit_status = pscrinfo->limit_status;

 	ST7735_WriteString(0,1 +18*3, "x ", Font_11x18, WHITE, BLACK);
 80022ba:	4c87      	ldr	r4, [pc, #540]	; (80024d8 <drawPage0+0x230>)
	writeScrLine("y:", 1, pscrinfo->counter[1]);
 80022bc:	68aa      	ldr	r2, [r5, #8]
 80022be:	2101      	movs	r1, #1
 80022c0:	4886      	ldr	r0, [pc, #536]	; (80024dc <drawPage0+0x234>)
 80022c2:	f7ff ffaf 	bl	8002224 <writeScrLine>
	writeScrLine("t:", 2, pscrinfo->counter[2]);
 80022c6:	68ea      	ldr	r2, [r5, #12]
 80022c8:	2102      	movs	r1, #2
 80022ca:	4885      	ldr	r0, [pc, #532]	; (80024e0 <drawPage0+0x238>)
 80022cc:	f7ff ffaa 	bl	8002224 <writeScrLine>
 	ST7735_WriteString(0,1 +18*3, "x ", Font_11x18, WHITE, BLACK);
 80022d0:	6862      	ldr	r2, [r4, #4]
 80022d2:	2000      	movs	r0, #0
 80022d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d8:	9200      	str	r2, [sp, #0]
 80022da:	2137      	movs	r1, #55	; 0x37
 80022dc:	4a81      	ldr	r2, [pc, #516]	; (80024e4 <drawPage0+0x23c>)
	strcpy(buffer,"  ");
 80022de:	4e82      	ldr	r6, [pc, #520]	; (80024e8 <drawPage0+0x240>)
 	ST7735_WriteString(0,1 +18*3, "x ", Font_11x18, WHITE, BLACK);
 80022e0:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80022e4:	6823      	ldr	r3, [r4, #0]
	uint8_t limit_status = pscrinfo->limit_status;
 80022e6:	f895 7020 	ldrb.w	r7, [r5, #32]
 	ST7735_WriteString(0,1 +18*3, "x ", Font_11x18, WHITE, BLACK);
 80022ea:	f7fe fbad 	bl	8000a48 <ST7735_WriteString>
	strcpy(buffer,"  ");
 80022ee:	4b7f      	ldr	r3, [pc, #508]	; (80024ec <drawPage0+0x244>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	8033      	strh	r3, [r6, #0]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	70b3      	strb	r3, [r6, #2]
	if(limit_status& (LIMIT_MAXLEFT | LIMIT_MAXRIGHT)) buffer[0]='E';
 80022f8:	07bb      	lsls	r3, r7, #30
 80022fa:	d001      	beq.n	8002300 <drawPage0+0x58>
 80022fc:	2345      	movs	r3, #69	; 0x45
 80022fe:	7033      	strb	r3, [r6, #0]
	if(limit_status&LIMIT_LEFT)  buffer[1]='L';
 8002300:	06f8      	lsls	r0, r7, #27
 8002302:	d501      	bpl.n	8002308 <drawPage0+0x60>
 8002304:	234c      	movs	r3, #76	; 0x4c
 8002306:	7073      	strb	r3, [r6, #1]
	if(limit_status&LIMIT_RIGHT) buffer[1]='R';
 8002308:	06b9      	lsls	r1, r7, #26
 800230a:	d501      	bpl.n	8002310 <drawPage0+0x68>
 800230c:	2352      	movs	r3, #82	; 0x52
 800230e:	7073      	strb	r3, [r6, #1]
	if(limit_status&LIMIT_CENTER) buffer[1]='C';
 8002310:	067a      	lsls	r2, r7, #25
 8002312:	d501      	bpl.n	8002318 <drawPage0+0x70>
 8002314:	2343      	movs	r3, #67	; 0x43
 8002316:	7073      	strb	r3, [r6, #1]
	ST7735_WriteString(11,1 +18*3, buffer, Font_11x18, BLUE, BLACK);
 8002318:	6863      	ldr	r3, [r4, #4]
 800231a:	f04f 0800 	mov.w	r8, #0
 800231e:	4a72      	ldr	r2, [pc, #456]	; (80024e8 <drawPage0+0x240>)
 8002320:	2137      	movs	r1, #55	; 0x37
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	231f      	movs	r3, #31
 8002326:	200b      	movs	r0, #11
 8002328:	f8cd 8008 	str.w	r8, [sp, #8]
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	f7fe fb8a 	bl	8000a48 <ST7735_WriteString>

	ST7735_WriteString(11*3,1 +18*3, " y ", Font_11x18, WHITE, BLACK);
 8002334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002338:	4a6d      	ldr	r2, [pc, #436]	; (80024f0 <drawPage0+0x248>)
 800233a:	2137      	movs	r1, #55	; 0x37
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	2021      	movs	r0, #33	; 0x21
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	f8cd 8008 	str.w	r8, [sp, #8]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	f7fe fb7d 	bl	8000a48 <ST7735_WriteString>
	strcpy(buffer," ");
 800234e:	2320      	movs	r3, #32
 8002350:	8033      	strh	r3, [r6, #0]
	if(limit_status&LIMIT_Y_UP)buffer[0]='U';
 8002352:	073b      	lsls	r3, r7, #28
 8002354:	d501      	bpl.n	800235a <drawPage0+0xb2>
 8002356:	2355      	movs	r3, #85	; 0x55
 8002358:	7033      	strb	r3, [r6, #0]
	if(limit_status&LIMIT_Y_DOWN)buffer[0]='D';
 800235a:	077f      	lsls	r7, r7, #29
 800235c:	d501      	bpl.n	8002362 <drawPage0+0xba>
 800235e:	2344      	movs	r3, #68	; 0x44
 8002360:	7033      	strb	r3, [r6, #0]
	ST7735_WriteString(11*6,1 +18*3, buffer, Font_11x18, BLUE, BLACK);
 8002362:	2700      	movs	r7, #0
 8002364:	231f      	movs	r3, #31
 8002366:	4a60      	ldr	r2, [pc, #384]	; (80024e8 <drawPage0+0x240>)
 8002368:	2137      	movs	r1, #55	; 0x37
 800236a:	2042      	movs	r0, #66	; 0x42
 800236c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8002370:	6863      	ldr	r3, [r4, #4]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	f7fe fb67 	bl	8000a48 <ST7735_WriteString>

	ST7735_WriteString(11*7,1 + 18*3, "m", Font_11x18, WHITE, BLACK);
 800237a:	6862      	ldr	r2, [r4, #4]
 800237c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002380:	2137      	movs	r1, #55	; 0x37
 8002382:	204d      	movs	r0, #77	; 0x4d
 8002384:	9702      	str	r7, [sp, #8]

	{
		char bline[]= "   ";
		itoa( (uint16_t)pscrinfo->emagnet, buffer, 10);
		int len_itoa=strlen(buffer);
		if(len_itoa<=3)strcpy(bline+3-len_itoa, buffer);
 8002386:	af07      	add	r7, sp, #28
	ST7735_WriteString(11*7,1 + 18*3, "m", Font_11x18, WHITE, BLACK);
 8002388:	e9cd 2300 	strd	r2, r3, [sp]
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	4a59      	ldr	r2, [pc, #356]	; (80024f4 <drawPage0+0x24c>)
 8002390:	f7fe fb5a 	bl	8000a48 <ST7735_WriteString>
		char bline[]= "   ";
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <drawPage0+0x250>)
		itoa( (uint16_t)pscrinfo->emagnet, buffer, 10);
 8002396:	220a      	movs	r2, #10
 8002398:	4953      	ldr	r1, [pc, #332]	; (80024e8 <drawPage0+0x240>)
 800239a:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
		char bline[]= "   ";
 800239e:	9307      	str	r3, [sp, #28]
		itoa( (uint16_t)pscrinfo->emagnet, buffer, 10);
 80023a0:	f006 fe48 	bl	8009034 <itoa>
		int len_itoa=strlen(buffer);
 80023a4:	4850      	ldr	r0, [pc, #320]	; (80024e8 <drawPage0+0x240>)
 80023a6:	f7fd ff9b 	bl	80002e0 <strlen>
		if(len_itoa<=3)strcpy(bline+3-len_itoa, buffer);
 80023aa:	2803      	cmp	r0, #3
 80023ac:	f240 8083 	bls.w	80024b6 <drawPage0+0x20e>
		ST7735_WriteString(11*8, 1 + 18*3, bline, Font_11x18, RED, BLACK);
 80023b0:	6863      	ldr	r3, [r4, #4]
 80023b2:	463a      	mov	r2, r7
 80023b4:	f04f 0800 	mov.w	r8, #0
 80023b8:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2137      	movs	r1, #55	; 0x37
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	2058      	movs	r0, #88	; 0x58
 80023c4:	f8cd 8008 	str.w	r8, [sp, #8]
 80023c8:	9701      	str	r7, [sp, #4]
 80023ca:	f7fe fb3d 	bl	8000a48 <ST7735_WriteString>

		if(pscrinfo->b_controlloop)
 80023ce:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03d      	beq.n	8002452 <drawPage0+0x1aa>
			ST7735_WriteString(11*(8+3), 1 + 18*3, "L", Font_11x18, RED, BLACK);
 80023d6:	6863      	ldr	r3, [r4, #4]
 80023d8:	2137      	movs	r1, #55	; 0x37
 80023da:	4a48      	ldr	r2, [pc, #288]	; (80024fc <drawPage0+0x254>)
 80023dc:	2079      	movs	r0, #121	; 0x79
 80023de:	f8cd 8008 	str.w	r8, [sp, #8]
 80023e2:	e9cd 3700 	strd	r3, r7, [sp]
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	f7fe fb2e 	bl	8000a48 <ST7735_WriteString>
		else
			ST7735_WriteString(11*(8+3), 1 + 18*3, "  ", Font_11x18, RED, BLACK);

		if(pscrinfo->b_controlloop && pscrinfo->calibration_mode)
 80023ec:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d13c      	bne.n	800246e <drawPage0+0x1c6>
 80023f4:	aa06      	add	r2, sp, #24
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, RED, BLACK);
		}

		if(!pscrinfo->b_controlloop)
		{
			char towrite[]=" ";
 80023f6:	2320      	movs	r3, #32
 80023f8:	f8ad 3018 	strh.w	r3, [sp, #24]
			if(pscrinfo->calibration_mode>=CALIB_DEMO_BEGIN && pscrinfo->calibration_mode<= CALIB_DEMO_END)towrite[0]='D';
 80023fc:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8002400:	f1a3 010e 	sub.w	r1, r3, #14
 8002404:	2905      	cmp	r1, #5
 8002406:	d850      	bhi.n	80024aa <drawPage0+0x202>
 8002408:	2344      	movs	r3, #68	; 0x44
 800240a:	f88d 3018 	strb.w	r3, [sp, #24]
			if(pscrinfo->calibration_mode==CALIB_DONE)towrite[0]='C';
			if(pscrinfo->calibration_mode==CALIB_ERROR)towrite[0]='E';
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, GREEN, BLACK);
 800240e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002412:	2100      	movs	r1, #0
 8002414:	2084      	movs	r0, #132	; 0x84
 8002416:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800241a:	6863      	ldr	r3, [r4, #4]
 800241c:	2137      	movs	r1, #55	; 0x37
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	f7fe fb11 	bl	8000a48 <ST7735_WriteString>
		}
	}


	strcpy(buffer," ");
 8002426:	2220      	movs	r2, #32
	char firstchar = pscrinfo->header_char;
 8002428:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	strcpy(buffer," ");
 800242c:	8032      	strh	r2, [r6, #0]
	if(firstchar)buffer[0]=firstchar;
 800242e:	b103      	cbz	r3, 8002432 <drawPage0+0x18a>
 8002430:	7033      	strb	r3, [r6, #0]
	ST7735_WriteString(11*13, 1 + 18*3, buffer, Font_11x18, GREEN, BLACK);
 8002432:	2000      	movs	r0, #0
 8002434:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002438:	4a2b      	ldr	r2, [pc, #172]	; (80024e8 <drawPage0+0x240>)
 800243a:	e9d4 3500 	ldrd	r3, r5, [r4]
 800243e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002442:	2137      	movs	r1, #55	; 0x37
 8002444:	208f      	movs	r0, #143	; 0x8f
 8002446:	9500      	str	r5, [sp, #0]
 8002448:	f7fe fafe 	bl	8000a48 <ST7735_WriteString>
}
 800244c:	b008      	add	sp, #32
 800244e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ST7735_WriteString(11*(8+3), 1 + 18*3, "  ", Font_11x18, RED, BLACK);
 8002452:	9302      	str	r3, [sp, #8]
 8002454:	2137      	movs	r1, #55	; 0x37
 8002456:	6863      	ldr	r3, [r4, #4]
 8002458:	2079      	movs	r0, #121	; 0x79
 800245a:	4a24      	ldr	r2, [pc, #144]	; (80024ec <drawPage0+0x244>)
 800245c:	e9cd 3700 	strd	r3, r7, [sp]
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	f7fe faf1 	bl	8000a48 <ST7735_WriteString>
		if(pscrinfo->b_controlloop && pscrinfo->calibration_mode)
 8002466:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0c2      	beq.n	80023f4 <drawPage0+0x14c>
 800246e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0d7      	beq.n	8002426 <drawPage0+0x17e>
			towrite[0]='0'+pscrinfo->calibration_mode;
 8002476:	3330      	adds	r3, #48	; 0x30
			char towrite[]=" ";
 8002478:	2220      	movs	r2, #32
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, RED, BLACK);
 800247a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800247e:	2000      	movs	r0, #0
			char towrite[]=" ";
 8002480:	f8ad 2018 	strh.w	r2, [sp, #24]
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, RED, BLACK);
 8002484:	aa06      	add	r2, sp, #24
			towrite[0]='0'+pscrinfo->calibration_mode;
 8002486:	f88d 3018 	strb.w	r3, [sp, #24]
			ST7735_WriteString(11*(8+4), 1 + 18*3, towrite, Font_11x18, RED, BLACK);
 800248a:	6863      	ldr	r3, [r4, #4]
 800248c:	9205      	str	r2, [sp, #20]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002496:	2137      	movs	r1, #55	; 0x37
 8002498:	2084      	movs	r0, #132	; 0x84
 800249a:	f7fe fad5 	bl	8000a48 <ST7735_WriteString>
		if(!pscrinfo->b_controlloop)
 800249e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80024a2:	9a05      	ldr	r2, [sp, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1be      	bne.n	8002426 <drawPage0+0x17e>
 80024a8:	e7a5      	b.n	80023f6 <drawPage0+0x14e>
			if(pscrinfo->calibration_mode==CALIB_DONE)towrite[0]='C';
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d10b      	bne.n	80024c6 <drawPage0+0x21e>
 80024ae:	2343      	movs	r3, #67	; 0x43
 80024b0:	f88d 3018 	strb.w	r3, [sp, #24]
 80024b4:	e7ab      	b.n	800240e <drawPage0+0x166>
		if(len_itoa<=3)strcpy(bline+3-len_itoa, buffer);
 80024b6:	f1c0 0303 	rsb	r3, r0, #3
 80024ba:	1c42      	adds	r2, r0, #1
 80024bc:	490a      	ldr	r1, [pc, #40]	; (80024e8 <drawPage0+0x240>)
 80024be:	18f8      	adds	r0, r7, r3
 80024c0:	f006 fdbd 	bl	800903e <memcpy>
 80024c4:	e774      	b.n	80023b0 <drawPage0+0x108>
			if(pscrinfo->calibration_mode==CALIB_ERROR)towrite[0]='E';
 80024c6:	2b0d      	cmp	r3, #13
 80024c8:	d1a1      	bne.n	800240e <drawPage0+0x166>
 80024ca:	2345      	movs	r3, #69	; 0x45
 80024cc:	f88d 3018 	strb.w	r3, [sp, #24]
 80024d0:	e79d      	b.n	800240e <drawPage0+0x166>
 80024d2:	bf00      	nop
 80024d4:	0800ad60 	.word	0x0800ad60
 80024d8:	2400000c 	.word	0x2400000c
 80024dc:	0800ad64 	.word	0x0800ad64
 80024e0:	0800ad68 	.word	0x0800ad68
 80024e4:	0800ad6c 	.word	0x0800ad6c
 80024e8:	24003560 	.word	0x24003560
 80024ec:	0800ad5c 	.word	0x0800ad5c
 80024f0:	0800ad70 	.word	0x0800ad70
 80024f4:	0800ad74 	.word	0x0800ad74
 80024f8:	00202020 	.word	0x00202020
 80024fc:	0800ad78 	.word	0x0800ad78

08002500 <drawPage1>:
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
}


void drawPage1(ScreenInfo* pscrinfo)
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
	char bline[8]="              ";
 8002502:	4eab      	ldr	r6, [pc, #684]	; (80027b0 <drawPage1+0x2b0>)
{
 8002504:	b087      	sub	sp, #28
 8002506:	4607      	mov	r7, r0
	itoa(num, buffer, 10);
 8002508:	220a      	movs	r2, #10
	char bline[8]="              ";
 800250a:	ac04      	add	r4, sp, #16
 800250c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002510:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002514:	49a7      	ldr	r1, [pc, #668]	; (80027b4 <drawPage1+0x2b4>)
 8002516:	6938      	ldr	r0, [r7, #16]
 8002518:	f006 fd8c 	bl	8009034 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 800251c:	f647 0376 	movw	r3, #30838	; 0x7876
	int len_itoa=strlen(buffer);
 8002520:	48a4      	ldr	r0, [pc, #656]	; (80027b4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 8002522:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 8002526:	f7fd fedb 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800252a:	2806      	cmp	r0, #6
 800252c:	f240 810f 	bls.w	800274e <drawPage1+0x24e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002530:	4da1      	ldr	r5, [pc, #644]	; (80027b8 <drawPage1+0x2b8>)
 8002532:	2000      	movs	r0, #0
 8002534:	4622      	mov	r2, r4
 8002536:	2101      	movs	r1, #1
 8002538:	686b      	ldr	r3, [r5, #4]
 800253a:	9002      	str	r0, [sp, #8]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	f7fe fa7f 	bl	8000a48 <ST7735_WriteString>
	itoa(num, buffer, 10);
 800254a:	220a      	movs	r2, #10
	char bline[8]="              ";
 800254c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002550:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002554:	4997      	ldr	r1, [pc, #604]	; (80027b4 <drawPage1+0x2b4>)
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f006 fd6c 	bl	8009034 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 800255c:	f647 1376 	movw	r3, #31094	; 0x7976
	int len_itoa=strlen(buffer);
 8002560:	4894      	ldr	r0, [pc, #592]	; (80027b4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 8002562:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 8002566:	f7fd febb 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800256a:	2806      	cmp	r0, #6
 800256c:	f240 80e7 	bls.w	800273e <drawPage1+0x23e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002570:	686b      	ldr	r3, [r5, #4]
 8002572:	2000      	movs	r0, #0
 8002574:	4622      	mov	r2, r4
 8002576:	2113      	movs	r1, #19
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800257e:	9002      	str	r0, [sp, #8]
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	682b      	ldr	r3, [r5, #0]
 8002584:	f7fe fa60 	bl	8000a48 <ST7735_WriteString>
	itoa(num, buffer, 10);
 8002588:	220a      	movs	r2, #10
	char bline[8]="              ";
 800258a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800258e:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002592:	4988      	ldr	r1, [pc, #544]	; (80027b4 <drawPage1+0x2b4>)
 8002594:	69b8      	ldr	r0, [r7, #24]
 8002596:	f006 fd4d 	bl	8009034 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 800259a:	f247 4376 	movw	r3, #29814	; 0x7476
	int len_itoa=strlen(buffer);
 800259e:	4885      	ldr	r0, [pc, #532]	; (80027b4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 80025a0:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 80025a4:	f7fd fe9c 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 80025a8:	2806      	cmp	r0, #6
 80025aa:	f240 80c0 	bls.w	800272e <drawPage1+0x22e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 80025ae:	686b      	ldr	r3, [r5, #4]
 80025b0:	2000      	movs	r0, #0
 80025b2:	4622      	mov	r2, r4
 80025b4:	2125      	movs	r1, #37	; 0x25
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80025bc:	9002      	str	r0, [sp, #8]
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	f7fe fa41 	bl	8000a48 <ST7735_WriteString>
	writeScrLine2("vx:", 0, 0, pscrinfo->velocity[0]);
	writeScrLine2("vy:", 0, 1, pscrinfo->velocity[1]);
	writeScrLine2("vt:", 0, 2, pscrinfo->velocity[2]);
	if(pscrinfo->freq_update) writeScrLine2("fr:", 0, 3, pscrinfo->freq_update);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a3 	beq.w	8002714 <drawPage1+0x214>
	itoa(num, buffer, 10);
 80025ce:	220a      	movs	r2, #10
	char bline[8]="              ";
 80025d0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80025d4:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 80025d8:	4618      	mov	r0, r3
 80025da:	4976      	ldr	r1, [pc, #472]	; (80027b4 <drawPage1+0x2b4>)
 80025dc:	f006 fd2a 	bl	8009034 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 80025e0:	f247 2366 	movw	r3, #29286	; 0x7266
	int len_itoa=strlen(buffer);
 80025e4:	4873      	ldr	r0, [pc, #460]	; (80027b4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 80025e6:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 80025ea:	f7fd fe79 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 80025ee:	2806      	cmp	r0, #6
 80025f0:	f240 80d5 	bls.w	800279e <drawPage1+0x29e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 80025f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80025f8:	2000      	movs	r0, #0
 80025fa:	4622      	mov	r2, r4
 80025fc:	2137      	movs	r1, #55	; 0x37
 80025fe:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8002602:	686b      	ldr	r3, [r5, #4]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	682b      	ldr	r3, [r5, #0]
 8002608:	f7fe fa1e 	bl	8000a48 <ST7735_WriteString>
	itoa(num, buffer, 10);
 800260c:	220a      	movs	r2, #10
	char bline[8]="              ";
 800260e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002612:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002616:	4967      	ldr	r1, [pc, #412]	; (80027b4 <drawPage1+0x2b4>)
 8002618:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 800261c:	f006 fd0a 	bl	8009034 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 8002620:	f647 0370 	movw	r3, #30832	; 0x7870
	int len_itoa=strlen(buffer);
 8002624:	4863      	ldr	r0, [pc, #396]	; (80027b4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 8002626:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 800262a:	f7fd fe59 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800262e:	2806      	cmp	r0, #6
 8002630:	f240 80ad 	bls.w	800278e <drawPage1+0x28e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002634:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002638:	2000      	movs	r0, #0
 800263a:	4622      	mov	r2, r4
 800263c:	2101      	movs	r1, #1
 800263e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8002642:	686b      	ldr	r3, [r5, #4]
 8002644:	204d      	movs	r0, #77	; 0x4d
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	f7fe f9fd 	bl	8000a48 <ST7735_WriteString>
	itoa(num, buffer, 10);
 800264e:	220a      	movs	r2, #10
	char bline[8]="              ";
 8002650:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002654:	e884 0003 	stmia.w	r4, {r0, r1}
	itoa(num, buffer, 10);
 8002658:	4956      	ldr	r1, [pc, #344]	; (80027b4 <drawPage1+0x2b4>)
 800265a:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800265e:	f006 fce9 	bl	8009034 <itoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 8002662:	f647 1370 	movw	r3, #31088	; 0x7970
	int len_itoa=strlen(buffer);
 8002666:	4853      	ldr	r0, [pc, #332]	; (80027b4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 8002668:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 800266c:	f7fd fe38 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 8002670:	2806      	cmp	r0, #6
 8002672:	f240 8084 	bls.w	800277e <drawPage1+0x27e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 8002676:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800267a:	2100      	movs	r1, #0
 800267c:	4622      	mov	r2, r4
 800267e:	204d      	movs	r0, #77	; 0x4d
 8002680:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002684:	686b      	ldr	r3, [r5, #4]
 8002686:	2113      	movs	r1, #19
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	f7fe f9dc 	bl	8000a48 <ST7735_WriteString>
	my_ftoa(vfloat, buffer, 2);
 8002690:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
	char bline[8]="              ";
 8002694:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002698:	e884 0003 	stmia.w	r4, {r0, r1}
	my_ftoa(vfloat, buffer, 2);
 800269c:	2102      	movs	r1, #2
 800269e:	4845      	ldr	r0, [pc, #276]	; (80027b4 <drawPage1+0x2b4>)
 80026a0:	f000 fbd8 	bl	8002e54 <my_ftoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 80026a4:	f647 0370 	movw	r3, #30832	; 0x7870
	int len_itoa=strlen(buffer);
 80026a8:	4842      	ldr	r0, [pc, #264]	; (80027b4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 80026aa:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 80026ae:	f7fd fe17 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 80026b2:	2806      	cmp	r0, #6
 80026b4:	d95b      	bls.n	800276e <drawPage1+0x26e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 80026b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80026ba:	2200      	movs	r2, #0
 80026bc:	2125      	movs	r1, #37	; 0x25
 80026be:	204d      	movs	r0, #77	; 0x4d
 80026c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80026c4:	686b      	ldr	r3, [r5, #4]
 80026c6:	4622      	mov	r2, r4
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	682b      	ldr	r3, [r5, #0]
 80026cc:	f7fe f9bc 	bl	8000a48 <ST7735_WriteString>
	my_ftoa(vfloat, buffer, 2);
 80026d0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
	char bline[8]="              ";
 80026d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80026d8:	e884 0003 	stmia.w	r4, {r0, r1}
	my_ftoa(vfloat, buffer, 2);
 80026dc:	2102      	movs	r1, #2
 80026de:	4835      	ldr	r0, [pc, #212]	; (80027b4 <drawPage1+0x2b4>)
 80026e0:	f000 fbb8 	bl	8002e54 <my_ftoa>
	memcpy(bline, beginning, strlen(beginning)-1);
 80026e4:	f647 1370 	movw	r3, #31088	; 0x7970
	int len_itoa=strlen(buffer);
 80026e8:	4832      	ldr	r0, [pc, #200]	; (80027b4 <drawPage1+0x2b4>)
	memcpy(bline, beginning, strlen(beginning)-1);
 80026ea:	f8ad 3010 	strh.w	r3, [sp, #16]
	int len_itoa=strlen(buffer);
 80026ee:	f7fd fdf7 	bl	80002e0 <strlen>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 80026f2:	2806      	cmp	r0, #6
 80026f4:	d933      	bls.n	800275e <drawPage1+0x25e>
	ST7735_WriteString(11*pos_x,1+18*pos_y, bline, Font_11x18, YELLOW, BLACK);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80026fc:	4622      	mov	r2, r4
 80026fe:	e9d5 3600 	ldrd	r3, r6, [r5]
 8002702:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002706:	2137      	movs	r1, #55	; 0x37
 8002708:	204d      	movs	r0, #77	; 0x4d
 800270a:	9600      	str	r6, [sp, #0]
 800270c:	f7fe f99c 	bl	8000a48 <ST7735_WriteString>

/*	if(pscrinfo->b_demo)
		ST7735_WriteString(11*7, 1 + 18*3,"D ", Font_11x18, RED, BLACK);
	else
		ST7735_WriteString(11*7, 1 + 18*3, "       ", Font_11x18, RED, BLACK);*/
}
 8002710:	b007      	add	sp, #28
 8002712:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else ST7735_WriteString(0, 18*3 +1, "       ", Font_11x18, WHITE, BLACK);
 8002714:	4618      	mov	r0, r3
 8002716:	9302      	str	r3, [sp, #8]
 8002718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <drawPage1+0x2bc>)
 800271e:	2137      	movs	r1, #55	; 0x37
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	686b      	ldr	r3, [r5, #4]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	682b      	ldr	r3, [r5, #0]
 8002728:	f7fe f98e 	bl	8000a48 <ST7735_WriteString>
 800272c:	e76e      	b.n	800260c <drawPage1+0x10c>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800272e:	f1c0 0307 	rsb	r3, r0, #7
 8002732:	1c42      	adds	r2, r0, #1
 8002734:	491f      	ldr	r1, [pc, #124]	; (80027b4 <drawPage1+0x2b4>)
 8002736:	18e0      	adds	r0, r4, r3
 8002738:	f006 fc81 	bl	800903e <memcpy>
 800273c:	e737      	b.n	80025ae <drawPage1+0xae>
 800273e:	f1c0 0307 	rsb	r3, r0, #7
 8002742:	1c42      	adds	r2, r0, #1
 8002744:	491b      	ldr	r1, [pc, #108]	; (80027b4 <drawPage1+0x2b4>)
 8002746:	18e0      	adds	r0, r4, r3
 8002748:	f006 fc79 	bl	800903e <memcpy>
 800274c:	e710      	b.n	8002570 <drawPage1+0x70>
 800274e:	f1c0 0307 	rsb	r3, r0, #7
 8002752:	1c42      	adds	r2, r0, #1
 8002754:	4917      	ldr	r1, [pc, #92]	; (80027b4 <drawPage1+0x2b4>)
 8002756:	18e0      	adds	r0, r4, r3
 8002758:	f006 fc71 	bl	800903e <memcpy>
 800275c:	e6e8      	b.n	8002530 <drawPage1+0x30>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800275e:	f1c0 0307 	rsb	r3, r0, #7
 8002762:	1c42      	adds	r2, r0, #1
 8002764:	4913      	ldr	r1, [pc, #76]	; (80027b4 <drawPage1+0x2b4>)
 8002766:	18e0      	adds	r0, r4, r3
 8002768:	f006 fc69 	bl	800903e <memcpy>
 800276c:	e7c3      	b.n	80026f6 <drawPage1+0x1f6>
 800276e:	f1c0 0307 	rsb	r3, r0, #7
 8002772:	1c42      	adds	r2, r0, #1
 8002774:	490f      	ldr	r1, [pc, #60]	; (80027b4 <drawPage1+0x2b4>)
 8002776:	18e0      	adds	r0, r4, r3
 8002778:	f006 fc61 	bl	800903e <memcpy>
 800277c:	e79b      	b.n	80026b6 <drawPage1+0x1b6>
	if(len_itoa<7)strcpy(bline+7-len_itoa, buffer);
 800277e:	f1c0 0307 	rsb	r3, r0, #7
 8002782:	1c42      	adds	r2, r0, #1
 8002784:	490b      	ldr	r1, [pc, #44]	; (80027b4 <drawPage1+0x2b4>)
 8002786:	18e0      	adds	r0, r4, r3
 8002788:	f006 fc59 	bl	800903e <memcpy>
 800278c:	e773      	b.n	8002676 <drawPage1+0x176>
 800278e:	f1c0 0307 	rsb	r3, r0, #7
 8002792:	1c42      	adds	r2, r0, #1
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <drawPage1+0x2b4>)
 8002796:	18e0      	adds	r0, r4, r3
 8002798:	f006 fc51 	bl	800903e <memcpy>
 800279c:	e74a      	b.n	8002634 <drawPage1+0x134>
 800279e:	f1c0 0307 	rsb	r3, r0, #7
 80027a2:	1c42      	adds	r2, r0, #1
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <drawPage1+0x2b4>)
 80027a6:	18e0      	adds	r0, r4, r3
 80027a8:	f006 fc49 	bl	800903e <memcpy>
 80027ac:	e722      	b.n	80025f4 <drawPage1+0xf4>
 80027ae:	bf00      	nop
 80027b0:	0800ad7c 	.word	0x0800ad7c
 80027b4:	24003560 	.word	0x24003560
 80027b8:	2400000c 	.word	0x2400000c
 80027bc:	0800ad88 	.word	0x0800ad88

080027c0 <updateScreen>:

void updateScreen(ScreenInfo* pscrinfo)
{
 80027c0:	b510      	push	{r4, lr}
	if(pscrinfo->page==0)drawPage0(pscrinfo);
 80027c2:	7803      	ldrb	r3, [r0, #0]
{
 80027c4:	4604      	mov	r4, r0
	if(pscrinfo->page==0)drawPage0(pscrinfo);
 80027c6:	b113      	cbz	r3, 80027ce <updateScreen+0xe>
	if(pscrinfo->page==1)drawPage1(pscrinfo);
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d005      	beq.n	80027d8 <updateScreen+0x18>
}
 80027cc:	bd10      	pop	{r4, pc}
	if(pscrinfo->page==0)drawPage0(pscrinfo);
 80027ce:	f7ff fd6b 	bl	80022a8 <drawPage0>
	if(pscrinfo->page==1)drawPage1(pscrinfo);
 80027d2:	7823      	ldrb	r3, [r4, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d1f9      	bne.n	80027cc <updateScreen+0xc>
 80027d8:	4620      	mov	r0, r4
}
 80027da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(pscrinfo->page==1)drawPage1(pscrinfo);
 80027de:	f7ff be8f 	b.w	8002500 <drawPage1>
 80027e2:	bf00      	nop

080027e4 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80027e4:	4814      	ldr	r0, [pc, #80]	; (8002838 <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027e6:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 80027e8:	4914      	ldr	r1, [pc, #80]	; (800283c <MX_SPI1_Init+0x58>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
 80027ee:	b510      	push	{r4, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027f8:	2407      	movs	r4, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027fa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
 80027fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002800:	e9c0 3205 	strd	r3, r2, [r0, #20]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002808:	e9c0 4303 	strd	r4, r3, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800280c:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002810:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002814:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002818:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800281c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002820:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002824:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002828:	f002 fea8 	bl	800557c <HAL_SPI_Init>
 800282c:	b900      	cbnz	r0, 8002830 <MX_SPI1_Init+0x4c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800282e:	bd10      	pop	{r4, pc}
 8002830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002834:	f7ff bcf4 	b.w	8002220 <Error_Handler>
 8002838:	240035a0 	.word	0x240035a0
 800283c:	40013000 	.word	0x40013000

08002840 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002840:	b510      	push	{r4, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002842:	4816      	ldr	r0, [pc, #88]	; (800289c <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002844:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hspi4.Instance = SPI4;
 8002848:	4c15      	ldr	r4, [pc, #84]	; (80028a0 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800284a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800284e:	2300      	movs	r3, #0
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002850:	6081      	str	r1, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002852:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002856:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002858:	6143      	str	r3, [r0, #20]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800285a:	e9c0 4200 	strd	r4, r2, [r0]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800285e:	2207      	movs	r2, #7
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002860:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002864:	60c2      	str	r2, [r0, #12]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800286a:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800286e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 8002872:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002876:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800287a:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800287e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002882:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002886:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800288a:	f002 fe77 	bl	800557c <HAL_SPI_Init>
 800288e:	b900      	cbnz	r0, 8002892 <MX_SPI4_Init+0x52>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002890:	bd10      	pop	{r4, pc}
 8002892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002896:	f7ff bcc3 	b.w	8002220 <Error_Handler>
 800289a:	bf00      	nop
 800289c:	24003628 	.word	0x24003628
 80028a0:	40013400 	.word	0x40013400
 80028a4:	00000000 	.word	0x00000000

080028a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80028a8:	4a33      	ldr	r2, [pc, #204]	; (8002978 <HAL_SPI_MspInit+0xd0>)
 80028aa:	6803      	ldr	r3, [r0, #0]
{
 80028ac:	b530      	push	{r4, r5, lr}
  if(spiHandle->Instance==SPI1)
 80028ae:	4293      	cmp	r3, r2
{
 80028b0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b2:	f04f 0400 	mov.w	r4, #0
 80028b6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80028ba:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80028be:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80028c0:	d004      	beq.n	80028cc <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI4)
 80028c2:	4a2e      	ldr	r2, [pc, #184]	; (800297c <HAL_SPI_MspInit+0xd4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d02e      	beq.n	8002926 <HAL_SPI_MspInit+0x7e>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80028c8:	b00b      	add	sp, #44	; 0x2c
 80028ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ce:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028d2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80028d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80028de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80028e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028e6:	9200      	str	r2, [sp, #0]
 80028e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028f6:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028fc:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002904:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	481e      	ldr	r0, [pc, #120]	; (8002984 <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800290a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f000 fdcd 	bl	80034ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002912:	4622      	mov	r2, r4
 8002914:	4629      	mov	r1, r5
 8002916:	2023      	movs	r0, #35	; 0x23
 8002918:	f000 fcb2 	bl	8003280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800291c:	2023      	movs	r0, #35	; 0x23
 800291e:	f000 fced 	bl	80032fc <HAL_NVIC_EnableIRQ>
}
 8002922:	b00b      	add	sp, #44	; 0x2c
 8002924:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002928:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292a:	a904      	add	r1, sp, #16
 800292c:	4816      	ldr	r0, [pc, #88]	; (8002988 <HAL_SPI_MspInit+0xe0>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 800292e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002932:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002936:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800293a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800293e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002942:	9202      	str	r2, [sp, #8]
 8002944:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002946:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800294a:	f042 0210 	orr.w	r2, r2, #16
 800294e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002956:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002958:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800295c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8002970 <HAL_SPI_MspInit+0xc8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002960:	9303      	str	r3, [sp, #12]
 8002962:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002964:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002968:	f000 fda0 	bl	80034ac <HAL_GPIO_Init>
}
 800296c:	b00b      	add	sp, #44	; 0x2c
 800296e:	bd30      	pop	{r4, r5, pc}
 8002970:	00005000 	.word	0x00005000
 8002974:	00000002 	.word	0x00000002
 8002978:	40013000 	.word	0x40013000
 800297c:	40013400 	.word	0x40013400
 8002980:	58024400 	.word	0x58024400
 8002984:	58020000 	.word	0x58020000
 8002988:	58021000 	.word	0x58021000

0800298c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	210f      	movs	r1, #15
 8002992:	f06f 0001 	mvn.w	r0, #1
{
 8002996:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002998:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 800299c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	f044 0402 	orr.w	r4, r4, #2
 80029a2:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 80029a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b2:	b003      	add	sp, #12
 80029b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029b8:	f000 bc62 	b.w	8003280 <HAL_NVIC_SetPriority>
 80029bc:	58024400 	.word	0x58024400

080029c0 <HAL_InitTick>:
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c0:	280f      	cmp	r0, #15
 80029c2:	d901      	bls.n	80029c8 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80029c4:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80029c6:	4770      	bx	lr
{
 80029c8:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80029ca:	4601      	mov	r1, r0
{
 80029cc:	b08b      	sub	sp, #44	; 0x2c
 80029ce:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2019      	movs	r0, #25
  htim1.Instance = TIM1;
 80029d4:	4d1a      	ldr	r5, [pc, #104]	; (8002a40 <HAL_InitTick+0x80>)
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80029d6:	f000 fc53 	bl	8003280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80029da:	2019      	movs	r0, #25
 80029dc:	f000 fc8e 	bl	80032fc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_InitTick+0x84>)
    uwTickPrio = TickPriority;
 80029e2:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_InitTick+0x88>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029e4:	4669      	mov	r1, sp
 80029e6:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80029e8:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029ea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ee:	4c17      	ldr	r4, [pc, #92]	; (8002a4c <HAL_InitTick+0x8c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80029f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a04:	f001 fcd8 	bl	80043b8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002a08:	f001 fc8e 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
  htim1.Init.ClockDivision = 0;
 8002a0c:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002a0e:	0043      	lsls	r3, r0, #1
  htim1.Instance = TIM1;
 8002a10:	490f      	ldr	r1, [pc, #60]	; (8002a50 <HAL_InitTick+0x90>)
  htim1.Init.ClockDivision = 0;
 8002a12:	612a      	str	r2, [r5, #16]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002a14:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a16:	60aa      	str	r2, [r5, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a18:	fba4 2303 	umull	r2, r3, r4, r3
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Instance = TIM1;
 8002a20:	6029      	str	r1, [r5, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a22:	0c9b      	lsrs	r3, r3, #18
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a24:	60ea      	str	r2, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a26:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a28:	606b      	str	r3, [r5, #4]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002a2a:	f003 fb09 	bl	8006040 <HAL_TIM_Base_Init>
 8002a2e:	b110      	cbz	r0, 8002a36 <HAL_InitTick+0x76>
    return HAL_ERROR;
 8002a30:	2001      	movs	r0, #1
}
 8002a32:	b00b      	add	sp, #44	; 0x2c
 8002a34:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8002a36:	4628      	mov	r0, r5
 8002a38:	f003 fbb8 	bl	80061ac <HAL_TIM_Base_Start_IT>
 8002a3c:	e7f9      	b.n	8002a32 <HAL_InitTick+0x72>
 8002a3e:	bf00      	nop
 8002a40:	240036b0 	.word	0x240036b0
 8002a44:	58024400 	.word	0x58024400
 8002a48:	240030d0 	.word	0x240030d0
 8002a4c:	431bde83 	.word	0x431bde83
 8002a50:	40010000 	.word	0x40010000

08002a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a54:	e7fe      	b.n	8002a54 <NMI_Handler>
 8002a56:	bf00      	nop

08002a58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a58:	e7fe      	b.n	8002a58 <HardFault_Handler>
 8002a5a:	bf00      	nop

08002a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a5c:	e7fe      	b.n	8002a5c <MemManage_Handler>
 8002a5e:	bf00      	nop

08002a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a60:	e7fe      	b.n	8002a60 <BusFault_Handler>
 8002a62:	bf00      	nop

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	e7fe      	b.n	8002a64 <UsageFault_Handler>
 8002a66:	bf00      	nop

08002a68 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop

08002a6c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPULSE_Pin);
 8002a6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a70:	f000 be60 	b.w	8003734 <HAL_GPIO_EXTI_IRQHandler>

08002a74 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a74:	4801      	ldr	r0, [pc, #4]	; (8002a7c <TIM1_UP_IRQHandler+0x8>)
 8002a76:	f003 bbfd 	b.w	8006274 <HAL_TIM_IRQHandler>
 8002a7a:	bf00      	nop
 8002a7c:	240036b0 	.word	0x240036b0

08002a80 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a80:	4801      	ldr	r0, [pc, #4]	; (8002a88 <SPI1_IRQHandler+0x8>)
 8002a82:	f003 b9d1 	b.w	8005e28 <HAL_SPI_IRQHandler>
 8002a86:	bf00      	nop
 8002a88:	240035a0 	.word	0x240035a0

08002a8c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K1_Pin);
 8002a8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a90:	f000 be50 	b.w	8003734 <HAL_GPIO_EXTI_IRQHandler>

08002a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a94:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	1e16      	subs	r6, r2, #0
 8002a98:	dd07      	ble.n	8002aaa <_read+0x16>
 8002a9a:	460c      	mov	r4, r1
 8002a9c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002a9e:	f3af 8000 	nop.w
 8002aa2:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa6:	42a5      	cmp	r5, r4
 8002aa8:	d1f9      	bne.n	8002a9e <_read+0xa>
  }

  return len;
}
 8002aaa:	4630      	mov	r0, r6
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	bf00      	nop

08002ab0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop

08002ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8002abc:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002abe:	604b      	str	r3, [r1, #4]
}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop

08002ac4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	4770      	bx	lr

08002ac8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002ac8:	2000      	movs	r0, #0
 8002aca:	4770      	bx	lr

08002acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002acc:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ace:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <_sbrk+0x38>)
{
 8002ad0:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad2:	490d      	ldr	r1, [pc, #52]	; (8002b08 <_sbrk+0x3c>)
 8002ad4:	4d0d      	ldr	r5, [pc, #52]	; (8002b0c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002ad6:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad8:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8002ada:	b12a      	cbz	r2, 8002ae8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002adc:	4413      	add	r3, r2
 8002ade:	428b      	cmp	r3, r1
 8002ae0:	d808      	bhi.n	8002af4 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002ae2:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8002ae4:	6023      	str	r3, [r4, #0]
}
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8002ae8:	4809      	ldr	r0, [pc, #36]	; (8002b10 <_sbrk+0x44>)
 8002aea:	4602      	mov	r2, r0
 8002aec:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002aee:	4413      	add	r3, r2
 8002af0:	428b      	cmp	r3, r1
 8002af2:	d9f6      	bls.n	8002ae2 <_sbrk+0x16>
    errno = ENOMEM;
 8002af4:	f006 f966 	bl	8008dc4 <__errno>
 8002af8:	230c      	movs	r3, #12
    return (void *)-1;
 8002afa:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8002afe:	6003      	str	r3, [r0, #0]
}
 8002b00:	4610      	mov	r0, r2
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	240036fc 	.word	0x240036fc
 8002b08:	24080000 	.word	0x24080000
 8002b0c:	00000400 	.word	0x00000400
 8002b10:	240081b8 	.word	0x240081b8

08002b14 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b14:	4927      	ldr	r1, [pc, #156]	; (8002bb4 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b16:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b18:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002b20:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b26:	6813      	ldr	r3, [r2, #0]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d805      	bhi.n	8002b3c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b30:	6813      	ldr	r3, [r2, #0]
 8002b32:	f023 030f 	bic.w	r3, r3, #15
 8002b36:	f043 0307 	orr.w	r3, r3, #7
 8002b3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b3e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8002b42:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b44:	481c      	ldr	r0, [pc, #112]	; (8002bb8 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8002b46:	f041 0101 	orr.w	r1, r1, #1
 8002b4a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002b4c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	400a      	ands	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b54:	6803      	ldr	r3, [r0, #0]
 8002b56:	071b      	lsls	r3, r3, #28
 8002b58:	d505      	bpl.n	8002b66 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	f023 030f 	bic.w	r3, r3, #15
 8002b60:	f043 0307 	orr.w	r3, r3, #7
 8002b64:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <SystemInit+0xa8>)
 8002b68:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b6a:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8002b6c:	4c16      	ldr	r4, [pc, #88]	; (8002bc8 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8002b6e:	4817      	ldr	r0, [pc, #92]	; (8002bcc <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8002b70:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8002b72:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8002b74:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8002b76:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8002b78:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8002b7a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b7e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b80:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b82:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b86:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b88:	4c11      	ldr	r4, [pc, #68]	; (8002bd0 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8002b8a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b8e:	4911      	ldr	r1, [pc, #68]	; (8002bd4 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8002b90:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8002b92:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	4019      	ands	r1, r3
 8002b98:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002b9c:	d203      	bcs.n	8002ba6 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <SystemInit+0xc4>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <SystemInit+0xc8>)
 8002ba8:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002bac:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00
 8002bb8:	52002000 	.word	0x52002000
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002bc4:	01010280 	.word	0x01010280
 8002bc8:	02020200 	.word	0x02020200
 8002bcc:	01ff0000 	.word	0x01ff0000
 8002bd0:	5c001000 	.word	0x5c001000
 8002bd4:	ffff0000 	.word	0xffff0000
 8002bd8:	51008000 	.word	0x51008000
 8002bdc:	52004000 	.word	0x52004000

08002be0 <SystemCoreClockUpdate>:
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be0:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <SystemCoreClockUpdate+0x144>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
{
 8002be8:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bea:	2b18      	cmp	r3, #24
 8002bec:	d80e      	bhi.n	8002c0c <SystemCoreClockUpdate+0x2c>
 8002bee:	e8df f003 	tbb	[pc, r3]
 8002bf2:	0d0d      	.short	0x0d0d
 8002bf4:	0d0d0d0d 	.word	0x0d0d0d0d
 8002bf8:	0d740d0d 	.word	0x0d740d0d
 8002bfc:	0d0d0d0d 	.word	0x0d0d0d0d
 8002c00:	0d760d0d 	.word	0x0d760d0d
 8002c04:	0d0d0d0d 	.word	0x0d0d0d0d
 8002c08:	0d0d      	.short	0x0d0d
 8002c0a:	2a          	.byte	0x2a
 8002c0b:	00          	.byte	0x00
      common_system_clock = 0U;
    }
    break;

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8002c0c:	4b45      	ldr	r3, [pc, #276]	; (8002d24 <SystemCoreClockUpdate+0x144>)
 8002c0e:	4a46      	ldr	r2, [pc, #280]	; (8002d28 <SystemCoreClockUpdate+0x148>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002c16:	40da      	lsrs	r2, r3
    break;
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8002c18:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <SystemCoreClockUpdate+0x144>)
 8002c1a:	4844      	ldr	r0, [pc, #272]	; (8002d2c <SystemCoreClockUpdate+0x14c>)
 8002c1c:	6999      	ldr	r1, [r3, #24]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c1e:	699b      	ldr	r3, [r3, #24]
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8002c20:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c24:	4c42      	ldr	r4, [pc, #264]	; (8002d30 <SystemCoreClockUpdate+0x150>)
 8002c26:	f003 030f 	and.w	r3, r3, #15
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8002c2a:	f810 c001 	ldrb.w	ip, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c2e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock >>= tmp;
 8002c30:	fa22 f20c 	lsr.w	r2, r2, ip
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c34:	493f      	ldr	r1, [pc, #252]	; (8002d34 <SystemCoreClockUpdate+0x154>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c36:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8002c3a:	600a      	str	r2, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	6023      	str	r3, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
 8002c42:	bc30      	pop	{r4, r5}
 8002c44:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <SystemCoreClockUpdate+0x144>)
 8002c48:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c4a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c4c:	6add      	ldr	r5, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8002c4e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c52:	6b58      	ldr	r0, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c54:	f3c4 1205 	ubfx	r2, r4, #4, #6
    if (pllm != 0U)
 8002c58:	d0de      	beq.n	8002c18 <SystemCoreClockUpdate+0x38>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c5a:	f3c0 00cc 	ubfx	r0, r0, #3, #13
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c5e:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c62:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c66:	fb05 f000 	mul.w	r0, r5, r0
 8002c6a:	2901      	cmp	r1, #1
 8002c6c:	ee07 0a90 	vmov	s15, r0
 8002c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c74:	d04f      	beq.n	8002d16 <SystemCoreClockUpdate+0x136>
 8002c76:	2902      	cmp	r1, #2
 8002c78:	d033      	beq.n	8002ce2 <SystemCoreClockUpdate+0x102>
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8002c7a:	6818      	ldr	r0, [r3, #0]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c7c:	ee07 2a10 	vmov	s14, r2
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8002c80:	4929      	ldr	r1, [pc, #164]	; (8002d28 <SystemCoreClockUpdate+0x148>)
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8002c88:	f3c0 02c1 	ubfx	r2, r0, #3, #2
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c8c:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
 8002c90:	eddf 5a29 	vldr	s11, [pc, #164]	; 8002d38 <SystemCoreClockUpdate+0x158>
 8002c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8002c98:	40d1      	lsrs	r1, r2
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c9a:	ee07 3a10 	vmov	s14, r3
 8002c9e:	ee06 1a10 	vmov	s12, r1
 8002ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ca6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002caa:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002cae:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8002cb2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8002cb6:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <SystemCoreClockUpdate+0x144>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002cc2:	3301      	adds	r3, #1
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ccc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cd0:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002cd4:	ee17 2a90 	vmov	r2, s15
 8002cd8:	e79e      	b.n	8002c18 <SystemCoreClockUpdate+0x38>
    common_system_clock = CSI_VALUE;
 8002cda:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <SystemCoreClockUpdate+0x15c>)
 8002cdc:	e79c      	b.n	8002c18 <SystemCoreClockUpdate+0x38>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cde:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <SystemCoreClockUpdate+0x160>)
 8002ce0:	e79a      	b.n	8002c18 <SystemCoreClockUpdate+0x38>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ce2:	ee07 2a10 	vmov	s14, r2
 8002ce6:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8002d44 <SystemCoreClockUpdate+0x164>
 8002cea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	eec5 6a07 	vdiv.f32	s13, s10, s14
 8002cf4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002d38 <SystemCoreClockUpdate+0x158>
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	ee07 3a10 	vmov	s14, r3
 8002d00:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002d04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d08:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002d0c:	eea7 7a86 	vfma.f32	s14, s15, s12
 8002d10:	ee26 7a87 	vmul.f32	s14, s13, s14
        break;
 8002d14:	e7d1      	b.n	8002cba <SystemCoreClockUpdate+0xda>
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d16:	ee07 2a10 	vmov	s14, r2
 8002d1a:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8002d48 <SystemCoreClockUpdate+0x168>
 8002d1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d22:	e7e4      	b.n	8002cee <SystemCoreClockUpdate+0x10e>
 8002d24:	58024400 	.word	0x58024400
 8002d28:	03d09000 	.word	0x03d09000
 8002d2c:	0800ad90 	.word	0x0800ad90
 8002d30:	240030c8 	.word	0x240030c8
 8002d34:	240030c4 	.word	0x240030c4
 8002d38:	39000000 	.word	0x39000000
 8002d3c:	003d0900 	.word	0x003d0900
 8002d40:	017d7840 	.word	0x017d7840
 8002d44:	4bbebc20 	.word	0x4bbebc20
 8002d48:	4a742400 	.word	0x4a742400

08002d4c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002d4c:	b510      	push	{r4, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d4e:	481f      	ldr	r0, [pc, #124]	; (8002dcc <MX_UART4_Init+0x80>)
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d50:	2300      	movs	r3, #0
  huart4.Instance = UART4;
 8002d52:	4c1f      	ldr	r4, [pc, #124]	; (8002dd0 <MX_UART4_Init+0x84>)
  huart4.Init.BaudRate = 115200;
 8002d54:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d58:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5a:	6083      	str	r3, [r0, #8]
  huart4.Init.BaudRate = 115200;
 8002d5c:	e9c0 4100 	strd	r4, r1, [r0]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d64:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d68:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d6c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d70:	f003 ff60 	bl	8006c34 <HAL_UART_Init>
 8002d74:	b970      	cbnz	r0, 8002d94 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d76:	2100      	movs	r1, #0
 8002d78:	4814      	ldr	r0, [pc, #80]	; (8002dcc <MX_UART4_Init+0x80>)
 8002d7a:	f003 ffad 	bl	8006cd8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d7e:	b988      	cbnz	r0, 8002da4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d80:	2100      	movs	r1, #0
 8002d82:	4812      	ldr	r0, [pc, #72]	; (8002dcc <MX_UART4_Init+0x80>)
 8002d84:	f003 ffea 	bl	8006d5c <HAL_UARTEx_SetRxFifoThreshold>
 8002d88:	b9a0      	cbnz	r0, 8002db4 <MX_UART4_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002d8a:	4810      	ldr	r0, [pc, #64]	; (8002dcc <MX_UART4_Init+0x80>)
 8002d8c:	f003 ff86 	bl	8006c9c <HAL_UARTEx_DisableFifoMode>
 8002d90:	b9b8      	cbnz	r0, 8002dc2 <MX_UART4_Init+0x76>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d92:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002d94:	f7ff fa44 	bl	8002220 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d98:	2100      	movs	r1, #0
 8002d9a:	480c      	ldr	r0, [pc, #48]	; (8002dcc <MX_UART4_Init+0x80>)
 8002d9c:	f003 ff9c 	bl	8006cd8 <HAL_UARTEx_SetTxFifoThreshold>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d0ed      	beq.n	8002d80 <MX_UART4_Init+0x34>
    Error_Handler();
 8002da4:	f7ff fa3c 	bl	8002220 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da8:	2100      	movs	r1, #0
 8002daa:	4808      	ldr	r0, [pc, #32]	; (8002dcc <MX_UART4_Init+0x80>)
 8002dac:	f003 ffd6 	bl	8006d5c <HAL_UARTEx_SetRxFifoThreshold>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d0ea      	beq.n	8002d8a <MX_UART4_Init+0x3e>
    Error_Handler();
 8002db4:	f7ff fa34 	bl	8002220 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002db8:	4804      	ldr	r0, [pc, #16]	; (8002dcc <MX_UART4_Init+0x80>)
 8002dba:	f003 ff6f 	bl	8006c9c <HAL_UARTEx_DisableFifoMode>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d0e7      	beq.n	8002d92 <MX_UART4_Init+0x46>
}
 8002dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002dc6:	f7ff ba2b 	b.w	8002220 <Error_Handler>
 8002dca:	bf00      	nop
 8002dcc:	24003700 	.word	0x24003700
 8002dd0:	40004c00 	.word	0x40004c00
 8002dd4:	00000000 	.word	0x00000000

08002dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART4)
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <HAL_UART_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dda:	2300      	movs	r3, #0
  if(uartHandle->Instance==UART4)
 8002ddc:	6801      	ldr	r1, [r0, #0]
{
 8002dde:	b510      	push	{r4, lr}
  if(uartHandle->Instance==UART4)
 8002de0:	4291      	cmp	r1, r2
{
 8002de2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002de8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002dec:	9306      	str	r3, [sp, #24]
  if(uartHandle->Instance==UART4)
 8002dee:	d001      	beq.n	8002df4 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002df0:	b008      	add	sp, #32
 8002df2:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002df6:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	4815      	ldr	r0, [pc, #84]	; (8002e50 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002dfa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e02:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e06:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002e0a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002e0e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002e12:	9200      	str	r2, [sp, #0]
 8002e14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e26:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e28:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e2c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8002e40 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e34:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e38:	f000 fb38 	bl	80034ac <HAL_GPIO_Init>
}
 8002e3c:	b008      	add	sp, #32
 8002e3e:	bd10      	pop	{r4, pc}
 8002e40:	00000003 	.word	0x00000003
 8002e44:	00000002 	.word	0x00000002
 8002e48:	40004c00 	.word	0x40004c00
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	58020000 	.word	0x58020000

08002e54 <my_ftoa>:
	// check precision bounds
	if (precision > MAX_PRECISION)
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 8002e54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		f = -f;
		*ptr++ = '-';
 8002e58:	4684      	mov	ip, r0
{
 8002e5a:	b530      	push	{r4, r5, lr}
	if (f < 0)
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002e60:	b083      	sub	sp, #12
	if (f < 0)
 8002e62:	d504      	bpl.n	8002e6e <my_ftoa+0x1a>
		f = -f;
 8002e64:	eeb1 0a40 	vneg.f32	s0, s0
		*ptr++ = '-';
 8002e68:	232d      	movs	r3, #45	; 0x2d
 8002e6a:	f80c 3b01 	strb.w	r3, [ip], #1
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8002e6e:	2900      	cmp	r1, #0
 8002e70:	f2c0 810a 	blt.w	8003088 <my_ftoa+0x234>
 8002e74:	290a      	cmp	r1, #10
 8002e76:	460c      	mov	r4, r1
 8002e78:	bfa8      	it	ge
 8002e7a:	240a      	movge	r4, #10
		else if (f < 100000.0) precision = 1;
		else precision = 0;
	}

	// round value according the precision
	if (precision)
 8002e7c:	b131      	cbz	r1, 8002e8c <my_ftoa+0x38>
		f += rounders[precision];
 8002e7e:	4ba9      	ldr	r3, [pc, #676]	; (8003124 <my_ftoa+0x2d0>)
 8002e80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ee30 0a27 	vadd.f32	s0, s0, s15

	// integer part...
	intPart = f;
 8002e8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	f -= intPart;

	if (!intPart)
 8002e90:	ee17 3a90 	vmov	r3, s15
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80f2 	beq.w	800307e <my_ftoa+0x22a>
		else precision = 0;
 8002e9a:	ee17 1a90 	vmov	r1, s15
 8002e9e:	46e6      	mov	lr, ip
		p = ptr;

		// convert (reverse order)
		while (intPart)
		{
			*p++ = '0' + intPart % 10;
 8002ea0:	4da1      	ldr	r5, [pc, #644]	; (8003128 <my_ftoa+0x2d4>)
 8002ea2:	fb85 2301 	smull	r2, r3, r5, r1
 8002ea6:	17ca      	asrs	r2, r1, #31
 8002ea8:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8002eac:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002eb0:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
		while (intPart)
 8002eb4:	4611      	mov	r1, r2
			*p++ = '0' + intPart % 10;
 8002eb6:	3330      	adds	r3, #48	; 0x30
 8002eb8:	f80e 3b01 	strb.w	r3, [lr], #1
		while (intPart)
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d1f0      	bne.n	8002ea2 <my_ftoa+0x4e>

		// save end pos
		p1 = p;

		// reverse result
		while (p > ptr)
 8002ec0:	45f4      	cmp	ip, lr
 8002ec2:	d209      	bcs.n	8002ed8 <my_ftoa+0x84>
 8002ec4:	4673      	mov	r3, lr
		{
			c = *--p;
 8002ec6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 8002eca:	f89c 1000 	ldrb.w	r1, [ip]
 8002ece:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 8002ed0:	f80c 2b01 	strb.w	r2, [ip], #1
		while (p > ptr)
 8002ed4:	4563      	cmp	r3, ip
 8002ed6:	d8f6      	bhi.n	8002ec6 <my_ftoa+0x72>
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 8002ed8:	2c00      	cmp	r4, #0
 8002eda:	f000 80cb 	beq.w	8003074 <my_ftoa+0x220>
	f -= intPart;
 8002ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	{
		// place decimal point
		*ptr++ = '.';
 8002ee2:	232e      	movs	r3, #46	; 0x2e

		// convert
		while (precision--)
		{
			f *= 10.0;
 8002ee4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
		while (precision--)
 8002ee8:	2c01      	cmp	r4, #1
		*ptr++ = '.';
 8002eea:	f88e 3000 	strb.w	r3, [lr]
	f -= intPart;
 8002eee:	ee30 0a67 	vsub.f32	s0, s0, s15
			f *= 10.0;
 8002ef2:	ee20 0a07 	vmul.f32	s0, s0, s14
			c = f;
 8002ef6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002efa:	edcd 7a01 	vstr	s15, [sp, #4]
 8002efe:	f89d 3004 	ldrb.w	r3, [sp, #4]
			*ptr++ = '0' + c;
			f -= c;
 8002f02:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8002f06:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8002f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8002f0e:	f88e 3001 	strb.w	r3, [lr, #1]
			f -= c;
 8002f12:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8002f16:	f000 80ab 	beq.w	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 8002f1a:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8002f1e:	2c02      	cmp	r4, #2
			c = f;
 8002f20:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002f24:	edcd 7a01 	vstr	s15, [sp, #4]
 8002f28:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8002f2c:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8002f30:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8002f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8002f38:	f88e 3002 	strb.w	r3, [lr, #2]
			f -= c;
 8002f3c:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8002f40:	f000 8096 	beq.w	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 8002f44:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8002f48:	2c03      	cmp	r4, #3
			c = f;
 8002f4a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002f4e:	edcd 7a01 	vstr	s15, [sp, #4]
 8002f52:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8002f56:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8002f5a:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8002f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8002f62:	f88e 3003 	strb.w	r3, [lr, #3]
			f -= c;
 8002f66:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8002f6a:	f000 8081 	beq.w	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 8002f6e:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8002f72:	2c04      	cmp	r4, #4
			c = f;
 8002f74:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002f78:	edcd 7a01 	vstr	s15, [sp, #4]
 8002f7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8002f80:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8002f84:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8002f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8002f8c:	f88e 3004 	strb.w	r3, [lr, #4]
			f -= c;
 8002f90:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8002f94:	d06c      	beq.n	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 8002f96:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8002f9a:	2c05      	cmp	r4, #5
			c = f;
 8002f9c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002fa0:	edcd 7a01 	vstr	s15, [sp, #4]
 8002fa4:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8002fa8:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8002fac:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8002fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8002fb4:	f88e 3005 	strb.w	r3, [lr, #5]
			f -= c;
 8002fb8:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8002fbc:	d058      	beq.n	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 8002fbe:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8002fc2:	2c06      	cmp	r4, #6
			c = f;
 8002fc4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002fc8:	edcd 7a01 	vstr	s15, [sp, #4]
 8002fcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8002fd0:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8002fd4:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8002fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8002fdc:	f88e 3006 	strb.w	r3, [lr, #6]
			f -= c;
 8002fe0:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8002fe4:	d044      	beq.n	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 8002fe6:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8002fea:	2c07      	cmp	r4, #7
			c = f;
 8002fec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002ff0:	edcd 7a01 	vstr	s15, [sp, #4]
 8002ff4:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8002ff8:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8002ffc:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8003000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8003004:	f88e 3007 	strb.w	r3, [lr, #7]
			f -= c;
 8003008:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 800300c:	d030      	beq.n	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 800300e:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 8003012:	2c08      	cmp	r4, #8
			c = f;
 8003014:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003018:	edcd 7a01 	vstr	s15, [sp, #4]
 800301c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8003020:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 8003024:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8003028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 800302c:	f88e 3008 	strb.w	r3, [lr, #8]
			f -= c;
 8003030:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 8003034:	d01c      	beq.n	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 8003036:	ee20 0a07 	vmul.f32	s0, s0, s14
		while (precision--)
 800303a:	2c09      	cmp	r4, #9
			c = f;
 800303c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003040:	edcd 7a01 	vstr	s15, [sp, #4]
 8003044:	f89d 3004 	ldrb.w	r3, [sp, #4]
			f -= c;
 8003048:	ee07 3a90 	vmov	s15, r3
			*ptr++ = '0' + c;
 800304c:	f103 0330 	add.w	r3, r3, #48	; 0x30
			f -= c;
 8003050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			*ptr++ = '0' + c;
 8003054:	f88e 3009 	strb.w	r3, [lr, #9]
			f -= c;
 8003058:	ee30 0a67 	vsub.f32	s0, s0, s15
		while (precision--)
 800305c:	d008      	beq.n	8003070 <my_ftoa+0x21c>
			f *= 10.0;
 800305e:	ee20 0a07 	vmul.f32	s0, s0, s14
			c = f;
 8003062:	eebc 0ac0 	vcvt.u32.f32	s0, s0
			*ptr++ = '0' + c;
 8003066:	ee10 3a10 	vmov	r3, s0
 800306a:	3330      	adds	r3, #48	; 0x30
 800306c:	f88e 300a 	strb.w	r3, [lr, #10]
 8003070:	3401      	adds	r4, #1
 8003072:	44a6      	add	lr, r4
		}
	}

	// terminating zero
	*ptr = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	f88e 3000 	strb.w	r3, [lr]

	return buf;
}
 800307a:	b003      	add	sp, #12
 800307c:	bd30      	pop	{r4, r5, pc}
		*ptr++ = '0';
 800307e:	46e6      	mov	lr, ip
 8003080:	2330      	movs	r3, #48	; 0x30
 8003082:	f80e 3b01 	strb.w	r3, [lr], #1
 8003086:	e727      	b.n	8002ed8 <my_ftoa+0x84>
		if (f < 1.0) precision = 6;
 8003088:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800308c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	d430      	bmi.n	80030f8 <my_ftoa+0x2a4>
		else if (f < 10.0) precision = 5;
 8003096:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800309a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800309e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a2:	d425      	bmi.n	80030f0 <my_ftoa+0x29c>
		else if (f < 100.0) precision = 4;
 80030a4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800312c <my_ftoa+0x2d8>
 80030a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	d426      	bmi.n	8003100 <my_ftoa+0x2ac>
		else if (f < 1000.0) precision = 3;
 80030b2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003130 <my_ftoa+0x2dc>
 80030b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d423      	bmi.n	8003108 <my_ftoa+0x2b4>
		else if (f < 10000.0) precision = 2;
 80030c0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003134 <my_ftoa+0x2e0>
 80030c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	d420      	bmi.n	8003110 <my_ftoa+0x2bc>
		else if (f < 100000.0) precision = 1;
 80030ce:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003138 <my_ftoa+0x2e4>
 80030d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	d41d      	bmi.n	8003118 <my_ftoa+0x2c4>
	intPart = f;
 80030dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (!intPart)
 80030e0:	ee17 3a90 	vmov	r3, s15
 80030e4:	b9e3      	cbnz	r3, 8003120 <my_ftoa+0x2cc>
		*ptr++ = '0';
 80030e6:	46e6      	mov	lr, ip
 80030e8:	2330      	movs	r3, #48	; 0x30
 80030ea:	f80e 3b01 	strb.w	r3, [lr], #1
 80030ee:	e7c1      	b.n	8003074 <my_ftoa+0x220>
 80030f0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800313c <my_ftoa+0x2e8>
		else if (f < 10.0) precision = 5;
 80030f4:	2405      	movs	r4, #5
 80030f6:	e6c7      	b.n	8002e88 <my_ftoa+0x34>
 80030f8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003140 <my_ftoa+0x2ec>
		if (f < 1.0) precision = 6;
 80030fc:	2406      	movs	r4, #6
 80030fe:	e6c3      	b.n	8002e88 <my_ftoa+0x34>
 8003100:	eddf 7a10 	vldr	s15, [pc, #64]	; 8003144 <my_ftoa+0x2f0>
		else if (f < 100.0) precision = 4;
 8003104:	2404      	movs	r4, #4
 8003106:	e6bf      	b.n	8002e88 <my_ftoa+0x34>
 8003108:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003148 <my_ftoa+0x2f4>
		else if (f < 1000.0) precision = 3;
 800310c:	2403      	movs	r4, #3
 800310e:	e6bb      	b.n	8002e88 <my_ftoa+0x34>
 8003110:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800314c <my_ftoa+0x2f8>
		else if (f < 10000.0) precision = 2;
 8003114:	2402      	movs	r4, #2
 8003116:	e6b7      	b.n	8002e88 <my_ftoa+0x34>
 8003118:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003150 <my_ftoa+0x2fc>
		else if (f < 100000.0) precision = 1;
 800311c:	2401      	movs	r4, #1
 800311e:	e6b3      	b.n	8002e88 <my_ftoa+0x34>
		else precision = 0;
 8003120:	2400      	movs	r4, #0
 8003122:	e6ba      	b.n	8002e9a <my_ftoa+0x46>
 8003124:	0800ada0 	.word	0x0800ada0
 8003128:	66666667 	.word	0x66666667
 800312c:	42c80000 	.word	0x42c80000
 8003130:	447a0000 	.word	0x447a0000
 8003134:	461c4000 	.word	0x461c4000
 8003138:	47c35000 	.word	0x47c35000
 800313c:	36a7c5ac 	.word	0x36a7c5ac
 8003140:	350637bd 	.word	0x350637bd
 8003144:	3851b717 	.word	0x3851b717
 8003148:	3a03126f 	.word	0x3a03126f
 800314c:	3ba3d70a 	.word	0x3ba3d70a
 8003150:	3d4ccccd 	.word	0x3d4ccccd

08003154 <Reset_Handler>:
 8003154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800318c <LoopFillZerobss+0xe>
 8003158:	f7ff fcdc 	bl	8002b14 <SystemInit>
 800315c:	480c      	ldr	r0, [pc, #48]	; (8003190 <LoopFillZerobss+0x12>)
 800315e:	490d      	ldr	r1, [pc, #52]	; (8003194 <LoopFillZerobss+0x16>)
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <LoopFillZerobss+0x1a>)
 8003162:	2300      	movs	r3, #0
 8003164:	e002      	b.n	800316c <LoopCopyDataInit>

08003166 <CopyDataInit>:
 8003166:	58d4      	ldr	r4, [r2, r3]
 8003168:	50c4      	str	r4, [r0, r3]
 800316a:	3304      	adds	r3, #4

0800316c <LoopCopyDataInit>:
 800316c:	18c4      	adds	r4, r0, r3
 800316e:	428c      	cmp	r4, r1
 8003170:	d3f9      	bcc.n	8003166 <CopyDataInit>
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <LoopFillZerobss+0x1e>)
 8003174:	4c0a      	ldr	r4, [pc, #40]	; (80031a0 <LoopFillZerobss+0x22>)
 8003176:	2300      	movs	r3, #0
 8003178:	e001      	b.n	800317e <LoopFillZerobss>

0800317a <FillZerobss>:
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	3204      	adds	r2, #4

0800317e <LoopFillZerobss>:
 800317e:	42a2      	cmp	r2, r4
 8003180:	d3fb      	bcc.n	800317a <FillZerobss>
 8003182:	f005 ff1b 	bl	8008fbc <__libc_init_array>
 8003186:	f7fe ffdf 	bl	8002148 <main>
 800318a:	4770      	bx	lr
 800318c:	24080000 	.word	0x24080000
 8003190:	24000000 	.word	0x24000000
 8003194:	2400313c 	.word	0x2400313c
 8003198:	0800af14 	.word	0x0800af14
 800319c:	24003140 	.word	0x24003140
 80031a0:	240081b8 	.word	0x240081b8

080031a4 <ADC3_IRQHandler>:
 80031a4:	e7fe      	b.n	80031a4 <ADC3_IRQHandler>
	...

080031a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031aa:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031ac:	4c12      	ldr	r4, [pc, #72]	; (80031f8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ae:	f000 f855 	bl	800325c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031b2:	f000 fe69 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_Init+0x54>)
 80031b8:	4911      	ldr	r1, [pc, #68]	; (8003200 <HAL_Init+0x58>)
 80031ba:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031bc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031be:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031c2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031c6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031c8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031ca:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031ce:	490d      	ldr	r1, [pc, #52]	; (8003204 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031d0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031d4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031d6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80031da:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031dc:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031de:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031e0:	f7ff fbee 	bl	80029c0 <HAL_InitTick>
 80031e4:	b110      	cbz	r0, 80031ec <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80031e6:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80031e8:	4620      	mov	r0, r4
 80031ea:	bd10      	pop	{r4, pc}
 80031ec:	4604      	mov	r4, r0
  HAL_MspInit();
 80031ee:	f7ff fbcd 	bl	800298c <HAL_MspInit>
}
 80031f2:	4620      	mov	r0, r4
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	bf00      	nop
 80031f8:	240030c8 	.word	0x240030c8
 80031fc:	58024400 	.word	0x58024400
 8003200:	0800ad90 	.word	0x0800ad90
 8003204:	240030c4 	.word	0x240030c4

08003208 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003208:	4a03      	ldr	r2, [pc, #12]	; (8003218 <HAL_IncTick+0x10>)
 800320a:	4b04      	ldr	r3, [pc, #16]	; (800321c <HAL_IncTick+0x14>)
 800320c:	6811      	ldr	r1, [r2, #0]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	440b      	add	r3, r1
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	24003794 	.word	0x24003794
 800321c:	240030cc 	.word	0x240030cc

08003220 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003220:	4b01      	ldr	r3, [pc, #4]	; (8003228 <HAL_GetTick+0x8>)
 8003222:	6818      	ldr	r0, [r3, #0]
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	24003794 	.word	0x24003794

0800322c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7ff fff6 	bl	8003220 <HAL_GetTick>
 8003234:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003236:	1c63      	adds	r3, r4, #1
 8003238:	d002      	beq.n	8003240 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_Delay+0x20>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003240:	f7ff ffee 	bl	8003220 <HAL_GetTick>
 8003244:	1b43      	subs	r3, r0, r5
 8003246:	42a3      	cmp	r3, r4
 8003248:	d3fa      	bcc.n	8003240 <HAL_Delay+0x14>
  {
  }
}
 800324a:	bd38      	pop	{r3, r4, r5, pc}
 800324c:	240030cc 	.word	0x240030cc

08003250 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <HAL_GetREVID+0x8>)
 8003252:	6818      	ldr	r0, [r3, #0]
}
 8003254:	0c00      	lsrs	r0, r0, #16
 8003256:	4770      	bx	lr
 8003258:	5c001000 	.word	0x5c001000

0800325c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4906      	ldr	r1, [pc, #24]	; (8003278 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003262:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003266:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003268:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003274:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00
 800327c:	05fa0000 	.word	0x05fa0000

08003280 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_NVIC_SetPriority+0x70>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003288:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800328a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003292:	f1be 0f04 	cmp.w	lr, #4
 8003296:	bf28      	it	cs
 8003298:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329c:	f1bc 0f06 	cmp.w	ip, #6
 80032a0:	d91a      	bls.n	80032d8 <HAL_NVIC_SetPriority+0x58>
 80032a2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 3cff 	mov.w	ip, #4294967295
 80032a8:	fa0c fc03 	lsl.w	ip, ip, r3
 80032ac:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80032b4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80032ba:	ea21 010c 	bic.w	r1, r1, ip
 80032be:	fa01 f103 	lsl.w	r1, r1, r3
 80032c2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80032c6:	db0a      	blt.n	80032de <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c8:	0109      	lsls	r1, r1, #4
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_NVIC_SetPriority+0x74>)
 80032cc:	b2c9      	uxtb	r1, r1
 80032ce:	4403      	add	r3, r0
 80032d0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80032d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032d8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	4613      	mov	r3, r2
 80032dc:	e7e8      	b.n	80032b0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032de:	f000 000f 	and.w	r0, r0, #15
 80032e2:	0109      	lsls	r1, r1, #4
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_NVIC_SetPriority+0x78>)
 80032e6:	b2c9      	uxtb	r1, r1
 80032e8:	4403      	add	r3, r0
 80032ea:	7619      	strb	r1, [r3, #24]
 80032ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80032f0:	e000ed00 	.word	0xe000ed00
 80032f4:	e000e100 	.word	0xe000e100
 80032f8:	e000ecfc 	.word	0xe000ecfc

080032fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032fc:	2800      	cmp	r0, #0
 80032fe:	db07      	blt.n	8003310 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003300:	2301      	movs	r3, #1
 8003302:	f000 011f 	and.w	r1, r0, #31
 8003306:	4a03      	ldr	r2, [pc, #12]	; (8003314 <HAL_NVIC_EnableIRQ+0x18>)
 8003308:	0940      	lsrs	r0, r0, #5
 800330a:	408b      	lsls	r3, r1
 800330c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000e100 	.word	0xe000e100

08003318 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003318:	2800      	cmp	r0, #0
 800331a:	d05f      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc4>
{
 800331c:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003322:	4603      	mov	r3, r0
 8003324:	2a02      	cmp	r2, #2
 8003326:	d155      	bne.n	80033d4 <HAL_DMA_Abort_IT+0xbc>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003328:	6801      	ldr	r1, [r0, #0]
 800332a:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_DMA_Abort_IT+0x170>)
 800332c:	4291      	cmp	r1, r2
 800332e:	d048      	beq.n	80033c2 <HAL_DMA_Abort_IT+0xaa>
 8003330:	3218      	adds	r2, #24
 8003332:	4291      	cmp	r1, r2
 8003334:	d045      	beq.n	80033c2 <HAL_DMA_Abort_IT+0xaa>
 8003336:	3230      	adds	r2, #48	; 0x30
 8003338:	4c54      	ldr	r4, [pc, #336]	; (800348c <HAL_DMA_Abort_IT+0x174>)
 800333a:	4855      	ldr	r0, [pc, #340]	; (8003490 <HAL_DMA_Abort_IT+0x178>)
 800333c:	42a1      	cmp	r1, r4
 800333e:	bf18      	it	ne
 8003340:	4291      	cmpne	r1, r2
 8003342:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8003346:	bf0c      	ite	eq
 8003348:	2201      	moveq	r2, #1
 800334a:	2200      	movne	r2, #0
 800334c:	4281      	cmp	r1, r0
 800334e:	bf08      	it	eq
 8003350:	f042 0201 	orreq.w	r2, r2, #1
 8003354:	3030      	adds	r0, #48	; 0x30
 8003356:	42a1      	cmp	r1, r4
 8003358:	bf08      	it	eq
 800335a:	f042 0201 	orreq.w	r2, r2, #1
 800335e:	3430      	adds	r4, #48	; 0x30
 8003360:	4281      	cmp	r1, r0
 8003362:	bf08      	it	eq
 8003364:	f042 0201 	orreq.w	r2, r2, #1
 8003368:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800336c:	42a1      	cmp	r1, r4
 800336e:	bf08      	it	eq
 8003370:	f042 0201 	orreq.w	r2, r2, #1
 8003374:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003378:	4281      	cmp	r1, r0
 800337a:	bf08      	it	eq
 800337c:	f042 0201 	orreq.w	r2, r2, #1
 8003380:	3030      	adds	r0, #48	; 0x30
 8003382:	42a1      	cmp	r1, r4
 8003384:	bf08      	it	eq
 8003386:	f042 0201 	orreq.w	r2, r2, #1
 800338a:	3430      	adds	r4, #48	; 0x30
 800338c:	4281      	cmp	r1, r0
 800338e:	bf08      	it	eq
 8003390:	f042 0201 	orreq.w	r2, r2, #1
 8003394:	3030      	adds	r0, #48	; 0x30
 8003396:	42a1      	cmp	r1, r4
 8003398:	bf08      	it	eq
 800339a:	f042 0201 	orreq.w	r2, r2, #1
 800339e:	3430      	adds	r4, #48	; 0x30
 80033a0:	4281      	cmp	r1, r0
 80033a2:	bf08      	it	eq
 80033a4:	f042 0201 	orreq.w	r2, r2, #1
 80033a8:	3030      	adds	r0, #48	; 0x30
 80033aa:	42a1      	cmp	r1, r4
 80033ac:	bf08      	it	eq
 80033ae:	f042 0201 	orreq.w	r2, r2, #1
 80033b2:	4281      	cmp	r1, r0
 80033b4:	bf08      	it	eq
 80033b6:	f042 0201 	orreq.w	r2, r2, #1
 80033ba:	b912      	cbnz	r2, 80033c2 <HAL_DMA_Abort_IT+0xaa>
 80033bc:	4a35      	ldr	r2, [pc, #212]	; (8003494 <HAL_DMA_Abort_IT+0x17c>)
 80033be:	4291      	cmp	r1, r2
 80033c0:	d10e      	bne.n	80033e0 <HAL_DMA_Abort_IT+0xc8>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c2:	2204      	movs	r2, #4
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 80033c4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80033ca:	680b      	ldr	r3, [r1, #0]
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	600b      	str	r3, [r1, #0]
}
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d4:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80033d6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
}
 80033da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80033dc:	2001      	movs	r0, #1
}
 80033de:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033e0:	4a2d      	ldr	r2, [pc, #180]	; (8003498 <HAL_DMA_Abort_IT+0x180>)
 80033e2:	4d2e      	ldr	r5, [pc, #184]	; (800349c <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033e4:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033e6:	42a9      	cmp	r1, r5
 80033e8:	bf18      	it	ne
 80033ea:	4291      	cmpne	r1, r2
 80033ec:	4c2c      	ldr	r4, [pc, #176]	; (80034a0 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033ee:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033f2:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 80033f6:	bf0c      	ite	eq
 80033f8:	2201      	moveq	r2, #1
 80033fa:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033fc:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033fe:	42a1      	cmp	r1, r4
 8003400:	bf08      	it	eq
 8003402:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003406:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003408:	3428      	adds	r4, #40	; 0x28
 800340a:	42a9      	cmp	r1, r5
 800340c:	bf08      	it	eq
 800340e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003412:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003416:	42a1      	cmp	r1, r4
 8003418:	bf08      	it	eq
 800341a:	f042 0201 	orreq.w	r2, r2, #1
 800341e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8003420:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003422:	42a1      	cmp	r1, r4
 8003424:	bf08      	it	eq
 8003426:	f042 0201 	orreq.w	r2, r2, #1
 800342a:	481e      	ldr	r0, [pc, #120]	; (80034a4 <HAL_DMA_Abort_IT+0x18c>)
 800342c:	4281      	cmp	r1, r0
 800342e:	bf08      	it	eq
 8003430:	f042 0201 	orreq.w	r2, r2, #1
 8003434:	b912      	cbnz	r2, 800343c <HAL_DMA_Abort_IT+0x124>
 8003436:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <HAL_DMA_Abort_IT+0x190>)
 8003438:	4291      	cmp	r1, r2
 800343a:	d117      	bne.n	800346c <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800343c:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800343e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003440:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003444:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003446:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800344a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800344e:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003450:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003452:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003454:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003456:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 800345a:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800345c:	b132      	cbz	r2, 800346c <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800345e:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003460:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003464:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003468:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800346a:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800346c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800346e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8003470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8003472:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003476:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800347a:	b11a      	cbz	r2, 8003484 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 800347c:	4618      	mov	r0, r3
 800347e:	4790      	blx	r2
  return HAL_OK;
 8003480:	4620      	mov	r0, r4
}
 8003482:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003484:	4610      	mov	r0, r2
}
 8003486:	bd38      	pop	{r3, r4, r5, pc}
 8003488:	40020010 	.word	0x40020010
 800348c:	40020040 	.word	0x40020040
 8003490:	40020070 	.word	0x40020070
 8003494:	400204b8 	.word	0x400204b8
 8003498:	5802541c 	.word	0x5802541c
 800349c:	58025408 	.word	0x58025408
 80034a0:	58025430 	.word	0x58025430
 80034a4:	58025480 	.word	0x58025480
 80034a8:	58025494 	.word	0x58025494

080034ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034b0:	680c      	ldr	r4, [r1, #0]
{
 80034b2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034b4:	2c00      	cmp	r4, #0
 80034b6:	f000 80a6 	beq.w	8003606 <HAL_GPIO_Init+0x15a>
 80034ba:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034be:	4f8e      	ldr	r7, [pc, #568]	; (80036f8 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 80034c0:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80034c6:	ea12 0e04 	ands.w	lr, r2, r4
 80034ca:	f000 8095 	beq.w	80035f8 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034ce:	684d      	ldr	r5, [r1, #4]
 80034d0:	f005 0903 	and.w	r9, r5, #3
 80034d4:	f109 36ff 	add.w	r6, r9, #4294967295
 80034d8:	2e01      	cmp	r6, #1
 80034da:	f240 8097 	bls.w	800360c <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034de:	f1b9 0f03 	cmp.w	r9, #3
 80034e2:	f040 80d1 	bne.w	8003688 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034e6:	fa09 f20c 	lsl.w	r2, r9, ip
 80034ea:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80034ee:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034f4:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f8:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 80034fc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034fe:	d07b      	beq.n	80035f8 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003500:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003504:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003508:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350c:	f042 0202 	orr.w	r2, r2, #2
 8003510:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003514:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003518:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800351c:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8003520:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003524:	f002 0202 	and.w	r2, r2, #2
 8003528:	9201      	str	r2, [sp, #4]
 800352a:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800352c:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800352e:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003532:	fa02 f209 	lsl.w	r2, r2, r9
 8003536:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800353a:	4e70      	ldr	r6, [pc, #448]	; (80036fc <HAL_GPIO_Init+0x250>)
 800353c:	42b0      	cmp	r0, r6
 800353e:	d029      	beq.n	8003594 <HAL_GPIO_Init+0xe8>
 8003540:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003544:	42b0      	cmp	r0, r6
 8003546:	f000 80ac 	beq.w	80036a2 <HAL_GPIO_Init+0x1f6>
 800354a:	4e6d      	ldr	r6, [pc, #436]	; (8003700 <HAL_GPIO_Init+0x254>)
 800354c:	42b0      	cmp	r0, r6
 800354e:	f000 80ae 	beq.w	80036ae <HAL_GPIO_Init+0x202>
 8003552:	4e6c      	ldr	r6, [pc, #432]	; (8003704 <HAL_GPIO_Init+0x258>)
 8003554:	42b0      	cmp	r0, r6
 8003556:	f000 809e 	beq.w	8003696 <HAL_GPIO_Init+0x1ea>
 800355a:	4e6b      	ldr	r6, [pc, #428]	; (8003708 <HAL_GPIO_Init+0x25c>)
 800355c:	42b0      	cmp	r0, r6
 800355e:	f000 80b2 	beq.w	80036c6 <HAL_GPIO_Init+0x21a>
 8003562:	4e6a      	ldr	r6, [pc, #424]	; (800370c <HAL_GPIO_Init+0x260>)
 8003564:	42b0      	cmp	r0, r6
 8003566:	f000 80b4 	beq.w	80036d2 <HAL_GPIO_Init+0x226>
 800356a:	4e69      	ldr	r6, [pc, #420]	; (8003710 <HAL_GPIO_Init+0x264>)
 800356c:	42b0      	cmp	r0, r6
 800356e:	f000 80a4 	beq.w	80036ba <HAL_GPIO_Init+0x20e>
 8003572:	4e68      	ldr	r6, [pc, #416]	; (8003714 <HAL_GPIO_Init+0x268>)
 8003574:	42b0      	cmp	r0, r6
 8003576:	f000 80b2 	beq.w	80036de <HAL_GPIO_Init+0x232>
 800357a:	4e67      	ldr	r6, [pc, #412]	; (8003718 <HAL_GPIO_Init+0x26c>)
 800357c:	42b0      	cmp	r0, r6
 800357e:	f000 80b4 	beq.w	80036ea <HAL_GPIO_Init+0x23e>
 8003582:	4e66      	ldr	r6, [pc, #408]	; (800371c <HAL_GPIO_Init+0x270>)
 8003584:	42b0      	cmp	r0, r6
 8003586:	bf0c      	ite	eq
 8003588:	2609      	moveq	r6, #9
 800358a:	260a      	movne	r6, #10
 800358c:	fa06 f909 	lsl.w	r9, r6, r9
 8003590:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003594:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800359c:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800359e:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 80035a2:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80035a4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80035a8:	bf54      	ite	pl
 80035aa:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80035ae:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 80035b2:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035b4:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 80035b6:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80035b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80035bc:	bf54      	ite	pl
 80035be:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80035c2:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 80035c6:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80035c8:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035cc:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80035d2:	bf54      	ite	pl
 80035d4:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80035d8:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035dc:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035de:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80035e2:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80035e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80035ea:	bf54      	ite	pl
 80035ec:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80035f0:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80035f4:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80035f8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035fa:	f10c 0c02 	add.w	ip, ip, #2
 80035fe:	fa34 f203 	lsrs.w	r2, r4, r3
 8003602:	f47f af5e 	bne.w	80034c2 <HAL_GPIO_Init+0x16>
  }
}
 8003606:	b003      	add	sp, #12
 8003608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800360c:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8003610:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003612:	fa08 f80c 	lsl.w	r8, r8, ip
 8003616:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800361a:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800361c:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003620:	fa06 f60c 	lsl.w	r6, r6, ip
 8003624:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8003628:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 800362e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003632:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003634:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003638:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800363a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800363c:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363e:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003642:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003644:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003648:	fa06 f60c 	lsl.w	r6, r6, ip
 800364c:	ea46 0602 	orr.w	r6, r6, r2
 8003650:	fa09 f20c 	lsl.w	r2, r9, ip
      GPIOx->PUPDR = temp;
 8003654:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003656:	f47f af4a 	bne.w	80034ee <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800365a:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800365e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003662:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8003666:	260f      	movs	r6, #15
 8003668:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800366c:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8003670:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003674:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003678:	690e      	ldr	r6, [r1, #16]
 800367a:	fa06 f60b 	lsl.w	r6, r6, fp
 800367e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003682:	f8c9 6020 	str.w	r6, [r9, #32]
 8003686:	e732      	b.n	80034ee <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003688:	f04f 0803 	mov.w	r8, #3
 800368c:	fa08 f80c 	lsl.w	r8, r8, ip
 8003690:	ea6f 0808 	mvn.w	r8, r8
 8003694:	e7d2      	b.n	800363c <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003696:	2603      	movs	r6, #3
 8003698:	fa06 f909 	lsl.w	r9, r6, r9
 800369c:	ea42 0209 	orr.w	r2, r2, r9
 80036a0:	e778      	b.n	8003594 <HAL_GPIO_Init+0xe8>
 80036a2:	2601      	movs	r6, #1
 80036a4:	fa06 f909 	lsl.w	r9, r6, r9
 80036a8:	ea42 0209 	orr.w	r2, r2, r9
 80036ac:	e772      	b.n	8003594 <HAL_GPIO_Init+0xe8>
 80036ae:	2602      	movs	r6, #2
 80036b0:	fa06 f909 	lsl.w	r9, r6, r9
 80036b4:	ea42 0209 	orr.w	r2, r2, r9
 80036b8:	e76c      	b.n	8003594 <HAL_GPIO_Init+0xe8>
 80036ba:	2606      	movs	r6, #6
 80036bc:	fa06 f909 	lsl.w	r9, r6, r9
 80036c0:	ea42 0209 	orr.w	r2, r2, r9
 80036c4:	e766      	b.n	8003594 <HAL_GPIO_Init+0xe8>
 80036c6:	2604      	movs	r6, #4
 80036c8:	fa06 f909 	lsl.w	r9, r6, r9
 80036cc:	ea42 0209 	orr.w	r2, r2, r9
 80036d0:	e760      	b.n	8003594 <HAL_GPIO_Init+0xe8>
 80036d2:	2605      	movs	r6, #5
 80036d4:	fa06 f909 	lsl.w	r9, r6, r9
 80036d8:	ea42 0209 	orr.w	r2, r2, r9
 80036dc:	e75a      	b.n	8003594 <HAL_GPIO_Init+0xe8>
 80036de:	2607      	movs	r6, #7
 80036e0:	fa06 f909 	lsl.w	r9, r6, r9
 80036e4:	ea42 0209 	orr.w	r2, r2, r9
 80036e8:	e754      	b.n	8003594 <HAL_GPIO_Init+0xe8>
 80036ea:	2608      	movs	r6, #8
 80036ec:	fa06 f909 	lsl.w	r9, r6, r9
 80036f0:	ea42 0209 	orr.w	r2, r2, r9
 80036f4:	e74e      	b.n	8003594 <HAL_GPIO_Init+0xe8>
 80036f6:	bf00      	nop
 80036f8:	58024400 	.word	0x58024400
 80036fc:	58020000 	.word	0x58020000
 8003700:	58020800 	.word	0x58020800
 8003704:	58020c00 	.word	0x58020c00
 8003708:	58021000 	.word	0x58021000
 800370c:	58021400 	.word	0x58021400
 8003710:	58021800 	.word	0x58021800
 8003714:	58021c00 	.word	0x58021c00
 8003718:	58022000 	.word	0x58022000
 800371c:	58022400 	.word	0x58022400

08003720 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003720:	6903      	ldr	r3, [r0, #16]
 8003722:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003724:	bf14      	ite	ne
 8003726:	2001      	movne	r0, #1
 8003728:	2000      	moveq	r0, #0
 800372a:	4770      	bx	lr

0800372c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800372c:	b902      	cbnz	r2, 8003730 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800372e:	0409      	lsls	r1, r1, #16
 8003730:	6181      	str	r1, [r0, #24]
  }
}
 8003732:	4770      	bx	lr

08003734 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003738:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800373c:	4201      	tst	r1, r0
 800373e:	d100      	bne.n	8003742 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8003740:	4770      	bx	lr
{
 8003742:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003744:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003748:	f7fe f906 	bl	8001958 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800374c:	bd08      	pop	{r3, pc}
 800374e:	bf00      	nop

08003750 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003750:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003752:	4c10      	ldr	r4, [pc, #64]	; (8003794 <HAL_PWREx_ConfigSupply+0x44>)
 8003754:	68e3      	ldr	r3, [r4, #12]
 8003756:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800375a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800375c:	d105      	bne.n	800376a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800375e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003762:	1a18      	subs	r0, r3, r0
 8003764:	bf18      	it	ne
 8003766:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003768:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	4318      	orrs	r0, r3
 8003770:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8003772:	f7ff fd55 	bl	8003220 <HAL_GetTick>
 8003776:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003778:	e005      	b.n	8003786 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800377a:	f7ff fd51 	bl	8003220 <HAL_GetTick>
 800377e:	1b40      	subs	r0, r0, r5
 8003780:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003784:	d804      	bhi.n	8003790 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003786:	6863      	ldr	r3, [r4, #4]
 8003788:	049b      	lsls	r3, r3, #18
 800378a:	d5f6      	bpl.n	800377a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800378c:	2000      	movs	r0, #0
}
 800378e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003790:	2001      	movs	r0, #1
}
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	58024800 	.word	0x58024800

08003798 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003798:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800379a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800379c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800379e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037a0:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80037a2:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80037a8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80037ac:	d038      	beq.n	8003820 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037ae:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037b2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037b6:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037ba:	fb05 f101 	mul.w	r1, r5, r1
 80037be:	2a01      	cmp	r2, #1
 80037c0:	ee07 1a90 	vmov	s15, r1
 80037c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80037ca:	2a02      	cmp	r2, #2
 80037cc:	d04e      	beq.n	800386c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80037ce:	b34a      	cbz	r2, 8003824 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037d0:	ee07 0a90 	vmov	s15, r0
 80037d4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800388c <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80037d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80037e2:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8003890 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80037e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ea:	ee06 3a90 	vmov	s13, r3
 80037ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80037f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80037f6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80037fa:	eee7 6a25 	vfma.f32	s13, s14, s11
 80037fe:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003802:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800380a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800381c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003820:	bc30      	pop	{r4, r5}
 8003822:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	0692      	lsls	r2, r2, #26
 8003828:	d527      	bpl.n	800387a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800382a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800382c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003832:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003838:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800383c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003840:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8003890 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8003844:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003848:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800384a:	ee06 3a90 	vmov	s13, r3
 800384e:	ee05 2a90 	vmov	s11, r2
 8003852:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003856:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800385a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800385e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003862:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003866:	ee66 6a26 	vmul.f32	s13, s12, s13
 800386a:	e7ca      	b.n	8003802 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800386c:	ee07 0a90 	vmov	s15, r0
 8003870:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003898 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8003874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003878:	e7b0      	b.n	80037dc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800387a:	ee07 0a90 	vmov	s15, r0
 800387e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800389c <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8003882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003886:	e7a9      	b.n	80037dc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003888:	58024400 	.word	0x58024400
 800388c:	4a742400 	.word	0x4a742400
 8003890:	39000000 	.word	0x39000000
 8003894:	03d09000 	.word	0x03d09000
 8003898:	4bbebc20 	.word	0x4bbebc20
 800389c:	4c742400 	.word	0x4c742400

080038a0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80038a0:	2800      	cmp	r0, #0
 80038a2:	f000 81e8 	beq.w	8003c76 <HAL_RCC_OscConfig+0x3d6>
{
 80038a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a8:	6803      	ldr	r3, [r0, #0]
 80038aa:	4604      	mov	r4, r0
 80038ac:	07d9      	lsls	r1, r3, #31
 80038ae:	d52e      	bpl.n	800390e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b0:	49a4      	ldr	r1, [pc, #656]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 80038b2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038b4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038ba:	2a10      	cmp	r2, #16
 80038bc:	f000 8107 	beq.w	8003ace <HAL_RCC_OscConfig+0x22e>
 80038c0:	2a18      	cmp	r2, #24
 80038c2:	f000 80ff 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	6863      	ldr	r3, [r4, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	f000 812a 	beq.w	8003b24 <HAL_RCC_OscConfig+0x284>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8168 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x306>
 80038d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038da:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	f000 8289 	beq.w	8003df4 <HAL_RCC_OscConfig+0x554>
 80038e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038f0:	f7ff fc96 	bl	8003220 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038f4:	4e93      	ldr	r6, [pc, #588]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80038f6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038f8:	e005      	b.n	8003906 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038fa:	f7ff fc91 	bl	8003220 <HAL_GetTick>
 80038fe:	1b40      	subs	r0, r0, r5
 8003900:	2864      	cmp	r0, #100	; 0x64
 8003902:	f200 814e 	bhi.w	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003906:	6833      	ldr	r3, [r6, #0]
 8003908:	039b      	lsls	r3, r3, #14
 800390a:	d5f6      	bpl.n	80038fa <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	079d      	lsls	r5, r3, #30
 8003910:	f100 808a 	bmi.w	8003a28 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003914:	06d9      	lsls	r1, r3, #27
 8003916:	d533      	bpl.n	8003980 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003918:	4a8a      	ldr	r2, [pc, #552]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 800391a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800391c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003922:	2b08      	cmp	r3, #8
 8003924:	f000 80e3 	beq.w	8003aee <HAL_RCC_OscConfig+0x24e>
 8003928:	2b18      	cmp	r3, #24
 800392a:	f000 80db 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800392e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8003930:	4d84      	ldr	r5, [pc, #528]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 816f 	beq.w	8003c16 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003940:	f7ff fc6e 	bl	8003220 <HAL_GetTick>
 8003944:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003946:	e005      	b.n	8003954 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003948:	f7ff fc6a 	bl	8003220 <HAL_GetTick>
 800394c:	1b80      	subs	r0, r0, r6
 800394e:	2802      	cmp	r0, #2
 8003950:	f200 8127 	bhi.w	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	05db      	lsls	r3, r3, #23
 8003958:	d5f6      	bpl.n	8003948 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800395a:	f7ff fc79 	bl	8003250 <HAL_GetREVID>
 800395e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003962:	4298      	cmp	r0, r3
 8003964:	f200 826d 	bhi.w	8003e42 <HAL_RCC_OscConfig+0x5a2>
 8003968:	6a22      	ldr	r2, [r4, #32]
 800396a:	686b      	ldr	r3, [r5, #4]
 800396c:	2a20      	cmp	r2, #32
 800396e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003972:	bf0c      	ite	eq
 8003974:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003978:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800397c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	071d      	lsls	r5, r3, #28
 8003982:	d516      	bpl.n	80039b2 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003984:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003986:	4d6f      	ldr	r5, [pc, #444]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8122 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800398e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003996:	f7ff fc43 	bl	8003220 <HAL_GetTick>
 800399a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800399c:	e005      	b.n	80039aa <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399e:	f7ff fc3f 	bl	8003220 <HAL_GetTick>
 80039a2:	1b80      	subs	r0, r0, r6
 80039a4:	2802      	cmp	r0, #2
 80039a6:	f200 80fc 	bhi.w	8003ba2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039ac:	0798      	lsls	r0, r3, #30
 80039ae:	d5f6      	bpl.n	800399e <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	069a      	lsls	r2, r3, #26
 80039b4:	d516      	bpl.n	80039e4 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80039b6:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80039b8:	4d62      	ldr	r5, [pc, #392]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 811a 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80039c8:	f7ff fc2a 	bl	8003220 <HAL_GetTick>
 80039cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039ce:	e005      	b.n	80039dc <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039d0:	f7ff fc26 	bl	8003220 <HAL_GetTick>
 80039d4:	1b80      	subs	r0, r0, r6
 80039d6:	2802      	cmp	r0, #2
 80039d8:	f200 80e3 	bhi.w	8003ba2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	049f      	lsls	r7, r3, #18
 80039e0:	d5f6      	bpl.n	80039d0 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	0759      	lsls	r1, r3, #29
 80039e6:	f100 80a3 	bmi.w	8003b30 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80039ec:	b1d0      	cbz	r0, 8003a24 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039ee:	4d55      	ldr	r5, [pc, #340]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 80039f0:	692b      	ldr	r3, [r5, #16]
 80039f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f6:	2b18      	cmp	r3, #24
 80039f8:	f000 81ae 	beq.w	8003d58 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80039fc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039fe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003a00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a04:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a06:	f000 8142 	beq.w	8003c8e <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8003a0a:	f7ff fc09 	bl	8003220 <HAL_GetTick>
 8003a0e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a10:	e005      	b.n	8003a1e <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a12:	f7ff fc05 	bl	8003220 <HAL_GetTick>
 8003a16:	1b00      	subs	r0, r0, r4
 8003a18:	2802      	cmp	r0, #2
 8003a1a:	f200 80c2 	bhi.w	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	d4f6      	bmi.n	8003a12 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8003a24:	2000      	movs	r0, #0
}
 8003a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a28:	4a46      	ldr	r2, [pc, #280]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 8003a2a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a2e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003a32:	d12d      	bne.n	8003a90 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 8003a36:	68e2      	ldr	r2, [r4, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	0759      	lsls	r1, r3, #29
 8003a3c:	d501      	bpl.n	8003a42 <HAL_RCC_OscConfig+0x1a2>
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	d04e      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a42:	4d40      	ldr	r5, [pc, #256]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	f023 0319 	bic.w	r3, r3, #25
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a4e:	f7ff fbe7 	bl	8003220 <HAL_GetTick>
 8003a52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a54:	e005      	b.n	8003a62 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a56:	f7ff fbe3 	bl	8003220 <HAL_GetTick>
 8003a5a:	1b80      	subs	r0, r0, r6
 8003a5c:	2802      	cmp	r0, #2
 8003a5e:	f200 80a0 	bhi.w	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a62:	682b      	ldr	r3, [r5, #0]
 8003a64:	075b      	lsls	r3, r3, #29
 8003a66:	d5f6      	bpl.n	8003a56 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	f7ff fbf2 	bl	8003250 <HAL_GetREVID>
 8003a6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a70:	4298      	cmp	r0, r3
 8003a72:	f200 80f7 	bhi.w	8003c64 <HAL_RCC_OscConfig+0x3c4>
 8003a76:	6922      	ldr	r2, [r4, #16]
 8003a78:	686b      	ldr	r3, [r5, #4]
 8003a7a:	2a40      	cmp	r2, #64	; 0x40
 8003a7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a80:	bf0c      	ite	eq
 8003a82:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8003a86:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003a8a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	e741      	b.n	8003914 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a90:	2b18      	cmp	r3, #24
 8003a92:	f000 80e3 	beq.w	8003c5c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a96:	4d2b      	ldr	r5, [pc, #172]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a98:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a9a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a9c:	2a00      	cmp	r2, #0
 8003a9e:	f000 80cc 	beq.w	8003c3a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aa2:	f023 0319 	bic.w	r3, r3, #25
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003aaa:	f7ff fbb9 	bl	8003220 <HAL_GetTick>
 8003aae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ab0:	e004      	b.n	8003abc <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7ff fbb5 	bl	8003220 <HAL_GetTick>
 8003ab6:	1b80      	subs	r0, r0, r6
 8003ab8:	2802      	cmp	r0, #2
 8003aba:	d872      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	075f      	lsls	r7, r3, #29
 8003ac0:	d5f7      	bpl.n	8003ab2 <HAL_RCC_OscConfig+0x212>
 8003ac2:	e7d1      	b.n	8003a68 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ac4:	f001 0103 	and.w	r1, r1, #3
 8003ac8:	2902      	cmp	r1, #2
 8003aca:	f47f aefc 	bne.w	80038c6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ace:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	0392      	lsls	r2, r2, #14
 8003ad4:	f57f af1b 	bpl.w	800390e <HAL_RCC_OscConfig+0x6e>
 8003ad8:	6862      	ldr	r2, [r4, #4]
 8003ada:	2a00      	cmp	r2, #0
 8003adc:	f47f af17 	bne.w	800390e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8003ae0:	2001      	movs	r0, #1
}
 8003ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ae4:	f002 0203 	and.w	r2, r2, #3
 8003ae8:	2a01      	cmp	r2, #1
 8003aea:	f47f af20 	bne.w	800392e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	05da      	lsls	r2, r3, #23
 8003af4:	d502      	bpl.n	8003afc <HAL_RCC_OscConfig+0x25c>
 8003af6:	69e3      	ldr	r3, [r4, #28]
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d1f1      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003afc:	f7ff fba8 	bl	8003250 <HAL_GetREVID>
 8003b00:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b04:	4298      	cmp	r0, r3
 8003b06:	f200 80b8 	bhi.w	8003c7a <HAL_RCC_OscConfig+0x3da>
 8003b0a:	6a22      	ldr	r2, [r4, #32]
 8003b0c:	2a20      	cmp	r2, #32
 8003b0e:	f000 81a7 	beq.w	8003e60 <HAL_RCC_OscConfig+0x5c0>
 8003b12:	490c      	ldr	r1, [pc, #48]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 8003b14:	684b      	ldr	r3, [r1, #4]
 8003b16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b1a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003b1e:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	e72d      	b.n	8003980 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_RCC_OscConfig+0x2a4>)
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e6df      	b.n	80038f0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8003b30:	4d05      	ldr	r5, [pc, #20]	; (8003b48 <HAL_RCC_OscConfig+0x2a8>)
 8003b32:	682b      	ldr	r3, [r5, #0]
 8003b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b38:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003b3a:	f7ff fb71 	bl	8003220 <HAL_GetTick>
 8003b3e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b40:	e009      	b.n	8003b56 <HAL_RCC_OscConfig+0x2b6>
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
 8003b48:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4c:	f7ff fb68 	bl	8003220 <HAL_GetTick>
 8003b50:	1b80      	subs	r0, r0, r6
 8003b52:	2864      	cmp	r0, #100	; 0x64
 8003b54:	d825      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	05da      	lsls	r2, r3, #23
 8003b5a:	d5f7      	bpl.n	8003b4c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f000 8178 	beq.w	8003e54 <HAL_RCC_OscConfig+0x5b4>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8153 	beq.w	8003e10 <HAL_RCC_OscConfig+0x570>
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	4ba5      	ldr	r3, [pc, #660]	; (8003e04 <HAL_RCC_OscConfig+0x564>)
 8003b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b70:	f000 817f 	beq.w	8003e72 <HAL_RCC_OscConfig+0x5d2>
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	671a      	str	r2, [r3, #112]	; 0x70
 8003b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b7c:	f022 0204 	bic.w	r2, r2, #4
 8003b80:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003b82:	f7ff fb4d 	bl	8003220 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b86:	4e9f      	ldr	r6, [pc, #636]	; (8003e04 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003b8c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8e:	e004      	b.n	8003b9a <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7ff fb46 	bl	8003220 <HAL_GetTick>
 8003b94:	1b40      	subs	r0, r0, r5
 8003b96:	42b8      	cmp	r0, r7
 8003b98:	d803      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b9a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003b9c:	079b      	lsls	r3, r3, #30
 8003b9e:	d5f7      	bpl.n	8003b90 <HAL_RCC_OscConfig+0x2f0>
 8003ba0:	e723      	b.n	80039ea <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8003ba2:	2003      	movs	r0, #3
}
 8003ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba6:	4d97      	ldr	r5, [pc, #604]	; (8003e04 <HAL_RCC_OscConfig+0x564>)
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bae:	602b      	str	r3, [r5, #0]
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bb8:	f7ff fb32 	bl	8003220 <HAL_GetTick>
 8003bbc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bbe:	e004      	b.n	8003bca <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7ff fb2e 	bl	8003220 <HAL_GetTick>
 8003bc4:	1b80      	subs	r0, r0, r6
 8003bc6:	2864      	cmp	r0, #100	; 0x64
 8003bc8:	d8eb      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bca:	682b      	ldr	r3, [r5, #0]
 8003bcc:	039f      	lsls	r7, r3, #14
 8003bce:	d4f7      	bmi.n	8003bc0 <HAL_RCC_OscConfig+0x320>
 8003bd0:	e69c      	b.n	800390c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8003bd2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003bda:	f7ff fb21 	bl	8003220 <HAL_GetTick>
 8003bde:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003be0:	e004      	b.n	8003bec <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be2:	f7ff fb1d 	bl	8003220 <HAL_GetTick>
 8003be6:	1b80      	subs	r0, r0, r6
 8003be8:	2802      	cmp	r0, #2
 8003bea:	d8da      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003bee:	0799      	lsls	r1, r3, #30
 8003bf0:	d4f7      	bmi.n	8003be2 <HAL_RCC_OscConfig+0x342>
 8003bf2:	e6dd      	b.n	80039b0 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bfa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003bfc:	f7ff fb10 	bl	8003220 <HAL_GetTick>
 8003c00:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c02:	e004      	b.n	8003c0e <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c04:	f7ff fb0c 	bl	8003220 <HAL_GetTick>
 8003c08:	1b80      	subs	r0, r0, r6
 8003c0a:	2802      	cmp	r0, #2
 8003c0c:	d8c9      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	0498      	lsls	r0, r3, #18
 8003c12:	d4f7      	bmi.n	8003c04 <HAL_RCC_OscConfig+0x364>
 8003c14:	e6e5      	b.n	80039e2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8003c16:	682b      	ldr	r3, [r5, #0]
 8003c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c1e:	f7ff faff 	bl	8003220 <HAL_GetTick>
 8003c22:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c24:	e004      	b.n	8003c30 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c26:	f7ff fafb 	bl	8003220 <HAL_GetTick>
 8003c2a:	1b80      	subs	r0, r0, r6
 8003c2c:	2802      	cmp	r0, #2
 8003c2e:	d8b8      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	05df      	lsls	r7, r3, #23
 8003c34:	d4f7      	bmi.n	8003c26 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	e6a2      	b.n	8003980 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c40:	f7ff faee 	bl	8003220 <HAL_GetTick>
 8003c44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c46:	e004      	b.n	8003c52 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c48:	f7ff faea 	bl	8003220 <HAL_GetTick>
 8003c4c:	1b80      	subs	r0, r0, r6
 8003c4e:	2802      	cmp	r0, #2
 8003c50:	d8a7      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c52:	682b      	ldr	r3, [r5, #0]
 8003c54:	0758      	lsls	r0, r3, #29
 8003c56:	d4f7      	bmi.n	8003c48 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	e65b      	b.n	8003914 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c5c:	0790      	lsls	r0, r2, #30
 8003c5e:	f47f af1a 	bne.w	8003a96 <HAL_RCC_OscConfig+0x1f6>
 8003c62:	e6e7      	b.n	8003a34 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	686b      	ldr	r3, [r5, #4]
 8003c66:	6922      	ldr	r2, [r4, #16]
 8003c68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003c70:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	e64e      	b.n	8003914 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8003c76:	2001      	movs	r0, #1
}
 8003c78:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c7a:	4a62      	ldr	r2, [pc, #392]	; (8003e04 <HAL_RCC_OscConfig+0x564>)
 8003c7c:	6a21      	ldr	r1, [r4, #32]
 8003c7e:	68d3      	ldr	r3, [r2, #12]
 8003c80:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003c84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c88:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	e678      	b.n	8003980 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8003c8e:	f7ff fac7 	bl	8003220 <HAL_GetTick>
 8003c92:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c94:	e004      	b.n	8003ca0 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7ff fac3 	bl	8003220 <HAL_GetTick>
 8003c9a:	1b80      	subs	r0, r0, r6
 8003c9c:	2802      	cmp	r0, #2
 8003c9e:	d880      	bhi.n	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	0199      	lsls	r1, r3, #6
 8003ca4:	d4f7      	bmi.n	8003c96 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003ca8:	4b57      	ldr	r3, [pc, #348]	; (8003e08 <HAL_RCC_OscConfig+0x568>)
 8003caa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003cac:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cae:	4957      	ldr	r1, [pc, #348]	; (8003e0c <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cb0:	4e54      	ldr	r6, [pc, #336]	; (8003e04 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cb6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003cba:	62ab      	str	r3, [r5, #40]	; 0x28
 8003cbc:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	3a01      	subs	r2, #1
 8003cc4:	025b      	lsls	r3, r3, #9
 8003cc6:	0412      	lsls	r2, r2, #16
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003cd2:	3a01      	subs	r2, #1
 8003cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0612      	lsls	r2, r2, #24
 8003ce0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ce8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cf0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003cf2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003cf4:	4011      	ands	r1, r2
 8003cf6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003cfa:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cfc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003cfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d00:	f023 030c 	bic.w	r3, r3, #12
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d0a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d0c:	f023 0302 	bic.w	r3, r3, #2
 8003d10:	4313      	orrs	r3, r2
 8003d12:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d14:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d22:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d24:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d2c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d3c:	f7ff fa70 	bl	8003220 <HAL_GetTick>
 8003d40:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d42:	e005      	b.n	8003d50 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d44:	f7ff fa6c 	bl	8003220 <HAL_GetTick>
 8003d48:	1b00      	subs	r0, r0, r4
 8003d4a:	2802      	cmp	r0, #2
 8003d4c:	f63f af29 	bhi.w	8003ba2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d50:	6833      	ldr	r3, [r6, #0]
 8003d52:	019a      	lsls	r2, r3, #6
 8003d54:	d5f6      	bpl.n	8003d44 <HAL_RCC_OscConfig+0x4a4>
 8003d56:	e665      	b.n	8003a24 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d58:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d5a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d5c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5e:	f43f ae62 	beq.w	8003a26 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	f47f aeb9 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d6e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d74:	429a      	cmp	r2, r3
 8003d76:	f47f aeb3 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d7c:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8003d80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	f47f aeac 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d8a:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8003d8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	f47f aea5 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d98:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8003d9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	f47f ae9e 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003da4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003da6:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8003daa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dac:	429e      	cmp	r6, r3
 8003dae:	f47f ae97 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003db2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003db4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003db6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	f43f ae32 	beq.w	8003a24 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dc0:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <HAL_RCC_OscConfig+0x564>)
 8003dc2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8003dca:	f7ff fa29 	bl	8003220 <HAL_GetTick>
 8003dce:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dd0:	f7ff fa26 	bl	8003220 <HAL_GetTick>
 8003dd4:	42a8      	cmp	r0, r5
 8003dd6:	d0fb      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dd8:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 8003dda:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ddc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_OscConfig+0x56c>)
 8003de0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003de2:	4023      	ands	r3, r4
 8003de4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003de8:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e575      	b.n	80038f0 <HAL_RCC_OscConfig+0x50>
 8003e04:	58024400 	.word	0x58024400
 8003e08:	fffffc0c 	.word	0xfffffc0c
 8003e0c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e10:	4d1c      	ldr	r5, [pc, #112]	; (8003e84 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	672b      	str	r3, [r5, #112]	; 0x70
 8003e1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003e26:	f7ff f9fb 	bl	8003220 <HAL_GetTick>
 8003e2a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e2c:	e005      	b.n	8003e3a <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7ff f9f7 	bl	8003220 <HAL_GetTick>
 8003e32:	1b80      	subs	r0, r0, r6
 8003e34:	42b8      	cmp	r0, r7
 8003e36:	f63f aeb4 	bhi.w	8003ba2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e3c:	0798      	lsls	r0, r3, #30
 8003e3e:	d4f6      	bmi.n	8003e2e <HAL_RCC_OscConfig+0x58e>
 8003e40:	e5d3      	b.n	80039ea <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e42:	68eb      	ldr	r3, [r5, #12]
 8003e44:	6a22      	ldr	r2, [r4, #32]
 8003e46:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003e4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e4e:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	e595      	b.n	8003980 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e54:	4a0b      	ldr	r2, [pc, #44]	; (8003e84 <HAL_RCC_OscConfig+0x5e4>)
 8003e56:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	e690      	b.n	8003b82 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e60:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <HAL_RCC_OscConfig+0x5e4>)
 8003e62:	6853      	ldr	r3, [r2, #4]
 8003e64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e6c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	e586      	b.n	8003980 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e72:	f042 0204 	orr.w	r2, r2, #4
 8003e76:	671a      	str	r2, [r3, #112]	; 0x70
 8003e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	671a      	str	r2, [r3, #112]	; 0x70
 8003e80:	e67f      	b.n	8003b82 <HAL_RCC_OscConfig+0x2e2>
 8003e82:	bf00      	nop
 8003e84:	58024400 	.word	0x58024400

08003e88 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e88:	4a47      	ldr	r2, [pc, #284]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x120>)
 8003e8a:	6913      	ldr	r3, [r2, #16]
 8003e8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d004      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x16>
 8003e94:	2b18      	cmp	r3, #24
 8003e96:	d00d      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x2c>
 8003e98:	b11b      	cbz	r3, 8003ea2 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8003e9a:	4844      	ldr	r0, [pc, #272]	; (8003fac <HAL_RCC_GetSysClockFreq+0x124>)
 8003e9c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e9e:	4844      	ldr	r0, [pc, #272]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003ea0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	0699      	lsls	r1, r3, #26
 8003ea6:	d54a      	bpl.n	8003f3e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ea8:	6813      	ldr	r3, [r2, #0]
 8003eaa:	4842      	ldr	r0, [pc, #264]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003eac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003eb0:	40d8      	lsrs	r0, r3
 8003eb2:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8003eb6:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003eb8:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003eba:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8003ebc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ec0:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ec2:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8003ec6:	d038      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ec8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ecc:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ed0:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ed4:	fb05 f101 	mul.w	r1, r5, r1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	ee07 1a90 	vmov	s15, r1
 8003ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee2:	d002      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x62>
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d02c      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0xba>
 8003ee8:	b393      	cbz	r3, 8003f50 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eea:	ee07 0a90 	vmov	s15, r0
 8003eee:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003fb8 <HAL_RCC_GetSysClockFreq+0x130>
 8003ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ef8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8003efc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8003fbc <HAL_RCC_GetSysClockFreq+0x134>
 8003f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f04:	ee06 3a90 	vmov	s13, r3
 8003f08:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003f0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003f10:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003f14:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003f18:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f1c:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x120>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003f24:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f36:	ee17 0a90 	vmov	r0, s15
}
 8003f3a:	bc30      	pop	{r4, r5}
 8003f3c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f3e:	481d      	ldr	r0, [pc, #116]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8003f40:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f42:	ee07 0a90 	vmov	s15, r0
 8003f46:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003fc0 <HAL_RCC_GetSysClockFreq+0x138>
 8003f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f4e:	e7d2      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f50:	6813      	ldr	r3, [r2, #0]
 8003f52:	069b      	lsls	r3, r3, #26
 8003f54:	d520      	bpl.n	8003f98 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f56:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f58:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f5c:	4915      	ldr	r1, [pc, #84]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003f62:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f64:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8003fbc <HAL_RCC_GetSysClockFreq+0x134>
 8003f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f74:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f76:	ee06 3a90 	vmov	s13, r3
 8003f7a:	ee05 1a90 	vmov	s11, r1
 8003f7e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003f82:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003f86:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003f8a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003f8e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003f92:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003f96:	e7c1      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f98:	ee07 0a90 	vmov	s15, r0
 8003f9c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003fc4 <HAL_RCC_GetSysClockFreq+0x13c>
 8003fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa4:	e7a7      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x6e>
 8003fa6:	bf00      	nop
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	003d0900 	.word	0x003d0900
 8003fb0:	017d7840 	.word	0x017d7840
 8003fb4:	03d09000 	.word	0x03d09000
 8003fb8:	4a742400 	.word	0x4a742400
 8003fbc:	39000000 	.word	0x39000000
 8003fc0:	4bbebc20 	.word	0x4bbebc20
 8003fc4:	4c742400 	.word	0x4c742400

08003fc8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	f000 810c 	beq.w	80041e6 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fce:	4a8c      	ldr	r2, [pc, #560]	; (8004200 <HAL_RCC_ClockConfig+0x238>)
 8003fd0:	6813      	ldr	r3, [r2, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	428b      	cmp	r3, r1
{
 8003fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fdc:	4604      	mov	r4, r0
 8003fde:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe0:	d20c      	bcs.n	8003ffc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	f023 030f 	bic.w	r3, r3, #15
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fec:	6813      	ldr	r3, [r2, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	428b      	cmp	r3, r1
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003ff6:	2001      	movs	r0, #1
}
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	075f      	lsls	r7, r3, #29
 8004000:	d50b      	bpl.n	800401a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004002:	4980      	ldr	r1, [pc, #512]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 8004004:	6920      	ldr	r0, [r4, #16]
 8004006:	698a      	ldr	r2, [r1, #24]
 8004008:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800400c:	4290      	cmp	r0, r2
 800400e:	d904      	bls.n	800401a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004010:	698a      	ldr	r2, [r1, #24]
 8004012:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004016:	4302      	orrs	r2, r0
 8004018:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401a:	071e      	lsls	r6, r3, #28
 800401c:	d50b      	bpl.n	8004036 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800401e:	4979      	ldr	r1, [pc, #484]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 8004020:	6960      	ldr	r0, [r4, #20]
 8004022:	69ca      	ldr	r2, [r1, #28]
 8004024:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004028:	4290      	cmp	r0, r2
 800402a:	d904      	bls.n	8004036 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800402c:	69ca      	ldr	r2, [r1, #28]
 800402e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004032:	4302      	orrs	r2, r0
 8004034:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004036:	06d8      	lsls	r0, r3, #27
 8004038:	d50b      	bpl.n	8004052 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800403a:	4972      	ldr	r1, [pc, #456]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 800403c:	69a0      	ldr	r0, [r4, #24]
 800403e:	69ca      	ldr	r2, [r1, #28]
 8004040:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004044:	4290      	cmp	r0, r2
 8004046:	d904      	bls.n	8004052 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004048:	69ca      	ldr	r2, [r1, #28]
 800404a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800404e:	4302      	orrs	r2, r0
 8004050:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004052:	0699      	lsls	r1, r3, #26
 8004054:	d50b      	bpl.n	800406e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004056:	496b      	ldr	r1, [pc, #428]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 8004058:	69e0      	ldr	r0, [r4, #28]
 800405a:	6a0a      	ldr	r2, [r1, #32]
 800405c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004060:	4290      	cmp	r0, r2
 8004062:	d904      	bls.n	800406e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004064:	6a0a      	ldr	r2, [r1, #32]
 8004066:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800406a:	4302      	orrs	r2, r0
 800406c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406e:	079a      	lsls	r2, r3, #30
 8004070:	f140 80ab 	bpl.w	80041ca <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004074:	4863      	ldr	r0, [pc, #396]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 8004076:	68e1      	ldr	r1, [r4, #12]
 8004078:	6982      	ldr	r2, [r0, #24]
 800407a:	f002 020f 	and.w	r2, r2, #15
 800407e:	4291      	cmp	r1, r2
 8004080:	d904      	bls.n	800408c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004082:	6982      	ldr	r2, [r0, #24]
 8004084:	f022 020f 	bic.w	r2, r2, #15
 8004088:	430a      	orrs	r2, r1
 800408a:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408c:	07d8      	lsls	r0, r3, #31
 800408e:	d530      	bpl.n	80040f2 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004090:	4a5c      	ldr	r2, [pc, #368]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 8004092:	68a1      	ldr	r1, [r4, #8]
 8004094:	6993      	ldr	r3, [r2, #24]
 8004096:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800409a:	430b      	orrs	r3, r1
 800409c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040a0:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a2:	2902      	cmp	r1, #2
 80040a4:	f000 80a1 	beq.w	80041ea <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a8:	2903      	cmp	r1, #3
 80040aa:	f000 8098 	beq.w	80041de <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040ae:	2901      	cmp	r1, #1
 80040b0:	f000 80a1 	beq.w	80041f6 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040b4:	0758      	lsls	r0, r3, #29
 80040b6:	d59e      	bpl.n	8003ff6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040b8:	4e52      	ldr	r6, [pc, #328]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ba:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040be:	6933      	ldr	r3, [r6, #16]
 80040c0:	f023 0307 	bic.w	r3, r3, #7
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80040c8:	f7ff f8aa 	bl	8003220 <HAL_GetTick>
 80040cc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	e005      	b.n	80040dc <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d0:	f7ff f8a6 	bl	8003220 <HAL_GetTick>
 80040d4:	1bc0      	subs	r0, r0, r7
 80040d6:	4540      	cmp	r0, r8
 80040d8:	f200 808b 	bhi.w	80041f2 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040dc:	6933      	ldr	r3, [r6, #16]
 80040de:	6862      	ldr	r2, [r4, #4]
 80040e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80040e8:	d1f2      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	0799      	lsls	r1, r3, #30
 80040ee:	d506      	bpl.n	80040fe <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040f0:	68e1      	ldr	r1, [r4, #12]
 80040f2:	4844      	ldr	r0, [pc, #272]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 80040f4:	6982      	ldr	r2, [r0, #24]
 80040f6:	f002 020f 	and.w	r2, r2, #15
 80040fa:	428a      	cmp	r2, r1
 80040fc:	d869      	bhi.n	80041d2 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040fe:	4940      	ldr	r1, [pc, #256]	; (8004200 <HAL_RCC_ClockConfig+0x238>)
 8004100:	680a      	ldr	r2, [r1, #0]
 8004102:	f002 020f 	and.w	r2, r2, #15
 8004106:	42aa      	cmp	r2, r5
 8004108:	d90a      	bls.n	8004120 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	680a      	ldr	r2, [r1, #0]
 800410c:	f022 020f 	bic.w	r2, r2, #15
 8004110:	432a      	orrs	r2, r5
 8004112:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004114:	680a      	ldr	r2, [r1, #0]
 8004116:	f002 020f 	and.w	r2, r2, #15
 800411a:	42aa      	cmp	r2, r5
 800411c:	f47f af6b 	bne.w	8003ff6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004120:	075a      	lsls	r2, r3, #29
 8004122:	d50b      	bpl.n	800413c <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004124:	4937      	ldr	r1, [pc, #220]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 8004126:	6920      	ldr	r0, [r4, #16]
 8004128:	698a      	ldr	r2, [r1, #24]
 800412a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800412e:	4290      	cmp	r0, r2
 8004130:	d204      	bcs.n	800413c <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004132:	698a      	ldr	r2, [r1, #24]
 8004134:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004138:	4302      	orrs	r2, r0
 800413a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	071f      	lsls	r7, r3, #28
 800413e:	d50b      	bpl.n	8004158 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004140:	4930      	ldr	r1, [pc, #192]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 8004142:	6960      	ldr	r0, [r4, #20]
 8004144:	69ca      	ldr	r2, [r1, #28]
 8004146:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800414a:	4290      	cmp	r0, r2
 800414c:	d204      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800414e:	69ca      	ldr	r2, [r1, #28]
 8004150:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004154:	4302      	orrs	r2, r0
 8004156:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004158:	06de      	lsls	r6, r3, #27
 800415a:	d50b      	bpl.n	8004174 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800415c:	4929      	ldr	r1, [pc, #164]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 800415e:	69a0      	ldr	r0, [r4, #24]
 8004160:	69ca      	ldr	r2, [r1, #28]
 8004162:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004166:	4290      	cmp	r0, r2
 8004168:	d204      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800416a:	69ca      	ldr	r2, [r1, #28]
 800416c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004170:	4302      	orrs	r2, r0
 8004172:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004174:	069d      	lsls	r5, r3, #26
 8004176:	d50b      	bpl.n	8004190 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 800417a:	69e1      	ldr	r1, [r4, #28]
 800417c:	6a13      	ldr	r3, [r2, #32]
 800417e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004182:	4299      	cmp	r1, r3
 8004184:	d204      	bcs.n	8004190 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004186:	6a13      	ldr	r3, [r2, #32]
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	430b      	orrs	r3, r1
 800418e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004190:	f7ff fe7a 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8004194:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_RCC_ClockConfig+0x23c>)
 8004196:	4603      	mov	r3, r0
 8004198:	481b      	ldr	r0, [pc, #108]	; (8004208 <HAL_RCC_ClockConfig+0x240>)
 800419a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800419c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800419e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80041a2:	4d1a      	ldr	r5, [pc, #104]	; (800420c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041a4:	f002 020f 	and.w	r2, r2, #15
 80041a8:	4c19      	ldr	r4, [pc, #100]	; (8004210 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041aa:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ac:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041ae:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80041b2:	4818      	ldr	r0, [pc, #96]	; (8004214 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041b4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041b8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80041ba:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80041bc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041be:	40d3      	lsrs	r3, r2
 80041c0:	6023      	str	r3, [r4, #0]
}
 80041c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80041c6:	f7fe bbfb 	b.w	80029c0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	07da      	lsls	r2, r3, #31
 80041cc:	f53f af60 	bmi.w	8004090 <HAL_RCC_ClockConfig+0xc8>
 80041d0:	e795      	b.n	80040fe <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d2:	6982      	ldr	r2, [r0, #24]
 80041d4:	f022 020f 	bic.w	r2, r2, #15
 80041d8:	4311      	orrs	r1, r2
 80041da:	6181      	str	r1, [r0, #24]
 80041dc:	e78f      	b.n	80040fe <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041de:	019f      	lsls	r7, r3, #6
 80041e0:	f53f af6a 	bmi.w	80040b8 <HAL_RCC_ClockConfig+0xf0>
 80041e4:	e707      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80041e6:	2001      	movs	r0, #1
}
 80041e8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ea:	039b      	lsls	r3, r3, #14
 80041ec:	f53f af64 	bmi.w	80040b8 <HAL_RCC_ClockConfig+0xf0>
 80041f0:	e701      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80041f2:	2003      	movs	r0, #3
 80041f4:	e700      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041f6:	05de      	lsls	r6, r3, #23
 80041f8:	f53f af5e 	bmi.w	80040b8 <HAL_RCC_ClockConfig+0xf0>
 80041fc:	e6fb      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2e>
 80041fe:	bf00      	nop
 8004200:	52002000 	.word	0x52002000
 8004204:	58024400 	.word	0x58024400
 8004208:	0800ad90 	.word	0x0800ad90
 800420c:	240030c4 	.word	0x240030c4
 8004210:	240030c8 	.word	0x240030c8
 8004214:	240030d0 	.word	0x240030d0

08004218 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004218:	4a18      	ldr	r2, [pc, #96]	; (800427c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421c:	6913      	ldr	r3, [r2, #16]
 800421e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004222:	2b10      	cmp	r3, #16
 8004224:	d01a      	beq.n	800425c <HAL_RCC_GetHCLKFreq+0x44>
 8004226:	2b18      	cmp	r3, #24
 8004228:	d023      	beq.n	8004272 <HAL_RCC_GetHCLKFreq+0x5a>
 800422a:	b1cb      	cbz	r3, 8004260 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800422c:	4814      	ldr	r0, [pc, #80]	; (8004280 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_RCC_GetHCLKFreq+0x64>)
 8004230:	4914      	ldr	r1, [pc, #80]	; (8004284 <HAL_RCC_GetHCLKFreq+0x6c>)
 8004232:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004234:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004236:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800423a:	4c13      	ldr	r4, [pc, #76]	; (8004288 <HAL_RCC_GetHCLKFreq+0x70>)
 800423c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004240:	4d12      	ldr	r5, [pc, #72]	; (800428c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004242:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004244:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004246:	f002 021f 	and.w	r2, r2, #31
 800424a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800424e:	f003 001f 	and.w	r0, r3, #31
 8004252:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8004256:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004258:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800425a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425c:	480c      	ldr	r0, [pc, #48]	; (8004290 <HAL_RCC_GetHCLKFreq+0x78>)
 800425e:	e7e6      	b.n	800422e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004260:	6813      	ldr	r3, [r2, #0]
 8004262:	069b      	lsls	r3, r3, #26
 8004264:	d508      	bpl.n	8004278 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	480a      	ldr	r0, [pc, #40]	; (8004294 <HAL_RCC_GetHCLKFreq+0x7c>)
 800426a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800426e:	40d0      	lsrs	r0, r2
 8004270:	e7dd      	b.n	800422e <HAL_RCC_GetHCLKFreq+0x16>
 8004272:	f7ff fa91 	bl	8003798 <HAL_RCC_GetSysClockFreq.part.0>
 8004276:	e7da      	b.n	800422e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004278:	4806      	ldr	r0, [pc, #24]	; (8004294 <HAL_RCC_GetHCLKFreq+0x7c>)
 800427a:	e7d8      	b.n	800422e <HAL_RCC_GetHCLKFreq+0x16>
 800427c:	58024400 	.word	0x58024400
 8004280:	003d0900 	.word	0x003d0900
 8004284:	0800ad90 	.word	0x0800ad90
 8004288:	240030c8 	.word	0x240030c8
 800428c:	240030c4 	.word	0x240030c4
 8004290:	017d7840 	.word	0x017d7840
 8004294:	03d09000 	.word	0x03d09000

08004298 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004298:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800429a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429c:	6913      	ldr	r3, [r2, #16]
 800429e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d021      	beq.n	80042ea <HAL_RCC_GetPCLK1Freq+0x52>
 80042a6:	2b18      	cmp	r3, #24
 80042a8:	d02b      	beq.n	8004302 <HAL_RCC_GetPCLK1Freq+0x6a>
 80042aa:	b303      	cbz	r3, 80042ee <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 80042ac:	4818      	ldr	r0, [pc, #96]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042ae:	4a17      	ldr	r2, [pc, #92]	; (800430c <HAL_RCC_GetPCLK1Freq+0x74>)
 80042b0:	4918      	ldr	r1, [pc, #96]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80042b2:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 80042b4:	4d18      	ldr	r5, [pc, #96]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042b6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042ba:	4c18      	ldr	r4, [pc, #96]	; (800431c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042bc:	5ccb      	ldrb	r3, [r1, r3]
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042c6:	6990      	ldr	r0, [r2, #24]
 80042c8:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80042cc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042ce:	5c08      	ldrb	r0, [r1, r0]
 80042d0:	f000 001f 	and.w	r0, r0, #31
 80042d4:	40c3      	lsrs	r3, r0
 80042d6:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042d8:	69d2      	ldr	r2, [r2, #28]
 80042da:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80042de:	5c88      	ldrb	r0, [r1, r2]
 80042e0:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80042e4:	fa23 f000 	lsr.w	r0, r3, r0
 80042e8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ea:	480d      	ldr	r0, [pc, #52]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x88>)
 80042ec:	e7df      	b.n	80042ae <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042ee:	6813      	ldr	r3, [r2, #0]
 80042f0:	069b      	lsls	r3, r3, #26
 80042f2:	d509      	bpl.n	8004308 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042f4:	6810      	ldr	r0, [r2, #0]
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80042f8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80042fc:	fa23 f000 	lsr.w	r0, r3, r0
 8004300:	e7d5      	b.n	80042ae <HAL_RCC_GetPCLK1Freq+0x16>
 8004302:	f7ff fa49 	bl	8003798 <HAL_RCC_GetSysClockFreq.part.0>
 8004306:	e7d2      	b.n	80042ae <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004308:	4806      	ldr	r0, [pc, #24]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800430a:	e7d0      	b.n	80042ae <HAL_RCC_GetPCLK1Freq+0x16>
 800430c:	58024400 	.word	0x58024400
 8004310:	003d0900 	.word	0x003d0900
 8004314:	0800ad90 	.word	0x0800ad90
 8004318:	240030c4 	.word	0x240030c4
 800431c:	240030c8 	.word	0x240030c8
 8004320:	017d7840 	.word	0x017d7840
 8004324:	03d09000 	.word	0x03d09000

08004328 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800432a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800432c:	6913      	ldr	r3, [r2, #16]
 800432e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004332:	2b10      	cmp	r3, #16
 8004334:	d021      	beq.n	800437a <HAL_RCC_GetPCLK2Freq+0x52>
 8004336:	2b18      	cmp	r3, #24
 8004338:	d02b      	beq.n	8004392 <HAL_RCC_GetPCLK2Freq+0x6a>
 800433a:	b303      	cbz	r3, 800437e <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800433c:	4818      	ldr	r0, [pc, #96]	; (80043a0 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <HAL_RCC_GetPCLK2Freq+0x74>)
 8004340:	4918      	ldr	r1, [pc, #96]	; (80043a4 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8004342:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004344:	4d18      	ldr	r5, [pc, #96]	; (80043a8 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004346:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800434a:	4c18      	ldr	r4, [pc, #96]	; (80043ac <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800434c:	5ccb      	ldrb	r3, [r1, r3]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004356:	6990      	ldr	r0, [r2, #24]
 8004358:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800435c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800435e:	5c08      	ldrb	r0, [r1, r0]
 8004360:	f000 001f 	and.w	r0, r0, #31
 8004364:	40c3      	lsrs	r3, r0
 8004366:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004368:	69d2      	ldr	r2, [r2, #28]
 800436a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800436e:	5c88      	ldrb	r0, [r1, r2]
 8004370:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004374:	fa23 f000 	lsr.w	r0, r3, r0
 8004378:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800437a:	480d      	ldr	r0, [pc, #52]	; (80043b0 <HAL_RCC_GetPCLK2Freq+0x88>)
 800437c:	e7df      	b.n	800433e <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	069b      	lsls	r3, r3, #26
 8004382:	d509      	bpl.n	8004398 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004384:	6810      	ldr	r0, [r2, #0]
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8004388:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800438c:	fa23 f000 	lsr.w	r0, r3, r0
 8004390:	e7d5      	b.n	800433e <HAL_RCC_GetPCLK2Freq+0x16>
 8004392:	f7ff fa01 	bl	8003798 <HAL_RCC_GetSysClockFreq.part.0>
 8004396:	e7d2      	b.n	800433e <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004398:	4806      	ldr	r0, [pc, #24]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800439a:	e7d0      	b.n	800433e <HAL_RCC_GetPCLK2Freq+0x16>
 800439c:	58024400 	.word	0x58024400
 80043a0:	003d0900 	.word	0x003d0900
 80043a4:	0800ad90 	.word	0x0800ad90
 80043a8:	240030c4 	.word	0x240030c4
 80043ac:	240030c8 	.word	0x240030c8
 80043b0:	017d7840 	.word	0x017d7840
 80043b4:	03d09000 	.word	0x03d09000

080043b8 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043b8:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80043ba:	223f      	movs	r2, #63	; 0x3f
 80043bc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	f002 0207 	and.w	r2, r2, #7
 80043c4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80043cc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	f002 020f 	and.w	r2, r2, #15
 80043d4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80043dc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80043e4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80043ec:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80043ee:	6a1b      	ldr	r3, [r3, #32]
{
 80043f0:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80043f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043f6:	4c05      	ldr	r4, [pc, #20]	; (800440c <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80043f8:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043fa:	6823      	ldr	r3, [r4, #0]
}
 80043fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	600b      	str	r3, [r1, #0]
}
 8004406:	4770      	bx	lr
 8004408:	58024400 	.word	0x58024400
 800440c:	52002000 	.word	0x52002000

08004410 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004412:	4c3a      	ldr	r4, [pc, #232]	; (80044fc <RCCEx_PLL2_Config+0xec>)
 8004414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b03      	cmp	r3, #3
 800441c:	d067      	beq.n	80044ee <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	4606      	mov	r6, r0
 8004422:	460f      	mov	r7, r1
 8004424:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004428:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442a:	f7fe fef9 	bl	8003220 <HAL_GetTick>
 800442e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004430:	e004      	b.n	800443c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004432:	f7fe fef5 	bl	8003220 <HAL_GetTick>
 8004436:	1b43      	subs	r3, r0, r5
 8004438:	2b02      	cmp	r3, #2
 800443a:	d856      	bhi.n	80044ea <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	011a      	lsls	r2, r3, #4
 8004440:	d4f7      	bmi.n	8004432 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004444:	6832      	ldr	r2, [r6, #0]
 8004446:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800444a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800444e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004450:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004454:	3b01      	subs	r3, #1
 8004456:	3a01      	subs	r2, #1
 8004458:	025b      	lsls	r3, r3, #9
 800445a:	0412      	lsls	r2, r2, #16
 800445c:	b29b      	uxth	r3, r3
 800445e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004462:	4313      	orrs	r3, r2
 8004464:	6872      	ldr	r2, [r6, #4]
 8004466:	3a01      	subs	r2, #1
 8004468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800446c:	4313      	orrs	r3, r2
 800446e:	6932      	ldr	r2, [r6, #16]
 8004470:	3a01      	subs	r2, #1
 8004472:	0612      	lsls	r2, r2, #24
 8004474:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004478:	4313      	orrs	r3, r2
 800447a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800447c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800447e:	6972      	ldr	r2, [r6, #20]
 8004480:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004484:	4313      	orrs	r3, r2
 8004486:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800448a:	69b3      	ldr	r3, [r6, #24]
 800448c:	f022 0220 	bic.w	r2, r2, #32
 8004490:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004494:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004496:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004498:	f022 0210 	bic.w	r2, r2, #16
 800449c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800449e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80044a0:	69f2      	ldr	r2, [r6, #28]
 80044a2:	400b      	ands	r3, r1
 80044a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044a8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044ac:	f043 0310 	orr.w	r3, r3, #16
 80044b0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80044b4:	b1ef      	cbz	r7, 80044f2 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044b6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044b8:	bf0c      	ite	eq
 80044ba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044be:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80044c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044c4:	4c0d      	ldr	r4, [pc, #52]	; (80044fc <RCCEx_PLL2_Config+0xec>)
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fe fea7 	bl	8003220 <HAL_GetTick>
 80044d2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044d4:	e004      	b.n	80044e0 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044d6:	f7fe fea3 	bl	8003220 <HAL_GetTick>
 80044da:	1b40      	subs	r0, r0, r5
 80044dc:	2802      	cmp	r0, #2
 80044de:	d804      	bhi.n	80044ea <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	d5f7      	bpl.n	80044d6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80044e6:	2000      	movs	r0, #0
}
 80044e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80044ea:	2003      	movs	r0, #3
}
 80044ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80044ee:	2001      	movs	r0, #1
}
 80044f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044f8:	e7e4      	b.n	80044c4 <RCCEx_PLL2_Config+0xb4>
 80044fa:	bf00      	nop
 80044fc:	58024400 	.word	0x58024400
 8004500:	ffff0007 	.word	0xffff0007

08004504 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004506:	4c3a      	ldr	r4, [pc, #232]	; (80045f0 <RCCEx_PLL3_Config+0xec>)
 8004508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b03      	cmp	r3, #3
 8004510:	d067      	beq.n	80045e2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	4606      	mov	r6, r0
 8004516:	460f      	mov	r7, r1
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451e:	f7fe fe7f 	bl	8003220 <HAL_GetTick>
 8004522:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004524:	e004      	b.n	8004530 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004526:	f7fe fe7b 	bl	8003220 <HAL_GetTick>
 800452a:	1b43      	subs	r3, r0, r5
 800452c:	2b02      	cmp	r3, #2
 800452e:	d856      	bhi.n	80045de <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	009a      	lsls	r2, r3, #2
 8004534:	d4f7      	bmi.n	8004526 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004536:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004538:	6832      	ldr	r2, [r6, #0]
 800453a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800453e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004542:	62a3      	str	r3, [r4, #40]	; 0x28
 8004544:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004548:	3b01      	subs	r3, #1
 800454a:	3a01      	subs	r2, #1
 800454c:	025b      	lsls	r3, r3, #9
 800454e:	0412      	lsls	r2, r2, #16
 8004550:	b29b      	uxth	r3, r3
 8004552:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004556:	4313      	orrs	r3, r2
 8004558:	6872      	ldr	r2, [r6, #4]
 800455a:	3a01      	subs	r2, #1
 800455c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004560:	4313      	orrs	r3, r2
 8004562:	6932      	ldr	r2, [r6, #16]
 8004564:	3a01      	subs	r2, #1
 8004566:	0612      	lsls	r2, r2, #24
 8004568:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800456c:	4313      	orrs	r3, r2
 800456e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004570:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004572:	6972      	ldr	r2, [r6, #20]
 8004574:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004578:	4313      	orrs	r3, r2
 800457a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800457c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800457e:	69b3      	ldr	r3, [r6, #24]
 8004580:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004584:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004588:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800458a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800458c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004590:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004592:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004594:	69f2      	ldr	r2, [r6, #28]
 8004596:	400b      	ands	r3, r1
 8004598:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800459c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800459e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80045a8:	b1ef      	cbz	r7, 80045e6 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045aa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045ac:	bf0c      	ite	eq
 80045ae:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045b2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80045b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045b8:	4c0d      	ldr	r4, [pc, #52]	; (80045f0 <RCCEx_PLL3_Config+0xec>)
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c2:	f7fe fe2d 	bl	8003220 <HAL_GetTick>
 80045c6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045c8:	e004      	b.n	80045d4 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045ca:	f7fe fe29 	bl	8003220 <HAL_GetTick>
 80045ce:	1b40      	subs	r0, r0, r5
 80045d0:	2802      	cmp	r0, #2
 80045d2:	d804      	bhi.n	80045de <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	d5f7      	bpl.n	80045ca <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80045da:	2000      	movs	r0, #0
}
 80045dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80045de:	2003      	movs	r0, #3
}
 80045e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80045e2:	2001      	movs	r0, #1
}
 80045e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045ec:	e7e4      	b.n	80045b8 <RCCEx_PLL3_Config+0xb4>
 80045ee:	bf00      	nop
 80045f0:	58024400 	.word	0x58024400
 80045f4:	ffff0007 	.word	0xffff0007

080045f8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045fc:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004600:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004602:	011d      	lsls	r5, r3, #4
 8004604:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8004608:	d523      	bpl.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800460a:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800460c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004610:	f000 854f 	beq.w	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004614:	d812      	bhi.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004616:	2900      	cmp	r1, #0
 8004618:	f000 85a5 	beq.w	8005166 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800461c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004620:	f040 859e 	bne.w	8005160 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004624:	2102      	movs	r1, #2
 8004626:	3008      	adds	r0, #8
 8004628:	f7ff fef2 	bl	8004410 <RCCEx_PLL2_Config>
 800462c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800462e:	2e00      	cmp	r6, #0
 8004630:	f040 851e 	bne.w	8005070 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004634:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004636:	e9d4 3200 	ldrd	r3, r2, [r4]
 800463a:	e003      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800463c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004640:	f040 858e 	bne.w	8005160 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004644:	4dae      	ldr	r5, [pc, #696]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004646:	2600      	movs	r6, #0
 8004648:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800464a:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800464e:	4301      	orrs	r1, r0
 8004650:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004652:	05d8      	lsls	r0, r3, #23
 8004654:	d50a      	bpl.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004656:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004658:	2904      	cmp	r1, #4
 800465a:	d806      	bhi.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800465c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004660:	05390532 	.word	0x05390532
 8004664:	03100516 	.word	0x03100516
 8004668:	0310      	.short	0x0310
 800466a:	2601      	movs	r6, #1
 800466c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800466e:	0599      	lsls	r1, r3, #22
 8004670:	d51d      	bpl.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004672:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004674:	2980      	cmp	r1, #128	; 0x80
 8004676:	f000 8512 	beq.w	800509e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 800467a:	f200 80f9 	bhi.w	8004870 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800467e:	2900      	cmp	r1, #0
 8004680:	f000 8420 	beq.w	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8004684:	2940      	cmp	r1, #64	; 0x40
 8004686:	f040 80fa 	bne.w	800487e <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800468a:	2100      	movs	r1, #0
 800468c:	f104 0008 	add.w	r0, r4, #8
 8004690:	f7ff febe 	bl	8004410 <RCCEx_PLL2_Config>
 8004694:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004696:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800469a:	2d00      	cmp	r5, #0
 800469c:	f040 83eb 	bne.w	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046a0:	4f97      	ldr	r7, [pc, #604]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046a2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80046a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80046a6:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 80046aa:	4301      	orrs	r1, r0
 80046ac:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046ae:	055f      	lsls	r7, r3, #21
 80046b0:	d521      	bpl.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 80046b2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80046b6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80046ba:	f000 851d 	beq.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80046be:	f200 80e1 	bhi.w	8004884 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80046c2:	2900      	cmp	r1, #0
 80046c4:	f000 8405 	beq.w	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80046c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80046cc:	f040 80e2 	bne.w	8004894 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d0:	2100      	movs	r1, #0
 80046d2:	f104 0008 	add.w	r0, r4, #8
 80046d6:	f7ff fe9b 	bl	8004410 <RCCEx_PLL2_Config>
 80046da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	f040 83cf 	bne.w	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046e6:	4f86      	ldr	r7, [pc, #536]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046e8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80046ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046ee:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 80046f2:	4301      	orrs	r1, r0
 80046f4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046f6:	0518      	lsls	r0, r3, #20
 80046f8:	d521      	bpl.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 80046fa:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80046fe:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004702:	f000 84b9 	beq.w	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 8004706:	f200 80c8 	bhi.w	800489a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800470a:	2900      	cmp	r1, #0
 800470c:	f000 83d4 	beq.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004710:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004714:	f040 80c9 	bne.w	80048aa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004718:	2100      	movs	r1, #0
 800471a:	f104 0008 	add.w	r0, r4, #8
 800471e:	f7ff fe77 	bl	8004410 <RCCEx_PLL2_Config>
 8004722:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004724:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004728:	2d00      	cmp	r5, #0
 800472a:	f040 83a2 	bne.w	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800472e:	4f74      	ldr	r7, [pc, #464]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004730:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8004734:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004736:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800473a:	4301      	orrs	r1, r0
 800473c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800473e:	0199      	lsls	r1, r3, #6
 8004740:	d518      	bpl.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 8004742:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004744:	2920      	cmp	r1, #32
 8004746:	f000 841e 	beq.w	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800474a:	f200 80b1 	bhi.w	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800474e:	b139      	cbz	r1, 8004760 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004750:	2910      	cmp	r1, #16
 8004752:	f040 80b0 	bne.w	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004756:	486a      	ldr	r0, [pc, #424]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004758:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800475a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800475e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004760:	2d00      	cmp	r5, #0
 8004762:	f040 83d3 	bne.w	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004766:	4f66      	ldr	r7, [pc, #408]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004768:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800476a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800476c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8004770:	4301      	orrs	r1, r0
 8004772:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004774:	04df      	lsls	r7, r3, #19
 8004776:	d51f      	bpl.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004778:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800477a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800477e:	f000 84b1 	beq.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004782:	f200 809b 	bhi.w	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004786:	2900      	cmp	r1, #0
 8004788:	f000 8390 	beq.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800478c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004790:	f040 809c 	bne.w	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004794:	2100      	movs	r1, #0
 8004796:	f104 0008 	add.w	r0, r4, #8
 800479a:	f7ff fe39 	bl	8004410 <RCCEx_PLL2_Config>
 800479e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047a0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	f040 8368 	bne.w	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047aa:	4f55      	ldr	r7, [pc, #340]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047ac:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80047ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047b0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80047b4:	4301      	orrs	r1, r0
 80047b6:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047b8:	0498      	lsls	r0, r3, #18
 80047ba:	d51d      	bpl.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 80047bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80047be:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80047c2:	f000 840f 	beq.w	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 80047c6:	f200 8084 	bhi.w	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80047ca:	b159      	cbz	r1, 80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80047cc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80047d0:	f040 8087 	bne.w	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047d4:	2101      	movs	r1, #1
 80047d6:	f104 0008 	add.w	r0, r4, #8
 80047da:	f7ff fe19 	bl	8004410 <RCCEx_PLL2_Config>
 80047de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	f040 839b 	bne.w	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047ea:	4f45      	ldr	r7, [pc, #276]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80047ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047f0:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80047f4:	4301      	orrs	r1, r0
 80047f6:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047f8:	0459      	lsls	r1, r3, #17
 80047fa:	d51d      	bpl.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 80047fc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8004800:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004804:	f000 83fa 	beq.w	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004808:	d86e      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800480a:	b151      	cbz	r1, 8004822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800480c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004810:	d172      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004812:	2101      	movs	r1, #1
 8004814:	f104 0008 	add.w	r0, r4, #8
 8004818:	f7ff fdfa 	bl	8004410 <RCCEx_PLL2_Config>
 800481c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800481e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004822:	2d00      	cmp	r5, #0
 8004824:	f040 8380 	bne.w	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004828:	4f35      	ldr	r7, [pc, #212]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800482a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800482e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004830:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8004834:	4301      	orrs	r1, r0
 8004836:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004838:	041f      	lsls	r7, r3, #16
 800483a:	d50d      	bpl.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 800483c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800483e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004842:	f000 83c7 	beq.w	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8004846:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800484a:	f000 8225 	beq.w	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800484e:	2900      	cmp	r1, #0
 8004850:	f000 822a 	beq.w	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004854:	2601      	movs	r6, #1
 8004856:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004858:	01d8      	lsls	r0, r3, #7
 800485a:	d55f      	bpl.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
 800485c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800485e:	2903      	cmp	r1, #3
 8004860:	f200 84bb 	bhi.w	80051da <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8004864:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004868:	03e10056 	.word	0x03e10056
 800486c:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
 8004870:	29c0      	cmp	r1, #192	; 0xc0
 8004872:	f43f af12 	beq.w	800469a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004876:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800487a:	f43f af0e 	beq.w	800469a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800487e:	2601      	movs	r6, #1
 8004880:	4635      	mov	r5, r6
 8004882:	e714      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004884:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8004888:	f43f af2a 	beq.w	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800488c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004890:	f43f af26 	beq.w	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004894:	2601      	movs	r6, #1
 8004896:	4635      	mov	r5, r6
 8004898:	e72d      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 800489a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800489e:	f43f af43 	beq.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80048a2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048a6:	f43f af3f 	beq.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80048aa:	2601      	movs	r6, #1
 80048ac:	4635      	mov	r5, r6
 80048ae:	e746      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 80048b0:	2930      	cmp	r1, #48	; 0x30
 80048b2:	f43f af55 	beq.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80048b6:	2601      	movs	r6, #1
 80048b8:	4635      	mov	r5, r6
 80048ba:	e75b      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 80048bc:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80048c0:	f43f af70 	beq.w	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80048c4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80048c8:	f43f af6c 	beq.w	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80048cc:	2601      	movs	r6, #1
 80048ce:	4635      	mov	r5, r6
 80048d0:	e772      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 80048d2:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 80048d6:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80048da:	d083      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80048dc:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80048e0:	d080      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80048e2:	2601      	movs	r6, #1
 80048e4:	4635      	mov	r5, r6
 80048e6:	e787      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 80048e8:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80048ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048f0:	d097      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048f2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80048f6:	d094      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048f8:	2601      	movs	r6, #1
 80048fa:	4635      	mov	r5, r6
 80048fc:	e79c      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004904:	2102      	movs	r1, #2
 8004906:	f104 0008 	add.w	r0, r4, #8
 800490a:	f7ff fd81 	bl	8004410 <RCCEx_PLL2_Config>
 800490e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004910:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004914:	2d00      	cmp	r5, #0
 8004916:	f000 82fb 	beq.w	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x918>
 800491a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800491c:	0259      	lsls	r1, r3, #9
 800491e:	f100 825a 	bmi.w	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004922:	07d8      	lsls	r0, r3, #31
 8004924:	d52f      	bpl.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004926:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004928:	2928      	cmp	r1, #40	; 0x28
 800492a:	d82a      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 800492c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004930:	002901fa 	.word	0x002901fa
 8004934:	00290029 	.word	0x00290029
 8004938:	00290029 	.word	0x00290029
 800493c:	00290029 	.word	0x00290029
 8004940:	00290406 	.word	0x00290406
 8004944:	00290029 	.word	0x00290029
 8004948:	00290029 	.word	0x00290029
 800494c:	00290029 	.word	0x00290029
 8004950:	002901f2 	.word	0x002901f2
 8004954:	00290029 	.word	0x00290029
 8004958:	00290029 	.word	0x00290029
 800495c:	00290029 	.word	0x00290029
 8004960:	002901fa 	.word	0x002901fa
 8004964:	00290029 	.word	0x00290029
 8004968:	00290029 	.word	0x00290029
 800496c:	00290029 	.word	0x00290029
 8004970:	002901fa 	.word	0x002901fa
 8004974:	00290029 	.word	0x00290029
 8004978:	00290029 	.word	0x00290029
 800497c:	00290029 	.word	0x00290029
 8004980:	01fa      	.short	0x01fa
 8004982:	2601      	movs	r6, #1
 8004984:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004986:	0799      	lsls	r1, r3, #30
 8004988:	d517      	bpl.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800498a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800498c:	2905      	cmp	r1, #5
 800498e:	f200 8420 	bhi.w	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8004992:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004996:	000e      	.short	0x000e
 8004998:	000603bb 	.word	0x000603bb
 800499c:	000e000e 	.word	0x000e000e
 80049a0:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049a2:	2101      	movs	r1, #1
 80049a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80049a8:	f7ff fdac 	bl	8004504 <RCCEx_PLL3_Config>
 80049ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	f000 8299 	beq.w	8004eea <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80049b8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ba:	075f      	lsls	r7, r3, #29
 80049bc:	d518      	bpl.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049be:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80049c2:	2905      	cmp	r1, #5
 80049c4:	f200 840d 	bhi.w	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xbea>
 80049c8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80049cc:	03ac000e 	.word	0x03ac000e
 80049d0:	000e0006 	.word	0x000e0006
 80049d4:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049d8:	2101      	movs	r1, #1
 80049da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80049de:	f7ff fd91 	bl	8004504 <RCCEx_PLL3_Config>
 80049e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	f000 8286 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x902>
 80049ee:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049f0:	0698      	lsls	r0, r3, #26
 80049f2:	d51f      	bpl.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80049f4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80049f8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80049fc:	f000 8309 	beq.w	8005012 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004a00:	f200 810b 	bhi.w	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x622>
 8004a04:	b159      	cbz	r1, 8004a1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004a06:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004a0a:	f040 8110 	bne.w	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a0e:	2100      	movs	r1, #0
 8004a10:	f104 0008 	add.w	r0, r4, #8
 8004a14:	f7ff fcfc 	bl	8004410 <RCCEx_PLL2_Config>
 8004a18:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a1a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	f040 825f 	bne.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a24:	4fa6      	ldr	r7, [pc, #664]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a26:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8004a2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a2c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8004a30:	4301      	orrs	r1, r0
 8004a32:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a34:	0659      	lsls	r1, r3, #25
 8004a36:	d51f      	bpl.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a38:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004a3c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004a40:	f000 82b2 	beq.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8004a44:	f200 80f6 	bhi.w	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004a48:	b159      	cbz	r1, 8004a62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004a4a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004a4e:	f040 80fb 	bne.w	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a52:	2100      	movs	r1, #0
 8004a54:	f104 0008 	add.w	r0, r4, #8
 8004a58:	f7ff fcda 	bl	8004410 <RCCEx_PLL2_Config>
 8004a5c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a5e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a62:	2d00      	cmp	r5, #0
 8004a64:	f040 8262 	bne.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a68:	4f95      	ldr	r7, [pc, #596]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a6a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8004a6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a70:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8004a74:	4301      	orrs	r1, r0
 8004a76:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a78:	061f      	lsls	r7, r3, #24
 8004a7a:	d51f      	bpl.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a7c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004a80:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004a84:	f000 829b 	beq.w	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 8004a88:	f200 80e1 	bhi.w	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x656>
 8004a8c:	b159      	cbz	r1, 8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004a8e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004a92:	f040 80e6 	bne.w	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a96:	2100      	movs	r1, #0
 8004a98:	f104 0008 	add.w	r0, r4, #8
 8004a9c:	f7ff fcb8 	bl	8004410 <RCCEx_PLL2_Config>
 8004aa0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004aa2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004aa6:	2d00      	cmp	r5, #0
 8004aa8:	f040 823c 	bne.w	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004aac:	4f84      	ldr	r7, [pc, #528]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004aae:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8004ab2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ab4:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004ab8:	4301      	orrs	r1, r0
 8004aba:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004abc:	0718      	lsls	r0, r3, #28
 8004abe:	d50b      	bpl.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004ac0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004ac4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004ac8:	f000 82b8 	beq.w	800503c <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004acc:	4f7c      	ldr	r7, [pc, #496]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ace:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ad0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004ad4:	4301      	orrs	r1, r0
 8004ad6:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ad8:	06d9      	lsls	r1, r3, #27
 8004ada:	d50b      	bpl.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004adc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8004ae0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004ae4:	f000 82b7 	beq.w	8005056 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ae8:	4f75      	ldr	r7, [pc, #468]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004aea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aec:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004af0:	4301      	orrs	r1, r0
 8004af2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af4:	031f      	lsls	r7, r3, #12
 8004af6:	d50e      	bpl.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
 8004af8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004afc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004b00:	f000 80f4 	beq.w	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004b04:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004b08:	f000 80f8 	beq.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x704>
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	f000 822e 	beq.w	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004b12:	2601      	movs	r6, #1
 8004b14:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b16:	0358      	lsls	r0, r3, #13
 8004b18:	d50f      	bpl.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
 8004b1a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004b1e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004b22:	f000 80cf 	beq.w	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8004b26:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004b2a:	f000 80d3 	beq.w	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8004b2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004b32:	f000 8214 	beq.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004b36:	2601      	movs	r6, #1
 8004b38:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b3a:	03d9      	lsls	r1, r3, #15
 8004b3c:	d509      	bpl.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004b3e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004b40:	2900      	cmp	r1, #0
 8004b42:	f000 8203 	beq.w	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x954>
 8004b46:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004b4a:	f000 819d 	beq.w	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8004b4e:	2601      	movs	r6, #1
 8004b50:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b52:	009f      	lsls	r7, r3, #2
 8004b54:	f100 80f1 	bmi.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b58:	0398      	lsls	r0, r3, #14
 8004b5a:	d50c      	bpl.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
 8004b5c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004b60:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004b64:	f000 81ea 	beq.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x944>
 8004b68:	d97e      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x670>
 8004b6a:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8004b6e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004b72:	d07b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x674>
 8004b74:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b76:	02d9      	lsls	r1, r3, #11
 8004b78:	d506      	bpl.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b7a:	4851      	ldr	r0, [pc, #324]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004b7c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8004b7e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004b80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004b84:	4329      	orrs	r1, r5
 8004b86:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b88:	00df      	lsls	r7, r3, #3
 8004b8a:	d507      	bpl.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b8c:	484c      	ldr	r0, [pc, #304]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004b8e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8004b92:	6901      	ldr	r1, [r0, #16]
 8004b94:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004b98:	4329      	orrs	r1, r5
 8004b9a:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b9c:	029d      	lsls	r5, r3, #10
 8004b9e:	d506      	bpl.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ba0:	4847      	ldr	r0, [pc, #284]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ba2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8004ba4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004ba6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004baa:	4329      	orrs	r1, r5
 8004bac:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bae:	0058      	lsls	r0, r3, #1
 8004bb0:	d509      	bpl.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bb2:	4943      	ldr	r1, [pc, #268]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004bb4:	6908      	ldr	r0, [r1, #16]
 8004bb6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004bba:	6108      	str	r0, [r1, #16]
 8004bbc:	6908      	ldr	r0, [r1, #16]
 8004bbe:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8004bc2:	4328      	orrs	r0, r5
 8004bc4:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	da06      	bge.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bca:	483d      	ldr	r0, [pc, #244]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004bcc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004bce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004bd0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004bd4:	4329      	orrs	r1, r5
 8004bd6:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bd8:	0219      	lsls	r1, r3, #8
 8004bda:	d507      	bpl.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bdc:	4938      	ldr	r1, [pc, #224]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004bde:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004be2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004be4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004be8:	4303      	orrs	r3, r0
 8004bea:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bec:	07d3      	lsls	r3, r2, #31
 8004bee:	f100 80b0 	bmi.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bf2:	0797      	lsls	r7, r2, #30
 8004bf4:	f100 80ba 	bmi.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004bf8:	0755      	lsls	r5, r2, #29
 8004bfa:	f100 80c4 	bmi.w	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004bfe:	0710      	lsls	r0, r2, #28
 8004c00:	f100 80ce 	bmi.w	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c04:	06d1      	lsls	r1, r2, #27
 8004c06:	f100 80d8 	bmi.w	8004dba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c0a:	0692      	lsls	r2, r2, #26
 8004c0c:	f100 8125 	bmi.w	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
 8004c10:	1e30      	subs	r0, r6, #0
 8004c12:	bf18      	it	ne
 8004c14:	2001      	movne	r0, #1
}
 8004c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c1a:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8004c1e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c22:	f43f aefc 	beq.w	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c26:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8004c2a:	f43f aef8 	beq.w	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c2e:	2601      	movs	r6, #1
 8004c30:	4635      	mov	r5, r6
 8004c32:	e6ff      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c34:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8004c38:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004c3c:	f43f af11 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004c40:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8004c44:	f43f af0d 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004c48:	2601      	movs	r6, #1
 8004c4a:	4635      	mov	r5, r6
 8004c4c:	e714      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c4e:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8004c52:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004c56:	f43f af26 	beq.w	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004c5a:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8004c5e:	f43f af22 	beq.w	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004c62:	2601      	movs	r6, #1
 8004c64:	4635      	mov	r5, r6
 8004c66:	e729      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	d183      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	f040 8163 	bne.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c72:	4d13      	ldr	r5, [pc, #76]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004c74:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004c76:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004c7a:	4301      	orrs	r1, r0
 8004c7c:	6569      	str	r1, [r5, #84]	; 0x54
 8004c7e:	e77a      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c80:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	f040 80fb 	bne.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c88:	4f0d      	ldr	r7, [pc, #52]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004c8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c8e:	f021 0107 	bic.w	r1, r1, #7
 8004c92:	4301      	orrs	r1, r0
 8004c94:	6539      	str	r1, [r7, #80]	; 0x50
 8004c96:	e4ea      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c98:	2101      	movs	r1, #1
 8004c9a:	f104 0008 	add.w	r0, r4, #8
 8004c9e:	f7ff fbb7 	bl	8004410 <RCCEx_PLL2_Config>
 8004ca2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ca4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ca8:	2d00      	cmp	r5, #0
 8004caa:	f040 811c 	bne.w	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cae:	4f04      	ldr	r7, [pc, #16]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004cb0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004cb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cb4:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004cb8:	4301      	orrs	r1, r0
 8004cba:	6539      	str	r1, [r7, #80]	; 0x50
 8004cbc:	e5cc      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004cca:	f7ff fc1b 	bl	8004504 <RCCEx_PLL3_Config>
 8004cce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cd0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	f040 812d 	bne.w	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cda:	4fb1      	ldr	r7, [pc, #708]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004cdc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004ce0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ce2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004ce6:	4301      	orrs	r1, r0
 8004ce8:	6579      	str	r1, [r7, #84]	; 0x54
 8004cea:	e726      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cec:	2102      	movs	r1, #2
 8004cee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004cf2:	f7ff fc07 	bl	8004504 <RCCEx_PLL3_Config>
 8004cf6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cf8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004cfc:	2d00      	cmp	r5, #0
 8004cfe:	f040 8117 	bne.w	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d02:	4fa7      	ldr	r7, [pc, #668]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004d04:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8004d08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d0a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004d0e:	4301      	orrs	r1, r0
 8004d10:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d12:	e700      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d14:	2101      	movs	r1, #1
 8004d16:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004d1a:	f7ff fbf3 	bl	8004504 <RCCEx_PLL3_Config>
 8004d1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	f040 80da 	bne.w	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d2a:	4f9d      	ldr	r7, [pc, #628]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004d2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d30:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8004d34:	4301      	orrs	r1, r0
 8004d36:	6579      	str	r1, [r7, #84]	; 0x54
 8004d38:	e625      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004d40:	f7ff fbe0 	bl	8004504 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d44:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	f43f af05 	beq.w	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
 8004d4e:	2601      	movs	r6, #1
 8004d50:	e702      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d52:	2100      	movs	r1, #0
 8004d54:	f104 0008 	add.w	r0, r4, #8
 8004d58:	f7ff fb5a 	bl	8004410 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d5c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f43f af47 	beq.w	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d64:	0797      	lsls	r7, r2, #30
 8004d66:	4606      	mov	r6, r0
 8004d68:	f57f af46 	bpl.w	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	f104 0008 	add.w	r0, r4, #8
 8004d72:	f7ff fb4d 	bl	8004410 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d76:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	f43f af3d 	beq.w	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d7e:	0755      	lsls	r5, r2, #29
 8004d80:	4606      	mov	r6, r0
 8004d82:	f57f af3c 	bpl.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d86:	2102      	movs	r1, #2
 8004d88:	f104 0008 	add.w	r0, r4, #8
 8004d8c:	f7ff fb40 	bl	8004410 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d90:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004d92:	2800      	cmp	r0, #0
 8004d94:	f43f af33 	beq.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d98:	4606      	mov	r6, r0
 8004d9a:	0710      	lsls	r0, r2, #28
 8004d9c:	f57f af32 	bpl.w	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004da0:	2100      	movs	r1, #0
 8004da2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004da6:	f7ff fbad 	bl	8004504 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004daa:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f43f af29 	beq.w	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004db2:	06d1      	lsls	r1, r2, #27
 8004db4:	4606      	mov	r6, r0
 8004db6:	f57f af28 	bpl.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dba:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f7ff fb9f 	bl	8004504 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f000 80db 	beq.w	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	069b      	lsls	r3, r3, #26
 8004dd0:	d54c      	bpl.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x874>
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	e043      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd6:	4f73      	ldr	r7, [pc, #460]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dde:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004de0:	f7fe fa1e 	bl	8003220 <HAL_GetTick>
 8004de4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004de6:	e006      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de8:	f7fe fa1a 	bl	8003220 <HAL_GetTick>
 8004dec:	eba0 0008 	sub.w	r0, r0, r8
 8004df0:	2864      	cmp	r0, #100	; 0x64
 8004df2:	f200 81af 	bhi.w	8005154 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	05da      	lsls	r2, r3, #23
 8004dfa:	d5f5      	bpl.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	f040 81e3 	bne.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e02:	4a67      	ldr	r2, [pc, #412]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004e04:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8004e08:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004e0a:	4059      	eors	r1, r3
 8004e0c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8004e10:	d00b      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e12:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e14:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e16:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e1a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004e1e:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e20:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8004e22:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004e26:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004e28:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2e:	f000 81ad 	beq.w	800518c <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e32:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004e36:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004e3a:	f000 81bb 	beq.w	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8004e3e:	4958      	ldr	r1, [pc, #352]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004e40:	690a      	ldr	r2, [r1, #16]
 8004e42:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004e46:	610a      	str	r2, [r1, #16]
 8004e48:	4855      	ldr	r0, [pc, #340]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004e4a:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8004e4e:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8004e50:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e52:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e56:	6701      	str	r1, [r0, #112]	; 0x70
 8004e58:	e563      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e5a:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e5e:	2102      	movs	r1, #2
 8004e60:	4628      	mov	r0, r5
 8004e62:	f7ff fb4f 	bl	8004504 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004e66:	2800      	cmp	r0, #0
 8004e68:	f43f aed2 	beq.w	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
 8004e6c:	2001      	movs	r0, #1
}
 8004e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e72:	462e      	mov	r6, r5
 8004e74:	e463      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x146>
 8004e76:	462e      	mov	r6, r5
 8004e78:	e419      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8004e7a:	462e      	mov	r6, r5
 8004e7c:	e49c      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004e7e:	462e      	mov	r6, r5
 8004e80:	f7ff bbf5 	b.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e84:	462e      	mov	r6, r5
 8004e86:	e436      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e88:	2102      	movs	r1, #2
 8004e8a:	f104 0008 	add.w	r0, r4, #8
 8004e8e:	f7ff fabf 	bl	8004410 <RCCEx_PLL2_Config>
 8004e92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	d15e      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e9c:	4f40      	ldr	r7, [pc, #256]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004e9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004ea0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004ea2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004ea6:	4301      	orrs	r1, r0
 8004ea8:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004eaa:	e652      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eac:	483c      	ldr	r0, [pc, #240]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004eae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004eb0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004eb4:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004eb6:	e475      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb8:	4839      	ldr	r0, [pc, #228]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004eba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004ebc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004ec0:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004ec2:	e431      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec4:	4836      	ldr	r0, [pc, #216]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004ec6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004ec8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004ecc:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004ece:	f7ff bbe4 	b.w	800469a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed2:	4833      	ldr	r0, [pc, #204]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004ed4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004ed6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004eda:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004edc:	e400      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ede:	462e      	mov	r6, r5
 8004ee0:	e551      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8004ee2:	462e      	mov	r6, r5
 8004ee4:	e5a6      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004ee6:	462e      	mov	r6, r5
 8004ee8:	e4b6      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004eea:	4f2d      	ldr	r7, [pc, #180]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004eec:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ef0:	f021 0107 	bic.w	r1, r1, #7
 8004ef4:	4301      	orrs	r1, r0
 8004ef6:	6579      	str	r1, [r7, #84]	; 0x54
 8004ef8:	e55f      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004efa:	4f29      	ldr	r7, [pc, #164]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004efc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8004f00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f02:	f021 0107 	bic.w	r1, r1, #7
 8004f06:	4301      	orrs	r1, r0
 8004f08:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f0a:	e571      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f0c:	462e      	mov	r6, r5
 8004f0e:	e431      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f10:	4f23      	ldr	r7, [pc, #140]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004f12:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004f14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004f16:	f021 0103 	bic.w	r1, r1, #3
 8004f1a:	4301      	orrs	r1, r0
 8004f1c:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004f1e:	e4fd      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004f20:	462e      	mov	r6, r5
 8004f22:	e469      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f24:	462e      	mov	r6, r5
 8004f26:	e5c9      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8004f28:	462e      	mov	r6, r5
 8004f2a:	e485      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004f2c:	462e      	mov	r6, r5
 8004f2e:	e5a3      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004f30:	462e      	mov	r6, r5
 8004f32:	e5f0      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004f34:	462e      	mov	r6, r5
 8004f36:	e600      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x542>
 8004f38:	462e      	mov	r6, r5
 8004f3a:	e61c      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3c:	4f18      	ldr	r7, [pc, #96]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004f3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f40:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8004f44:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	d1f6      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8004f4a:	e692      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4c:	4814      	ldr	r0, [pc, #80]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004f4e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004f50:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004f54:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	d0a0      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8004f5a:	462e      	mov	r6, r5
 8004f5c:	e5f9      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f5e:	4810      	ldr	r0, [pc, #64]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004f60:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004f62:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004f66:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004f68:	2d00      	cmp	r5, #0
 8004f6a:	d1e3      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8004f6c:	e6b5      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f6e:	f104 0008 	add.w	r0, r4, #8
 8004f72:	f7ff fa4d 	bl	8004410 <RCCEx_PLL2_Config>
 8004f76:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f78:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f7c:	2d00      	cmp	r5, #0
 8004f7e:	d1d7      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004f80:	e6bf      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f82:	6862      	ldr	r2, [r4, #4]
 8004f84:	e641      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f86:	2102      	movs	r1, #2
 8004f88:	f104 0008 	add.w	r0, r4, #8
 8004f8c:	f7ff fa40 	bl	8004410 <RCCEx_PLL2_Config>
 8004f90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	d1b8      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004f9a:	f7ff bbe4 	b.w	8004766 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004f9e:	bf00      	nop
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fa8:	2102      	movs	r1, #2
 8004faa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004fae:	f7ff faa9 	bl	8004504 <RCCEx_PLL3_Config>
 8004fb2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004fb4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	d1b7      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004fbc:	e554      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004fc4:	f7ff fa9e 	bl	8004504 <RCCEx_PLL3_Config>
 8004fc8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004fce:	2d00      	cmp	r5, #0
 8004fd0:	d1a8      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8004fd2:	e56b      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd4:	4884      	ldr	r0, [pc, #528]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 8004fd6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004fd8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004fdc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	d181      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004fe2:	e664      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004fea:	f7ff fa8b 	bl	8004504 <RCCEx_PLL3_Config>
 8004fee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ff0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	d193      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8004ff8:	f7ff bbf7 	b.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005002:	f7ff fa7f 	bl	8004504 <RCCEx_PLL3_Config>
 8005006:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005008:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800500c:	2d00      	cmp	r5, #0
 800500e:	d18b      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8005010:	e40a      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005012:	2102      	movs	r1, #2
 8005014:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005018:	f7ff fa74 	bl	8004504 <RCCEx_PLL3_Config>
 800501c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800501e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005022:	2d00      	cmp	r5, #0
 8005024:	f47f af5d 	bne.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8005028:	e4fc      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800502a:	486f      	ldr	r0, [pc, #444]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800502c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800502e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005032:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005034:	2d00      	cmp	r5, #0
 8005036:	f47f ac70 	bne.w	800491a <HAL_RCCEx_PeriphCLKConfig+0x322>
 800503a:	e769      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800503c:	2102      	movs	r1, #2
 800503e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005042:	f7ff fa5f 	bl	8004504 <RCCEx_PLL3_Config>
 8005046:	2800      	cmp	r0, #0
 8005048:	f040 8094 	bne.w	8005174 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800504c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005050:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005054:	e53a      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005056:	2102      	movs	r1, #2
 8005058:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800505c:	f7ff fa52 	bl	8004504 <RCCEx_PLL3_Config>
 8005060:	2800      	cmp	r0, #0
 8005062:	f040 808d 	bne.w	8005180 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005066:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800506a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800506e:	e53b      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005070:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005074:	f7ff baed 	b.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005078:	2100      	movs	r1, #0
 800507a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800507e:	f7ff fa41 	bl	8004504 <RCCEx_PLL3_Config>
 8005082:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005084:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005088:	f7ff bb4e 	b.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800508c:	2100      	movs	r1, #0
 800508e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005092:	f7ff fa37 	bl	8004504 <RCCEx_PLL3_Config>
 8005096:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005098:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800509c:	e5f1      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800509e:	2100      	movs	r1, #0
 80050a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80050a4:	f7ff fa2e 	bl	8004504 <RCCEx_PLL3_Config>
 80050a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050aa:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80050ae:	f7ff baf4 	b.w	800469a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050b2:	2102      	movs	r1, #2
 80050b4:	3028      	adds	r0, #40	; 0x28
 80050b6:	f7ff fa25 	bl	8004504 <RCCEx_PLL3_Config>
 80050ba:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80050bc:	2e00      	cmp	r6, #0
 80050be:	f43f aab9 	beq.w	8004634 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80050c2:	e7d5      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c4:	4848      	ldr	r0, [pc, #288]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
 80050c6:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80050ca:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80050ce:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80050d0:	e5d7      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050d2:	2100      	movs	r1, #0
 80050d4:	f104 0008 	add.w	r0, r4, #8
 80050d8:	f7ff f99a 	bl	8004410 <RCCEx_PLL2_Config>
 80050dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80050de:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80050e2:	e5ce      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050e4:	2100      	movs	r1, #0
 80050e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80050ea:	f7ff fa0b 	bl	8004504 <RCCEx_PLL3_Config>
 80050ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050f0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80050f4:	f7ff bb56 	b.w	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050f8:	2100      	movs	r1, #0
 80050fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80050fe:	f7ff fa01 	bl	8004504 <RCCEx_PLL3_Config>
 8005102:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005104:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005108:	f7ff baea 	b.w	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800510c:	2101      	movs	r1, #1
 800510e:	f104 0008 	add.w	r0, r4, #8
 8005112:	f7ff f97d 	bl	8004410 <RCCEx_PLL2_Config>
 8005116:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005118:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800511c:	2d00      	cmp	r5, #0
 800511e:	f47f ac4b 	bne.w	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005122:	e6e2      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005124:	2101      	movs	r1, #1
 8005126:	f104 0008 	add.w	r0, r4, #8
 800512a:	f7ff f971 	bl	8004410 <RCCEx_PLL2_Config>
 800512e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005130:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005134:	2d00      	cmp	r5, #0
 8005136:	f47f ac5a 	bne.w	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800513a:	e6de      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800513c:	2101      	movs	r1, #1
 800513e:	f104 0008 	add.w	r0, r4, #8
 8005142:	f7ff f965 	bl	8004410 <RCCEx_PLL2_Config>
 8005146:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005148:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800514c:	2d00      	cmp	r5, #0
 800514e:	f47f aec6 	bne.w	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8005152:	e5ea      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
 8005154:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005156:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800515a:	4635      	mov	r5, r6
 800515c:	f7ff bbe1 	b.w	8004922 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005160:	2601      	movs	r6, #1
 8005162:	f7ff ba76 	b.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005166:	4d20      	ldr	r5, [pc, #128]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 8005168:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800516a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800516e:	62e8      	str	r0, [r5, #44]	; 0x2c
 8005170:	f7ff ba68 	b.w	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005174:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 8005178:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800517a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800517e:	e4a5      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005180:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 8005184:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005186:	e9d4 3200 	ldrd	r3, r2, [r4]
 800518a:	e4ad      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
 800518c:	f7fe f848 	bl	8003220 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005190:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
 8005194:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800519a:	e004      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fe f840 	bl	8003220 <HAL_GetTick>
 80051a0:	1bc0      	subs	r0, r0, r7
 80051a2:	4548      	cmp	r0, r9
 80051a4:	d8d6      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80051aa:	079b      	lsls	r3, r3, #30
 80051ac:	d5f6      	bpl.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80051b2:	e63e      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80051b4:	480c      	ldr	r0, [pc, #48]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 80051b6:	4a0d      	ldr	r2, [pc, #52]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 80051b8:	6901      	ldr	r1, [r0, #16]
 80051ba:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80051be:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80051c2:	430a      	orrs	r2, r1
 80051c4:	6102      	str	r2, [r0, #16]
 80051c6:	e63f      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80051cc:	462e      	mov	r6, r5
 80051ce:	f7ff bba8 	b.w	8004922 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051d2:	2601      	movs	r6, #1
 80051d4:	4635      	mov	r5, r6
 80051d6:	f7ff bbf0 	b.w	80049ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
 80051da:	2601      	movs	r6, #1
 80051dc:	4635      	mov	r5, r6
 80051de:	f7ff bb9d 	b.w	800491c <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051e2:	2601      	movs	r6, #1
 80051e4:	4635      	mov	r5, r6
 80051e6:	e403      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80051e8:	58024400 	.word	0x58024400
 80051ec:	00ffffcf 	.word	0x00ffffcf

080051f0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80051f0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80051f2:	f7ff f811 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 80051f6:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80051f8:	4a05      	ldr	r2, [pc, #20]	; (8005210 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005200:	5cd3      	ldrb	r3, [r2, r3]
 8005202:	f003 031f 	and.w	r3, r3, #31
}
 8005206:	40d8      	lsrs	r0, r3
 8005208:	bd08      	pop	{r3, pc}
 800520a:	bf00      	nop
 800520c:	58024400 	.word	0x58024400
 8005210:	0800ad90 	.word	0x0800ad90

08005214 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005214:	4b4f      	ldr	r3, [pc, #316]	; (8005354 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8005216:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005218:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800521a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800521c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800521e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005222:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005226:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8005228:	d05c      	beq.n	80052e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800522a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800522e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005232:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005236:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800523a:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800523c:	ee07 4a90 	vmov	s15, r4
 8005240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005244:	d003      	beq.n	800524e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8005246:	2902      	cmp	r1, #2
 8005248:	d075      	beq.n	8005336 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800524a:	2900      	cmp	r1, #0
 800524c:	d04f      	beq.n	80052ee <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800524e:	ee07 2a90 	vmov	s15, r2
 8005252:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005260:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800535c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005268:	ee06 3a90 	vmov	s13, r3
 800526c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005270:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005274:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005278:	eee7 6a25 	vfma.f32	s13, s14, s11
 800527c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005280:	4a34      	ldr	r2, [pc, #208]	; (8005354 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8005282:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005286:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005288:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800528c:	ee07 3a10 	vmov	s14, r3
 8005290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005294:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005296:	ee37 7a06 	vadd.f32	s14, s14, s12
 800529a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a2:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80052a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80052a8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80052ac:	ee07 3a10 	vmov	s14, r3
 80052b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80052b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80052b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80052c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80052c6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80052d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052da:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80052de:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80052e2:	4770      	bx	lr
 80052e4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052e6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052ea:	6082      	str	r2, [r0, #8]
}
 80052ec:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	0689      	lsls	r1, r1, #26
 80052f2:	d527      	bpl.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052f4:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052f6:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052fa:	4919      	ldr	r1, [pc, #100]	; (8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005302:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800530a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800535c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005312:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005314:	ee06 3a90 	vmov	s13, r3
 8005318:	ee05 1a90 	vmov	s11, r1
 800531c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005320:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005324:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005328:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800532c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005330:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005334:	e7a4      	b.n	8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005336:	ee07 2a90 	vmov	s15, r2
 800533a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800533e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005342:	e78a      	b.n	800525a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005344:	ee07 2a90 	vmov	s15, r2
 8005348:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800534c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005350:	e783      	b.n	800525a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005352:	bf00      	nop
 8005354:	58024400 	.word	0x58024400
 8005358:	4a742400 	.word	0x4a742400
 800535c:	39000000 	.word	0x39000000
 8005360:	03d09000 	.word	0x03d09000
 8005364:	4bbebc20 	.word	0x4bbebc20
 8005368:	4c742400 	.word	0x4c742400

0800536c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800536c:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800536e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005370:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005372:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005374:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8005376:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800537a:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800537e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8005380:	d05c      	beq.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005382:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005386:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800538a:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800538e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005392:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005394:	ee07 4a90 	vmov	s15, r4
 8005398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800539c:	d003      	beq.n	80053a6 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800539e:	2902      	cmp	r1, #2
 80053a0:	d075      	beq.n	800548e <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80053a2:	2900      	cmp	r1, #0
 80053a4:	d04f      	beq.n	8005446 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053a6:	ee07 2a90 	vmov	s15, r2
 80053aa:	eddf 6a41 	vldr	s13, [pc, #260]	; 80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80053ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80053b8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80053bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c0:	ee06 3a90 	vmov	s13, r3
 80053c4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80053c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80053cc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80053d0:	eee7 6a25 	vfma.f32	s13, s14, s11
 80053d4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80053d8:	4a34      	ldr	r2, [pc, #208]	; (80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80053da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80053de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053e0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80053e4:	ee07 3a10 	vmov	s14, r3
 80053e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80053ec:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80053ee:	ee37 7a06 	vadd.f32	s14, s14, s12
 80053f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053fa:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80053fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005400:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005404:	ee07 3a10 	vmov	s14, r3
 8005408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800540c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005418:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800541c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800541e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800542a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800542e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005432:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005436:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800543a:	4770      	bx	lr
 800543c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800543e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005442:	6082      	str	r2, [r0, #8]
}
 8005444:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005446:	6819      	ldr	r1, [r3, #0]
 8005448:	0689      	lsls	r1, r1, #26
 800544a:	d527      	bpl.n	800549c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800544c:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800544e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005452:	4919      	ldr	r1, [pc, #100]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005454:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800545a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800545e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005462:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800546a:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800546c:	ee06 3a90 	vmov	s13, r3
 8005470:	ee05 1a90 	vmov	s11, r1
 8005474:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005478:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800547c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005480:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005484:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005488:	ee66 6a26 	vmul.f32	s13, s12, s13
 800548c:	e7a4      	b.n	80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800548e:	ee07 2a90 	vmov	s15, r2
 8005492:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8005496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549a:	e78a      	b.n	80053b2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800549c:	ee07 2a90 	vmov	s15, r2
 80054a0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80054a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a8:	e783      	b.n	80053b2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80054aa:	bf00      	nop
 80054ac:	58024400 	.word	0x58024400
 80054b0:	4a742400 	.word	0x4a742400
 80054b4:	39000000 	.word	0x39000000
 80054b8:	03d09000 	.word	0x03d09000
 80054bc:	4bbebc20 	.word	0x4bbebc20
 80054c0:	4c742400 	.word	0x4c742400

080054c4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80054c4:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80054c6:	492c      	ldr	r1, [pc, #176]	; (8005578 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80054c8:	695a      	ldr	r2, [r3, #20]
{
 80054ca:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80054cc:	699c      	ldr	r4, [r3, #24]
 80054ce:	f044 0408 	orr.w	r4, r4, #8
 80054d2:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80054d4:	699c      	ldr	r4, [r3, #24]
 80054d6:	f044 0410 	orr.w	r4, r4, #16
 80054da:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80054dc:	681c      	ldr	r4, [r3, #0]
 80054de:	f024 0401 	bic.w	r4, r4, #1
 80054e2:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80054e4:	691c      	ldr	r4, [r3, #16]
 80054e6:	4021      	ands	r1, r4
 80054e8:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80054ea:	6899      	ldr	r1, [r3, #8]
 80054ec:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80054f0:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054f2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 80054f6:	2904      	cmp	r1, #4
 80054f8:	d001      	beq.n	80054fe <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80054fa:	0691      	lsls	r1, r2, #26
 80054fc:	d430      	bmi.n	8005560 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054fe:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8005502:	2903      	cmp	r1, #3
 8005504:	d001      	beq.n	800550a <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005506:	0654      	lsls	r4, r2, #25
 8005508:	d41f      	bmi.n	800554a <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800550a:	0591      	lsls	r1, r2, #22
 800550c:	d509      	bpl.n	8005522 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800550e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8005512:	f041 0101 	orr.w	r1, r1, #1
 8005516:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800551a:	6999      	ldr	r1, [r3, #24]
 800551c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005520:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005522:	05d2      	lsls	r2, r2, #23
 8005524:	d509      	bpl.n	800553a <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005526:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800552a:	f042 0208 	orr.w	r2, r2, #8
 800552e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005538:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800553a:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800553c:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8005540:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005544:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005548:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800554a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800554e:	f041 0104 	orr.w	r1, r1, #4
 8005552:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005556:	6999      	ldr	r1, [r3, #24]
 8005558:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800555c:	6199      	str	r1, [r3, #24]
 800555e:	e7d4      	b.n	800550a <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005560:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8005564:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005568:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800556c:	6999      	ldr	r1, [r3, #24]
 800556e:	f041 0120 	orr.w	r1, r1, #32
 8005572:	6199      	str	r1, [r3, #24]
 8005574:	e7c3      	b.n	80054fe <SPI_CloseTransfer+0x3a>
 8005576:	bf00      	nop
 8005578:	fffffc90 	.word	0xfffffc90

0800557c <HAL_SPI_Init>:
  if (hspi == NULL)
 800557c:	2800      	cmp	r0, #0
 800557e:	f000 80c9 	beq.w	8005714 <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005582:	4a66      	ldr	r2, [pc, #408]	; (800571c <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005584:	2100      	movs	r1, #0
{
 8005586:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800558a:	6803      	ldr	r3, [r0, #0]
 800558c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800558e:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005590:	4293      	cmp	r3, r2
 8005592:	d017      	beq.n	80055c4 <HAL_SPI_Init+0x48>
 8005594:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <HAL_SPI_Init+0x48>
 800559c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a0:	4293      	cmp	r3, r2
 80055a2:	68c2      	ldr	r2, [r0, #12]
 80055a4:	f000 80ae 	beq.w	8005704 <HAL_SPI_Init+0x188>
 80055a8:	2a0f      	cmp	r2, #15
 80055aa:	d808      	bhi.n	80055be <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055ac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80055ae:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055b2:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 80055b4:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 80055b6:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80055ba:	2908      	cmp	r1, #8
 80055bc:	d916      	bls.n	80055ec <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 80055be:	2001      	movs	r0, #1
}
 80055c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80055c4:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80055c8:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80055cc:	4e53      	ldr	r6, [pc, #332]	; (800571c <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055ce:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 80055d0:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 80055d2:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80055d6:	4d52      	ldr	r5, [pc, #328]	; (8005720 <HAL_SPI_Init+0x1a4>)
 80055d8:	42ab      	cmp	r3, r5
 80055da:	bf18      	it	ne
 80055dc:	42b3      	cmpne	r3, r6
 80055de:	d003      	beq.n	80055e8 <HAL_SPI_Init+0x6c>
 80055e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	d101      	bne.n	80055ec <HAL_SPI_Init+0x70>
 80055e8:	2910      	cmp	r1, #16
 80055ea:	d8e8      	bhi.n	80055be <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ec:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 80055f0:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d07a      	beq.n	80056ee <HAL_SPI_Init+0x172>
 80055f8:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 80055fc:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055fe:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005600:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8005602:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005606:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	f021 0101 	bic.w	r1, r1, #1
 8005610:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005612:	6899      	ldr	r1, [r3, #8]
 8005614:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005618:	6861      	ldr	r1, [r4, #4]
 800561a:	d058      	beq.n	80056ce <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800561c:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
 8005620:	d001      	beq.n	8005626 <HAL_SPI_Init+0xaa>
 8005622:	2a06      	cmp	r2, #6
 8005624:	d849      	bhi.n	80056ba <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005626:	f8d3 e000 	ldr.w	lr, [r3]
 800562a:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 800562e:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005632:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005634:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005638:	4337      	orrs	r7, r6
 800563a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800563c:	4337      	orrs	r7, r6
 800563e:	6926      	ldr	r6, [r4, #16]
 8005640:	4337      	orrs	r7, r6
 8005642:	6966      	ldr	r6, [r4, #20]
 8005644:	4337      	orrs	r7, r6
 8005646:	6a26      	ldr	r6, [r4, #32]
 8005648:	4337      	orrs	r7, r6
 800564a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800564c:	4337      	orrs	r7, r6
 800564e:	68a6      	ldr	r6, [r4, #8]
 8005650:	4337      	orrs	r7, r6
 8005652:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8005654:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005656:	69e6      	ldr	r6, [r4, #28]
 8005658:	4332      	orrs	r2, r6
 800565a:	4310      	orrs	r0, r2
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800565c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800565e:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005660:	ea40 000c 	orr.w	r0, r0, ip
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005664:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005666:	6098      	str	r0, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005668:	4315      	orrs	r5, r2
 800566a:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800566c:	b9b9      	cbnz	r1, 800569e <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005678:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8005680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005684:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800568e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005690:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005692:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005696:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800569a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800569e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80056a6:	f1b9 0f00 	cmp.w	r9, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80056b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056b4:	430a      	orrs	r2, r1
 80056b6:	60da      	str	r2, [r3, #12]
 80056b8:	e7e9      	b.n	800568e <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80056ba:	f8d3 e000 	ldr.w	lr, [r3]
 80056be:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80056c0:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 80056c4:	ea4e 0e06 	orr.w	lr, lr, r6
 80056c8:	f8c3 e000 	str.w	lr, [r3]
 80056cc:	e7b1      	b.n	8005632 <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80056ce:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80056d2:	d006      	beq.n	80056e2 <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d1a1      	bne.n	800561c <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80056d8:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 80056dc:	d002      	beq.n	80056e4 <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80056de:	4689      	mov	r9, r1
 80056e0:	e7a1      	b.n	8005626 <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80056e2:	b9cd      	cbnz	r5, 8005718 <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80056e4:	681e      	ldr	r6, [r3, #0]
 80056e6:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 80056ea:	601e      	str	r6, [r3, #0]
 80056ec:	e796      	b.n	800561c <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
 80056ee:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80056f0:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80056f4:	f7fd f8d8 	bl	80028a8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80056f8:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80056fa:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80056fc:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8005700:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005702:	e77b      	b.n	80055fc <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005704:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005706:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800570a:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 800570c:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 800570e:	fb05 1101 	mla	r1, r5, r1, r1
 8005712:	e769      	b.n	80055e8 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8005714:	2001      	movs	r0, #1
}
 8005716:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005718:	4689      	mov	r9, r1
 800571a:	e782      	b.n	8005622 <HAL_SPI_Init+0xa6>
 800571c:	40013000 	.word	0x40013000
 8005720:	40003800 	.word	0x40003800

08005724 <HAL_SPI_Transmit>:
{
 8005724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005728:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800572a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800572e:	2b01      	cmp	r3, #1
 8005730:	f000 8084 	beq.w	800583c <HAL_SPI_Transmit+0x118>
 8005734:	2301      	movs	r3, #1
 8005736:	4604      	mov	r4, r0
 8005738:	4690      	mov	r8, r2
 800573a:	4689      	mov	r9, r1
 800573c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005740:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 8005742:	f7fd fd6d 	bl	8003220 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005746:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800574a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800574c:	2b01      	cmp	r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	d16d      	bne.n	800582e <HAL_SPI_Transmit+0x10a>
  if ((pData == NULL) || (Size == 0UL))
 8005752:	f1b9 0f00 	cmp.w	r9, #0
 8005756:	f000 80fc 	beq.w	8005952 <HAL_SPI_Transmit+0x22e>
 800575a:	fab8 f388 	clz	r3, r8
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	f1b8 0f00 	cmp.w	r8, #0
 8005764:	f000 80f5 	beq.w	8005952 <HAL_SPI_Transmit+0x22e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005768:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 800576a:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800576c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005770:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005774:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferCount = Size;
 8005778:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t) 0UL;
 800577c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SPI_1LINE_TX(hspi);
 8005780:	6821      	ldr	r1, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005782:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005786:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800578a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005794:	f000 8148 	beq.w	8005a28 <HAL_SPI_Transmit+0x304>
    SPI_2LINES_TX(hspi);
 8005798:	68cb      	ldr	r3, [r1, #12]
 800579a:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800579e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a2:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80057a4:	684a      	ldr	r2, [r1, #4]
 80057a6:	4ba9      	ldr	r3, [pc, #676]	; (8005a4c <HAL_SPI_Transmit+0x328>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	ea43 0308 	orr.w	r3, r3, r8
 80057ae:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 80057b0:	680b      	ldr	r3, [r1, #0]
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057be:	d103      	bne.n	80057c8 <HAL_SPI_Transmit+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80057c0:	680b      	ldr	r3, [r1, #0]
 80057c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057c6:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80057c8:	68e3      	ldr	r3, [r4, #12]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	d875      	bhi.n	80058ba <HAL_SPI_Transmit+0x196>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057ce:	2b07      	cmp	r3, #7
    while (hspi->TxXferCount > 0UL)
 80057d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80057d4:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d6:	d952      	bls.n	800587e <HAL_SPI_Transmit+0x15a>
    while (hspi->TxXferCount > 0UL)
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8115 	beq.w	8005a08 <HAL_SPI_Transmit+0x2e4>
 80057de:	b9cd      	cbnz	r5, 8005814 <HAL_SPI_Transmit+0xf0>
 80057e0:	e0d5      	b.n	800598e <HAL_SPI_Transmit+0x26a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80057e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f240 80e7 	bls.w	80059bc <HAL_SPI_Transmit+0x298>
 80057ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80e3 	beq.w	80059bc <HAL_SPI_Transmit+0x298>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057fc:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80057fe:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005800:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005804:	3b02      	subs	r3, #2
 8005806:	b29b      	uxth	r3, r3
 8005808:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 800580c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005810:	b29b      	uxth	r3, r3
 8005812:	b303      	cbz	r3, 8005856 <HAL_SPI_Transmit+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005814:	694b      	ldr	r3, [r1, #20]
 8005816:	0798      	lsls	r0, r3, #30
 8005818:	d4e3      	bmi.n	80057e2 <HAL_SPI_Transmit+0xbe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581a:	f7fd fd01 	bl	8003220 <HAL_GetTick>
 800581e:	1b80      	subs	r0, r0, r6
 8005820:	4285      	cmp	r5, r0
 8005822:	d802      	bhi.n	800582a <HAL_SPI_Transmit+0x106>
 8005824:	1c69      	adds	r1, r5, #1
 8005826:	f040 8081 	bne.w	800592c <HAL_SPI_Transmit+0x208>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800582a:	6821      	ldr	r1, [r4, #0]
 800582c:	e7ee      	b.n	800580c <HAL_SPI_Transmit+0xe8>
    __HAL_UNLOCK(hspi);
 800582e:	2300      	movs	r3, #0
    return errorcode;
 8005830:	2202      	movs	r2, #2
    __HAL_UNLOCK(hspi);
 8005832:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005836:	4610      	mov	r0, r2
 8005838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800583c:	2202      	movs	r2, #2
}
 800583e:	4610      	mov	r0, r2
 8005840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005844:	f7fd fcec 	bl	8003220 <HAL_GetTick>
 8005848:	1b80      	subs	r0, r0, r6
 800584a:	4285      	cmp	r5, r0
 800584c:	d802      	bhi.n	8005854 <HAL_SPI_Transmit+0x130>
 800584e:	1c6a      	adds	r2, r5, #1
 8005850:	f040 80e3 	bne.w	8005a1a <HAL_SPI_Transmit+0x2f6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005854:	6821      	ldr	r1, [r4, #0]
 8005856:	694b      	ldr	r3, [r1, #20]
 8005858:	0719      	lsls	r1, r3, #28
 800585a:	d5f3      	bpl.n	8005844 <HAL_SPI_Transmit+0x120>
  SPI_CloseTransfer(hspi);
 800585c:	4620      	mov	r0, r4
 800585e:	f7ff fe31 	bl	80054c4 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8005862:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005864:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005866:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800586a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800586e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	bf18      	it	ne
 8005876:	2201      	movne	r2, #1
}
 8005878:	4610      	mov	r0, r2
 800587a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (hspi->TxXferCount > 0UL)
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80c2 	beq.w	8005a08 <HAL_SPI_Transmit+0x2e4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005884:	694b      	ldr	r3, [r1, #20]
 8005886:	079b      	lsls	r3, r3, #30
 8005888:	f140 80b3 	bpl.w	80059f2 <HAL_SPI_Transmit+0x2ce>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800588c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b03      	cmp	r3, #3
 8005894:	d97f      	bls.n	8005996 <HAL_SPI_Transmit+0x272>
 8005896:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d97c      	bls.n	8005996 <HAL_SPI_Transmit+0x272>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800589c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800589e:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a2:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058a4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80058a6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80058aa:	3b04      	subs	r3, #4
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 80058b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	e7e1      	b.n	800587e <HAL_SPI_Transmit+0x15a>
    while (hspi->TxXferCount > 0UL)
 80058ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80a1 	beq.w	8005a08 <HAL_SPI_Transmit+0x2e4>
 80058c6:	b985      	cbnz	r5, 80058ea <HAL_SPI_Transmit+0x1c6>
 80058c8:	e02b      	b.n	8005922 <HAL_SPI_Transmit+0x1fe>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80058ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058d0:	620a      	str	r2, [r1, #32]
        hspi->TxXferCount--;
 80058d2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80058d6:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 80058d8:	3a01      	subs	r2, #1
 80058da:	b292      	uxth	r2, r2
 80058dc:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 80058e0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80058e4:	b292      	uxth	r2, r2
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d0b5      	beq.n	8005856 <HAL_SPI_Transmit+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058ea:	694b      	ldr	r3, [r1, #20]
 80058ec:	079b      	lsls	r3, r3, #30
 80058ee:	d4ec      	bmi.n	80058ca <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f0:	f7fd fc96 	bl	8003220 <HAL_GetTick>
 80058f4:	1b80      	subs	r0, r0, r6
 80058f6:	4285      	cmp	r5, r0
 80058f8:	d801      	bhi.n	80058fe <HAL_SPI_Transmit+0x1da>
 80058fa:	1c6f      	adds	r7, r5, #1
 80058fc:	d116      	bne.n	800592c <HAL_SPI_Transmit+0x208>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	e7ee      	b.n	80058e0 <HAL_SPI_Transmit+0x1bc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005902:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005904:	f852 3b04 	ldr.w	r3, [r2], #4
 8005908:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 800590a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800590e:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005910:	3b01      	subs	r3, #1
 8005912:	b29b      	uxth	r3, r3
 8005914:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8005918:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d075      	beq.n	8005a0e <HAL_SPI_Transmit+0x2ea>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005922:	694b      	ldr	r3, [r1, #20]
 8005924:	079d      	lsls	r5, r3, #30
 8005926:	d4ec      	bmi.n	8005902 <HAL_SPI_Transmit+0x1de>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005928:	f7fd fc7a 	bl	8003220 <HAL_GetTick>
          SPI_CloseTransfer(hspi);
 800592c:	4620      	mov	r0, r4
 800592e:	f7ff fdc9 	bl	80054c4 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005932:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005936:	2101      	movs	r1, #1
          __HAL_UNLOCK(hspi);
 8005938:	2400      	movs	r4, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800593a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
          return HAL_TIMEOUT;
 800593e:	2203      	movs	r2, #3
          __HAL_UNLOCK(hspi);
 8005940:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005944:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005948:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
}
 800594c:	4610      	mov	r0, r2
 800594e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 8005952:	2300      	movs	r3, #0
}
 8005954:	4610      	mov	r0, r2
    __HAL_UNLOCK(hspi);
 8005956:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800595e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	d964      	bls.n	8005a32 <HAL_SPI_Transmit+0x30e>
 8005968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d061      	beq.n	8005a32 <HAL_SPI_Transmit+0x30e>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800596e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005970:	f852 3b04 	ldr.w	r3, [r2], #4
 8005974:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8005976:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800597a:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800597c:	3b02      	subs	r3, #2
 800597e:	b29b      	uxth	r3, r3
 8005980:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8005984:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d03f      	beq.n	8005a0e <HAL_SPI_Transmit+0x2ea>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800598e:	694b      	ldr	r3, [r1, #20]
 8005990:	079a      	lsls	r2, r3, #30
 8005992:	d5c9      	bpl.n	8005928 <HAL_SPI_Transmit+0x204>
 8005994:	e7e3      	b.n	800595e <HAL_SPI_Transmit+0x23a>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005996:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d919      	bls.n	80059d4 <HAL_SPI_Transmit+0x2b0>
 80059a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059a2:	b1bb      	cbz	r3, 80059d4 <HAL_SPI_Transmit+0x2b0>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80059a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059a6:	f833 2b02 	ldrh.w	r2, [r3], #2
 80059aa:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ac:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80059ae:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80059b2:	3b02      	subs	r3, #2
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80059ba:	e77a      	b.n	80058b2 <HAL_SPI_Transmit+0x18e>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80059bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059be:	f833 2b02 	ldrh.w	r2, [r3], #2
 80059c2:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80059c6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80059d2:	e71b      	b.n	800580c <HAL_SPI_Transmit+0xe8>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80059dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059de:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80059e0:	3301      	adds	r3, #1
 80059e2:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80059e4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80059f0:	e75f      	b.n	80058b2 <HAL_SPI_Transmit+0x18e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f2:	f7fd fc15 	bl	8003220 <HAL_GetTick>
 80059f6:	1b80      	subs	r0, r0, r6
 80059f8:	42a8      	cmp	r0, r5
 80059fa:	d301      	bcc.n	8005a00 <HAL_SPI_Transmit+0x2dc>
 80059fc:	1c68      	adds	r0, r5, #1
 80059fe:	d195      	bne.n	800592c <HAL_SPI_Transmit+0x208>
 8005a00:	2d00      	cmp	r5, #0
 8005a02:	d093      	beq.n	800592c <HAL_SPI_Transmit+0x208>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a04:	6821      	ldr	r1, [r4, #0]
 8005a06:	e754      	b.n	80058b2 <HAL_SPI_Transmit+0x18e>
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	f47f af24 	bne.w	8005856 <HAL_SPI_Transmit+0x132>
 8005a0e:	694b      	ldr	r3, [r1, #20]
 8005a10:	071b      	lsls	r3, r3, #28
 8005a12:	f53f af23 	bmi.w	800585c <HAL_SPI_Transmit+0x138>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a16:	f7fd fc03 	bl	8003220 <HAL_GetTick>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a1a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005a1e:	f043 0320 	orr.w	r3, r3, #32
 8005a22:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8005a26:	e719      	b.n	800585c <HAL_SPI_Transmit+0x138>
    SPI_1LINE_TX(hspi);
 8005a28:	680b      	ldr	r3, [r1, #0]
 8005a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a2e:	600b      	str	r3, [r1, #0]
 8005a30:	e6b8      	b.n	80057a4 <HAL_SPI_Transmit+0x80>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a34:	f832 3b02 	ldrh.w	r3, [r2], #2
 8005a38:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount--;
 8005a3a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3e:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8005a48:	e79c      	b.n	8005984 <HAL_SPI_Transmit+0x260>
 8005a4a:	bf00      	nop
 8005a4c:	ffff0000 	.word	0xffff0000

08005a50 <HAL_SPI_TransmitReceive>:
{
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005a56:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8005a5a:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8005a5c:	2b01      	cmp	r3, #1
{
 8005a5e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8005a62:	f000 80bd 	beq.w	8005be0 <HAL_SPI_TransmitReceive+0x190>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	4693      	mov	fp, r2
 8005a6e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005a72:	6803      	ldr	r3, [r0, #0]
 8005a74:	9301      	str	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8005a76:	f7fd fbd3 	bl	8003220 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a7a:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8005a7e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a80:	2901      	cmp	r1, #1
 8005a82:	b2cb      	uxtb	r3, r1
 8005a84:	f040 80a4 	bne.w	8005bd0 <HAL_SPI_TransmitReceive+0x180>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005a88:	f1bb 0f00 	cmp.w	fp, #0
 8005a8c:	bf18      	it	ne
 8005a8e:	f1b9 0f00 	cmpne.w	r9, #0
 8005a92:	f000 8096 	beq.w	8005bc2 <HAL_SPI_TransmitReceive+0x172>
 8005a96:	fab5 f185 	clz	r1, r5
 8005a9a:	0949      	lsrs	r1, r1, #5
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	f000 8090 	beq.w	8005bc2 <HAL_SPI_TransmitReceive+0x172>
  SPI_2LINES(hspi);
 8005aa2:	6826      	ldr	r6, [r4, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005aa4:	2305      	movs	r3, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005aa6:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005aaa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aae:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8005ab2:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 8005ab6:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  SPI_2LINES(hspi);
 8005aba:	68f3      	ldr	r3, [r6, #12]
  hspi->RxXferSize  = Size;
 8005abc:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  SPI_2LINES(hspi);
 8005ac0:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005ac4:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005ac8:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8005acc:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  SPI_2LINES(hspi);
 8005ad0:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ad2:	4ba3      	ldr	r3, [pc, #652]	; (8005d60 <HAL_SPI_TransmitReceive+0x310>)
 8005ad4:	6871      	ldr	r1, [r6, #4]
 8005ad6:	400b      	ands	r3, r1
 8005ad8:	432b      	orrs	r3, r5
 8005ada:	6073      	str	r3, [r6, #4]
  __HAL_SPI_ENABLE(hspi);
 8005adc:	6833      	ldr	r3, [r6, #0]
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	6033      	str	r3, [r6, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aea:	f000 80bb 	beq.w	8005c64 <HAL_SPI_TransmitReceive+0x214>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aee:	f118 0a01 	adds.w	sl, r8, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005af2:	68e3      	ldr	r3, [r4, #12]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af4:	bf18      	it	ne
 8005af6:	f04f 0a01 	movne.w	sl, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d875      	bhi.n	8005bea <HAL_SPI_TransmitReceive+0x19a>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005afe:	2b07      	cmp	r3, #7
 8005b00:	f240 80ed 	bls.w	8005cde <HAL_SPI_TransmitReceive+0x28e>
 8005b04:	f1b8 0f00 	cmp.w	r8, #0
 8005b08:	f000 812c 	beq.w	8005d64 <HAL_SPI_TransmitReceive+0x314>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b0c:	46a9      	mov	r9, r5
 8005b0e:	e000      	b.n	8005b12 <HAL_SPI_TransmitReceive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005b10:	6826      	ldr	r6, [r4, #0]
 8005b12:	6973      	ldr	r3, [r6, #20]
 8005b14:	079b      	lsls	r3, r3, #30
 8005b16:	d50f      	bpl.n	8005b38 <HAL_SPI_TransmitReceive+0xe8>
 8005b18:	b175      	cbz	r5, 8005b38 <HAL_SPI_TransmitReceive+0xe8>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b1c:	9901      	ldr	r1, [sp, #4]
 8005b1e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005b22:	840a      	strh	r2, [r1, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b24:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005b26:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005b32:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005b36:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005b38:	6973      	ldr	r3, [r6, #20]
 8005b3a:	07d8      	lsls	r0, r3, #31
 8005b3c:	d512      	bpl.n	8005b64 <HAL_SPI_TransmitReceive+0x114>
 8005b3e:	f1b9 0f00 	cmp.w	r9, #0
 8005b42:	d00f      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x114>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b44:	9b01      	ldr	r3, [sp, #4]
 8005b46:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8005b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b4a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b4e:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005b50:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005b5c:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005b60:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b64:	f7fd fb5c 	bl	8003220 <HAL_GetTick>
 8005b68:	1bc0      	subs	r0, r0, r7
 8005b6a:	4580      	cmp	r8, r0
 8005b6c:	d803      	bhi.n	8005b76 <HAL_SPI_TransmitReceive+0x126>
 8005b6e:	f1ba 0f00 	cmp.w	sl, #0
 8005b72:	f040 80a0 	bne.w	8005cb6 <HAL_SPI_TransmitReceive+0x266>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b76:	ea45 0309 	orr.w	r3, r5, r9
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1c7      	bne.n	8005b10 <HAL_SPI_TransmitReceive+0xc0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	071b      	lsls	r3, r3, #28
 8005b86:	d40d      	bmi.n	8005ba4 <HAL_SPI_TransmitReceive+0x154>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b88:	f7fd fb4a 	bl	8003220 <HAL_GetTick>
 8005b8c:	1bc0      	subs	r0, r0, r7
 8005b8e:	4580      	cmp	r8, r0
 8005b90:	d8f6      	bhi.n	8005b80 <HAL_SPI_TransmitReceive+0x130>
 8005b92:	f1ba 0f00 	cmp.w	sl, #0
 8005b96:	d0f3      	beq.n	8005b80 <HAL_SPI_TransmitReceive+0x130>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005b9c:	f043 0320 	orr.w	r3, r3, #32
 8005ba0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7ff fc8d 	bl	80054c4 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8005baa:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8005bac:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005bae:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bb2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8005bb6:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	bf18      	it	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	e002      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x178>
    __HAL_UNLOCK(hspi);
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	b003      	add	sp, #12
 8005bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return errorcode;
 8005bd0:	2302      	movs	r3, #2
    __HAL_UNLOCK(hspi);
 8005bd2:	2200      	movs	r2, #0
}
 8005bd4:	4618      	mov	r0, r3
    __HAL_UNLOCK(hspi);
 8005bd6:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8005bda:	b003      	add	sp, #12
 8005bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hspi);
 8005be0:	2302      	movs	r3, #2
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	b003      	add	sp, #12
 8005be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bea:	f1b8 0f00 	cmp.w	r8, #0
 8005bee:	d03e      	beq.n	8005c6e <HAL_SPI_TransmitReceive+0x21e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf0:	46a9      	mov	r9, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005bf2:	f248 0b08 	movw	fp, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005bf6:	6973      	ldr	r3, [r6, #20]
 8005bf8:	0799      	lsls	r1, r3, #30
 8005bfa:	d50e      	bpl.n	8005c1a <HAL_SPI_TransmitReceive+0x1ca>
 8005bfc:	b16d      	cbz	r5, 8005c1a <HAL_SPI_TransmitReceive+0x1ca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005bfe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c04:	6232      	str	r2, [r6, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c06:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8005c08:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c14:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005c18:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005c1a:	6973      	ldr	r3, [r6, #20]
 8005c1c:	ea13 0f0b 	tst.w	r3, fp
 8005c20:	d011      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x1f6>
 8005c22:	f1b9 0f00 	cmp.w	r9, #0
 8005c26:	d00e      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x1f6>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c28:	6b31      	ldr	r1, [r6, #48]	; 0x30
        hspi->RxXferCount --;
 8005c2a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005c30:	3b01      	subs	r3, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c32:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 8005c36:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c38:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005c3a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005c3e:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005c42:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c46:	f7fd faeb 	bl	8003220 <HAL_GetTick>
 8005c4a:	1bc0      	subs	r0, r0, r7
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c4c:	ea45 0309 	orr.w	r3, r5, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c50:	4580      	cmp	r8, r0
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c52:	b29b      	uxth	r3, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c54:	d802      	bhi.n	8005c5c <HAL_SPI_TransmitReceive+0x20c>
 8005c56:	f1ba 0f00 	cmp.w	sl, #0
 8005c5a:	d12c      	bne.n	8005cb6 <HAL_SPI_TransmitReceive+0x266>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d08f      	beq.n	8005b80 <HAL_SPI_TransmitReceive+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005c60:	6826      	ldr	r6, [r4, #0]
 8005c62:	e7c8      	b.n	8005bf6 <HAL_SPI_TransmitReceive+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005c64:	6833      	ldr	r3, [r6, #0]
 8005c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	e73f      	b.n	8005aee <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005c6e:	6973      	ldr	r3, [r6, #20]
 8005c70:	079a      	lsls	r2, r3, #30
 8005c72:	d50c      	bpl.n	8005c8e <HAL_SPI_TransmitReceive+0x23e>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005c74:	4649      	mov	r1, r9
 8005c76:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c7a:	6233      	str	r3, [r6, #32]
        hspi->TxXferCount --;
 8005c7c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c80:	65e1      	str	r1, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c8a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005c8e:	6971      	ldr	r1, [r6, #20]
 8005c90:	f248 0308 	movw	r3, #32776	; 0x8008
 8005c94:	4219      	tst	r1, r3
 8005c96:	d00c      	beq.n	8005cb2 <HAL_SPI_TransmitReceive+0x262>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c98:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8005c9a:	465a      	mov	r2, fp
        hspi->RxXferCount --;
 8005c9c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ca0:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 8005ca4:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ca6:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005cae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cb2:	f7fd fab5 	bl	8003220 <HAL_GetTick>
        SPI_CloseTransfer(hspi);
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f7ff fc04 	bl	80054c4 <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cbc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 8005cc2:	2400      	movs	r4, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
        __HAL_UNLOCK(hspi);
 8005cca:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cce:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005cd2:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	b003      	add	sp, #12
 8005cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cde:	f1b8 0f00 	cmp.w	r8, #0
 8005ce2:	d062      	beq.n	8005daa <HAL_SPI_TransmitReceive+0x35a>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ce4:	46a9      	mov	r9, r5
 8005ce6:	e000      	b.n	8005cea <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005ce8:	6826      	ldr	r6, [r4, #0]
 8005cea:	6973      	ldr	r3, [r6, #20]
 8005cec:	079b      	lsls	r3, r3, #30
 8005cee:	d511      	bpl.n	8005d14 <HAL_SPI_TransmitReceive+0x2c4>
 8005cf0:	b185      	cbz	r5, 8005d14 <HAL_SPI_TransmitReceive+0x2c4>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cf2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f886 3020 	strb.w	r3, [r6, #32]
        hspi->TxXferCount--;
 8005cfa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005cfe:	6826      	ldr	r6, [r4, #0]
        hspi->TxXferCount--;
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        initial_TxXferCount = hspi->TxXferCount;
 8005d0a:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d0e:	3301      	adds	r3, #1
        initial_TxXferCount = hspi->TxXferCount;
 8005d10:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d12:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005d14:	6973      	ldr	r3, [r6, #20]
 8005d16:	07d8      	lsls	r0, r3, #31
 8005d18:	d513      	bpl.n	8005d42 <HAL_SPI_TransmitReceive+0x2f2>
 8005d1a:	f1b9 0f00 	cmp.w	r9, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_SPI_TransmitReceive+0x2f2>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d20:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8005d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d26:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005d28:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
        initial_RxXferCount = hspi->RxXferCount;
 8005d36:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d3a:	3301      	adds	r3, #1
        initial_RxXferCount = hspi->RxXferCount;
 8005d3c:	fa1f f989 	uxth.w	r9, r9
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d40:	6663      	str	r3, [r4, #100]	; 0x64
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d42:	f7fd fa6d 	bl	8003220 <HAL_GetTick>
 8005d46:	1bc0      	subs	r0, r0, r7
 8005d48:	4580      	cmp	r8, r0
 8005d4a:	d802      	bhi.n	8005d52 <HAL_SPI_TransmitReceive+0x302>
 8005d4c:	f1ba 0f00 	cmp.w	sl, #0
 8005d50:	d1b1      	bne.n	8005cb6 <HAL_SPI_TransmitReceive+0x266>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d52:	ea45 0309 	orr.w	r3, r5, r9
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1c5      	bne.n	8005ce8 <HAL_SPI_TransmitReceive+0x298>
 8005d5c:	e710      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x130>
 8005d5e:	bf00      	nop
 8005d60:	ffff0000 	.word	0xffff0000
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005d64:	6973      	ldr	r3, [r6, #20]
 8005d66:	0799      	lsls	r1, r3, #30
 8005d68:	d50d      	bpl.n	8005d86 <HAL_SPI_TransmitReceive+0x336>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	9a01      	ldr	r2, [sp, #4]
 8005d6e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005d72:	8413      	strh	r3, [r2, #32]
        hspi->TxXferCount--;
 8005d74:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d78:	65e1      	str	r1, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d82:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005d86:	6973      	ldr	r3, [r6, #20]
 8005d88:	07da      	lsls	r2, r3, #31
 8005d8a:	d592      	bpl.n	8005cb2 <HAL_SPI_TransmitReceive+0x262>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	465a      	mov	r2, fp
 8005d90:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005d92:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8005d96:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d9a:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005da4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005da8:	e783      	b.n	8005cb2 <HAL_SPI_TransmitReceive+0x262>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005daa:	6973      	ldr	r3, [r6, #20]
 8005dac:	0799      	lsls	r1, r3, #30
 8005dae:	d50f      	bpl.n	8005dd0 <HAL_SPI_TransmitReceive+0x380>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005db0:	f899 3000 	ldrb.w	r3, [r9]
 8005db4:	f886 3020 	strb.w	r3, [r6, #32]
        hspi->TxXferCount--;
 8005db8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dbc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005dbe:	3b01      	subs	r3, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005dc0:	6826      	ldr	r6, [r4, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dc2:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005dc4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dc6:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005dc8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005dcc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005dd0:	6973      	ldr	r3, [r6, #20]
 8005dd2:	07da      	lsls	r2, r3, #31
 8005dd4:	f57f af6d 	bpl.w	8005cb2 <HAL_SPI_TransmitReceive+0x262>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005dd8:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8005ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dde:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005de0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005de4:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005de6:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005de8:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8005dea:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dec:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005dee:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005df2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005df6:	e75c      	b.n	8005cb2 <HAL_SPI_TransmitReceive+0x262>

08005df8 <HAL_SPI_TxCpltCallback>:
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop

08005dfc <HAL_SPI_RxCpltCallback>:
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop

08005e00 <HAL_SPI_TxRxCpltCallback>:
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop

08005e04 <HAL_SPI_ErrorCallback>:
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop

08005e08 <SPI_DMAAbortOnError>:
{
 8005e08:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8005e0c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005e0e:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8005e10:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005e14:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8005e18:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8005e1c:	f7ff fff2 	bl	8005e04 <HAL_SPI_ErrorCallback>
}
 8005e20:	bd08      	pop	{r3, pc}
 8005e22:	bf00      	nop

08005e24 <HAL_SPI_SuspendCallback>:
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop

08005e28 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 8005e28:	6803      	ldr	r3, [r0, #0]
 8005e2a:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8005e2c:	695a      	ldr	r2, [r3, #20]
{
 8005e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005e32:	689f      	ldr	r7, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 8005e34:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 8005e38:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005e3c:	0512      	lsls	r2, r2, #20
{
 8005e3e:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 8005e40:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005e42:	d502      	bpl.n	8005e4a <HAL_SPI_IRQHandler+0x22>
 8005e44:	0709      	lsls	r1, r1, #28
 8005e46:	f100 80d2 	bmi.w	8005fee <HAL_SPI_IRQHandler+0x1c6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005e4a:	f005 0264 	and.w	r2, r5, #100	; 0x64
 8005e4e:	2a04      	cmp	r2, #4
 8005e50:	d03e      	beq.n	8005ed0 <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005e52:	f005 0245 	and.w	r2, r5, #69	; 0x45
 8005e56:	2a01      	cmp	r2, #1
 8005e58:	d044      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005e5a:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8005e5e:	2a02      	cmp	r2, #2
 8005e60:	f000 80dc 	beq.w	800601c <HAL_SPI_IRQHandler+0x1f4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005e64:	072a      	lsls	r2, r5, #28
 8005e66:	d55c      	bpl.n	8005f22 <HAL_SPI_IRQHandler+0xfa>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	f042 0208 	orr.w	r2, r2, #8
 8005e6e:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	f042 0210 	orr.w	r2, r2, #16
 8005e76:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e7e:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	f022 0208 	bic.w	r2, r2, #8
 8005e86:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8005e8e:	d133      	bne.n	8005ef8 <HAL_SPI_IRQHandler+0xd0>
      while (hspi->RxXferCount != 0UL)
 8005e90:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005e94:	b292      	uxth	r2, r2
 8005e96:	b37a      	cbz	r2, 8005ef8 <HAL_SPI_IRQHandler+0xd0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e98:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005e9a:	e00e      	b.n	8005eba <HAL_SPI_IRQHandler+0x92>
 8005e9c:	6822      	ldr	r2, [r4, #0]
 8005e9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ea0:	f841 2b04 	str.w	r2, [r1], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ea4:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005ea6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005eaa:	3a01      	subs	r2, #1
 8005eac:	b292      	uxth	r2, r2
 8005eae:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005eb2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005eb6:	b292      	uxth	r2, r2
 8005eb8:	b1f2      	cbz	r2, 8005ef8 <HAL_SPI_IRQHandler+0xd0>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005eba:	68e2      	ldr	r2, [r4, #12]
 8005ebc:	2a0f      	cmp	r2, #15
 8005ebe:	d8ed      	bhi.n	8005e9c <HAL_SPI_IRQHandler+0x74>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ec0:	2a07      	cmp	r2, #7
 8005ec2:	f240 80a3 	bls.w	800600c <HAL_SPI_IRQHandler+0x1e4>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ec6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8005ec8:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ecc:	6661      	str	r1, [r4, #100]	; 0x64
 8005ece:	e7ea      	b.n	8005ea6 <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005ed4:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005ed6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005edc:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d102      	bne.n	8005eea <HAL_SPI_IRQHandler+0xc2>
    hspi->RxISR(hspi);
 8005ee4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005eea:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8005eee:	2d02      	cmp	r5, #2
 8005ef0:	f000 8094 	beq.w	800601c <HAL_SPI_IRQHandler+0x1f4>
}
 8005ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff fae3 	bl	80054c4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f04:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d17c      	bne.n	8006006 <HAL_SPI_IRQHandler+0x1de>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005f0c:	2e05      	cmp	r6, #5
 8005f0e:	f000 808a 	beq.w	8006026 <HAL_SPI_IRQHandler+0x1fe>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005f12:	2e04      	cmp	r6, #4
 8005f14:	f000 808a 	beq.w	800602c <HAL_SPI_IRQHandler+0x204>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005f18:	2e03      	cmp	r6, #3
 8005f1a:	d1eb      	bne.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
      HAL_SPI_TxCpltCallback(hspi);
 8005f1c:	f7ff ff6c 	bl	8005df8 <HAL_SPI_TxCpltCallback>
 8005f20:	e7e8      	b.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005f22:	f415 7f58 	tst.w	r5, #864	; 0x360
 8005f26:	d0e5      	beq.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005f28:	066e      	lsls	r6, r5, #25
 8005f2a:	d509      	bpl.n	8005f40 <HAL_SPI_IRQHandler+0x118>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f2c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005f30:	f042 0204 	orr.w	r2, r2, #4
 8005f34:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3e:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005f40:	05a8      	lsls	r0, r5, #22
 8005f42:	d509      	bpl.n	8005f58 <HAL_SPI_IRQHandler+0x130>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f44:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f56:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005f58:	05e9      	lsls	r1, r5, #23
 8005f5a:	d509      	bpl.n	8005f70 <HAL_SPI_IRQHandler+0x148>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f5c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005f60:	f042 0208 	orr.w	r2, r2, #8
 8005f64:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f6e:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005f70:	06aa      	lsls	r2, r5, #26
 8005f72:	d509      	bpl.n	8005f88 <HAL_SPI_IRQHandler+0x160>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005f74:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f7c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	f042 0220 	orr.w	r2, r2, #32
 8005f86:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f88:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	d0b1      	beq.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
      __HAL_SPI_DISABLE(hspi);
 8005f90:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005f92:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005f96:	4a27      	ldr	r2, [pc, #156]	; (8006034 <HAL_SPI_IRQHandler+0x20c>)
      __HAL_SPI_DISABLE(hspi);
 8005f98:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005f9c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8005fa0:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005fa2:	6919      	ldr	r1, [r3, #16]
 8005fa4:	ea02 0201 	and.w	r2, r2, r1
 8005fa8:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005faa:	d128      	bne.n	8005ffe <HAL_SPI_IRQHandler+0x1d6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005fac:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 8005fae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005fb0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005fb4:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 8005fb6:	b150      	cbz	r0, 8005fce <HAL_SPI_IRQHandler+0x1a6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fb8:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <HAL_SPI_IRQHandler+0x210>)
 8005fba:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005fbc:	f7fd f9ac 	bl	8003318 <HAL_DMA_Abort_IT>
 8005fc0:	b128      	cbz	r0, 8005fce <HAL_SPI_IRQHandler+0x1a6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fc2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8005fce:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d08f      	beq.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fd4:	4b18      	ldr	r3, [pc, #96]	; (8006038 <HAL_SPI_IRQHandler+0x210>)
 8005fd6:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005fd8:	f7fd f99e 	bl	8003318 <HAL_DMA_Abort_IT>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d089      	beq.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fe0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8005fec:	e782      	b.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff4:	619a      	str	r2, [r3, #24]
    HAL_SPI_SuspendCallback(hspi);
 8005ff6:	f7ff ff15 	bl	8005e24 <HAL_SPI_SuspendCallback>
}
 8005ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8005ffe:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006000:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8006002:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006006:	f7ff fefd 	bl	8005e04 <HAL_SPI_ErrorCallback>
 800600a:	e773      	b.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006012:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006014:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006016:	3101      	adds	r1, #1
 8006018:	6661      	str	r1, [r4, #100]	; 0x64
 800601a:	e744      	b.n	8005ea6 <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 800601c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800601e:	4620      	mov	r0, r4
}
 8006020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006024:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 8006026:	f7ff feeb 	bl	8005e00 <HAL_SPI_TxRxCpltCallback>
 800602a:	e763      	b.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
      HAL_SPI_RxCpltCallback(hspi);
 800602c:	f7ff fee6 	bl	8005dfc <HAL_SPI_RxCpltCallback>
 8006030:	e760      	b.n	8005ef4 <HAL_SPI_IRQHandler+0xcc>
 8006032:	bf00      	nop
 8006034:	fffffc94 	.word	0xfffffc94
 8006038:	08005e09 	.word	0x08005e09

0800603c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop

08006040 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006040:	2800      	cmp	r0, #0
 8006042:	f000 80a5 	beq.w	8006190 <HAL_TIM_Base_Init+0x150>
{
 8006046:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006048:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800604c:	4604      	mov	r4, r0
 800604e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006052:	2b00      	cmp	r3, #0
 8006054:	d076      	beq.n	8006144 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006056:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605a:	494e      	ldr	r1, [pc, #312]	; (8006194 <HAL_TIM_Base_Init+0x154>)
 800605c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006064:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8006068:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800606a:	fab1 f181 	clz	r1, r1
 800606e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8006072:	d027      	beq.n	80060c4 <HAL_TIM_Base_Init+0x84>
 8006074:	bb31      	cbnz	r1, 80060c4 <HAL_TIM_Base_Init+0x84>
 8006076:	4848      	ldr	r0, [pc, #288]	; (8006198 <HAL_TIM_Base_Init+0x158>)
 8006078:	4d48      	ldr	r5, [pc, #288]	; (800619c <HAL_TIM_Base_Init+0x15c>)
 800607a:	4282      	cmp	r2, r0
 800607c:	d067      	beq.n	800614e <HAL_TIM_Base_Init+0x10e>
 800607e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006082:	4282      	cmp	r2, r0
 8006084:	d063      	beq.n	800614e <HAL_TIM_Base_Init+0x10e>
 8006086:	1b55      	subs	r5, r2, r5
 8006088:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800608c:	fab5 f585 	clz	r5, r5
 8006090:	4282      	cmp	r2, r0
 8006092:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8006096:	d063      	beq.n	8006160 <HAL_TIM_Base_Init+0x120>
 8006098:	2d00      	cmp	r5, #0
 800609a:	d161      	bne.n	8006160 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609c:	4840      	ldr	r0, [pc, #256]	; (80061a0 <HAL_TIM_Base_Init+0x160>)
 800609e:	4941      	ldr	r1, [pc, #260]	; (80061a4 <HAL_TIM_Base_Init+0x164>)
 80060a0:	428a      	cmp	r2, r1
 80060a2:	bf18      	it	ne
 80060a4:	4282      	cmpne	r2, r0
 80060a6:	d065      	beq.n	8006174 <HAL_TIM_Base_Init+0x134>
 80060a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060ac:	428a      	cmp	r2, r1
 80060ae:	d061      	beq.n	8006174 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b0:	69a0      	ldr	r0, [r4, #24]
 80060b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80060ba:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060bc:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060be:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060c0:	6293      	str	r3, [r2, #40]	; 0x28
 80060c2:	e023      	b.n	800610c <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c4:	4d35      	ldr	r5, [pc, #212]	; (800619c <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80060ca:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060cc:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 80060ce:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d0:	fab5 f585 	clz	r5, r5
 80060d4:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060d6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060dc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060de:	69a0      	ldr	r0, [r4, #24]
 80060e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80060e6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e8:	68e3      	ldr	r3, [r4, #12]
 80060ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f0:	b951      	cbnz	r1, 8006108 <HAL_TIM_Base_Init+0xc8>
 80060f2:	b94d      	cbnz	r5, 8006108 <HAL_TIM_Base_Init+0xc8>
 80060f4:	492a      	ldr	r1, [pc, #168]	; (80061a0 <HAL_TIM_Base_Init+0x160>)
 80060f6:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <HAL_TIM_Base_Init+0x164>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	bf18      	it	ne
 80060fc:	428a      	cmpne	r2, r1
 80060fe:	d003      	beq.n	8006108 <HAL_TIM_Base_Init+0xc8>
 8006100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006104:	429a      	cmp	r2, r3
 8006106:	d101      	bne.n	800610c <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006108:	6963      	ldr	r3, [r4, #20]
 800610a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800610c:	2301      	movs	r3, #1
  return HAL_OK;
 800610e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8006110:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006112:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006116:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800611a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800611e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006122:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800612a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006136:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800613a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800613e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006142:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8006144:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006148:	f7ff ff78 	bl	800603c <HAL_TIM_Base_MspInit>
 800614c:	e783      	b.n	8006056 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800614e:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006154:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006156:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800615a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800615c:	096d      	lsrs	r5, r5, #5
 800615e:	e7ba      	b.n	80060d6 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 8006160:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006166:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006168:	480f      	ldr	r0, [pc, #60]	; (80061a8 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800616a:	4282      	cmp	r2, r0
 800616c:	d0b3      	beq.n	80060d6 <HAL_TIM_Base_Init+0x96>
 800616e:	2d00      	cmp	r5, #0
 8006170:	d1b1      	bne.n	80060d6 <HAL_TIM_Base_Init+0x96>
 8006172:	e793      	b.n	800609c <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006174:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800617a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800617c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800617e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006184:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006186:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006188:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800618a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800618c:	6291      	str	r1, [r2, #40]	; 0x28
 800618e:	e7b1      	b.n	80060f4 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 8006190:	2001      	movs	r0, #1
}
 8006192:	4770      	bx	lr
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40000c00 	.word	0x40000c00

080061ac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80061ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d141      	bne.n	8006238 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061b4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80061b6:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b8:	4b24      	ldr	r3, [pc, #144]	; (800624c <HAL_TIM_Base_Start_IT+0xa0>)
 80061ba:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80061be:	bf18      	it	ne
 80061c0:	429a      	cmpne	r2, r3
{
 80061c2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c4:	bf0c      	ite	eq
 80061c6:	2301      	moveq	r3, #1
 80061c8:	2300      	movne	r3, #0
 80061ca:	4d21      	ldr	r5, [pc, #132]	; (8006250 <HAL_TIM_Base_Start_IT+0xa4>)
 80061cc:	4c21      	ldr	r4, [pc, #132]	; (8006254 <HAL_TIM_Base_Start_IT+0xa8>)
 80061ce:	42aa      	cmp	r2, r5
 80061d0:	bf08      	it	eq
 80061d2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80061d6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061da:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061dc:	42a2      	cmp	r2, r4
 80061de:	bf08      	it	eq
 80061e0:	f043 0301 	orreq.w	r3, r3, #1
 80061e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061e8:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	481a      	ldr	r0, [pc, #104]	; (8006258 <HAL_TIM_Base_Start_IT+0xac>)
 80061ee:	42a2      	cmp	r2, r4
 80061f0:	bf08      	it	eq
 80061f2:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061f6:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f8:	4282      	cmp	r2, r0
 80061fa:	bf08      	it	eq
 80061fc:	f043 0301 	orreq.w	r3, r3, #1
 8006200:	4916      	ldr	r1, [pc, #88]	; (800625c <HAL_TIM_Base_Start_IT+0xb0>)
 8006202:	428a      	cmp	r2, r1
 8006204:	bf08      	it	eq
 8006206:	f043 0301 	orreq.w	r3, r3, #1
 800620a:	b933      	cbnz	r3, 800621a <HAL_TIM_Base_Start_IT+0x6e>
 800620c:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8006210:	1a10      	subs	r0, r2, r0
 8006212:	fab0 f080 	clz	r0, r0
 8006216:	0940      	lsrs	r0, r0, #5
 8006218:	b198      	cbz	r0, 8006242 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621a:	6891      	ldr	r1, [r2, #8]
 800621c:	4b10      	ldr	r3, [pc, #64]	; (8006260 <HAL_TIM_Base_Start_IT+0xb4>)
 800621e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006220:	2b06      	cmp	r3, #6
 8006222:	d00b      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x90>
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006228:	d008      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800622a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800622c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	6013      	str	r3, [r2, #0]
}
 8006234:	bc30      	pop	{r4, r5}
 8006236:	4770      	bx	lr
    return HAL_ERROR;
 8006238:	2001      	movs	r0, #1
}
 800623a:	4770      	bx	lr
  return HAL_OK;
 800623c:	2000      	movs	r0, #0
}
 800623e:	bc30      	pop	{r4, r5}
 8006240:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e7f3      	b.n	8006234 <HAL_TIM_Base_Start_IT+0x88>
 800624c:	40010000 	.word	0x40010000
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40010400 	.word	0x40010400
 800625c:	40001800 	.word	0x40001800
 8006260:	00010007 	.word	0x00010007

08006264 <HAL_TIM_OC_DelayElapsedCallback>:
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop

08006268 <HAL_TIM_IC_CaptureCallback>:
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop

0800626c <HAL_TIM_PWM_PulseFinishedCallback>:
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop

08006270 <HAL_TIM_TriggerCallback>:
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop

08006274 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006274:	6803      	ldr	r3, [r0, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	0791      	lsls	r1, r2, #30
{
 800627a:	b510      	push	{r4, lr}
 800627c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800627e:	d502      	bpl.n	8006286 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	0792      	lsls	r2, r2, #30
 8006284:	d468      	bmi.n	8006358 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	0752      	lsls	r2, r2, #29
 800628a:	d502      	bpl.n	8006292 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	0750      	lsls	r0, r2, #29
 8006290:	d44f      	bmi.n	8006332 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	0711      	lsls	r1, r2, #28
 8006296:	d502      	bpl.n	800629e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	0712      	lsls	r2, r2, #28
 800629c:	d437      	bmi.n	800630e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	06d0      	lsls	r0, r2, #27
 80062a2:	d502      	bpl.n	80062aa <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	06d1      	lsls	r1, r2, #27
 80062a8:	d41e      	bmi.n	80062e8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	07d2      	lsls	r2, r2, #31
 80062ae:	d502      	bpl.n	80062b6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	07d0      	lsls	r0, r2, #31
 80062b4:	d469      	bmi.n	800638a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	0611      	lsls	r1, r2, #24
 80062ba:	d502      	bpl.n	80062c2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	0612      	lsls	r2, r2, #24
 80062c0:	d46b      	bmi.n	800639a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	05d0      	lsls	r0, r2, #23
 80062c6:	d502      	bpl.n	80062ce <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	0611      	lsls	r1, r2, #24
 80062cc:	d46d      	bmi.n	80063aa <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	0652      	lsls	r2, r2, #25
 80062d2:	d502      	bpl.n	80062da <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	0650      	lsls	r0, r2, #25
 80062d8:	d46f      	bmi.n	80063ba <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	0691      	lsls	r1, r2, #26
 80062de:	d502      	bpl.n	80062e6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	0692      	lsls	r2, r2, #26
 80062e4:	d449      	bmi.n	800637a <HAL_TIM_IRQHandler+0x106>
}
 80062e6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062e8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ec:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80062fa:	d16f      	bne.n	80063dc <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fc:	f7ff ffb2 	bl	8006264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	4620      	mov	r0, r4
 8006302:	f7ff ffb3 	bl	800626c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006308:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630a:	7722      	strb	r2, [r4, #28]
 800630c:	e7cd      	b.n	80062aa <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800630e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006312:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8006314:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006316:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006318:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	079b      	lsls	r3, r3, #30
 800631e:	d15a      	bne.n	80063d6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006320:	f7ff ffa0 	bl	8006264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	4620      	mov	r0, r4
 8006326:	f7ff ffa1 	bl	800626c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800632c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632e:	7722      	strb	r2, [r4, #28]
 8006330:	e7b5      	b.n	800629e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006332:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006336:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8006338:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800633a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800633c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006344:	d144      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	f7ff ff8d 	bl	8006264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634a:	4620      	mov	r0, r4
 800634c:	f7ff ff8e 	bl	800626c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006350:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006352:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006354:	7722      	strb	r2, [r4, #28]
 8006356:	e79c      	b.n	8006292 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006358:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800635e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006360:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	0799      	lsls	r1, r3, #30
 8006366:	d130      	bne.n	80063ca <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006368:	f7ff ff7c 	bl	8006264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	4620      	mov	r0, r4
 800636e:	f7ff ff7d 	bl	800626c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006374:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006376:	7722      	strb	r2, [r4, #28]
 8006378:	e785      	b.n	8006286 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800637a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800637e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006380:	611a      	str	r2, [r3, #16]
}
 8006382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006386:	f000 b82d 	b.w	80063e4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800638a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800638e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006390:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006392:	f7fb ff3b 	bl	800220c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	e78d      	b.n	80062b6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800639a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800639e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80063a2:	f000 f821 	bl	80063e8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	e78b      	b.n	80062c2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80063ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063b0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80063b2:	f000 f81b 	bl	80063ec <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	e789      	b.n	80062ce <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80063be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80063c2:	f7ff ff55 	bl	8006270 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	e787      	b.n	80062da <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	f7ff ff4d 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 80063ce:	e7d0      	b.n	8006372 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80063d0:	f7ff ff4a 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 80063d4:	e7bc      	b.n	8006350 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	f7ff ff47 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 80063da:	e7a6      	b.n	800632a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80063dc:	f7ff ff44 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e791      	b.n	8006306 <HAL_TIM_IRQHandler+0x92>
 80063e2:	bf00      	nop

080063e4 <HAL_TIMEx_CommutCallback>:
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop

080063e8 <HAL_TIMEx_BreakCallback>:
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop

080063ec <HAL_TIMEx_Break2Callback>:
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop

080063f0 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f0:	6901      	ldr	r1, [r0, #16]
 80063f2:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80063f4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f8:	49c0      	ldr	r1, [pc, #768]	; (80066fc <UART_SetConfig+0x30c>)
{
 80063fa:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063fc:	6945      	ldr	r5, [r0, #20]
{
 80063fe:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006400:	69c0      	ldr	r0, [r0, #28]
{
 8006402:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006404:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006406:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006408:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800640a:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800640c:	4dbc      	ldr	r5, [pc, #752]	; (8006700 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800640e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006410:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006412:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006414:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800641c:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006420:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006422:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006424:	f000 80e0 	beq.w	80065e8 <UART_SetConfig+0x1f8>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006428:	6a22      	ldr	r2, [r4, #32]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800642a:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800642c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800642e:	4ab5      	ldr	r2, [pc, #724]	; (8006704 <UART_SetConfig+0x314>)
 8006430:	402a      	ands	r2, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006432:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006434:	4311      	orrs	r1, r2
 8006436:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643a:	f022 020f 	bic.w	r2, r2, #15
 800643e:	432a      	orrs	r2, r5
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006442:	4ab1      	ldr	r2, [pc, #708]	; (8006708 <UART_SetConfig+0x318>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d023      	beq.n	8006490 <UART_SetConfig+0xa0>
 8006448:	4ab0      	ldr	r2, [pc, #704]	; (800670c <UART_SetConfig+0x31c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d076      	beq.n	800653c <UART_SetConfig+0x14c>
 800644e:	4ab0      	ldr	r2, [pc, #704]	; (8006710 <UART_SetConfig+0x320>)
 8006450:	4293      	cmp	r3, r2
 8006452:	f000 818f 	beq.w	8006774 <UART_SetConfig+0x384>
 8006456:	4aaf      	ldr	r2, [pc, #700]	; (8006714 <UART_SetConfig+0x324>)
 8006458:	4293      	cmp	r3, r2
 800645a:	f000 81e1 	beq.w	8006820 <UART_SetConfig+0x430>
 800645e:	4aae      	ldr	r2, [pc, #696]	; (8006718 <UART_SetConfig+0x328>)
 8006460:	4293      	cmp	r3, r2
 8006462:	f000 8121 	beq.w	80066a8 <UART_SetConfig+0x2b8>
 8006466:	4aad      	ldr	r2, [pc, #692]	; (800671c <UART_SetConfig+0x32c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	f000 81e3 	beq.w	8006834 <UART_SetConfig+0x444>
 800646e:	4aac      	ldr	r2, [pc, #688]	; (8006720 <UART_SetConfig+0x330>)
 8006470:	4293      	cmp	r3, r2
 8006472:	f000 8234 	beq.w	80068de <UART_SetConfig+0x4ee>
 8006476:	4aab      	ldr	r2, [pc, #684]	; (8006724 <UART_SetConfig+0x334>)
 8006478:	4293      	cmp	r3, r2
 800647a:	f000 81e7 	beq.w	800684c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 800647e:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006480:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006482:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8006486:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 8006488:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800648a:	67a3      	str	r3, [r4, #120]	; 0x78

  return ret;
}
 800648c:	b007      	add	sp, #28
 800648e:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006490:	4ba5      	ldr	r3, [pc, #660]	; (8006728 <UART_SetConfig+0x338>)
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006498:	2b28      	cmp	r3, #40	; 0x28
 800649a:	d8f0      	bhi.n	800647e <UART_SetConfig+0x8e>
 800649c:	4aa3      	ldr	r2, [pc, #652]	; (800672c <UART_SetConfig+0x33c>)
 800649e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80064a4:	d055      	beq.n	8006552 <UART_SetConfig+0x162>
    switch (clocksource)
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	f200 814a 	bhi.w	8006740 <UART_SetConfig+0x350>
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d8e6      	bhi.n	800647e <UART_SetConfig+0x8e>
 80064b0:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <UART_SetConfig+0xc8>)
 80064b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	080066f7 	.word	0x080066f7
 80064bc:	080066f1 	.word	0x080066f1
 80064c0:	0800647f 	.word	0x0800647f
 80064c4:	0800647f 	.word	0x0800647f
 80064c8:	080066e1 	.word	0x080066e1
 80064cc:	0800647f 	.word	0x0800647f
 80064d0:	0800647f 	.word	0x0800647f
 80064d4:	0800647f 	.word	0x0800647f
 80064d8:	080066d3 	.word	0x080066d3
 80064dc:	0800647f 	.word	0x0800647f
 80064e0:	0800647f 	.word	0x0800647f
 80064e4:	0800647f 	.word	0x0800647f
 80064e8:	0800647f 	.word	0x0800647f
 80064ec:	0800647f 	.word	0x0800647f
 80064f0:	0800647f 	.word	0x0800647f
 80064f4:	0800647f 	.word	0x0800647f
 80064f8:	080066bd 	.word	0x080066bd
 80064fc:	0800647f 	.word	0x0800647f
 8006500:	0800647f 	.word	0x0800647f
 8006504:	0800647f 	.word	0x0800647f
 8006508:	0800647f 	.word	0x0800647f
 800650c:	0800647f 	.word	0x0800647f
 8006510:	0800647f 	.word	0x0800647f
 8006514:	0800647f 	.word	0x0800647f
 8006518:	0800647f 	.word	0x0800647f
 800651c:	0800647f 	.word	0x0800647f
 8006520:	0800647f 	.word	0x0800647f
 8006524:	0800647f 	.word	0x0800647f
 8006528:	0800647f 	.word	0x0800647f
 800652c:	0800647f 	.word	0x0800647f
 8006530:	0800647f 	.word	0x0800647f
 8006534:	0800647f 	.word	0x0800647f
 8006538:	08006861 	.word	0x08006861
  UART_GETCLOCKSOURCE(huart, clocksource);
 800653c:	4b7a      	ldr	r3, [pc, #488]	; (8006728 <UART_SetConfig+0x338>)
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	2b05      	cmp	r3, #5
 8006546:	d89a      	bhi.n	800647e <UART_SetConfig+0x8e>
 8006548:	4a79      	ldr	r2, [pc, #484]	; (8006730 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800654e:	5cd3      	ldrb	r3, [r2, r3]
 8006550:	d1a9      	bne.n	80064a6 <UART_SetConfig+0xb6>
    switch (clocksource)
 8006552:	2b20      	cmp	r3, #32
 8006554:	f200 8145 	bhi.w	80067e2 <UART_SetConfig+0x3f2>
 8006558:	2b20      	cmp	r3, #32
 800655a:	d890      	bhi.n	800647e <UART_SetConfig+0x8e>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x174>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	080068cb 	.word	0x080068cb
 8006568:	080068c5 	.word	0x080068c5
 800656c:	0800647f 	.word	0x0800647f
 8006570:	0800647f 	.word	0x0800647f
 8006574:	080068d1 	.word	0x080068d1
 8006578:	0800647f 	.word	0x0800647f
 800657c:	0800647f 	.word	0x0800647f
 8006580:	0800647f 	.word	0x0800647f
 8006584:	080068b3 	.word	0x080068b3
 8006588:	0800647f 	.word	0x0800647f
 800658c:	0800647f 	.word	0x0800647f
 8006590:	0800647f 	.word	0x0800647f
 8006594:	0800647f 	.word	0x0800647f
 8006598:	0800647f 	.word	0x0800647f
 800659c:	0800647f 	.word	0x0800647f
 80065a0:	0800647f 	.word	0x0800647f
 80065a4:	0800689f 	.word	0x0800689f
 80065a8:	0800647f 	.word	0x0800647f
 80065ac:	0800647f 	.word	0x0800647f
 80065b0:	0800647f 	.word	0x0800647f
 80065b4:	0800647f 	.word	0x0800647f
 80065b8:	0800647f 	.word	0x0800647f
 80065bc:	0800647f 	.word	0x0800647f
 80065c0:	0800647f 	.word	0x0800647f
 80065c4:	0800647f 	.word	0x0800647f
 80065c8:	0800647f 	.word	0x0800647f
 80065cc:	0800647f 	.word	0x0800647f
 80065d0:	0800647f 	.word	0x0800647f
 80065d4:	0800647f 	.word	0x0800647f
 80065d8:	0800647f 	.word	0x0800647f
 80065dc:	0800647f 	.word	0x0800647f
 80065e0:	0800647f 	.word	0x0800647f
 80065e4:	080068db 	.word	0x080068db
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e8:	6898      	ldr	r0, [r3, #8]
 80065ea:	4a46      	ldr	r2, [pc, #280]	; (8006704 <UART_SetConfig+0x314>)
 80065ec:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ee:	484e      	ldr	r0, [pc, #312]	; (8006728 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065f0:	430a      	orrs	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065f8:	f022 020f 	bic.w	r2, r2, #15
 80065fc:	430a      	orrs	r2, r1
 80065fe:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006600:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	2b05      	cmp	r3, #5
 8006608:	f63f af39 	bhi.w	800647e <UART_SetConfig+0x8e>
 800660c:	4a49      	ldr	r2, [pc, #292]	; (8006734 <UART_SetConfig+0x344>)
 800660e:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8006610:	2b20      	cmp	r3, #32
 8006612:	f200 80b9 	bhi.w	8006788 <UART_SetConfig+0x398>
 8006616:	2b01      	cmp	r3, #1
 8006618:	f67f af31 	bls.w	800647e <UART_SetConfig+0x8e>
 800661c:	3b02      	subs	r3, #2
 800661e:	2b1e      	cmp	r3, #30
 8006620:	f63f af2d 	bhi.w	800647e <UART_SetConfig+0x8e>
 8006624:	a201      	add	r2, pc, #4	; (adr r2, 800662c <UART_SetConfig+0x23c>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006895 	.word	0x08006895
 8006630:	0800647f 	.word	0x0800647f
 8006634:	0800688b 	.word	0x0800688b
 8006638:	0800647f 	.word	0x0800647f
 800663c:	0800647f 	.word	0x0800647f
 8006640:	0800647f 	.word	0x0800647f
 8006644:	08006879 	.word	0x08006879
 8006648:	0800647f 	.word	0x0800647f
 800664c:	0800647f 	.word	0x0800647f
 8006650:	0800647f 	.word	0x0800647f
 8006654:	0800647f 	.word	0x0800647f
 8006658:	0800647f 	.word	0x0800647f
 800665c:	0800647f 	.word	0x0800647f
 8006660:	0800647f 	.word	0x0800647f
 8006664:	08006865 	.word	0x08006865
 8006668:	0800647f 	.word	0x0800647f
 800666c:	0800647f 	.word	0x0800647f
 8006670:	0800647f 	.word	0x0800647f
 8006674:	0800647f 	.word	0x0800647f
 8006678:	0800647f 	.word	0x0800647f
 800667c:	0800647f 	.word	0x0800647f
 8006680:	0800647f 	.word	0x0800647f
 8006684:	0800647f 	.word	0x0800647f
 8006688:	0800647f 	.word	0x0800647f
 800668c:	0800647f 	.word	0x0800647f
 8006690:	0800647f 	.word	0x0800647f
 8006694:	0800647f 	.word	0x0800647f
 8006698:	0800647f 	.word	0x0800647f
 800669c:	0800647f 	.word	0x0800647f
 80066a0:	0800647f 	.word	0x0800647f
 80066a4:	0800689b 	.word	0x0800689b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066a8:	4b1f      	ldr	r3, [pc, #124]	; (8006728 <UART_SetConfig+0x338>)
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	f63f aee4 	bhi.w	800647e <UART_SetConfig+0x8e>
 80066b6:	4a20      	ldr	r2, [pc, #128]	; (8006738 <UART_SetConfig+0x348>)
 80066b8:	5cd3      	ldrb	r3, [r2, r3]
 80066ba:	e6f1      	b.n	80064a0 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066bc:	4b1a      	ldr	r3, [pc, #104]	; (8006728 <UART_SetConfig+0x338>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	0692      	lsls	r2, r2, #26
 80066c2:	f140 80c1 	bpl.w	8006848 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	481c      	ldr	r0, [pc, #112]	; (800673c <UART_SetConfig+0x34c>)
 80066ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80066ce:	40d8      	lsrs	r0, r3
 80066d0:	e03b      	b.n	800674a <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066d2:	a803      	add	r0, sp, #12
 80066d4:	f7fe fe4a 	bl	800536c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066d8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80066da:	b938      	cbnz	r0, 80066ec <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 80066dc:	2000      	movs	r0, #0
 80066de:	e6cf      	b.n	8006480 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e0:	4668      	mov	r0, sp
 80066e2:	f7fe fd97 	bl	8005214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066e6:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d0f7      	beq.n	80066dc <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80066ee:	e02c      	b.n	800674a <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f0:	f7fd fe1a 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
        break;
 80066f4:	e7f1      	b.n	80066da <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f6:	f7fd fdcf 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
        break;
 80066fa:	e7ee      	b.n	80066da <UART_SetConfig+0x2ea>
 80066fc:	cfff69f3 	.word	0xcfff69f3
 8006700:	58000c00 	.word	0x58000c00
 8006704:	11fff4ff 	.word	0x11fff4ff
 8006708:	40011000 	.word	0x40011000
 800670c:	40004400 	.word	0x40004400
 8006710:	40004800 	.word	0x40004800
 8006714:	40004c00 	.word	0x40004c00
 8006718:	40005000 	.word	0x40005000
 800671c:	40011400 	.word	0x40011400
 8006720:	40007800 	.word	0x40007800
 8006724:	40007c00 	.word	0x40007c00
 8006728:	58024400 	.word	0x58024400
 800672c:	0800adcc 	.word	0x0800adcc
 8006730:	0800adf8 	.word	0x0800adf8
 8006734:	0800ae00 	.word	0x0800ae00
 8006738:	0800adf8 	.word	0x0800adf8
 800673c:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	f47f ae9c 	bne.w	800647e <UART_SetConfig+0x8e>
 8006746:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800674a:	4b6c      	ldr	r3, [pc, #432]	; (80068fc <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800674c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006750:	6862      	ldr	r2, [r4, #4]
 8006752:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8006756:	fbb0 f3f3 	udiv	r3, r0, r3
 800675a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800675e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006762:	f1a3 0210 	sub.w	r2, r3, #16
 8006766:	428a      	cmp	r2, r1
 8006768:	f63f ae89 	bhi.w	800647e <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800676c:	6822      	ldr	r2, [r4, #0]
 800676e:	2000      	movs	r0, #0
 8006770:	60d3      	str	r3, [r2, #12]
 8006772:	e685      	b.n	8006480 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006774:	4b62      	ldr	r3, [pc, #392]	; (8006900 <UART_SetConfig+0x510>)
 8006776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	2b05      	cmp	r3, #5
 800677e:	f63f ae7e 	bhi.w	800647e <UART_SetConfig+0x8e>
 8006782:	4a60      	ldr	r2, [pc, #384]	; (8006904 <UART_SetConfig+0x514>)
 8006784:	5cd3      	ldrb	r3, [r2, r3]
 8006786:	e68b      	b.n	80064a0 <UART_SetConfig+0xb0>
    switch (clocksource)
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	f47f ae78 	bne.w	800647e <UART_SetConfig+0x8e>
 800678e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006792:	4b5a      	ldr	r3, [pc, #360]	; (80068fc <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006794:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006796:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800679a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800679e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067a2:	4299      	cmp	r1, r3
 80067a4:	f63f ae6b 	bhi.w	800647e <UART_SetConfig+0x8e>
 80067a8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80067ac:	f63f ae67 	bhi.w	800647e <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b0:	2300      	movs	r3, #0
 80067b2:	4619      	mov	r1, r3
 80067b4:	f7f9 fdec 	bl	8000390 <__aeabi_uldivmod>
 80067b8:	462a      	mov	r2, r5
 80067ba:	0209      	lsls	r1, r1, #8
 80067bc:	0203      	lsls	r3, r0, #8
 80067be:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80067c2:	0868      	lsrs	r0, r5, #1
 80067c4:	1818      	adds	r0, r3, r0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	f141 0100 	adc.w	r1, r1, #0
 80067ce:	f7f9 fddf 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067d2:	4a4d      	ldr	r2, [pc, #308]	; (8006908 <UART_SetConfig+0x518>)
 80067d4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067da:	4291      	cmp	r1, r2
 80067dc:	f63f ae4f 	bhi.w	800647e <UART_SetConfig+0x8e>
 80067e0:	e7c4      	b.n	800676c <UART_SetConfig+0x37c>
    switch (clocksource)
 80067e2:	2b40      	cmp	r3, #64	; 0x40
 80067e4:	f47f ae4b 	bne.w	800647e <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e8:	4b44      	ldr	r3, [pc, #272]	; (80068fc <UART_SetConfig+0x50c>)
 80067ea:	6862      	ldr	r2, [r4, #4]
 80067ec:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80067f0:	0853      	lsrs	r3, r2, #1
 80067f2:	fbb0 f0f1 	udiv	r0, r0, r1
 80067f6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fa:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fe:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006802:	f1a0 0210 	sub.w	r2, r0, #16
 8006806:	429a      	cmp	r2, r3
 8006808:	f63f ae39 	bhi.w	800647e <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800680c:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006810:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8006814:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006816:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8006818:	4303      	orrs	r3, r0
 800681a:	2000      	movs	r0, #0
 800681c:	60d3      	str	r3, [r2, #12]
 800681e:	e62f      	b.n	8006480 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006820:	4b37      	ldr	r3, [pc, #220]	; (8006900 <UART_SetConfig+0x510>)
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	2b05      	cmp	r3, #5
 800682a:	f63f ae28 	bhi.w	800647e <UART_SetConfig+0x8e>
 800682e:	4a37      	ldr	r2, [pc, #220]	; (800690c <UART_SetConfig+0x51c>)
 8006830:	5cd3      	ldrb	r3, [r2, r3]
 8006832:	e635      	b.n	80064a0 <UART_SetConfig+0xb0>
 8006834:	4b32      	ldr	r3, [pc, #200]	; (8006900 <UART_SetConfig+0x510>)
 8006836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800683c:	2b28      	cmp	r3, #40	; 0x28
 800683e:	f63f ae1e 	bhi.w	800647e <UART_SetConfig+0x8e>
 8006842:	4a33      	ldr	r2, [pc, #204]	; (8006910 <UART_SetConfig+0x520>)
 8006844:	5cd3      	ldrb	r3, [r2, r3]
 8006846:	e62b      	b.n	80064a0 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 8006848:	4832      	ldr	r0, [pc, #200]	; (8006914 <UART_SetConfig+0x524>)
 800684a:	e77e      	b.n	800674a <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800684c:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <UART_SetConfig+0x510>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	2b05      	cmp	r3, #5
 8006856:	f63f ae12 	bhi.w	800647e <UART_SetConfig+0x8e>
 800685a:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <UART_SetConfig+0x528>)
 800685c:	5cd3      	ldrb	r3, [r2, r3]
 800685e:	e61f      	b.n	80064a0 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 8006860:	482e      	ldr	r0, [pc, #184]	; (800691c <UART_SetConfig+0x52c>)
 8006862:	e772      	b.n	800674a <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006864:	4b26      	ldr	r3, [pc, #152]	; (8006900 <UART_SetConfig+0x510>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	0690      	lsls	r0, r2, #26
 800686a:	d542      	bpl.n	80068f2 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4829      	ldr	r0, [pc, #164]	; (8006914 <UART_SetConfig+0x524>)
 8006870:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006874:	40d8      	lsrs	r0, r3
 8006876:	e78c      	b.n	8006792 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006878:	a803      	add	r0, sp, #12
 800687a:	f7fe fd77 	bl	800536c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800687e:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8006880:	2800      	cmp	r0, #0
 8006882:	f43f af2b 	beq.w	80066dc <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006886:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006888:	e783      	b.n	8006792 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800688a:	4668      	mov	r0, sp
 800688c:	f7fe fcc2 	bl	8005214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006890:	9801      	ldr	r0, [sp, #4]
        break;
 8006892:	e7f5      	b.n	8006880 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006894:	f7fe fcac 	bl	80051f0 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8006898:	e7f2      	b.n	8006880 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800689a:	4820      	ldr	r0, [pc, #128]	; (800691c <UART_SetConfig+0x52c>)
 800689c:	e779      	b.n	8006792 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800689e:	4b18      	ldr	r3, [pc, #96]	; (8006900 <UART_SetConfig+0x510>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	0691      	lsls	r1, r2, #26
 80068a4:	d527      	bpl.n	80068f6 <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	481a      	ldr	r0, [pc, #104]	; (8006914 <UART_SetConfig+0x524>)
 80068aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068ae:	40d8      	lsrs	r0, r3
 80068b0:	e79a      	b.n	80067e8 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068b2:	a803      	add	r0, sp, #12
 80068b4:	f7fe fd5a 	bl	800536c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068b8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f43f af0e 	beq.w	80066dc <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80068c2:	e791      	b.n	80067e8 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c4:	f7fd fd30 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
        break;
 80068c8:	e7f7      	b.n	80068ba <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ca:	f7fd fce5 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
        break;
 80068ce:	e7f4      	b.n	80068ba <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068d0:	4668      	mov	r0, sp
 80068d2:	f7fe fc9f 	bl	8005214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068d6:	9801      	ldr	r0, [sp, #4]
        break;
 80068d8:	e7ef      	b.n	80068ba <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 80068da:	4810      	ldr	r0, [pc, #64]	; (800691c <UART_SetConfig+0x52c>)
 80068dc:	e784      	b.n	80067e8 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068de:	4b08      	ldr	r3, [pc, #32]	; (8006900 <UART_SetConfig+0x510>)
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	f63f adc9 	bhi.w	800647e <UART_SetConfig+0x8e>
 80068ec:	4a0c      	ldr	r2, [pc, #48]	; (8006920 <UART_SetConfig+0x530>)
 80068ee:	5cd3      	ldrb	r3, [r2, r3]
 80068f0:	e5d6      	b.n	80064a0 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 80068f2:	4808      	ldr	r0, [pc, #32]	; (8006914 <UART_SetConfig+0x524>)
 80068f4:	e74d      	b.n	8006792 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 80068f6:	4807      	ldr	r0, [pc, #28]	; (8006914 <UART_SetConfig+0x524>)
 80068f8:	e776      	b.n	80067e8 <UART_SetConfig+0x3f8>
 80068fa:	bf00      	nop
 80068fc:	0800ae08 	.word	0x0800ae08
 8006900:	58024400 	.word	0x58024400
 8006904:	0800adf8 	.word	0x0800adf8
 8006908:	000ffcff 	.word	0x000ffcff
 800690c:	0800adf8 	.word	0x0800adf8
 8006910:	0800adcc 	.word	0x0800adcc
 8006914:	03d09000 	.word	0x03d09000
 8006918:	0800adf8 	.word	0x0800adf8
 800691c:	003d0900 	.word	0x003d0900
 8006920:	0800adf8 	.word	0x0800adf8

08006924 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006924:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006926:	07da      	lsls	r2, r3, #31
{
 8006928:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800692a:	d506      	bpl.n	800693a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800692c:	6801      	ldr	r1, [r0, #0]
 800692e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006930:	684a      	ldr	r2, [r1, #4]
 8006932:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006936:	4322      	orrs	r2, r4
 8006938:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800693a:	079c      	lsls	r4, r3, #30
 800693c:	d506      	bpl.n	800694c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800693e:	6801      	ldr	r1, [r0, #0]
 8006940:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006942:	684a      	ldr	r2, [r1, #4]
 8006944:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006948:	4322      	orrs	r2, r4
 800694a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800694c:	0759      	lsls	r1, r3, #29
 800694e:	d506      	bpl.n	800695e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006950:	6801      	ldr	r1, [r0, #0]
 8006952:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006954:	684a      	ldr	r2, [r1, #4]
 8006956:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800695a:	4322      	orrs	r2, r4
 800695c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695e:	071a      	lsls	r2, r3, #28
 8006960:	d506      	bpl.n	8006970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006962:	6801      	ldr	r1, [r0, #0]
 8006964:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006966:	684a      	ldr	r2, [r1, #4]
 8006968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800696c:	4322      	orrs	r2, r4
 800696e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006970:	06dc      	lsls	r4, r3, #27
 8006972:	d506      	bpl.n	8006982 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006974:	6801      	ldr	r1, [r0, #0]
 8006976:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006978:	688a      	ldr	r2, [r1, #8]
 800697a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800697e:	4322      	orrs	r2, r4
 8006980:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006982:	0699      	lsls	r1, r3, #26
 8006984:	d506      	bpl.n	8006994 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006986:	6801      	ldr	r1, [r0, #0]
 8006988:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800698a:	688a      	ldr	r2, [r1, #8]
 800698c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006990:	4322      	orrs	r2, r4
 8006992:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006994:	065a      	lsls	r2, r3, #25
 8006996:	d50a      	bpl.n	80069ae <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006998:	6801      	ldr	r1, [r0, #0]
 800699a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800699c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800699e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80069a6:	ea42 0204 	orr.w	r2, r2, r4
 80069aa:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ac:	d00b      	beq.n	80069c6 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ae:	061b      	lsls	r3, r3, #24
 80069b0:	d506      	bpl.n	80069c0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069b2:	6802      	ldr	r2, [r0, #0]
 80069b4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80069b6:	6853      	ldr	r3, [r2, #4]
 80069b8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80069bc:	430b      	orrs	r3, r1
 80069be:	6053      	str	r3, [r2, #4]
  }
}
 80069c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c6:	684a      	ldr	r2, [r1, #4]
 80069c8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80069ca:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80069ce:	4322      	orrs	r2, r4
 80069d0:	604a      	str	r2, [r1, #4]
 80069d2:	e7ec      	b.n	80069ae <UART_AdvFeatureConfig+0x8a>

080069d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d6:	2300      	movs	r3, #0
{
 80069d8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069da:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069de:	f7fc fc1f 	bl	8003220 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069e2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80069e4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	071b      	lsls	r3, r3, #28
 80069ea:	d40e      	bmi.n	8006a0a <UART_CheckIdleState+0x36>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ec:	6813      	ldr	r3, [r2, #0]
 80069ee:	0759      	lsls	r1, r3, #29
 80069f0:	d432      	bmi.n	8006a58 <UART_CheckIdleState+0x84>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80069f4:	2220      	movs	r2, #32
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 80069f6:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80069f8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80069fc:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a00:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a06:	6723      	str	r3, [r4, #112]	; 0x70
}
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0a:	69d3      	ldr	r3, [r2, #28]
 8006a0c:	0298      	lsls	r0, r3, #10
 8006a0e:	d4ed      	bmi.n	80069ec <UART_CheckIdleState+0x18>
 8006a10:	e00c      	b.n	8006a2c <UART_CheckIdleState+0x58>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	0749      	lsls	r1, r1, #29
 8006a18:	d505      	bpl.n	8006a26 <UART_CheckIdleState+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a1a:	69d9      	ldr	r1, [r3, #28]
 8006a1c:	0708      	lsls	r0, r1, #28
 8006a1e:	d44f      	bmi.n	8006ac0 <UART_CheckIdleState+0xec>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a20:	69d9      	ldr	r1, [r3, #28]
 8006a22:	0509      	lsls	r1, r1, #20
 8006a24:	d47a      	bmi.n	8006b1c <UART_CheckIdleState+0x148>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	0298      	lsls	r0, r3, #10
 8006a2a:	d4df      	bmi.n	80069ec <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a2c:	f7fc fbf8 	bl	8003220 <HAL_GetTick>
 8006a30:	1b43      	subs	r3, r0, r5
 8006a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	d3eb      	bcc.n	8006a12 <UART_CheckIdleState+0x3e>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	e843 2100 	strex	r1, r2, [r3]
 8006a46:	2900      	cmp	r1, #0
 8006a48:	d1f7      	bne.n	8006a3a <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8006a4a:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006a4c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8006a4e:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 8006a52:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a58:	69d3      	ldr	r3, [r2, #28]
 8006a5a:	025b      	lsls	r3, r3, #9
 8006a5c:	d4c9      	bmi.n	80069f2 <UART_CheckIdleState+0x1e>
 8006a5e:	e00d      	b.n	8006a7c <UART_CheckIdleState+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	0750      	lsls	r0, r2, #29
 8006a64:	d507      	bpl.n	8006a76 <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	0711      	lsls	r1, r2, #28
 8006a6a:	f100 8085 	bmi.w	8006b78 <UART_CheckIdleState+0x1a4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	0512      	lsls	r2, r2, #20
 8006a72:	f100 80af 	bmi.w	8006bd4 <UART_CheckIdleState+0x200>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	025b      	lsls	r3, r3, #9
 8006a7a:	d4ba      	bmi.n	80069f2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7c:	f7fc fbd0 	bl	8003220 <HAL_GetTick>
 8006a80:	1b43      	subs	r3, r0, r5
 8006a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	d3ea      	bcc.n	8006a60 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	e843 2100 	strex	r1, r2, [r3]
 8006a96:	2900      	cmp	r1, #0
 8006a98:	d1f7      	bne.n	8006a8a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	f103 0208 	add.w	r2, r3, #8
 8006a9e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	f103 0008 	add.w	r0, r3, #8
 8006aaa:	e840 2100 	strex	r1, r2, [r0]
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	d1f3      	bne.n	8006a9a <UART_CheckIdleState+0xc6>
      huart->RxState = HAL_UART_STATE_READY;
 8006ab2:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006ab4:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8006ab6:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8006aba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ac8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	e843 2100 	strex	r1, r2, [r3]
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d1f7      	bne.n	8006ac4 <UART_CheckIdleState+0xf0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ad4:	4856      	ldr	r0, [pc, #344]	; (8006c30 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	f103 0208 	add.w	r2, r3, #8
 8006ada:	e852 2f00 	ldrex	r2, [r2]
 8006ade:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	f103 0508 	add.w	r5, r3, #8
 8006ae4:	e845 2100 	strex	r1, r2, [r5]
 8006ae8:	2900      	cmp	r1, #0
 8006aea:	d1f4      	bne.n	8006ad6 <UART_CheckIdleState+0x102>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006aee:	2a01      	cmp	r2, #1
 8006af0:	d00b      	beq.n	8006b0a <UART_CheckIdleState+0x136>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006af4:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006af6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006af8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006afc:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 8006b00:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b04:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 8006b08:	e797      	b.n	8006a3a <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	e843 2100 	strex	r1, r2, [r3]
 8006b16:	2900      	cmp	r1, #0
 8006b18:	d1f7      	bne.n	8006b0a <UART_CheckIdleState+0x136>
 8006b1a:	e7ea      	b.n	8006af2 <UART_CheckIdleState+0x11e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b20:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	e843 2100 	strex	r1, r2, [r3]
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d1f7      	bne.n	8006b22 <UART_CheckIdleState+0x14e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b32:	483f      	ldr	r0, [pc, #252]	; (8006c30 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	f103 0208 	add.w	r2, r3, #8
 8006b38:	e852 2f00 	ldrex	r2, [r2]
 8006b3c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	f103 0508 	add.w	r5, r3, #8
 8006b42:	e845 2100 	strex	r1, r2, [r5]
 8006b46:	2900      	cmp	r1, #0
 8006b48:	d1f4      	bne.n	8006b34 <UART_CheckIdleState+0x160>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006b4c:	2a01      	cmp	r2, #1
 8006b4e:	d00a      	beq.n	8006b66 <UART_CheckIdleState+0x192>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b50:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006b52:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006b54:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b56:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8006b5a:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5e:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b60:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 8006b64:	e769      	b.n	8006a3a <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	e843 2100 	strex	r1, r2, [r3]
 8006b72:	2900      	cmp	r1, #0
 8006b74:	d1f7      	bne.n	8006b66 <UART_CheckIdleState+0x192>
 8006b76:	e7eb      	b.n	8006b50 <UART_CheckIdleState+0x17c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b78:	2208      	movs	r2, #8
 8006b7a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	e843 2100 	strex	r1, r2, [r3]
 8006b88:	2900      	cmp	r1, #0
 8006b8a:	d1f7      	bne.n	8006b7c <UART_CheckIdleState+0x1a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b8c:	4828      	ldr	r0, [pc, #160]	; (8006c30 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	f103 0208 	add.w	r2, r3, #8
 8006b92:	e852 2f00 	ldrex	r2, [r2]
 8006b96:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	f103 0508 	add.w	r5, r3, #8
 8006b9c:	e845 2100 	strex	r1, r2, [r5]
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d1f4      	bne.n	8006b8e <UART_CheckIdleState+0x1ba>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006ba6:	2a01      	cmp	r2, #1
 8006ba8:	d00b      	beq.n	8006bc2 <UART_CheckIdleState+0x1ee>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006bac:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bae:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006bb0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 8006bb4:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 8006bb8:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bbc:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 8006bc0:	e763      	b.n	8006a8a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	e843 2100 	strex	r1, r2, [r3]
 8006bce:	2900      	cmp	r1, #0
 8006bd0:	d1f7      	bne.n	8006bc2 <UART_CheckIdleState+0x1ee>
 8006bd2:	e7ea      	b.n	8006baa <UART_CheckIdleState+0x1d6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	e843 2100 	strex	r1, r2, [r3]
 8006be6:	2900      	cmp	r1, #0
 8006be8:	d1f7      	bne.n	8006bda <UART_CheckIdleState+0x206>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bea:	4811      	ldr	r0, [pc, #68]	; (8006c30 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	f103 0208 	add.w	r2, r3, #8
 8006bf0:	e852 2f00 	ldrex	r2, [r2]
 8006bf4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	f103 0508 	add.w	r5, r3, #8
 8006bfa:	e845 2100 	strex	r1, r2, [r5]
 8006bfe:	2900      	cmp	r1, #0
 8006c00:	d1f4      	bne.n	8006bec <UART_CheckIdleState+0x218>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c02:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006c04:	2a01      	cmp	r2, #1
 8006c06:	d00a      	beq.n	8006c1e <UART_CheckIdleState+0x24a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c08:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006c0a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006c0c:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006c0e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8006c12:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c16:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c18:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 8006c1c:	e735      	b.n	8006a8a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c22:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	e843 2100 	strex	r1, r2, [r3]
 8006c2a:	2900      	cmp	r1, #0
 8006c2c:	d1f7      	bne.n	8006c1e <UART_CheckIdleState+0x24a>
 8006c2e:	e7eb      	b.n	8006c08 <UART_CheckIdleState+0x234>
 8006c30:	effffffe 	.word	0xeffffffe

08006c34 <HAL_UART_Init>:
  if (huart == NULL)
 8006c34:	b380      	cbz	r0, 8006c98 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006c36:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8006c3a:	b510      	push	{r4, lr}
 8006c3c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006c3e:	b333      	cbz	r3, 8006c8e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8006c40:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006c42:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c44:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8006c46:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c52:	f7ff fbcd 	bl	80063f0 <UART_SetConfig>
 8006c56:	2801      	cmp	r0, #1
 8006c58:	d017      	beq.n	8006c8a <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c5c:	b98b      	cbnz	r3, 8006c82 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c5e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006c60:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c70:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	f042 0201 	orr.w	r2, r2, #1
}
 8006c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006c7c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006c7e:	f7ff bea9 	b.w	80069d4 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7ff fe4e 	bl	8006924 <UART_AdvFeatureConfig>
 8006c88:	e7e9      	b.n	8006c5e <HAL_UART_Init+0x2a>
}
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006c8e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8006c92:	f7fc f8a1 	bl	8002dd8 <HAL_UART_MspInit>
 8006c96:	e7d3      	b.n	8006c40 <HAL_UART_Init+0xc>
}
 8006c98:	2001      	movs	r0, #1
 8006c9a:	4770      	bx	lr

08006c9c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c9c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006ca0:	2a01      	cmp	r2, #1
 8006ca2:	d017      	beq.n	8006cd4 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ca4:	6802      	ldr	r2, [r0, #0]
 8006ca6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006ca8:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006caa:	2100      	movs	r1, #0
{
 8006cac:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8006cae:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8006cb2:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cb4:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006cb6:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cb8:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006cbc:	f024 0401 	bic.w	r4, r4, #1
 8006cc0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cc2:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cc4:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8006cc6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006cc8:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006ccc:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006cd0:	bc30      	pop	{r4, r5}
 8006cd2:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006cd4:	2002      	movs	r0, #2
}
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cd8:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006cdc:	2a01      	cmp	r2, #1
 8006cde:	d037      	beq.n	8006d50 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce0:	6802      	ldr	r2, [r0, #0]
 8006ce2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006ce4:	2024      	movs	r0, #36	; 0x24
{
 8006ce6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006ce8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cec:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cee:	6810      	ldr	r0, [r2, #0]
 8006cf0:	f020 0001 	bic.w	r0, r0, #1
 8006cf4:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cf6:	6890      	ldr	r0, [r2, #8]
 8006cf8:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006cfc:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cfe:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d00:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d02:	b310      	cbz	r0, 8006d4a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d04:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d06:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d08:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d0c:	4911      	ldr	r1, [pc, #68]	; (8006d54 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d0e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d12:	4d11      	ldr	r5, [pc, #68]	; (8006d58 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d14:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d18:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d1c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d20:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d22:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d26:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d28:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d2c:	fbb1 f1f5 	udiv	r1, r1, r5
 8006d30:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8006d34:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8006d36:	2100      	movs	r1, #0
 8006d38:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006d3e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006d40:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006d44:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006d48:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006d4a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	e7ef      	b.n	8006d30 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006d50:	2002      	movs	r0, #2
}
 8006d52:	4770      	bx	lr
 8006d54:	0800ae28 	.word	0x0800ae28
 8006d58:	0800ae20 	.word	0x0800ae20

08006d5c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006d5c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006d60:	2a01      	cmp	r2, #1
 8006d62:	d037      	beq.n	8006dd4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d64:	6802      	ldr	r2, [r0, #0]
 8006d66:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006d68:	2024      	movs	r0, #36	; 0x24
{
 8006d6a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006d6c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d70:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006d72:	6810      	ldr	r0, [r2, #0]
 8006d74:	f020 0001 	bic.w	r0, r0, #1
 8006d78:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d7a:	6890      	ldr	r0, [r2, #8]
 8006d7c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006d80:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d82:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d84:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d86:	b310      	cbz	r0, 8006dce <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d88:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d8a:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d8c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d90:	4911      	ldr	r1, [pc, #68]	; (8006dd8 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d92:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d96:	4d11      	ldr	r5, [pc, #68]	; (8006ddc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d98:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d9c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006da0:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006da4:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8006da6:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006daa:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dac:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006db0:	fbb1 f1f5 	udiv	r1, r1, r5
 8006db4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8006db8:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8006dba:	2100      	movs	r1, #0
 8006dbc:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dc0:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006dc2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006dc4:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006dc8:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006dcc:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006dce:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	e7ef      	b.n	8006db4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006dd4:	2002      	movs	r0, #2
}
 8006dd6:	4770      	bx	lr
 8006dd8:	0800ae28 	.word	0x0800ae28
 8006ddc:	0800ae20 	.word	0x0800ae20

08006de0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006de0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006de2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006de6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006de8:	f001 fae2 	bl	80083b0 <xTaskGetSchedulerState>
 8006dec:	2801      	cmp	r0, #1
 8006dee:	d100      	bne.n	8006df2 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006df0:	bd08      	pop	{r3, pc}
 8006df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006df6:	f001 bdfd 	b.w	80089f4 <xPortSysTickHandler>
 8006dfa:	bf00      	nop

08006dfc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e00:	b92b      	cbnz	r3, 8006e0e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <osKernelInitialize+0x20>)
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	b928      	cbnz	r0, 8006e14 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	4770      	bx	lr
    stat = osErrorISR;
 8006e0e:	f06f 0005 	mvn.w	r0, #5
 8006e12:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	24003a54 	.word	0x24003a54

08006e20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e20:	b510      	push	{r4, lr}
 8006e22:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e26:	b974      	cbnz	r4, 8006e46 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <osKernelStart+0x2c>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	2a01      	cmp	r2, #1
 8006e2e:	d107      	bne.n	8006e40 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e30:	4907      	ldr	r1, [pc, #28]	; (8006e50 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e32:	2202      	movs	r2, #2
 8006e34:	77cc      	strb	r4, [r1, #31]
 8006e36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e38:	f001 f894 	bl	8007f64 <vTaskStartScheduler>
      stat = osOK;
 8006e3c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006e3e:	bd10      	pop	{r4, pc}
      stat = osError;
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006e44:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006e46:	f06f 0005 	mvn.w	r0, #5
}
 8006e4a:	bd10      	pop	{r4, pc}
 8006e4c:	24003a54 	.word	0x24003a54
 8006e50:	e000ed00 	.word	0xe000ed00

08006e54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e54:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e56:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e58:	b087      	sub	sp, #28
 8006e5a:	4614      	mov	r4, r2
  hTask = NULL;
 8006e5c:	9505      	str	r5, [sp, #20]
 8006e5e:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006e62:	bb4a      	cbnz	r2, 8006eb8 <osThreadNew+0x64>
 8006e64:	b340      	cbz	r0, 8006eb8 <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006e66:	b1e4      	cbz	r4, 8006ea2 <osThreadNew+0x4e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006e68:	69a6      	ldr	r6, [r4, #24]
 8006e6a:	bb4e      	cbnz	r6, 8006ec0 <osThreadNew+0x6c>
 8006e6c:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	07db      	lsls	r3, r3, #31
 8006e72:	d421      	bmi.n	8006eb8 <osThreadNew+0x64>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006e74:	6963      	ldr	r3, [r4, #20]
 8006e76:	b33b      	cbz	r3, 8006ec8 <osThreadNew+0x74>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e78:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e7c:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8006e7e:	6827      	ldr	r7, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e80:	b33d      	cbz	r5, 8006ed2 <osThreadNew+0x7e>
 8006e82:	68e2      	ldr	r2, [r4, #12]
 8006e84:	2abb      	cmp	r2, #187	; 0xbb
 8006e86:	d917      	bls.n	8006eb8 <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e88:	6924      	ldr	r4, [r4, #16]
 8006e8a:	b1ab      	cbz	r3, 8006eb8 <osThreadNew+0x64>
 8006e8c:	b1a4      	cbz	r4, 8006eb8 <osThreadNew+0x64>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4662      	mov	r2, ip
 8006e92:	4639      	mov	r1, r7
 8006e94:	9600      	str	r6, [sp, #0]
 8006e96:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006e9a:	f000 ffa1 	bl	8007de0 <xTaskCreateStatic>
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	e00b      	b.n	8006eba <osThreadNew+0x66>
 8006ea2:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8006ea4:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	ac05      	add	r4, sp, #20
 8006eac:	9600      	str	r6, [sp, #0]
 8006eae:	9401      	str	r4, [sp, #4]
 8006eb0:	f000 ffd0 	bl	8007e54 <xTaskCreate>
 8006eb4:	2801      	cmp	r0, #1
 8006eb6:	d00a      	beq.n	8006ece <osThreadNew+0x7a>
        return (NULL);
 8006eb8:	2500      	movs	r5, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8006eba:	4628      	mov	r0, r5
 8006ebc:	b007      	add	sp, #28
 8006ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ec0:	1e72      	subs	r2, r6, #1
 8006ec2:	2a37      	cmp	r2, #55	; 0x37
 8006ec4:	d9d3      	bls.n	8006e6e <osThreadNew+0x1a>
 8006ec6:	e7f8      	b.n	8006eba <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 8006ec8:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8006ecc:	e7d6      	b.n	8006e7c <osThreadNew+0x28>
  return ((osThreadId_t)hTask);
 8006ece:	9d05      	ldr	r5, [sp, #20]
 8006ed0:	e7f3      	b.n	8006eba <osThreadNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f0      	bne.n	8006eba <osThreadNew+0x66>
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1ed      	bne.n	8006eba <osThreadNew+0x66>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ede:	fa1f f28c 	uxth.w	r2, ip
 8006ee2:	463c      	mov	r4, r7
 8006ee4:	e7df      	b.n	8006ea6 <osThreadNew+0x52>
 8006ee6:	bf00      	nop

08006ee8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006eee:	b92c      	cbnz	r4, 8006efc <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006ef0:	b900      	cbnz	r0, 8006ef4 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006ef2:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8006ef4:	f000 ffe0 	bl	8007eb8 <vTaskDelay>
    stat = osOK;
 8006ef8:	4620      	mov	r0, r4
}
 8006efa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006efc:	f06f 0005 	mvn.w	r0, #5
}
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop

08006f04 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f06:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f08:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f0a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f0c:	4c03      	ldr	r4, [pc, #12]	; (8006f1c <vApplicationGetIdleTaskMemory+0x18>)
 8006f0e:	600c      	str	r4, [r1, #0]
}
 8006f10:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f14:	6013      	str	r3, [r2, #0]
}
 8006f16:	4770      	bx	lr
 8006f18:	24003998 	.word	0x24003998
 8006f1c:	24003798 	.word	0x24003798

08006f20 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f22:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f24:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f26:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f2a:	4c04      	ldr	r4, [pc, #16]	; (8006f3c <vApplicationGetTimerTaskMemory+0x1c>)
 8006f2c:	600c      	str	r4, [r1, #0]
}
 8006f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f32:	6013      	str	r3, [r2, #0]
}
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	24003e58 	.word	0x24003e58
 8006f3c:	24003a58 	.word	0x24003a58

08006f40 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f40:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f44:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f48:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f4a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f4c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f4e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f50:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop

08006f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop

08006f60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f60:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006f62:	6802      	ldr	r2, [r0, #0]
{
 8006f64:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f66:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8006f68:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8006f6a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f6c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f6e:	689c      	ldr	r4, [r3, #8]
 8006f70:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f72:	6099      	str	r1, [r3, #8]
}
 8006f74:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8006f78:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006f7a:	6002      	str	r2, [r0, #0]
}
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop

08006f80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f80:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f82:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f84:	1c6b      	adds	r3, r5, #1
 8006f86:	d010      	beq.n	8006faa <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f88:	f100 0308 	add.w	r3, r0, #8
 8006f8c:	461c      	mov	r4, r3
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	42aa      	cmp	r2, r5
 8006f94:	d9fa      	bls.n	8006f8c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006f96:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f98:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006f9a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f9c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f9e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fa0:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8006fa2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006fa4:	6002      	str	r2, [r0, #0]
}
 8006fa6:	bc30      	pop	{r4, r5}
 8006fa8:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006faa:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fac:	6863      	ldr	r3, [r4, #4]
 8006fae:	e7f2      	b.n	8006f96 <vListInsert+0x16>

08006fb0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fb0:	6903      	ldr	r3, [r0, #16]
{
 8006fb2:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fb4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fb6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8006fba:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8006fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fc0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fc2:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8006fc4:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fc8:	bf08      	it	eq
 8006fca:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8006fcc:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8006fce:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006fd0:	3a01      	subs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8006fd4:	6818      	ldr	r0, [r3, #0]
}
 8006fd6:	4770      	bx	lr

08006fd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fdc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8006fde:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fe2:	b92a      	cbnz	r2, 8006ff0 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fe4:	6805      	ldr	r5, [r0, #0]
 8006fe6:	b365      	cbz	r5, 8007042 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fe8:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8006fea:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fec:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006ff0:	b97d      	cbnz	r5, 8007012 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ff2:	6840      	ldr	r0, [r0, #4]
 8006ff4:	f002 f823 	bl	800903e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ffc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ffe:	68a2      	ldr	r2, [r4, #8]
 8007000:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007002:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007004:	d319      	bcc.n	800703a <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007006:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007008:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800700a:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800700c:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800700e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007010:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007012:	68c0      	ldr	r0, [r0, #12]
 8007014:	f002 f813 	bl	800903e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007018:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800701a:	68e3      	ldr	r3, [r4, #12]
 800701c:	4251      	negs	r1, r2
 800701e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007024:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007026:	d202      	bcs.n	800702e <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007028:	68a3      	ldr	r3, [r4, #8]
 800702a:	440b      	add	r3, r1
 800702c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800702e:	2d02      	cmp	r5, #2
 8007030:	d00d      	beq.n	800704e <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007032:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8007034:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007036:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007038:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800703a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800703c:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800703e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007040:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007042:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007044:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007046:	f001 f9c3 	bl	80083d0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800704a:	60a5      	str	r5, [r4, #8]
 800704c:	e7ce      	b.n	8006fec <prvCopyDataToQueue+0x14>
 800704e:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8007050:	f04f 0000 	mov.w	r0, #0
 8007054:	bf38      	it	cc
 8007056:	2601      	movcc	r6, #1
 8007058:	e7c8      	b.n	8006fec <prvCopyDataToQueue+0x14>
 800705a:	bf00      	nop

0800705c <xQueueGenericCreateStatic>:
	{
 800705c:	b530      	push	{r4, r5, lr}
 800705e:	b083      	sub	sp, #12
 8007060:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007064:	b940      	cbnz	r0, 8007078 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	e7fe      	b.n	8007076 <xQueueGenericCreateStatic+0x1a>
 8007078:	461d      	mov	r5, r3
		configASSERT( pxStaticQueue != NULL );
 800707a:	b153      	cbz	r3, 8007092 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800707c:	b30a      	cbz	r2, 80070c2 <xQueueGenericCreateStatic+0x66>
 800707e:	b989      	cbnz	r1, 80070a4 <xQueueGenericCreateStatic+0x48>
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	e7fe      	b.n	8007090 <xQueueGenericCreateStatic+0x34>
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	e7fe      	b.n	80070a2 <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070a4:	b16a      	cbz	r2, 80070c2 <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070a6:	2350      	movs	r3, #80	; 0x50
 80070a8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070aa:	9b01      	ldr	r3, [sp, #4]
 80070ac:	2b50      	cmp	r3, #80	; 0x50
 80070ae:	d013      	beq.n	80070d8 <xQueueGenericCreateStatic+0x7c>
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	e7fe      	b.n	80070c0 <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070c2:	2900      	cmp	r1, #0
 80070c4:	d0ef      	beq.n	80070a6 <xQueueGenericCreateStatic+0x4a>
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	e7fe      	b.n	80070d6 <xQueueGenericCreateStatic+0x7a>
 80070d8:	2900      	cmp	r1, #0
 80070da:	bf08      	it	eq
 80070dc:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
 80070de:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070e0:	6429      	str	r1, [r5, #64]	; 0x40
 80070e2:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070e4:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070e6:	2201      	movs	r2, #1
 80070e8:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
 80070ec:	f001 fc1a 	bl	8008924 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070f0:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070f2:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070f4:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070f6:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070f8:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
 80070fc:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007100:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007102:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007104:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007106:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007108:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800710a:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800710e:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007110:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007114:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007118:	f7ff ff12 	bl	8006f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800711c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007120:	f7ff ff0e 	bl	8006f40 <vListInitialise>
	taskEXIT_CRITICAL();
 8007124:	f001 fc20 	bl	8008968 <vPortExitCritical>
	}
 8007128:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 800712a:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 800712e:	b003      	add	sp, #12
 8007130:	bd30      	pop	{r4, r5, pc}
 8007132:	bf00      	nop

08007134 <xQueueGenericSend>:
{
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800713c:	2800      	cmp	r0, #0
 800713e:	f000 8103 	beq.w	8007348 <xQueueGenericSend+0x214>
 8007142:	4688      	mov	r8, r1
 8007144:	4604      	mov	r4, r0
 8007146:	461f      	mov	r7, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007148:	2900      	cmp	r1, #0
 800714a:	f000 8097 	beq.w	800727c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800714e:	2f02      	cmp	r7, #2
 8007150:	d10b      	bne.n	800716a <xQueueGenericSend+0x36>
 8007152:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d008      	beq.n	800716a <xQueueGenericSend+0x36>
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	e7fe      	b.n	8007168 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800716a:	f001 f921 	bl	80083b0 <xTaskGetSchedulerState>
 800716e:	2800      	cmp	r0, #0
 8007170:	f000 80f3 	beq.w	800735a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007174:	f1a7 0902 	sub.w	r9, r7, #2
 8007178:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800717a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800717e:	fab9 f989 	clz	r9, r9
 8007182:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
 8007186:	f001 fbcd 	bl	8008924 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800718a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800718c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800718e:	429a      	cmp	r2, r3
 8007190:	f0c0 80f0 	bcc.w	8007374 <xQueueGenericSend+0x240>
 8007194:	f1b9 0f00 	cmp.w	r9, #0
 8007198:	f040 80ec 	bne.w	8007374 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 8101 	beq.w	80073a6 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	f000 80cb 	beq.w	8007340 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
 80071aa:	f001 fbdd 	bl	8008968 <vPortExitCritical>
		vTaskSuspendAll();
 80071ae:	f000 ff55 	bl	800805c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071b2:	f001 fbb7 	bl	8008924 <vPortEnterCritical>
 80071b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80071ba:	2bff      	cmp	r3, #255	; 0xff
 80071bc:	d102      	bne.n	80071c4 <xQueueGenericSend+0x90>
 80071be:	2300      	movs	r3, #0
 80071c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80071c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80071c8:	2bff      	cmp	r3, #255	; 0xff
 80071ca:	d102      	bne.n	80071d2 <xQueueGenericSend+0x9e>
 80071cc:	2300      	movs	r3, #0
 80071ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071d2:	f001 fbc9 	bl	8008968 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071d6:	a901      	add	r1, sp, #4
 80071d8:	a802      	add	r0, sp, #8
 80071da:	f001 f89b 	bl	8008314 <xTaskCheckForTimeOut>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f040 80e5 	bne.w	80073ae <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071e4:	f001 fb9e 	bl	8008924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80071ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d052      	beq.n	8007296 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80071f0:	f001 fbba 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 80071f4:	f001 fb96 	bl	8008924 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80071f8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80071fc:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071fe:	2d00      	cmp	r5, #0
 8007200:	dc04      	bgt.n	800720c <xQueueGenericSend+0xd8>
 8007202:	e011      	b.n	8007228 <xQueueGenericSend+0xf4>
 8007204:	1e6a      	subs	r2, r5, #1
 8007206:	b2d3      	uxtb	r3, r2
 8007208:	b255      	sxtb	r5, r2
 800720a:	b16b      	cbz	r3, 8007228 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800720c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800720e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007210:	b153      	cbz	r3, 8007228 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007212:	f001 f829 	bl	8008268 <xTaskRemoveFromEventList>
 8007216:	2800      	cmp	r0, #0
 8007218:	d0f4      	beq.n	8007204 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
 800721a:	f001 f8c3 	bl	80083a4 <vTaskMissedYield>
 800721e:	1e6a      	subs	r2, r5, #1
 8007220:	b2d3      	uxtb	r3, r2
 8007222:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1f1      	bne.n	800720c <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 8007228:	23ff      	movs	r3, #255	; 0xff
 800722a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800722e:	f001 fb9b 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007232:	f001 fb77 	bl	8008924 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007236:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800723a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800723c:	2d00      	cmp	r5, #0
 800723e:	dd14      	ble.n	800726a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007240:	f104 0a10 	add.w	sl, r4, #16
 8007244:	e003      	b.n	800724e <xQueueGenericSend+0x11a>
 8007246:	1e6a      	subs	r2, r5, #1
 8007248:	b2d3      	uxtb	r3, r2
 800724a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800724c:	b16b      	cbz	r3, 800726a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800724e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007250:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007252:	b153      	cbz	r3, 800726a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007254:	f001 f808 	bl	8008268 <xTaskRemoveFromEventList>
 8007258:	2800      	cmp	r0, #0
 800725a:	d0f4      	beq.n	8007246 <xQueueGenericSend+0x112>
					vTaskMissedYield();
 800725c:	f001 f8a2 	bl	80083a4 <vTaskMissedYield>
 8007260:	1e6a      	subs	r2, r5, #1
 8007262:	b2d3      	uxtb	r3, r2
 8007264:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f1      	bne.n	800724e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 800726a:	23ff      	movs	r3, #255	; 0xff
 800726c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007270:	f001 fb7a 	bl	8008968 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8007274:	f000 fefa 	bl	800806c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007278:	2501      	movs	r5, #1
 800727a:	e784      	b.n	8007186 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800727c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	f43f af65 	beq.w	800714e <xQueueGenericSend+0x1a>
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	e7fe      	b.n	8007294 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007296:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800729a:	f001 fb65 	bl	8008968 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800729e:	9901      	ldr	r1, [sp, #4]
 80072a0:	4650      	mov	r0, sl
 80072a2:	f000 ff53 	bl	800814c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80072a6:	f001 fb3d 	bl	8008924 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80072aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80072ae:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072b0:	2d00      	cmp	r5, #0
 80072b2:	dc04      	bgt.n	80072be <xQueueGenericSend+0x18a>
 80072b4:	e011      	b.n	80072da <xQueueGenericSend+0x1a6>
 80072b6:	1e6b      	subs	r3, r5, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	b25d      	sxtb	r5, r3
 80072bc:	b16a      	cbz	r2, 80072da <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072be:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072c0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072c2:	b153      	cbz	r3, 80072da <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072c4:	f000 ffd0 	bl	8008268 <xTaskRemoveFromEventList>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d0f4      	beq.n	80072b6 <xQueueGenericSend+0x182>
						vTaskMissedYield();
 80072cc:	f001 f86a 	bl	80083a4 <vTaskMissedYield>
 80072d0:	1e6b      	subs	r3, r5, #1
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	d1f1      	bne.n	80072be <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
 80072da:	23ff      	movs	r3, #255	; 0xff
 80072dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80072e0:	f001 fb42 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 80072e4:	f001 fb1e 	bl	8008924 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80072e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80072ec:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	dc04      	bgt.n	80072fc <xQueueGenericSend+0x1c8>
 80072f2:	e011      	b.n	8007318 <xQueueGenericSend+0x1e4>
 80072f4:	1e6b      	subs	r3, r5, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	b25d      	sxtb	r5, r3
 80072fa:	b16a      	cbz	r2, 8007318 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072fc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072fe:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007300:	b153      	cbz	r3, 8007318 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007302:	f000 ffb1 	bl	8008268 <xTaskRemoveFromEventList>
 8007306:	2800      	cmp	r0, #0
 8007308:	d0f4      	beq.n	80072f4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
 800730a:	f001 f84b 	bl	80083a4 <vTaskMissedYield>
 800730e:	1e6b      	subs	r3, r5, #1
 8007310:	b2da      	uxtb	r2, r3
 8007312:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007314:	2a00      	cmp	r2, #0
 8007316:	d1f1      	bne.n	80072fc <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
 8007318:	23ff      	movs	r3, #255	; 0xff
 800731a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800731e:	f001 fb23 	bl	8008968 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8007322:	f000 fea3 	bl	800806c <xTaskResumeAll>
 8007326:	2800      	cmp	r0, #0
 8007328:	d1a6      	bne.n	8007278 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
 800732a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	e79b      	b.n	8007278 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007340:	a802      	add	r0, sp, #8
 8007342:	f000 ffdb 	bl	80082fc <vTaskInternalSetTimeOutState>
 8007346:	e730      	b.n	80071aa <xQueueGenericSend+0x76>
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	e7fe      	b.n	8007358 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800735a:	9b01      	ldr	r3, [sp, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f43f af09 	beq.w	8007174 <xQueueGenericSend+0x40>
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	e7fe      	b.n	8007372 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007374:	463a      	mov	r2, r7
 8007376:	4641      	mov	r1, r8
 8007378:	4620      	mov	r0, r4
 800737a:	f7ff fe2d 	bl	8006fd8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800737e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d152      	bne.n	800742a <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
 8007384:	b148      	cbz	r0, 800739a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
 8007386:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800738a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800738e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800739a:	f001 fae5 	bl	8008968 <vPortExitCritical>
				return pdPASS;
 800739e:	2001      	movs	r0, #1
}
 80073a0:	b004      	add	sp, #16
 80073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
 80073a6:	f001 fadf 	bl	8008968 <vPortExitCritical>
					return errQUEUE_FULL;
 80073aa:	4648      	mov	r0, r9
 80073ac:	e7f8      	b.n	80073a0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
 80073ae:	f001 fab9 	bl	8008924 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80073b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80073b6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073b8:	2d00      	cmp	r5, #0
 80073ba:	dd10      	ble.n	80073de <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073bc:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80073c0:	e003      	b.n	80073ca <xQueueGenericSend+0x296>
 80073c2:	1e6b      	subs	r3, r5, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073c8:	b14a      	cbz	r2, 80073de <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073cc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ce:	b133      	cbz	r3, 80073de <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d0:	f000 ff4a 	bl	8008268 <xTaskRemoveFromEventList>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d0f4      	beq.n	80073c2 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
 80073d8:	f000 ffe4 	bl	80083a4 <vTaskMissedYield>
 80073dc:	e7f1      	b.n	80073c2 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
 80073de:	23ff      	movs	r3, #255	; 0xff
 80073e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80073e4:	f001 fac0 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 80073e8:	f001 fa9c 	bl	8008924 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80073ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80073f0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	dd10      	ble.n	8007418 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073f6:	f104 0610 	add.w	r6, r4, #16
 80073fa:	e003      	b.n	8007404 <xQueueGenericSend+0x2d0>
 80073fc:	1e6b      	subs	r3, r5, #1
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007402:	b14a      	cbz	r2, 8007418 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007404:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007406:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007408:	b133      	cbz	r3, 8007418 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800740a:	f000 ff2d 	bl	8008268 <xTaskRemoveFromEventList>
 800740e:	2800      	cmp	r0, #0
 8007410:	d0f4      	beq.n	80073fc <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
 8007412:	f000 ffc7 	bl	80083a4 <vTaskMissedYield>
 8007416:	e7f1      	b.n	80073fc <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
 8007418:	23ff      	movs	r3, #255	; 0xff
 800741a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800741e:	f001 faa3 	bl	8008968 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8007422:	f000 fe23 	bl	800806c <xTaskResumeAll>
			return errQUEUE_FULL;
 8007426:	2000      	movs	r0, #0
 8007428:	e7ba      	b.n	80073a0 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800742a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800742e:	f000 ff1b 	bl	8008268 <xTaskRemoveFromEventList>
 8007432:	2800      	cmp	r0, #0
 8007434:	d0b1      	beq.n	800739a <xQueueGenericSend+0x266>
 8007436:	e7a6      	b.n	8007386 <xQueueGenericSend+0x252>

08007438 <xQueueReceive>:
{
 8007438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800743c:	b085      	sub	sp, #20
 800743e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007440:	2800      	cmp	r0, #0
 8007442:	f000 815f 	beq.w	8007704 <xQueueReceive+0x2cc>
 8007446:	460f      	mov	r7, r1
 8007448:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800744a:	2900      	cmp	r1, #0
 800744c:	f000 8094 	beq.w	8007578 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007450:	f000 ffae 	bl	80083b0 <xTaskGetSchedulerState>
 8007454:	2800      	cmp	r0, #0
 8007456:	f000 809c 	beq.w	8007592 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800745a:	f001 fa63 	bl	8008924 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800745e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007460:	2d00      	cmp	r5, #0
 8007462:	d172      	bne.n	800754a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 80f1 	beq.w	800764e <xQueueReceive+0x216>
		prvLockQueue( pxQueue );
 800746c:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800746e:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007472:	a802      	add	r0, sp, #8
 8007474:	f000 ff42 	bl	80082fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007478:	f001 fa76 	bl	8008968 <vPortExitCritical>
		vTaskSuspendAll();
 800747c:	f000 fdee 	bl	800805c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007480:	f001 fa50 	bl	8008924 <vPortEnterCritical>
 8007484:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007488:	2bff      	cmp	r3, #255	; 0xff
 800748a:	d101      	bne.n	8007490 <xQueueReceive+0x58>
 800748c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8007490:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007494:	2bff      	cmp	r3, #255	; 0xff
 8007496:	d101      	bne.n	800749c <xQueueReceive+0x64>
 8007498:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800749c:	f001 fa64 	bl	8008968 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074a0:	a901      	add	r1, sp, #4
 80074a2:	a802      	add	r0, sp, #8
 80074a4:	f000 ff36 	bl	8008314 <xTaskCheckForTimeOut>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d17f      	bne.n	80075ac <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 80074ac:	f001 fa3a 	bl	8008924 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80d1 	beq.w	800765a <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 80074b8:	f001 fa56 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 80074bc:	f001 fa32 	bl	8008924 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80074c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80074c4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	dc04      	bgt.n	80074d4 <xQueueReceive+0x9c>
 80074ca:	e011      	b.n	80074f0 <xQueueReceive+0xb8>
 80074cc:	1e6b      	subs	r3, r5, #1
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	b25d      	sxtb	r5, r3
 80074d2:	b16a      	cbz	r2, 80074f0 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074d6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074d8:	b153      	cbz	r3, 80074f0 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074da:	f000 fec5 	bl	8008268 <xTaskRemoveFromEventList>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d0f4      	beq.n	80074cc <xQueueReceive+0x94>
						vTaskMissedYield();
 80074e2:	f000 ff5f 	bl	80083a4 <vTaskMissedYield>
 80074e6:	1e6b      	subs	r3, r5, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	d1f1      	bne.n	80074d4 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 80074f0:	23ff      	movs	r3, #255	; 0xff
 80074f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80074f6:	f001 fa37 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 80074fa:	f001 fa13 	bl	8008924 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80074fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007502:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007504:	2d00      	cmp	r5, #0
 8007506:	dd14      	ble.n	8007532 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007508:	f104 0910 	add.w	r9, r4, #16
 800750c:	e003      	b.n	8007516 <xQueueReceive+0xde>
 800750e:	1e6b      	subs	r3, r5, #1
 8007510:	b2da      	uxtb	r2, r3
 8007512:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007514:	b16a      	cbz	r2, 8007532 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007516:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007518:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800751a:	b153      	cbz	r3, 8007532 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800751c:	f000 fea4 	bl	8008268 <xTaskRemoveFromEventList>
 8007520:	2800      	cmp	r0, #0
 8007522:	d0f4      	beq.n	800750e <xQueueReceive+0xd6>
					vTaskMissedYield();
 8007524:	f000 ff3e 	bl	80083a4 <vTaskMissedYield>
 8007528:	1e6b      	subs	r3, r5, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800752e:	2a00      	cmp	r2, #0
 8007530:	d1f1      	bne.n	8007516 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 8007532:	23ff      	movs	r3, #255	; 0xff
 8007534:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007538:	f001 fa16 	bl	8008968 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800753c:	f000 fd96 	bl	800806c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007540:	f001 f9f0 	bl	8008924 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007544:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007546:	2d00      	cmp	r5, #0
 8007548:	d07d      	beq.n	8007646 <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800754a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800754c:	b152      	cbz	r2, 8007564 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800754e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007550:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007552:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007554:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007556:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007558:	d301      	bcc.n	800755e <xQueueReceive+0x126>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800755a:	6821      	ldr	r1, [r4, #0]
 800755c:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800755e:	4638      	mov	r0, r7
 8007560:	f001 fd6d 	bl	800903e <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007564:	3d01      	subs	r5, #1
 8007566:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 80d3 	bne.w	8007716 <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 8007570:	f001 f9fa 	bl	8008968 <vPortExitCritical>
				return pdPASS;
 8007574:	2001      	movs	r0, #1
 8007576:	e06d      	b.n	8007654 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007578:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	f43f af68 	beq.w	8007450 <xQueueReceive+0x18>
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	e7fe      	b.n	8007590 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007592:	9b01      	ldr	r3, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f43f af60 	beq.w	800745a <xQueueReceive+0x22>
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	e7fe      	b.n	80075aa <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 80075ac:	f001 f9ba 	bl	8008924 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80075b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80075b4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	dc04      	bgt.n	80075c4 <xQueueReceive+0x18c>
 80075ba:	e011      	b.n	80075e0 <xQueueReceive+0x1a8>
 80075bc:	1e6b      	subs	r3, r5, #1
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	b25d      	sxtb	r5, r3
 80075c2:	b16a      	cbz	r2, 80075e0 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075c8:	b153      	cbz	r3, 80075e0 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075ca:	f000 fe4d 	bl	8008268 <xTaskRemoveFromEventList>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d0f4      	beq.n	80075bc <xQueueReceive+0x184>
						vTaskMissedYield();
 80075d2:	f000 fee7 	bl	80083a4 <vTaskMissedYield>
 80075d6:	1e6b      	subs	r3, r5, #1
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d1f1      	bne.n	80075c4 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 80075e0:	23ff      	movs	r3, #255	; 0xff
 80075e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80075e6:	f001 f9bf 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 80075ea:	f001 f99b 	bl	8008924 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80075ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80075f2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	dd14      	ble.n	8007622 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075f8:	f104 0910 	add.w	r9, r4, #16
 80075fc:	e003      	b.n	8007606 <xQueueReceive+0x1ce>
 80075fe:	1e6b      	subs	r3, r5, #1
 8007600:	b2da      	uxtb	r2, r3
 8007602:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007604:	b16a      	cbz	r2, 8007622 <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007606:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007608:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800760a:	b153      	cbz	r3, 8007622 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800760c:	f000 fe2c 	bl	8008268 <xTaskRemoveFromEventList>
 8007610:	2800      	cmp	r0, #0
 8007612:	d0f4      	beq.n	80075fe <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8007614:	f000 fec6 	bl	80083a4 <vTaskMissedYield>
 8007618:	1e6b      	subs	r3, r5, #1
 800761a:	b2da      	uxtb	r2, r3
 800761c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800761e:	2a00      	cmp	r2, #0
 8007620:	d1f1      	bne.n	8007606 <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8007622:	23ff      	movs	r3, #255	; 0xff
 8007624:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007628:	f001 f99e 	bl	8008968 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800762c:	f000 fd1e 	bl	800806c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8007630:	f001 f978 	bl	8008924 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007636:	b153      	cbz	r3, 800764e <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8007638:	f001 f996 	bl	8008968 <vPortExitCritical>
		taskENTER_CRITICAL();
 800763c:	f001 f972 	bl	8008924 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007640:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007642:	2d00      	cmp	r5, #0
 8007644:	d181      	bne.n	800754a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007646:	9b01      	ldr	r3, [sp, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f47f af15 	bne.w	8007478 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 800764e:	f001 f98b 	bl	8008968 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007652:	2000      	movs	r0, #0
}
 8007654:	b005      	add	sp, #20
 8007656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800765a:	f001 f985 	bl	8008968 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800765e:	9901      	ldr	r1, [sp, #4]
 8007660:	4630      	mov	r0, r6
 8007662:	f000 fd73 	bl	800814c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8007666:	f001 f95d 	bl	8008924 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800766a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800766e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007670:	2d00      	cmp	r5, #0
 8007672:	dc04      	bgt.n	800767e <xQueueReceive+0x246>
 8007674:	e011      	b.n	800769a <xQueueReceive+0x262>
 8007676:	1e6b      	subs	r3, r5, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	b25d      	sxtb	r5, r3
 800767c:	b16a      	cbz	r2, 800769a <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800767e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007680:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007682:	b153      	cbz	r3, 800769a <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007684:	f000 fdf0 	bl	8008268 <xTaskRemoveFromEventList>
 8007688:	2800      	cmp	r0, #0
 800768a:	d0f4      	beq.n	8007676 <xQueueReceive+0x23e>
						vTaskMissedYield();
 800768c:	f000 fe8a 	bl	80083a4 <vTaskMissedYield>
 8007690:	1e6b      	subs	r3, r5, #1
 8007692:	b2da      	uxtb	r2, r3
 8007694:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007696:	2a00      	cmp	r2, #0
 8007698:	d1f1      	bne.n	800767e <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 800769a:	23ff      	movs	r3, #255	; 0xff
 800769c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80076a0:	f001 f962 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 80076a4:	f001 f93e 	bl	8008924 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80076a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80076ac:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	dd14      	ble.n	80076dc <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076b2:	f104 0910 	add.w	r9, r4, #16
 80076b6:	e003      	b.n	80076c0 <xQueueReceive+0x288>
 80076b8:	1e6b      	subs	r3, r5, #1
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076be:	b16a      	cbz	r2, 80076dc <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076c0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076c4:	b153      	cbz	r3, 80076dc <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c6:	f000 fdcf 	bl	8008268 <xTaskRemoveFromEventList>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d0f4      	beq.n	80076b8 <xQueueReceive+0x280>
					vTaskMissedYield();
 80076ce:	f000 fe69 	bl	80083a4 <vTaskMissedYield>
 80076d2:	1e6b      	subs	r3, r5, #1
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076d8:	2a00      	cmp	r2, #0
 80076da:	d1f1      	bne.n	80076c0 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 80076dc:	23ff      	movs	r3, #255	; 0xff
 80076de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80076e2:	f001 f941 	bl	8008968 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80076e6:	f000 fcc1 	bl	800806c <xTaskResumeAll>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d1a6      	bne.n	800763c <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 80076ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	e79b      	b.n	800763c <xQueueReceive+0x204>
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	e7fe      	b.n	8007714 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007716:	f104 0010 	add.w	r0, r4, #16
 800771a:	f000 fda5 	bl	8008268 <xTaskRemoveFromEventList>
 800771e:	2800      	cmp	r0, #0
 8007720:	f43f af26 	beq.w	8007570 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8007724:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	e71a      	b.n	8007570 <xQueueReceive+0x138>
 800773a:	bf00      	nop

0800773c <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800773c:	4b12      	ldr	r3, [pc, #72]	; (8007788 <vQueueAddToRegistry+0x4c>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	b17a      	cbz	r2, 8007762 <vQueueAddToRegistry+0x26>
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	b162      	cbz	r2, 8007760 <vQueueAddToRegistry+0x24>
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	b192      	cbz	r2, 8007770 <vQueueAddToRegistry+0x34>
 800774a:	699a      	ldr	r2, [r3, #24]
 800774c:	b192      	cbz	r2, 8007774 <vQueueAddToRegistry+0x38>
 800774e:	6a1a      	ldr	r2, [r3, #32]
 8007750:	b192      	cbz	r2, 8007778 <vQueueAddToRegistry+0x3c>
 8007752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007754:	b192      	cbz	r2, 800777c <vQueueAddToRegistry+0x40>
 8007756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007758:	b192      	cbz	r2, 8007780 <vQueueAddToRegistry+0x44>
 800775a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775c:	b192      	cbz	r2, 8007784 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800775e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007760:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007762:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007766:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800776a:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 800776e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007770:	2202      	movs	r2, #2
 8007772:	e7f6      	b.n	8007762 <vQueueAddToRegistry+0x26>
 8007774:	2203      	movs	r2, #3
 8007776:	e7f4      	b.n	8007762 <vQueueAddToRegistry+0x26>
 8007778:	2204      	movs	r2, #4
 800777a:	e7f2      	b.n	8007762 <vQueueAddToRegistry+0x26>
 800777c:	2205      	movs	r2, #5
 800777e:	e7f0      	b.n	8007762 <vQueueAddToRegistry+0x26>
 8007780:	2206      	movs	r2, #6
 8007782:	e7ee      	b.n	8007762 <vQueueAddToRegistry+0x26>
 8007784:	2207      	movs	r2, #7
 8007786:	e7ec      	b.n	8007762 <vQueueAddToRegistry+0x26>
 8007788:	24003f18 	.word	0x24003f18

0800778c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4605      	mov	r5, r0
 8007790:	460e      	mov	r6, r1
 8007792:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007794:	f001 f8c6 	bl	8008924 <vPortEnterCritical>
 8007798:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800779c:	2bff      	cmp	r3, #255	; 0xff
 800779e:	d102      	bne.n	80077a6 <vQueueWaitForMessageRestricted+0x1a>
 80077a0:	2300      	movs	r3, #0
 80077a2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80077a6:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80077aa:	2bff      	cmp	r3, #255	; 0xff
 80077ac:	d102      	bne.n	80077b4 <vQueueWaitForMessageRestricted+0x28>
 80077ae:	2300      	movs	r3, #0
 80077b0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 80077b4:	f001 f8d8 	bl	8008968 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d043      	beq.n	8007846 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 80077be:	f001 f8b1 	bl	8008924 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80077c2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80077c6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077c8:	2c00      	cmp	r4, #0
 80077ca:	dd14      	ble.n	80077f6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077cc:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80077d0:	e003      	b.n	80077da <vQueueWaitForMessageRestricted+0x4e>
 80077d2:	1e63      	subs	r3, r4, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077d8:	b16a      	cbz	r2, 80077f6 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077dc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077de:	b153      	cbz	r3, 80077f6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077e0:	f000 fd42 	bl	8008268 <xTaskRemoveFromEventList>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d0f4      	beq.n	80077d2 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 80077e8:	f000 fddc 	bl	80083a4 <vTaskMissedYield>
 80077ec:	1e63      	subs	r3, r4, #1
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	d1f1      	bne.n	80077da <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 80077f6:	23ff      	movs	r3, #255	; 0xff
 80077f8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80077fc:	f001 f8b4 	bl	8008968 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007800:	f001 f890 	bl	8008924 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007804:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8007808:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800780a:	2c00      	cmp	r4, #0
 800780c:	dd14      	ble.n	8007838 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800780e:	f105 0610 	add.w	r6, r5, #16
 8007812:	e003      	b.n	800781c <vQueueWaitForMessageRestricted+0x90>
 8007814:	1e63      	subs	r3, r4, #1
 8007816:	b2da      	uxtb	r2, r3
 8007818:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800781a:	b16a      	cbz	r2, 8007838 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800781c:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800781e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007820:	b153      	cbz	r3, 8007838 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007822:	f000 fd21 	bl	8008268 <xTaskRemoveFromEventList>
 8007826:	2800      	cmp	r0, #0
 8007828:	d0f4      	beq.n	8007814 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 800782a:	f000 fdbb 	bl	80083a4 <vTaskMissedYield>
 800782e:	1e63      	subs	r3, r4, #1
 8007830:	b2da      	uxtb	r2, r3
 8007832:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007834:	2a00      	cmp	r2, #0
 8007836:	d1f1      	bne.n	800781c <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8007838:	23ff      	movs	r3, #255	; 0xff
 800783a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 800783e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007842:	f001 b891 	b.w	8008968 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007846:	4622      	mov	r2, r4
 8007848:	4631      	mov	r1, r6
 800784a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800784e:	f000 fcc1 	bl	80081d4 <vTaskPlaceOnEventListRestricted>
 8007852:	e7b4      	b.n	80077be <vQueueWaitForMessageRestricted+0x32>

08007854 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007858:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800785a:	f001 f863 	bl	8008924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800785e:	4a34      	ldr	r2, [pc, #208]	; (8007930 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8007860:	4e34      	ldr	r6, [pc, #208]	; (8007934 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8007862:	6813      	ldr	r3, [r2, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007868:	6833      	ldr	r3, [r6, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d032      	beq.n	80078d4 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800786e:	4c32      	ldr	r4, [pc, #200]	; (8007938 <prvAddNewTaskToReadyList+0xe4>)
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	b33b      	cbz	r3, 80078c4 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007874:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007876:	4f31      	ldr	r7, [pc, #196]	; (800793c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8007878:	4a31      	ldr	r2, [pc, #196]	; (8007940 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800787a:	4932      	ldr	r1, [pc, #200]	; (8007944 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007882:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007884:	680b      	ldr	r3, [r1, #0]
 8007886:	4283      	cmp	r3, r0
 8007888:	d200      	bcs.n	800788c <prvAddNewTaskToReadyList+0x38>
 800788a:	6008      	str	r0, [r1, #0]
 800788c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007890:	1d29      	adds	r1, r5, #4
 8007892:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007896:	f7ff fb63 	bl	8006f60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800789a:	f001 f865 	bl	8008968 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	b173      	cbz	r3, 80078c0 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078a2:	6832      	ldr	r2, [r6, #0]
 80078a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80078a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d209      	bcs.n	80078c0 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80078b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078c4:	6833      	ldr	r3, [r6, #0]
 80078c6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	4f1c      	ldr	r7, [pc, #112]	; (800793c <prvAddNewTaskToReadyList+0xe8>)
 80078cc:	4283      	cmp	r3, r0
 80078ce:	d8d3      	bhi.n	8007878 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 80078d0:	6035      	str	r5, [r6, #0]
 80078d2:	e7d1      	b.n	8007878 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 80078d4:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d003      	beq.n	80078e4 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 80078dc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80078de:	4f17      	ldr	r7, [pc, #92]	; (800793c <prvAddNewTaskToReadyList+0xe8>)
 80078e0:	4c15      	ldr	r4, [pc, #84]	; (8007938 <prvAddNewTaskToReadyList+0xe4>)
 80078e2:	e7c9      	b.n	8007878 <prvAddNewTaskToReadyList+0x24>
 80078e4:	4f15      	ldr	r7, [pc, #84]	; (800793c <prvAddNewTaskToReadyList+0xe8>)
 80078e6:	463c      	mov	r4, r7
 80078e8:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078ec:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078ee:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078f0:	f7ff fb26 	bl	8006f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078f4:	45a0      	cmp	r8, r4
 80078f6:	d1f9      	bne.n	80078ec <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078f8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800795c <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80078fc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007960 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8007900:	4648      	mov	r0, r9
 8007902:	4c0d      	ldr	r4, [pc, #52]	; (8007938 <prvAddNewTaskToReadyList+0xe4>)
 8007904:	f7ff fb1c 	bl	8006f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007908:	4640      	mov	r0, r8
 800790a:	f7ff fb19 	bl	8006f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800790e:	480e      	ldr	r0, [pc, #56]	; (8007948 <prvAddNewTaskToReadyList+0xf4>)
 8007910:	f7ff fb16 	bl	8006f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007914:	480d      	ldr	r0, [pc, #52]	; (800794c <prvAddNewTaskToReadyList+0xf8>)
 8007916:	f7ff fb13 	bl	8006f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800791a:	480d      	ldr	r0, [pc, #52]	; (8007950 <prvAddNewTaskToReadyList+0xfc>)
 800791c:	f7ff fb10 	bl	8006f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8007922:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8007924:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <prvAddNewTaskToReadyList+0x104>)
 800792a:	f8c3 8000 	str.w	r8, [r3]
}
 800792e:	e7a3      	b.n	8007878 <prvAddNewTaskToReadyList+0x24>
 8007930:	240043c4 	.word	0x240043c4
 8007934:	24003f58 	.word	0x24003f58
 8007938:	24004420 	.word	0x24004420
 800793c:	24003f64 	.word	0x24003f64
 8007940:	240043d0 	.word	0x240043d0
 8007944:	240043d4 	.word	0x240043d4
 8007948:	2400440c 	.word	0x2400440c
 800794c:	24004438 	.word	0x24004438
 8007950:	24004424 	.word	0x24004424
 8007954:	24003f5c 	.word	0x24003f5c
 8007958:	24003f60 	.word	0x24003f60
 800795c:	240043d8 	.word	0x240043d8
 8007960:	240043ec 	.word	0x240043ec

08007964 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007968:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800796a:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800796e:	4606      	mov	r6, r0
 8007970:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007972:	464a      	mov	r2, r9
 8007974:	21a5      	movs	r1, #165	; 0xa5
 8007976:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007978:	461f      	mov	r7, r3
 800797a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800797e:	f1a9 0904 	sub.w	r9, r9, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007982:	f001 fb6a 	bl	800905a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007988:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800798a:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800798e:	2d00      	cmp	r5, #0
 8007990:	f000 808a 	beq.w	8007aa8 <prvInitialiseNewTask.constprop.0+0x144>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007994:	782b      	ldrb	r3, [r5, #0]
 8007996:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800799a:	782b      	ldrb	r3, [r5, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d04d      	beq.n	8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079a0:	786b      	ldrb	r3, [r5, #1]
 80079a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80079a6:	786b      	ldrb	r3, [r5, #1]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d047      	beq.n	8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079ac:	78ab      	ldrb	r3, [r5, #2]
 80079ae:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80079b2:	78ab      	ldrb	r3, [r5, #2]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d041      	beq.n	8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079b8:	78eb      	ldrb	r3, [r5, #3]
 80079ba:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80079be:	78eb      	ldrb	r3, [r5, #3]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d03b      	beq.n	8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079c4:	792b      	ldrb	r3, [r5, #4]
 80079c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80079ca:	792b      	ldrb	r3, [r5, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d035      	beq.n	8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079d0:	796b      	ldrb	r3, [r5, #5]
 80079d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80079d6:	796b      	ldrb	r3, [r5, #5]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d02f      	beq.n	8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079dc:	79ab      	ldrb	r3, [r5, #6]
 80079de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80079e2:	79ab      	ldrb	r3, [r5, #6]
 80079e4:	b353      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079e6:	79eb      	ldrb	r3, [r5, #7]
 80079e8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80079ec:	79eb      	ldrb	r3, [r5, #7]
 80079ee:	b32b      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079f0:	7a2b      	ldrb	r3, [r5, #8]
 80079f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80079f6:	7a2b      	ldrb	r3, [r5, #8]
 80079f8:	b303      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079fa:	7a6b      	ldrb	r3, [r5, #9]
 80079fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8007a00:	7a6b      	ldrb	r3, [r5, #9]
 8007a02:	b1db      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a04:	7aab      	ldrb	r3, [r5, #10]
 8007a06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8007a0a:	7aab      	ldrb	r3, [r5, #10]
 8007a0c:	b1b3      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a0e:	7aeb      	ldrb	r3, [r5, #11]
 8007a10:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8007a14:	7aeb      	ldrb	r3, [r5, #11]
 8007a16:	b18b      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a18:	7b2b      	ldrb	r3, [r5, #12]
 8007a1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8007a1e:	7b2b      	ldrb	r3, [r5, #12]
 8007a20:	b163      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a22:	7b6b      	ldrb	r3, [r5, #13]
 8007a24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8007a28:	7b6b      	ldrb	r3, [r5, #13]
 8007a2a:	b13b      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a2c:	7bab      	ldrb	r3, [r5, #14]
 8007a2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8007a32:	7bab      	ldrb	r3, [r5, #14]
 8007a34:	b113      	cbz	r3, 8007a3c <prvInitialiseNewTask.constprop.0+0xd8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a36:	7beb      	ldrb	r3, [r5, #15]
 8007a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a42:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8007a44:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a48:	1d20      	adds	r0, r4, #4
 8007a4a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007a4c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8007a50:	bf28      	it	cs
 8007a52:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007a54:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007a56:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a58:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a5c:	f7ff fa7c 	bl	8006f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a60:	f104 0018 	add.w	r0, r4, #24
 8007a64:	f7ff fa78 	bl	8006f58 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a68:	4651      	mov	r1, sl
 8007a6a:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8007a6c:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a70:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a74:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a76:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a78:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a7a:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a7e:	f001 faec 	bl	800905a <memset>
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <prvInitialiseNewTask.constprop.0+0x14c>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a84:	463a      	mov	r2, r7
 8007a86:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a88:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a8a:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a8c:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <prvInitialiseNewTask.constprop.0+0x150>)
 8007a8e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8007a90:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <prvInitialiseNewTask.constprop.0+0x154>)
 8007a92:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a94:	f000 ff16 	bl	80088c4 <pxPortInitialiseStack>
 8007a98:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007a9a:	f1b8 0f00 	cmp.w	r8, #0
 8007a9e:	d001      	beq.n	8007aa4 <prvInitialiseNewTask.constprop.0+0x140>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aa0:	f8c8 4000 	str.w	r4, [r8]
}
 8007aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007aa8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8007aac:	e7c9      	b.n	8007a42 <prvInitialiseNewTask.constprop.0+0xde>
 8007aae:	bf00      	nop
 8007ab0:	0800ae68 	.word	0x0800ae68
 8007ab4:	0800ae88 	.word	0x0800ae88
 8007ab8:	0800ae48 	.word	0x0800ae48

08007abc <prvIdleTask>:
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	4d23      	ldr	r5, [pc, #140]	; (8007b4c <prvIdleTask+0x90>)
				taskYIELD();
 8007ac0:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
 8007ac4:	4f22      	ldr	r7, [pc, #136]	; (8007b50 <prvIdleTask+0x94>)
 8007ac6:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8007aca:	4e22      	ldr	r6, [pc, #136]	; (8007b54 <prvIdleTask+0x98>)
 8007acc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8007b58 <prvIdleTask+0x9c>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b35b      	cbz	r3, 8007b2c <prvIdleTask+0x70>
		{
			taskENTER_CRITICAL();
 8007ad4:	f000 ff26 	bl	8008924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007adc:	1d20      	adds	r0, r4, #4
 8007ade:	f7ff fa67 	bl	8006fb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ae2:	6833      	ldr	r3, [r6, #0]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8007aee:	f000 ff3b 	bl	8008968 <vPortExitCritical>
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007af2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8007af6:	f001 fb73 	bl	80091e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007afa:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8007afe:	b163      	cbz	r3, 8007b1a <prvIdleTask+0x5e>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d01e      	beq.n	8007b42 <prvIdleTask+0x86>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d0e3      	beq.n	8007ad0 <prvIdleTask+0x14>
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	e7fe      	b.n	8007b18 <prvIdleTask+0x5c>
				vPortFree( pxTCB->pxStack );
 8007b1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007b1c:	f001 f8f0 	bl	8008d00 <vPortFree>
				vPortFree( pxTCB );
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 f8ed 	bl	8008d00 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1d3      	bne.n	8007ad4 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d9cd      	bls.n	8007ad0 <prvIdleTask+0x14>
				taskYIELD();
 8007b34:	f8ca 9d04 	str.w	r9, [sl, #3332]	; 0xd04
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	e7c6      	b.n	8007ad0 <prvIdleTask+0x14>
				vPortFree( pxTCB );
 8007b42:	4620      	mov	r0, r4
 8007b44:	f001 f8dc 	bl	8008d00 <vPortFree>
 8007b48:	e7c2      	b.n	8007ad0 <prvIdleTask+0x14>
 8007b4a:	bf00      	nop
 8007b4c:	240043c8 	.word	0x240043c8
 8007b50:	24004438 	.word	0x24004438
 8007b54:	240043c4 	.word	0x240043c4
 8007b58:	24003f64 	.word	0x24003f64

08007b5c <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b5c:	4b4a      	ldr	r3, [pc, #296]	; (8007c88 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
 8007b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b62:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
 8007b64:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b66:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8007b68:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	d040      	beq.n	8007bf0 <xTaskIncrementTick.part.0+0x94>
 8007b6e:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007c9c <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b72:	f8db 3000 	ldr.w	r3, [fp]
 8007b76:	429e      	cmp	r6, r3
 8007b78:	d347      	bcc.n	8007c0a <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b7a:	4f44      	ldr	r7, [pc, #272]	; (8007c8c <xTaskIncrementTick.part.0+0x130>)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681d      	ldr	r5, [r3, #0]
 8007b80:	2d00      	cmp	r5, #0
 8007b82:	d077      	beq.n	8007c74 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
 8007b84:	2500      	movs	r5, #0
 8007b86:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8007ca0 <xTaskIncrementTick.part.0+0x144>
 8007b8a:	f8df a118 	ldr.w	sl, [pc, #280]	; 8007ca4 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
 8007b8e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8007ca8 <xTaskIncrementTick.part.0+0x14c>
 8007b92:	e022      	b.n	8007bda <xTaskIncrementTick.part.0+0x7e>
 8007b94:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b96:	f7ff fa0b 	bl	8006fb0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b9c:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ba0:	9901      	ldr	r1, [sp, #4]
 8007ba2:	b113      	cbz	r3, 8007baa <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ba4:	f7ff fa04 	bl	8006fb0 <uxListRemove>
 8007ba8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8007baa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007bac:	f8d8 2000 	ldr.w	r2, [r8]
 8007bb0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007bba:	d901      	bls.n	8007bc0 <xTaskIncrementTick.part.0+0x64>
 8007bbc:	f8c8 3000 	str.w	r3, [r8]
 8007bc0:	f7ff f9ce 	bl	8006f60 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bc4:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc8:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007bcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bce:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8007bd0:	4291      	cmp	r1, r2
 8007bd2:	bf28      	it	cs
 8007bd4:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d050      	beq.n	8007c7c <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007be0:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007be2:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8007be4:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007be6:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8007be8:	d2d4      	bcs.n	8007b94 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8007bea:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bee:	e011      	b.n	8007c14 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8007bf0:	4b26      	ldr	r3, [pc, #152]	; (8007c8c <xTaskIncrementTick.part.0+0x130>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	b30a      	cbz	r2, 8007c3c <xTaskIncrementTick.part.0+0xe0>
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	e7fe      	b.n	8007c08 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007ca0 <xTaskIncrementTick.part.0+0x144>
 8007c10:	f8df a090 	ldr.w	sl, [pc, #144]	; 8007ca4 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c14:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8007c18:	491d      	ldr	r1, [pc, #116]	; (8007c90 <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8007c26:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8007c28:	2a02      	cmp	r2, #2
 8007c2a:	bf28      	it	cs
 8007c2c:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8007c2e:	2b00      	cmp	r3, #0
}
 8007c30:	bf0c      	ite	eq
 8007c32:	4628      	moveq	r0, r5
 8007c34:	2001      	movne	r0, #1
 8007c36:	b003      	add	sp, #12
 8007c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8007c3c:	4a15      	ldr	r2, [pc, #84]	; (8007c94 <xTaskIncrementTick.part.0+0x138>)
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	6811      	ldr	r1, [r2, #0]
 8007c42:	6019      	str	r1, [r3, #0]
 8007c44:	4914      	ldr	r1, [pc, #80]	; (8007c98 <xTaskIncrementTick.part.0+0x13c>)
 8007c46:	6010      	str	r0, [r2, #0]
 8007c48:	680a      	ldr	r2, [r1, #0]
 8007c4a:	3201      	adds	r2, #1
 8007c4c:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	6812      	ldr	r2, [r2, #0]
 8007c52:	b932      	cbnz	r2, 8007c62 <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c54:	f8df b044 	ldr.w	fp, [pc, #68]	; 8007c9c <xTaskIncrementTick.part.0+0x140>
 8007c58:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5c:	f8cb 3000 	str.w	r3, [fp]
 8007c60:	e787      	b.n	8007b72 <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c62:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c64:	f8df b034 	ldr.w	fp, [pc, #52]	; 8007c9c <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c68:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f8cb 3000 	str.w	r3, [fp]
	}
}
 8007c72:	e77e      	b.n	8007b72 <xTaskIncrementTick.part.0+0x16>
 8007c74:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8007ca0 <xTaskIncrementTick.part.0+0x144>
 8007c78:	f8df a028 	ldr.w	sl, [pc, #40]	; 8007ca4 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c80:	f8cb 3000 	str.w	r3, [fp]
					break;
 8007c84:	e7c6      	b.n	8007c14 <xTaskIncrementTick.part.0+0xb8>
 8007c86:	bf00      	nop
 8007c88:	2400444c 	.word	0x2400444c
 8007c8c:	24003f5c 	.word	0x24003f5c
 8007c90:	24004450 	.word	0x24004450
 8007c94:	24003f60 	.word	0x24003f60
 8007c98:	24004404 	.word	0x24004404
 8007c9c:	24004400 	.word	0x24004400
 8007ca0:	24003f64 	.word	0x24003f64
 8007ca4:	24003f58 	.word	0x24003f58
 8007ca8:	240043d4 	.word	0x240043d4

08007cac <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8007cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8007cb0:	4d41      	ldr	r5, [pc, #260]	; (8007db8 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 8007cb2:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8007cb4:	f000 fe36 	bl	8008924 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d161      	bne.n	8007d88 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cc4:	4b3d      	ldr	r3, [pc, #244]	; (8007dbc <xTaskResumeAll.part.0+0x110>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d05d      	beq.n	8007d88 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ccc:	4e3c      	ldr	r6, [pc, #240]	; (8007dc0 <xTaskResumeAll.part.0+0x114>)
 8007cce:	6833      	ldr	r3, [r6, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d06e      	beq.n	8007db2 <xTaskResumeAll.part.0+0x106>
 8007cd4:	4f3b      	ldr	r7, [pc, #236]	; (8007dc4 <xTaskResumeAll.part.0+0x118>)
 8007cd6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8007dd4 <xTaskResumeAll.part.0+0x128>
 8007cda:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8007dd8 <xTaskResumeAll.part.0+0x12c>
 8007cde:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8007ddc <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce2:	68f3      	ldr	r3, [r6, #12]
 8007ce4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce6:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cea:	f104 0018 	add.w	r0, r4, #24
 8007cee:	f7ff f95f 	bl	8006fb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cf2:	4658      	mov	r0, fp
 8007cf4:	f7ff f95c 	bl	8006fb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007d02:	4293      	cmp	r3, r2
 8007d04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007d08:	d900      	bls.n	8007d0c <xTaskResumeAll.part.0+0x60>
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	f7ff f928 	bl	8006f60 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d10:	f8d8 3000 	ldr.w	r3, [r8]
 8007d14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d33d      	bcc.n	8007d98 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d22:	6833      	ldr	r3, [r6, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1dc      	bne.n	8007ce2 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d28:	4b27      	ldr	r3, [pc, #156]	; (8007dc8 <xTaskResumeAll.part.0+0x11c>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	d03a      	beq.n	8007da8 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d32:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d34:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d36:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d38:	68d2      	ldr	r2, [r2, #12]
 8007d3a:	6852      	ldr	r2, [r2, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d3e:	4e24      	ldr	r6, [pc, #144]	; (8007dd0 <xTaskResumeAll.part.0+0x124>)
 8007d40:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007d42:	b194      	cbz	r4, 8007d6a <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8007d44:	2701      	movs	r7, #1
 8007d46:	e006      	b.n	8007d56 <xTaskResumeAll.part.0+0xaa>
 8007d48:	f7ff ff08 	bl	8007b5c <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8007d4c:	b108      	cbz	r0, 8007d52 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8007d4e:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d52:	3c01      	subs	r4, #1
 8007d54:	d008      	beq.n	8007d68 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d56:	682b      	ldr	r3, [r5, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0f5      	beq.n	8007d48 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8007d5c:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d5e:	3c01      	subs	r4, #1
		++xPendedTicks;
 8007d60:	f103 0301 	add.w	r3, r3, #1
 8007d64:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d66:	d1f6      	bne.n	8007d56 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8007d68:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8007d6a:	f8da 3000 	ldr.w	r3, [sl]
 8007d6e:	b15b      	cbz	r3, 8007d88 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8007d70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007d84:	2001      	movs	r0, #1
 8007d86:	e000      	b.n	8007d8a <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8007d88:	2000      	movs	r0, #0
 8007d8a:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8007d8c:	f000 fdec 	bl	8008968 <vPortExitCritical>
}
 8007d90:	9801      	ldr	r0, [sp, #4]
 8007d92:	b003      	add	sp, #12
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d98:	6833      	ldr	r3, [r6, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1a1      	bne.n	8007ce2 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d9e:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <xTaskResumeAll.part.0+0x11c>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	6812      	ldr	r2, [r2, #0]
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	d1c4      	bne.n	8007d32 <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007da8:	4b08      	ldr	r3, [pc, #32]	; (8007dcc <xTaskResumeAll.part.0+0x120>)
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	e7c5      	b.n	8007d3e <xTaskResumeAll.part.0+0x92>
 8007db2:	f8df a028 	ldr.w	sl, [pc, #40]	; 8007ddc <xTaskResumeAll.part.0+0x130>
 8007db6:	e7c2      	b.n	8007d3e <xTaskResumeAll.part.0+0x92>
 8007db8:	240043cc 	.word	0x240043cc
 8007dbc:	240043c4 	.word	0x240043c4
 8007dc0:	2400440c 	.word	0x2400440c
 8007dc4:	240043d4 	.word	0x240043d4
 8007dc8:	24003f5c 	.word	0x24003f5c
 8007dcc:	24004400 	.word	0x24004400
 8007dd0:	24004408 	.word	0x24004408
 8007dd4:	24003f64 	.word	0x24003f64
 8007dd8:	24003f58 	.word	0x24003f58
 8007ddc:	24004450 	.word	0x24004450

08007de0 <xTaskCreateStatic>:
	{
 8007de0:	b530      	push	{r4, r5, lr}
 8007de2:	b087      	sub	sp, #28
 8007de4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007de6:	b1c4      	cbz	r4, 8007e1a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8007de8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dea:	b16d      	cbz	r5, 8007e08 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dec:	25bc      	movs	r5, #188	; 0xbc
 8007dee:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007df0:	9d05      	ldr	r5, [sp, #20]
 8007df2:	2dbc      	cmp	r5, #188	; 0xbc
 8007df4:	d01a      	beq.n	8007e2c <xTaskCreateStatic+0x4c>
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	e7fe      	b.n	8007e06 <xTaskCreateStatic+0x26>
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	e7fe      	b.n	8007e18 <xTaskCreateStatic+0x38>
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	e7fe      	b.n	8007e2a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e2e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e30:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e32:	9502      	str	r5, [sp, #8]
 8007e34:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007e36:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e3a:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e3e:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e40:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e42:	9401      	str	r4, [sp, #4]
 8007e44:	f7ff fd8e 	bl	8007964 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e4a:	f7ff fd03 	bl	8007854 <prvAddNewTaskToReadyList>
	}
 8007e4e:	9804      	ldr	r0, [sp, #16]
 8007e50:	b007      	add	sp, #28
 8007e52:	bd30      	pop	{r4, r5, pc}

08007e54 <xTaskCreate>:
	{
 8007e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e58:	4607      	mov	r7, r0
 8007e5a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e5c:	0090      	lsls	r0, r2, #2
	{
 8007e5e:	4615      	mov	r5, r2
 8007e60:	4688      	mov	r8, r1
 8007e62:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e64:	f000 fe90 	bl	8008b88 <pvPortMalloc>
			if( pxStack != NULL )
 8007e68:	b1d8      	cbz	r0, 8007ea2 <xTaskCreate+0x4e>
 8007e6a:	4604      	mov	r4, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e6c:	20bc      	movs	r0, #188	; 0xbc
 8007e6e:	f000 fe8b 	bl	8008b88 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007e72:	4606      	mov	r6, r0
 8007e74:	b1d0      	cbz	r0, 8007eac <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8007e76:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e78:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e7e:	f886 40b9 	strb.w	r4, [r6, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e82:	4641      	mov	r1, r8
 8007e84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007e86:	4638      	mov	r0, r7
 8007e88:	9602      	str	r6, [sp, #8]
 8007e8a:	9401      	str	r4, [sp, #4]
 8007e8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e8e:	9400      	str	r4, [sp, #0]
 8007e90:	f7ff fd68 	bl	8007964 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7ff fcdd 	bl	8007854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e9a:	2001      	movs	r0, #1
	}
 8007e9c:	b005      	add	sp, #20
 8007e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ea2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007ea6:	b005      	add	sp, #20
 8007ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 ff27 	bl	8008d00 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb6:	e7f1      	b.n	8007e9c <xTaskCreate+0x48>

08007eb8 <vTaskDelay>:
	{
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007eba:	b950      	cbnz	r0, 8007ed2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8007ebc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	f3bf 8f6f 	isb	sy
	}
 8007ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8007ed2:	4d1e      	ldr	r5, [pc, #120]	; (8007f4c <vTaskDelay+0x94>)
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b143      	cbz	r3, 8007eea <vTaskDelay+0x32>
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	e7fe      	b.n	8007ee8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	4604      	mov	r4, r0
 8007eee:	3301      	adds	r3, #1
 8007ef0:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ef2:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef4:	4e17      	ldr	r6, [pc, #92]	; (8007f54 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
 8007ef6:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef8:	6830      	ldr	r0, [r6, #0]
 8007efa:	3004      	adds	r0, #4
 8007efc:	f7ff f858 	bl	8006fb0 <uxListRemove>
 8007f00:	19e4      	adds	r4, r4, r7
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f02:	6833      	ldr	r3, [r6, #0]
 8007f04:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007f06:	d315      	bcc.n	8007f34 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f08:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <vTaskDelay+0xa0>)
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	6831      	ldr	r1, [r6, #0]
 8007f0e:	3104      	adds	r1, #4
 8007f10:	f7ff f836 	bl	8006f80 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b943      	cbnz	r3, 8007f2a <vTaskDelay+0x72>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	e7fe      	b.n	8007f28 <vTaskDelay+0x70>
 8007f2a:	f7ff febf 	bl	8007cac <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d0c4      	beq.n	8007ebc <vTaskDelay+0x4>
	}
 8007f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <vTaskDelay+0xa4>)
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	6831      	ldr	r1, [r6, #0]
 8007f3a:	3104      	adds	r1, #4
 8007f3c:	f7ff f820 	bl	8006f80 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <vTaskDelay+0xa8>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	4294      	cmp	r4, r2
 8007f46:	d2e5      	bcs.n	8007f14 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007f48:	601c      	str	r4, [r3, #0]
 8007f4a:	e7e3      	b.n	8007f14 <vTaskDelay+0x5c>
 8007f4c:	240043cc 	.word	0x240043cc
 8007f50:	2400444c 	.word	0x2400444c
 8007f54:	24003f58 	.word	0x24003f58
 8007f58:	24003f60 	.word	0x24003f60
 8007f5c:	24003f5c 	.word	0x24003f5c
 8007f60:	24004400 	.word	0x24004400

08007f64 <vTaskStartScheduler>:
{
 8007f64:	b530      	push	{r4, r5, lr}
 8007f66:	b08b      	sub	sp, #44	; 0x2c
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f68:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f6a:	aa07      	add	r2, sp, #28
 8007f6c:	a906      	add	r1, sp, #24
 8007f6e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f70:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f74:	f7fe ffc6 	bl	8006f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f78:	9b06      	ldr	r3, [sp, #24]
		configASSERT( puxStackBuffer != NULL );
 8007f7a:	b1cb      	cbz	r3, 8007fb0 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f7c:	9d05      	ldr	r5, [sp, #20]
		configASSERT( pxTaskBuffer != NULL );
 8007f7e:	b175      	cbz	r5, 8007f9e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f80:	21bc      	movs	r1, #188	; 0xbc
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f82:	9a07      	ldr	r2, [sp, #28]
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f84:	9109      	str	r1, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f88:	29bc      	cmp	r1, #188	; 0xbc
 8007f8a:	d01a      	beq.n	8007fc2 <vTaskStartScheduler+0x5e>
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	e7fe      	b.n	8007f9c <vTaskStartScheduler+0x38>
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	e7fe      	b.n	8007fae <vTaskStartScheduler+0x4a>
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	e7fe      	b.n	8007fc0 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fc2:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fc4:	632b      	str	r3, [r5, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fc6:	481e      	ldr	r0, [pc, #120]	; (8008040 <vTaskStartScheduler+0xdc>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fc8:	f885 10b9 	strb.w	r1, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fcc:	a908      	add	r1, sp, #32
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	9400      	str	r4, [sp, #0]
 8007fd4:	e9cd 1501 	strd	r1, r5, [sp, #4]
 8007fd8:	491a      	ldr	r1, [pc, #104]	; (8008044 <vTaskStartScheduler+0xe0>)
 8007fda:	f7ff fcc3 	bl	8007964 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f7ff fc38 	bl	8007854 <prvAddNewTaskToReadyList>
		return xReturn;
 8007fe4:	9b08      	ldr	r3, [sp, #32]
		if( xIdleTaskHandle != NULL )
 8007fe6:	b1eb      	cbz	r3, 8008024 <vTaskStartScheduler+0xc0>
			xReturn = xTimerCreateTimerTask();
 8007fe8:	f000 fbd0 	bl	800878c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007fec:	2801      	cmp	r0, #1
 8007fee:	d11b      	bne.n	8008028 <vTaskStartScheduler+0xc4>
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008000:	4b11      	ldr	r3, [pc, #68]	; (8008048 <vTaskStartScheduler+0xe4>)
 8008002:	4a12      	ldr	r2, [pc, #72]	; (800804c <vTaskStartScheduler+0xe8>)
 8008004:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008006:	4912      	ldr	r1, [pc, #72]	; (8008050 <vTaskStartScheduler+0xec>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008008:	3354      	adds	r3, #84	; 0x54
 800800a:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800800c:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8008010:	4a10      	ldr	r2, [pc, #64]	; (8008054 <vTaskStartScheduler+0xf0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8008012:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008014:	4b10      	ldr	r3, [pc, #64]	; (8008058 <vTaskStartScheduler+0xf4>)
		xSchedulerRunning = pdTRUE;
 8008016:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008018:	601c      	str	r4, [r3, #0]
}
 800801a:	b00b      	add	sp, #44	; 0x2c
 800801c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008020:	f000 bd12 	b.w	8008a48 <xPortStartScheduler>
}
 8008024:	b00b      	add	sp, #44	; 0x2c
 8008026:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008028:	3001      	adds	r0, #1
 800802a:	d1fb      	bne.n	8008024 <vTaskStartScheduler+0xc0>
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	e7fe      	b.n	800803c <vTaskStartScheduler+0xd8>
 800803e:	bf00      	nop
 8008040:	08007abd 	.word	0x08007abd
 8008044:	0800ae30 	.word	0x0800ae30
 8008048:	24003f58 	.word	0x24003f58
 800804c:	240030d8 	.word	0x240030d8
 8008050:	24004400 	.word	0x24004400
 8008054:	24004420 	.word	0x24004420
 8008058:	2400444c 	.word	0x2400444c

0800805c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800805c:	4a02      	ldr	r2, [pc, #8]	; (8008068 <vTaskSuspendAll+0xc>)
 800805e:	6813      	ldr	r3, [r2, #0]
 8008060:	3301      	adds	r3, #1
 8008062:	6013      	str	r3, [r2, #0]
}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	240043cc 	.word	0x240043cc

0800806c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <xTaskResumeAll+0x1c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	b943      	cbnz	r3, 8008084 <xTaskResumeAll+0x18>
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	e7fe      	b.n	8008082 <xTaskResumeAll+0x16>
 8008084:	f7ff be12 	b.w	8007cac <xTaskResumeAll.part.0>
 8008088:	240043cc 	.word	0x240043cc

0800808c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800808c:	4b01      	ldr	r3, [pc, #4]	; (8008094 <xTaskGetTickCount+0x8>)
 800808e:	6818      	ldr	r0, [r3, #0]
}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	2400444c 	.word	0x2400444c

08008098 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008098:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <xTaskIncrementTick+0x18>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	b90b      	cbnz	r3, 80080a2 <xTaskIncrementTick+0xa>
 800809e:	f7ff bd5d 	b.w	8007b5c <xTaskIncrementTick.part.0>
		++xPendedTicks;
 80080a2:	4a04      	ldr	r2, [pc, #16]	; (80080b4 <xTaskIncrementTick+0x1c>)
}
 80080a4:	2000      	movs	r0, #0
		++xPendedTicks;
 80080a6:	6813      	ldr	r3, [r2, #0]
 80080a8:	3301      	adds	r3, #1
 80080aa:	6013      	str	r3, [r2, #0]
}
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	240043cc 	.word	0x240043cc
 80080b4:	24004408 	.word	0x24004408

080080b8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <vTaskSwitchContext+0x7c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	b11b      	cbz	r3, 80080c6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80080be:	4b1e      	ldr	r3, [pc, #120]	; (8008138 <vTaskSwitchContext+0x80>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80080c6:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <vTaskSwitchContext+0x80>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c8:	491c      	ldr	r1, [pc, #112]	; (800813c <vTaskSwitchContext+0x84>)
{
 80080ca:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080cc:	4c1c      	ldr	r4, [pc, #112]	; (8008140 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 80080ce:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80080d6:	0098      	lsls	r0, r3, #2
 80080d8:	0092      	lsls	r2, r2, #2
 80080da:	588a      	ldr	r2, [r1, r2]
 80080dc:	b942      	cbnz	r2, 80080f0 <vTaskSwitchContext+0x38>
 80080de:	b1e3      	cbz	r3, 800811a <vTaskSwitchContext+0x62>
 80080e0:	3b01      	subs	r3, #1
 80080e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80080e6:	0098      	lsls	r0, r3, #2
 80080e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	d0f6      	beq.n	80080de <vTaskSwitchContext+0x26>
 80080f0:	18c2      	adds	r2, r0, r3
 80080f2:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80080f6:	6841      	ldr	r1, [r0, #4]
 80080f8:	4602      	mov	r2, r0
 80080fa:	6849      	ldr	r1, [r1, #4]
 80080fc:	3208      	adds	r2, #8
 80080fe:	4291      	cmp	r1, r2
 8008100:	6041      	str	r1, [r0, #4]
 8008102:	d013      	beq.n	800812c <vTaskSwitchContext+0x74>
 8008104:	4a0f      	ldr	r2, [pc, #60]	; (8008144 <vTaskSwitchContext+0x8c>)
 8008106:	68c8      	ldr	r0, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008108:	490f      	ldr	r1, [pc, #60]	; (8008148 <vTaskSwitchContext+0x90>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810a:	6010      	str	r0, [r2, #0]
 800810c:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800810e:	6813      	ldr	r3, [r2, #0]
}
 8008110:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008114:	3354      	adds	r3, #84	; 0x54
 8008116:	600b      	str	r3, [r1, #0]
}
 8008118:	4770      	bx	lr
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	e7fe      	b.n	800812a <vTaskSwitchContext+0x72>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812c:	6849      	ldr	r1, [r1, #4]
 800812e:	6041      	str	r1, [r0, #4]
 8008130:	e7e8      	b.n	8008104 <vTaskSwitchContext+0x4c>
 8008132:	bf00      	nop
 8008134:	240043cc 	.word	0x240043cc
 8008138:	24004450 	.word	0x24004450
 800813c:	24003f64 	.word	0x24003f64
 8008140:	240043d4 	.word	0x240043d4
 8008144:	24003f58 	.word	0x24003f58
 8008148:	240030d8 	.word	0x240030d8

0800814c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800814c:	b1f0      	cbz	r0, 800818c <vTaskPlaceOnEventList+0x40>
{
 800814e:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008150:	4d1a      	ldr	r5, [pc, #104]	; (80081bc <vTaskPlaceOnEventList+0x70>)
 8008152:	460c      	mov	r4, r1
 8008154:	6829      	ldr	r1, [r5, #0]
 8008156:	3118      	adds	r1, #24
 8008158:	f7fe ff12 	bl	8006f80 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800815c:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <vTaskPlaceOnEventList+0x74>)
 800815e:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008160:	6828      	ldr	r0, [r5, #0]
 8008162:	3004      	adds	r0, #4
 8008164:	f7fe ff24 	bl	8006fb0 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008168:	1c63      	adds	r3, r4, #1
 800816a:	d020      	beq.n	80081ae <vTaskPlaceOnEventList+0x62>
 800816c:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008172:	d214      	bcs.n	800819e <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008174:	4b13      	ldr	r3, [pc, #76]	; (80081c4 <vTaskPlaceOnEventList+0x78>)
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	6829      	ldr	r1, [r5, #0]
 800817a:	3104      	adds	r1, #4
 800817c:	f7fe ff00 	bl	8006f80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008180:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <vTaskPlaceOnEventList+0x7c>)
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	4294      	cmp	r4, r2
 8008186:	d200      	bcs.n	800818a <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
 8008188:	601c      	str	r4, [r3, #0]
}
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	e7fe      	b.n	800819c <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <vTaskPlaceOnEventList+0x80>)
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	6829      	ldr	r1, [r5, #0]
}
 80081a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081a8:	3104      	adds	r1, #4
 80081aa:	f7fe bee9 	b.w	8006f80 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ae:	6829      	ldr	r1, [r5, #0]
 80081b0:	4807      	ldr	r0, [pc, #28]	; (80081d0 <vTaskPlaceOnEventList+0x84>)
 80081b2:	3104      	adds	r1, #4
}
 80081b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b8:	f7fe bed2 	b.w	8006f60 <vListInsertEnd>
 80081bc:	24003f58 	.word	0x24003f58
 80081c0:	2400444c 	.word	0x2400444c
 80081c4:	24003f5c 	.word	0x24003f5c
 80081c8:	24004400 	.word	0x24004400
 80081cc:	24003f60 	.word	0x24003f60
 80081d0:	24004424 	.word	0x24004424

080081d4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 80081d4:	b358      	cbz	r0, 800822e <vTaskPlaceOnEventListRestricted+0x5a>
	{
 80081d6:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081d8:	4e1d      	ldr	r6, [pc, #116]	; (8008250 <vTaskPlaceOnEventListRestricted+0x7c>)
 80081da:	460c      	mov	r4, r1
 80081dc:	4615      	mov	r5, r2
 80081de:	6831      	ldr	r1, [r6, #0]
 80081e0:	3118      	adds	r1, #24
 80081e2:	f7fe febd 	bl	8006f60 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80081e6:	b165      	cbz	r5, 8008202 <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
 80081e8:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <vTaskPlaceOnEventListRestricted+0x80>)
 80081ea:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ec:	6830      	ldr	r0, [r6, #0]
 80081ee:	3004      	adds	r0, #4
 80081f0:	f7fe fede 	bl	8006fb0 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f4:	6831      	ldr	r1, [r6, #0]
 80081f6:	4818      	ldr	r0, [pc, #96]	; (8008258 <vTaskPlaceOnEventListRestricted+0x84>)
 80081f8:	3104      	adds	r1, #4
	}
 80081fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081fe:	f7fe beaf 	b.w	8006f60 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8008202:	4b14      	ldr	r3, [pc, #80]	; (8008254 <vTaskPlaceOnEventListRestricted+0x80>)
 8008204:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008206:	6830      	ldr	r0, [r6, #0]
 8008208:	3004      	adds	r0, #4
 800820a:	f7fe fed1 	bl	8006fb0 <uxListRemove>
 800820e:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008210:	6833      	ldr	r3, [r6, #0]
 8008212:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008214:	d214      	bcs.n	8008240 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <vTaskPlaceOnEventListRestricted+0x88>)
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	6831      	ldr	r1, [r6, #0]
 800821c:	3104      	adds	r1, #4
 800821e:	f7fe feaf 	bl	8006f80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <vTaskPlaceOnEventListRestricted+0x8c>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	4294      	cmp	r4, r2
 8008228:	d200      	bcs.n	800822c <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800822a:	601c      	str	r4, [r3, #0]
	}
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	e7fe      	b.n	800823e <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008240:	4b08      	ldr	r3, [pc, #32]	; (8008264 <vTaskPlaceOnEventListRestricted+0x90>)
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	6831      	ldr	r1, [r6, #0]
	}
 8008246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800824a:	3104      	adds	r1, #4
 800824c:	f7fe be98 	b.w	8006f80 <vListInsert>
 8008250:	24003f58 	.word	0x24003f58
 8008254:	2400444c 	.word	0x2400444c
 8008258:	24004424 	.word	0x24004424
 800825c:	24003f5c 	.word	0x24003f5c
 8008260:	24004400 	.word	0x24004400
 8008264:	24003f60 	.word	0x24003f60

08008268 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008268:	68c3      	ldr	r3, [r0, #12]
{
 800826a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826c:	68dc      	ldr	r4, [r3, #12]
{
 800826e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8008270:	b35c      	cbz	r4, 80082ca <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008272:	f104 0518 	add.w	r5, r4, #24
 8008276:	4628      	mov	r0, r5
 8008278:	f7fe fe9a 	bl	8006fb0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800827c:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <xTaskRemoveFromEventList+0x7c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	b17b      	cbz	r3, 80082a2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008282:	4629      	mov	r1, r5
 8008284:	4818      	ldr	r0, [pc, #96]	; (80082e8 <xTaskRemoveFromEventList+0x80>)
 8008286:	f7fe fe6b 	bl	8006f60 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800828a:	4b18      	ldr	r3, [pc, #96]	; (80082ec <xTaskRemoveFromEventList+0x84>)
 800828c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	429a      	cmp	r2, r3
 8008294:	d922      	bls.n	80082dc <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8008296:	2301      	movs	r3, #1
 8008298:	4a15      	ldr	r2, [pc, #84]	; (80082f0 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 800829a:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 800829c:	6013      	str	r3, [r2, #0]
}
 800829e:	b003      	add	sp, #12
 80082a0:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082a2:	1d21      	adds	r1, r4, #4
 80082a4:	4608      	mov	r0, r1
 80082a6:	9101      	str	r1, [sp, #4]
 80082a8:	f7fe fe82 	bl	8006fb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082ac:	4a11      	ldr	r2, [pc, #68]	; (80082f4 <xTaskRemoveFromEventList+0x8c>)
 80082ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082b0:	6810      	ldr	r0, [r2, #0]
 80082b2:	9901      	ldr	r1, [sp, #4]
 80082b4:	4283      	cmp	r3, r0
 80082b6:	d900      	bls.n	80082ba <xTaskRemoveFromEventList+0x52>
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082be:	480e      	ldr	r0, [pc, #56]	; (80082f8 <xTaskRemoveFromEventList+0x90>)
 80082c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80082c4:	f7fe fe4c 	bl	8006f60 <vListInsertEnd>
 80082c8:	e7df      	b.n	800828a <xTaskRemoveFromEventList+0x22>
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	e7fe      	b.n	80082da <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 80082dc:	2000      	movs	r0, #0
}
 80082de:	b003      	add	sp, #12
 80082e0:	bd30      	pop	{r4, r5, pc}
 80082e2:	bf00      	nop
 80082e4:	240043cc 	.word	0x240043cc
 80082e8:	2400440c 	.word	0x2400440c
 80082ec:	24003f58 	.word	0x24003f58
 80082f0:	24004450 	.word	0x24004450
 80082f4:	240043d4 	.word	0x240043d4
 80082f8:	24003f64 	.word	0x24003f64

080082fc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082fc:	4a03      	ldr	r2, [pc, #12]	; (800830c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082fe:	4b04      	ldr	r3, [pc, #16]	; (8008310 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008300:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	e9c0 2300 	strd	r2, r3, [r0]
}
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	24004404 	.word	0x24004404
 8008310:	2400444c 	.word	0x2400444c

08008314 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8008314:	b328      	cbz	r0, 8008362 <xTaskCheckForTimeOut+0x4e>
{
 8008316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008318:	460d      	mov	r5, r1
 800831a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 800831c:	b1c1      	cbz	r1, 8008350 <xTaskCheckForTimeOut+0x3c>
 800831e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008320:	f000 fb00 	bl	8008924 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8008324:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8008326:	4a1d      	ldr	r2, [pc, #116]	; (800839c <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8008328:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800832a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800832c:	d030      	beq.n	8008390 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800832e:	f8df c070 	ldr.w	ip, [pc, #112]	; 80083a0 <xTaskCheckForTimeOut+0x8c>
 8008332:	6826      	ldr	r6, [r4, #0]
 8008334:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008338:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800833a:	42be      	cmp	r6, r7
 800833c:	d01a      	beq.n	8008374 <xTaskCheckForTimeOut+0x60>
 800833e:	4288      	cmp	r0, r1
 8008340:	d818      	bhi.n	8008374 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8008342:	2001      	movs	r0, #1
 8008344:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8008346:	f000 fb0f 	bl	8008968 <vPortExitCritical>
}
 800834a:	9801      	ldr	r0, [sp, #4]
 800834c:	b003      	add	sp, #12
 800834e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	e7fe      	b.n	8008360 <xTaskCheckForTimeOut+0x4c>
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	e7fe      	b.n	8008372 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008374:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008378:	4573      	cmp	r3, lr
 800837a:	d90b      	bls.n	8008394 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 800837c:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800837e:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008382:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8008384:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8008386:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8008388:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800838a:	e9c4 1200 	strd	r1, r2, [r4]
 800838e:	e7d9      	b.n	8008344 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8008390:	2000      	movs	r0, #0
 8008392:	e7d7      	b.n	8008344 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8008394:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8008396:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8008398:	602b      	str	r3, [r5, #0]
 800839a:	e7d3      	b.n	8008344 <xTaskCheckForTimeOut+0x30>
 800839c:	2400444c 	.word	0x2400444c
 80083a0:	24004404 	.word	0x24004404

080083a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80083a4:	4b01      	ldr	r3, [pc, #4]	; (80083ac <vTaskMissedYield+0x8>)
 80083a6:	2201      	movs	r2, #1
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	4770      	bx	lr
 80083ac:	24004450 	.word	0x24004450

080083b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <xTaskGetSchedulerState+0x18>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	b133      	cbz	r3, 80083c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <xTaskGetSchedulerState+0x1c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bf0c      	ite	eq
 80083be:	2002      	moveq	r0, #2
 80083c0:	2000      	movne	r0, #0
 80083c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083c4:	2001      	movs	r0, #1
	}
 80083c6:	4770      	bx	lr
 80083c8:	24004420 	.word	0x24004420
 80083cc:	240043cc 	.word	0x240043cc

080083d0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80083d0:	b318      	cbz	r0, 800841a <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 80083d2:	4b1f      	ldr	r3, [pc, #124]	; (8008450 <xTaskPriorityDisinherit+0x80>)
	{
 80083d4:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80083d6:	681c      	ldr	r4, [r3, #0]
	{
 80083d8:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 80083da:	4284      	cmp	r4, r0
 80083dc:	d008      	beq.n	80083f0 <xTaskPriorityDisinherit+0x20>
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	e7fe      	b.n	80083ee <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80083f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80083f2:	b14b      	cbz	r3, 8008408 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80083f6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80083fa:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083fc:	4291      	cmp	r1, r2
 80083fe:	d000      	beq.n	8008402 <xTaskPriorityDisinherit+0x32>
 8008400:	b16b      	cbz	r3, 800841e <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8008402:	2000      	movs	r0, #0
	}
 8008404:	b002      	add	sp, #8
 8008406:	bd10      	pop	{r4, pc}
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	e7fe      	b.n	8008418 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800841a:	2000      	movs	r0, #0
	}
 800841c:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800841e:	1d21      	adds	r1, r4, #4
 8008420:	4608      	mov	r0, r1
 8008422:	9101      	str	r1, [sp, #4]
 8008424:	f7fe fdc4 	bl	8006fb0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008428:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800842a:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800842c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8008430:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008432:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008434:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	4290      	cmp	r0, r2
 800843a:	d900      	bls.n	800843e <xTaskPriorityDisinherit+0x6e>
 800843c:	6018      	str	r0, [r3, #0]
 800843e:	4b06      	ldr	r3, [pc, #24]	; (8008458 <xTaskPriorityDisinherit+0x88>)
 8008440:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008448:	f7fe fd8a 	bl	8006f60 <vListInsertEnd>
					xReturn = pdTRUE;
 800844c:	2001      	movs	r0, #1
		return xReturn;
 800844e:	e7d9      	b.n	8008404 <xTaskPriorityDisinherit+0x34>
 8008450:	24003f58 	.word	0x24003f58
 8008454:	240043d4 	.word	0x240043d4
 8008458:	24003f64 	.word	0x24003f64

0800845c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800845c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008460:	4e22      	ldr	r6, [pc, #136]	; (80084ec <prvSwitchTimerLists+0x90>)
 8008462:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8008464:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80084f4 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
 8008468:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800846c:	e00d      	b.n	800848a <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800846e:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008470:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008472:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008474:	1d25      	adds	r5, r4, #4
 8008476:	4628      	mov	r0, r5
 8008478:	f7fe fd9a 	bl	8006fb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800847c:	6a23      	ldr	r3, [r4, #32]
 800847e:	4620      	mov	r0, r4
 8008480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008482:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008486:	075b      	lsls	r3, r3, #29
 8008488:	d40a      	bmi.n	80084a0 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800848a:	6833      	ldr	r3, [r6, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	2a00      	cmp	r2, #0
 8008490:	d1ed      	bne.n	800846e <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8008492:	4a17      	ldr	r2, [pc, #92]	; (80084f0 <prvSwitchTimerLists+0x94>)
 8008494:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008496:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008498:	6031      	str	r1, [r6, #0]
}
 800849a:	b005      	add	sp, #20
 800849c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084a0:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084a2:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084a4:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80084a6:	429f      	cmp	r7, r3
 80084a8:	d205      	bcs.n	80084b6 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084aa:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084ac:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084ae:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084b0:	f7fe fd66 	bl	8006f80 <vListInsert>
 80084b4:	e7e9      	b.n	800848a <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 80084b6:	f8d9 3000 	ldr.w	r3, [r9]
 80084ba:	b16b      	cbz	r3, 80084d8 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084bc:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084be:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084c2:	f7ff ff75 	bl	80083b0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084c6:	2300      	movs	r3, #0
 80084c8:	4669      	mov	r1, sp
 80084ca:	f8d9 0000 	ldr.w	r0, [r9]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f7fe fe30 	bl	8007134 <xQueueGenericSend>
				configASSERT( xResult );
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d1d8      	bne.n	800848a <prvSwitchTimerLists+0x2e>
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	e7fe      	b.n	80084e8 <prvSwitchTimerLists+0x8c>
 80084ea:	bf00      	nop
 80084ec:	24004454 	.word	0x24004454
 80084f0:	24004458 	.word	0x24004458
 80084f4:	24004578 	.word	0x24004578

080084f8 <prvTimerTask>:
{
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	4e9f      	ldr	r6, [pc, #636]	; (800877c <prvTimerTask+0x284>)
 80084fe:	b089      	sub	sp, #36	; 0x24
 8008500:	4d9f      	ldr	r5, [pc, #636]	; (8008780 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
 8008502:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8008506:	4c9f      	ldr	r4, [pc, #636]	; (8008784 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008508:	6833      	ldr	r3, [r6, #0]
 800850a:	681f      	ldr	r7, [r3, #0]
 800850c:	2f00      	cmp	r7, #0
 800850e:	f000 80b2 	beq.w	8008676 <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8008516:	f7ff fda1 	bl	800805c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800851a:	f7ff fdb7 	bl	800808c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800851e:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008520:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008522:	4290      	cmp	r0, r2
 8008524:	f0c0 80af 	bcc.w	8008686 <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008528:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 800852a:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800852c:	f200 80d0 	bhi.w	80086d0 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
 8008530:	f7ff fd9c 	bl	800806c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008534:	6832      	ldr	r2, [r6, #0]
 8008536:	68d2      	ldr	r2, [r2, #12]
 8008538:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800853c:	f10b 0804 	add.w	r8, fp, #4
 8008540:	4640      	mov	r0, r8
 8008542:	f7fe fd35 	bl	8006fb0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008546:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 800854a:	0741      	lsls	r1, r0, #29
 800854c:	f100 80d0 	bmi.w	80086f0 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008550:	f020 0001 	bic.w	r0, r0, #1
 8008554:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008558:	f8db 3020 	ldr.w	r3, [fp, #32]
 800855c:	4658      	mov	r0, fp
 800855e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008560:	2200      	movs	r2, #0
 8008562:	4669      	mov	r1, sp
 8008564:	6820      	ldr	r0, [r4, #0]
 8008566:	f7fe ff67 	bl	8007438 <xQueueReceive>
 800856a:	2800      	cmp	r0, #0
 800856c:	d0cc      	beq.n	8008508 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800856e:	9b00      	ldr	r3, [sp, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	db77      	blt.n	8008664 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008574:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	b113      	cbz	r3, 8008580 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800857a:	1d38      	adds	r0, r7, #4
 800857c:	f7fe fd18 	bl	8006fb0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008580:	f7ff fd84 	bl	800808c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008584:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008586:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8008588:	4298      	cmp	r0, r3
 800858a:	f0c0 8083 	bcc.w	8008694 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
 800858e:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
 8008590:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8008594:	2b09      	cmp	r3, #9
 8008596:	d8e3      	bhi.n	8008560 <prvTimerTask+0x68>
 8008598:	e8df f003 	tbb	[pc, r3]
 800859c:	54050505 	.word	0x54050505
 80085a0:	05055b3e 	.word	0x05055b3e
 80085a4:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085aa:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085ac:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085b0:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085b6:	9b01      	ldr	r3, [sp, #4]
 80085b8:	1899      	adds	r1, r3, r2
 80085ba:	bf2c      	ite	cs
 80085bc:	2001      	movcs	r0, #1
 80085be:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 80085c0:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085c2:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80085c4:	f200 8086 	bhi.w	80086d4 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c8:	eba8 0303 	sub.w	r3, r8, r3
 80085cc:	429a      	cmp	r2, r3
 80085ce:	f200 80c0 	bhi.w	8008752 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	4638      	mov	r0, r7
 80085d6:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085dc:	075b      	lsls	r3, r3, #29
 80085de:	d5bf      	bpl.n	8008560 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	b183      	cbz	r3, 8008606 <prvTimerTask+0x10e>
		xMessage.xMessageID = xCommandID;
 80085e4:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085e6:	69bb      	ldr	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085e8:	9706      	str	r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
 80085ea:	9204      	str	r2, [sp, #16]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085ec:	9a01      	ldr	r2, [sp, #4]
 80085ee:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085f0:	9305      	str	r3, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085f2:	f7ff fedd 	bl	80083b0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085f6:	2300      	movs	r3, #0
 80085f8:	a904      	add	r1, sp, #16
 80085fa:	6820      	ldr	r0, [r4, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	f7fe fd99 	bl	8007134 <xQueueGenericSend>
							configASSERT( xResult );
 8008602:	2800      	cmp	r0, #0
 8008604:	d1ac      	bne.n	8008560 <prvTimerTask+0x68>
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	e7fe      	b.n	8008616 <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800861c:	f043 0301 	orr.w	r3, r3, #1
 8008620:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 809e 	beq.w	800876a <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800862e:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008630:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008632:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008634:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008636:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008638:	d856      	bhi.n	80086e8 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800863a:	4b53      	ldr	r3, [pc, #332]	; (8008788 <prvTimerTask+0x290>)
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f7fe fc9f 	bl	8006f80 <vListInsert>
 8008642:	e78d      	b.n	8008560 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008644:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8008650:	e786      	b.n	8008560 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008652:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008656:	079a      	lsls	r2, r3, #30
 8008658:	d572      	bpl.n	8008740 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800865a:	f023 0301 	bic.w	r3, r3, #1
 800865e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008662:	e77d      	b.n	8008560 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008664:	9b01      	ldr	r3, [sp, #4]
 8008666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800866c:	9b00      	ldr	r3, [sp, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f6ff af76 	blt.w	8008560 <prvTimerTask+0x68>
 8008674:	e77e      	b.n	8008574 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8008676:	f7ff fcf1 	bl	800805c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800867a:	f7ff fd07 	bl	800808c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800867e:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008680:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008682:	4282      	cmp	r2, r0
 8008684:	d909      	bls.n	800869a <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
 8008686:	f7ff fee9 	bl	800845c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800868a:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 800868e:	f7ff fced 	bl	800806c <xTaskResumeAll>
 8008692:	e765      	b.n	8008560 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8008694:	f7ff fee2 	bl	800845c <prvSwitchTimerLists>
 8008698:	e779      	b.n	800858e <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800869a:	4b3b      	ldr	r3, [pc, #236]	; (8008788 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 800869c:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	fab2 f282 	clz	r2, r2
 80086a8:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086aa:	eba7 010a 	sub.w	r1, r7, sl
 80086ae:	6820      	ldr	r0, [r4, #0]
 80086b0:	f7ff f86c 	bl	800778c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086b4:	f7ff fcda 	bl	800806c <xTaskResumeAll>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	f47f af51 	bne.w	8008560 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 80086be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086c2:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	e747      	b.n	8008560 <prvTimerTask+0x68>
 80086d0:	2200      	movs	r2, #0
 80086d2:	e7ea      	b.n	80086aa <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086d4:	4543      	cmp	r3, r8
 80086d6:	d902      	bls.n	80086de <prvTimerTask+0x1e6>
 80086d8:	2800      	cmp	r0, #0
 80086da:	f43f af7a 	beq.w	80085d2 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086de:	1d39      	adds	r1, r7, #4
 80086e0:	6830      	ldr	r0, [r6, #0]
 80086e2:	f7fe fc4d 	bl	8006f80 <vListInsert>
 80086e6:	e73b      	b.n	8008560 <prvTimerTask+0x68>
 80086e8:	6830      	ldr	r0, [r6, #0]
 80086ea:	f7fe fc49 	bl	8006f80 <vListInsert>
 80086ee:	e737      	b.n	8008560 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086f0:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086f4:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086f8:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 80086fa:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086fc:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008700:	d322      	bcc.n	8008748 <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008702:	ebaa 0307 	sub.w	r3, sl, r7
 8008706:	429a      	cmp	r2, r3
 8008708:	d829      	bhi.n	800875e <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	b17b      	cbz	r3, 800872e <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
 800870e:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008710:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008712:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8008716:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008718:	f7ff fe4a 	bl	80083b0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800871c:	2300      	movs	r3, #0
 800871e:	a904      	add	r1, sp, #16
 8008720:	6820      	ldr	r0, [r4, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	f7fe fd06 	bl	8007134 <xQueueGenericSend>
			configASSERT( xResult );
 8008728:	2800      	cmp	r0, #0
 800872a:	f47f af15 	bne.w	8008558 <prvTimerTask+0x60>
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	e7fe      	b.n	800873e <prvTimerTask+0x246>
							vPortFree( pxTimer );
 8008740:	4638      	mov	r0, r7
 8008742:	f000 fadd 	bl	8008d00 <vPortFree>
 8008746:	e70b      	b.n	8008560 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008748:	4641      	mov	r1, r8
 800874a:	6830      	ldr	r0, [r6, #0]
 800874c:	f7fe fc18 	bl	8006f80 <vListInsert>
 8008750:	e702      	b.n	8008558 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <prvTimerTask+0x290>)
 8008754:	1d39      	adds	r1, r7, #4
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	f7fe fc12 	bl	8006f80 <vListInsert>
 800875c:	e700      	b.n	8008560 <prvTimerTask+0x68>
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <prvTimerTask+0x290>)
 8008760:	4641      	mov	r1, r8
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	f7fe fc0c 	bl	8006f80 <vListInsert>
 8008768:	e6f6      	b.n	8008558 <prvTimerTask+0x60>
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	e7fe      	b.n	800877a <prvTimerTask+0x282>
 800877c:	24004454 	.word	0x24004454
 8008780:	24004524 	.word	0x24004524
 8008784:	24004578 	.word	0x24004578
 8008788:	24004458 	.word	0x24004458

0800878c <xTimerCreateTimerTask>:
{
 800878c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800878e:	4c23      	ldr	r4, [pc, #140]	; (800881c <xTimerCreateTimerTask+0x90>)
{
 8008790:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8008792:	f000 f8c7 	bl	8008924 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008796:	6825      	ldr	r5, [r4, #0]
 8008798:	b335      	cbz	r5, 80087e8 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800879a:	f000 f8e5 	bl	8008968 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	b1cb      	cbz	r3, 80087d6 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087a2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087a4:	aa07      	add	r2, sp, #28
 80087a6:	a906      	add	r1, sp, #24
 80087a8:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087aa:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087b0:	f7fe fbb6 	bl	8006f20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087b4:	4623      	mov	r3, r4
 80087b6:	9a07      	ldr	r2, [sp, #28]
 80087b8:	9500      	str	r5, [sp, #0]
 80087ba:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80087be:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80087c2:	4917      	ldr	r1, [pc, #92]	; (8008820 <xTimerCreateTimerTask+0x94>)
 80087c4:	4817      	ldr	r0, [pc, #92]	; (8008824 <xTimerCreateTimerTask+0x98>)
 80087c6:	f7ff fb0b 	bl	8007de0 <xTaskCreateStatic>
 80087ca:	4b17      	ldr	r3, [pc, #92]	; (8008828 <xTimerCreateTimerTask+0x9c>)
 80087cc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80087ce:	b110      	cbz	r0, 80087d6 <xTimerCreateTimerTask+0x4a>
}
 80087d0:	2001      	movs	r0, #1
 80087d2:	b009      	add	sp, #36	; 0x24
 80087d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	e7fe      	b.n	80087e6 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 80087e8:	4f10      	ldr	r7, [pc, #64]	; (800882c <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 80087ea:	4e11      	ldr	r6, [pc, #68]	; (8008830 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 80087ec:	4638      	mov	r0, r7
 80087ee:	f7fe fba7 	bl	8006f40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7fe fba4 	bl	8006f40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087f8:	4a0e      	ldr	r2, [pc, #56]	; (8008834 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087fa:	9500      	str	r5, [sp, #0]
 80087fc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80087fe:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008800:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008802:	4a0d      	ldr	r2, [pc, #52]	; (8008838 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008804:	4b0d      	ldr	r3, [pc, #52]	; (800883c <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8008806:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008808:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <xTimerCreateTimerTask+0xb4>)
 800880a:	f7fe fc27 	bl	800705c <xQueueGenericCreateStatic>
 800880e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8008810:	2800      	cmp	r0, #0
 8008812:	d0c2      	beq.n	800879a <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008814:	490b      	ldr	r1, [pc, #44]	; (8008844 <xTimerCreateTimerTask+0xb8>)
 8008816:	f7fe ff91 	bl	800773c <vQueueAddToRegistry>
 800881a:	e7be      	b.n	800879a <xTimerCreateTimerTask+0xe>
 800881c:	24004578 	.word	0x24004578
 8008820:	0800ae40 	.word	0x0800ae40
 8008824:	080084f9 	.word	0x080084f9
 8008828:	2400457c 	.word	0x2400457c
 800882c:	240044fc 	.word	0x240044fc
 8008830:	24004510 	.word	0x24004510
 8008834:	24004454 	.word	0x24004454
 8008838:	24004458 	.word	0x24004458
 800883c:	24004528 	.word	0x24004528
 8008840:	2400445c 	.word	0x2400445c
 8008844:	0800ae38 	.word	0x0800ae38

08008848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008848:	4808      	ldr	r0, [pc, #32]	; (800886c <prvPortStartFirstTask+0x24>)
 800884a:	6800      	ldr	r0, [r0, #0]
 800884c:	6800      	ldr	r0, [r0, #0]
 800884e:	f380 8808 	msr	MSP, r0
 8008852:	f04f 0000 	mov.w	r0, #0
 8008856:	f380 8814 	msr	CONTROL, r0
 800885a:	b662      	cpsie	i
 800885c:	b661      	cpsie	f
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	df00      	svc	0
 8008868:	bf00      	nop
 800886a:	0000      	.short	0x0000
 800886c:	e000ed08 	.word	0xe000ed08

08008870 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008870:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008880 <vPortEnableVFP+0x10>
 8008874:	6801      	ldr	r1, [r0, #0]
 8008876:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800887a:	6001      	str	r1, [r0, #0]
 800887c:	4770      	bx	lr
 800887e:	0000      	.short	0x0000
 8008880:	e000ed88 	.word	0xe000ed88

08008884 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8008884:	4b0e      	ldr	r3, [pc, #56]	; (80088c0 <prvTaskExitError+0x3c>)
{
 8008886:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008888:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800888a:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 800888c:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800888e:	3301      	adds	r3, #1
 8008890:	d008      	beq.n	80088a4 <prvTaskExitError+0x20>
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	e7fe      	b.n	80088a2 <prvTaskExitError+0x1e>
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80088b4:	9b01      	ldr	r3, [sp, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0fc      	beq.n	80088b4 <prvTaskExitError+0x30>
}
 80088ba:	b002      	add	sp, #8
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	240030d4 	.word	0x240030d4

080088c4 <pxPortInitialiseStack>:
{
 80088c4:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088c6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088ca:	4809      	ldr	r0, [pc, #36]	; (80088f0 <pxPortInitialiseStack+0x2c>)
{
 80088cc:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088ce:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088d2:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088d6:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80088da:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088de:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088e2:	f06f 0102 	mvn.w	r1, #2
}
 80088e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088ea:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80088ee:	4770      	bx	lr
 80088f0:	08008885 	.word	0x08008885
	...

08008900 <SVC_Handler>:
	__asm volatile (
 8008900:	4b07      	ldr	r3, [pc, #28]	; (8008920 <pxCurrentTCBConst2>)
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	f380 8809 	msr	PSP, r0
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8811 	msr	BASEPRI, r0
 800891a:	4770      	bx	lr
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst2>:
 8008920:	24003f58 	.word	0x24003f58

08008924 <vPortEnterCritical>:
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008934:	4a0b      	ldr	r2, [pc, #44]	; (8008964 <vPortEnterCritical+0x40>)
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800893a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800893c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800893e:	d000      	beq.n	8008942 <vPortEnterCritical+0x1e>
}
 8008940:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008942:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008946:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0f7      	beq.n	8008940 <vPortEnterCritical+0x1c>
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	e7fe      	b.n	8008960 <vPortEnterCritical+0x3c>
 8008962:	bf00      	nop
 8008964:	240030d4 	.word	0x240030d4

08008968 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008968:	4a08      	ldr	r2, [pc, #32]	; (800898c <vPortExitCritical+0x24>)
 800896a:	6813      	ldr	r3, [r2, #0]
 800896c:	b943      	cbnz	r3, 8008980 <vPortExitCritical+0x18>
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	e7fe      	b.n	800897e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008980:	3b01      	subs	r3, #1
 8008982:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008984:	b90b      	cbnz	r3, 800898a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008986:	f383 8811 	msr	BASEPRI, r3
}
 800898a:	4770      	bx	lr
 800898c:	240030d4 	.word	0x240030d4

08008990 <PendSV_Handler>:
	__asm volatile
 8008990:	f3ef 8009 	mrs	r0, PSP
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <pxCurrentTCBConst>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	f01e 0f10 	tst.w	lr, #16
 80089a0:	bf08      	it	eq
 80089a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089b4:	f380 8811 	msr	BASEPRI, r0
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f7ff fb7a 	bl	80080b8 <vTaskSwitchContext>
 80089c4:	f04f 0000 	mov.w	r0, #0
 80089c8:	f380 8811 	msr	BASEPRI, r0
 80089cc:	bc09      	pop	{r0, r3}
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	6808      	ldr	r0, [r1, #0]
 80089d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d6:	f01e 0f10 	tst.w	lr, #16
 80089da:	bf08      	it	eq
 80089dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089e0:	f380 8809 	msr	PSP, r0
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst>:
 80089f0:	24003f58 	.word	0x24003f58

080089f4 <xPortSysTickHandler>:
{
 80089f4:	b508      	push	{r3, lr}
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008a06:	f7ff fb47 	bl	8008098 <xTaskIncrementTick>
 8008a0a:	b128      	cbz	r0, 8008a18 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f383 8811 	msr	BASEPRI, r3
}
 8008a1e:	bd08      	pop	{r3, pc}

08008a20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008a24:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a26:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a28:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a2a:	4806      	ldr	r0, [pc, #24]	; (8008a44 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a2c:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a2e:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	fba0 0303 	umull	r0, r3, r0, r3
 8008a36:	099b      	lsrs	r3, r3, #6
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a3c:	6111      	str	r1, [r2, #16]
}
 8008a3e:	4770      	bx	lr
 8008a40:	240030c4 	.word	0x240030c4
 8008a44:	10624dd3 	.word	0x10624dd3

08008a48 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a4c:	4a48      	ldr	r2, [pc, #288]	; (8008b70 <xPortStartScheduler+0x128>)
 8008a4e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8008a52:	4291      	cmp	r1, r2
 8008a54:	d041      	beq.n	8008ada <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a56:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008a5a:	4b46      	ldr	r3, [pc, #280]	; (8008b74 <xPortStartScheduler+0x12c>)
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d033      	beq.n	8008ac8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a60:	4b45      	ldr	r3, [pc, #276]	; (8008b78 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a62:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a66:	4845      	ldr	r0, [pc, #276]	; (8008b7c <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a68:	4945      	ldr	r1, [pc, #276]	; (8008b80 <xPortStartScheduler+0x138>)
{
 8008a6a:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a6c:	781a      	ldrb	r2, [r3, #0]
{
 8008a6e:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a70:	b2d2      	uxtb	r2, r2
 8008a72:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a74:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a76:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a7a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a7c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a84:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a88:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a90:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a92:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a94:	d50f      	bpl.n	8008ab6 <xPortStartScheduler+0x6e>
 8008a96:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a9c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a9e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008aac:	061b      	lsls	r3, r3, #24
 8008aae:	d4f3      	bmi.n	8008a98 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ab0:	2903      	cmp	r1, #3
 8008ab2:	d01b      	beq.n	8008aec <xPortStartScheduler+0xa4>
 8008ab4:	6001      	str	r1, [r0, #0]
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	e7fe      	b.n	8008ac6 <xPortStartScheduler+0x7e>
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	e7fe      	b.n	8008ad8 <xPortStartScheduler+0x90>
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	e7fe      	b.n	8008aea <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008aec:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008aee:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008af2:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008af6:	4a20      	ldr	r2, [pc, #128]	; (8008b78 <xPortStartScheduler+0x130>)
 8008af8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8008afa:	4e22      	ldr	r6, [pc, #136]	; (8008b84 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008afc:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
 8008afe:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b00:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b02:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008b06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b0a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b0e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008b12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b16:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008b1a:	f7ff ff81 	bl	8008a20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008b1e:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
 8008b20:	f7ff fea6 	bl	8008870 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b24:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8008b28:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b2c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008b30:	f7ff fe8a 	bl	8008848 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008b34:	f7ff fac0 	bl	80080b8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8008b38:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
 8008b3a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	d008      	beq.n	8008b52 <xPortStartScheduler+0x10a>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	e7fe      	b.n	8008b50 <xPortStartScheduler+0x108>
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d0fc      	beq.n	8008b62 <xPortStartScheduler+0x11a>
}
 8008b68:	2000      	movs	r0, #0
 8008b6a:	b004      	add	sp, #16
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	bf00      	nop
 8008b70:	410fc271 	.word	0x410fc271
 8008b74:	410fc270 	.word	0x410fc270
 8008b78:	e000e400 	.word	0xe000e400
 8008b7c:	24004584 	.word	0x24004584
 8008b80:	24004580 	.word	0x24004580
 8008b84:	240030d4 	.word	0x240030d4

08008b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8c:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8008b8e:	f7ff fa65 	bl	800805c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b92:	4b54      	ldr	r3, [pc, #336]	; (8008ce4 <pvPortMalloc+0x15c>)
 8008b94:	681d      	ldr	r5, [r3, #0]
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	d06f      	beq.n	8008c7a <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b9a:	4b53      	ldr	r3, [pc, #332]	; (8008ce8 <pvPortMalloc+0x160>)
 8008b9c:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b9e:	423e      	tst	r6, r7
 8008ba0:	d12e      	bne.n	8008c00 <pvPortMalloc+0x78>
 8008ba2:	b36e      	cbz	r6, 8008c00 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8008ba4:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ba8:	0776      	lsls	r6, r6, #29
 8008baa:	d002      	beq.n	8008bb2 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bac:	f024 0407 	bic.w	r4, r4, #7
 8008bb0:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bb2:	b32c      	cbz	r4, 8008c00 <pvPortMalloc+0x78>
 8008bb4:	f8df c144 	ldr.w	ip, [pc, #324]	; 8008cfc <pvPortMalloc+0x174>
 8008bb8:	f8dc 6000 	ldr.w	r6, [ip]
 8008bbc:	42a6      	cmp	r6, r4
 8008bbe:	d31f      	bcc.n	8008c00 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8008bc0:	484a      	ldr	r0, [pc, #296]	; (8008cec <pvPortMalloc+0x164>)
 8008bc2:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bc4:	e003      	b.n	8008bce <pvPortMalloc+0x46>
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	b122      	cbz	r2, 8008bd4 <pvPortMalloc+0x4c>
 8008bca:	4618      	mov	r0, r3
 8008bcc:	4613      	mov	r3, r2
 8008bce:	6859      	ldr	r1, [r3, #4]
 8008bd0:	42a1      	cmp	r1, r4
 8008bd2:	d3f8      	bcc.n	8008bc6 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bd4:	42ab      	cmp	r3, r5
 8008bd6:	d013      	beq.n	8008c00 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bd8:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bda:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bdc:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008be0:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008be2:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008be6:	d929      	bls.n	8008c3c <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008be8:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bea:	0748      	lsls	r0, r1, #29
 8008bec:	d00f      	beq.n	8008c0e <pvPortMalloc+0x86>
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	e7fe      	b.n	8008bfe <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c00:	f04f 0800 	mov.w	r8, #0
 8008c04:	f7ff fa32 	bl	800806c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8008c08:	4640      	mov	r0, r8
 8008c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c0e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c10:	4a36      	ldr	r2, [pc, #216]	; (8008cec <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
 8008c12:	605c      	str	r4, [r3, #4]
 8008c14:	4614      	mov	r4, r2
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	4291      	cmp	r1, r2
 8008c1a:	d8fb      	bhi.n	8008c14 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c1c:	6860      	ldr	r0, [r4, #4]
 8008c1e:	eb04 0e00 	add.w	lr, r4, r0
 8008c22:	4571      	cmp	r1, lr
 8008c24:	d04e      	beq.n	8008cc4 <pvPortMalloc+0x13c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c26:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8008c2a:	eb01 000e 	add.w	r0, r1, lr
 8008c2e:	4282      	cmp	r2, r0
 8008c30:	d04f      	beq.n	8008cd2 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c32:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c34:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c36:	bf18      	it	ne
 8008c38:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c3a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c3c:	4a2c      	ldr	r2, [pc, #176]	; (8008cf0 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c3e:	1a76      	subs	r6, r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c40:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c42:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c44:	f8cc 6000 	str.w	r6, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c48:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8008c4a:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c4e:	bf38      	it	cc
 8008c50:	6016      	strcc	r6, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 8008c52:	4a28      	ldr	r2, [pc, #160]	; (8008cf4 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
 8008c54:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8008c58:	6813      	ldr	r3, [r2, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8008c5e:	f7ff fa05 	bl	800806c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c62:	f018 0f07 	tst.w	r8, #7
 8008c66:	d0cf      	beq.n	8008c08 <pvPortMalloc+0x80>
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	e7fe      	b.n	8008c78 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
 8008c7a:	491f      	ldr	r1, [pc, #124]	; (8008cf8 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c7c:	074f      	lsls	r7, r1, #29
 8008c7e:	d11a      	bne.n	8008cb6 <pvPortMalloc+0x12e>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c80:	460a      	mov	r2, r1
 8008c82:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8008c86:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8008c88:	f1a1 0508 	sub.w	r5, r1, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c8c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c90:	4916      	ldr	r1, [pc, #88]	; (8008cec <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c92:	f025 0507 	bic.w	r5, r5, #7
	pxEnd = ( void * ) uxAddress;
 8008c96:	601d      	str	r5, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c98:	1aab      	subs	r3, r5, r2
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c9a:	4a15      	ldr	r2, [pc, #84]	; (8008cf0 <pvPortMalloc+0x168>)
 8008c9c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c9e:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <pvPortMalloc+0x174>)
 8008ca0:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ca2:	4a11      	ldr	r2, [pc, #68]	; (8008ce8 <pvPortMalloc+0x160>)
 8008ca4:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ca6:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ca8:	e9c1 0200 	strd	r0, r2, [r1]
	pxEnd->pxNextFreeBlock = NULL;
 8008cac:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cb0:	e9c0 5300 	strd	r5, r3, [r0]
}
 8008cb4:	e773      	b.n	8008b9e <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cb6:	1dca      	adds	r2, r1, #7
 8008cb8:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cbc:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	e7e1      	b.n	8008c88 <pvPortMalloc+0x100>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cc4:	6849      	ldr	r1, [r1, #4]
 8008cc6:	eb00 0e01 	add.w	lr, r0, r1
 8008cca:	4621      	mov	r1, r4
 8008ccc:	f8c4 e004 	str.w	lr, [r4, #4]
 8008cd0:	e7ab      	b.n	8008c2a <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cd2:	42aa      	cmp	r2, r5
 8008cd4:	d0ad      	beq.n	8008c32 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cd6:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cd8:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cda:	4470      	add	r0, lr
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cdc:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cde:	6048      	str	r0, [r1, #4]
 8008ce0:	e7a8      	b.n	8008c34 <pvPortMalloc+0xac>
 8008ce2:	bf00      	nop
 8008ce4:	24004588 	.word	0x24004588
 8008ce8:	2400818c 	.word	0x2400818c
 8008cec:	240081a0 	.word	0x240081a0
 8008cf0:	24008194 	.word	0x24008194
 8008cf4:	24008198 	.word	0x24008198
 8008cf8:	2400458c 	.word	0x2400458c
 8008cfc:	24008190 	.word	0x24008190

08008d00 <vPortFree>:
	if( pv != NULL )
 8008d00:	b1d0      	cbz	r0, 8008d38 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d02:	4a2b      	ldr	r2, [pc, #172]	; (8008db0 <vPortFree+0xb0>)
 8008d04:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008d08:	6812      	ldr	r2, [r2, #0]
 8008d0a:	4213      	tst	r3, r2
 8008d0c:	d00b      	beq.n	8008d26 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d0e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008d12:	b191      	cbz	r1, 8008d3a <vPortFree+0x3a>
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	e7fe      	b.n	8008d24 <vPortFree+0x24>
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	e7fe      	b.n	8008d36 <vPortFree+0x36>
 8008d38:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d3a:	ea23 0302 	bic.w	r3, r3, r2
{
 8008d3e:	b530      	push	{r4, r5, lr}
 8008d40:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d42:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
 8008d46:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d4a:	4d1a      	ldr	r5, [pc, #104]	; (8008db4 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d4c:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8008d4e:	f7ff f985 	bl	800805c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d52:	9801      	ldr	r0, [sp, #4]
 8008d54:	682a      	ldr	r2, [r5, #0]
 8008d56:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d5a:	4b17      	ldr	r3, [pc, #92]	; (8008db8 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d5c:	440a      	add	r2, r1
 8008d5e:	602a      	str	r2, [r5, #0]
 8008d60:	461a      	mov	r2, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	429c      	cmp	r4, r3
 8008d66:	d8fb      	bhi.n	8008d60 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d68:	6850      	ldr	r0, [r2, #4]
 8008d6a:	eb02 0c00 	add.w	ip, r2, r0
 8008d6e:	4564      	cmp	r4, ip
 8008d70:	d019      	beq.n	8008da6 <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d72:	1860      	adds	r0, r4, r1
 8008d74:	4283      	cmp	r3, r0
 8008d76:	d00c      	beq.n	8008d92 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d78:	6023      	str	r3, [r4, #0]
	if( pxIterator != pxBlockToInsert )
 8008d7a:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d7c:	bf18      	it	ne
 8008d7e:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8008d80:	4a0e      	ldr	r2, [pc, #56]	; (8008dbc <vPortFree+0xbc>)
 8008d82:	6813      	ldr	r3, [r2, #0]
 8008d84:	3301      	adds	r3, #1
 8008d86:	6013      	str	r3, [r2, #0]
}
 8008d88:	b003      	add	sp, #12
 8008d8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
 8008d8e:	f7ff b96d 	b.w	800806c <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d92:	480b      	ldr	r0, [pc, #44]	; (8008dc0 <vPortFree+0xc0>)
 8008d94:	6800      	ldr	r0, [r0, #0]
 8008d96:	4283      	cmp	r3, r0
 8008d98:	d0ee      	beq.n	8008d78 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d9a:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d9e:	4401      	add	r1, r0
 8008da0:	e9c4 3100 	strd	r3, r1, [r4]
 8008da4:	e7e9      	b.n	8008d7a <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008da6:	4401      	add	r1, r0
 8008da8:	4614      	mov	r4, r2
 8008daa:	6051      	str	r1, [r2, #4]
 8008dac:	e7e1      	b.n	8008d72 <vPortFree+0x72>
 8008dae:	bf00      	nop
 8008db0:	2400818c 	.word	0x2400818c
 8008db4:	24008190 	.word	0x24008190
 8008db8:	240081a0 	.word	0x240081a0
 8008dbc:	2400819c 	.word	0x2400819c
 8008dc0:	24004588 	.word	0x24004588

08008dc4 <__errno>:
 8008dc4:	4b01      	ldr	r3, [pc, #4]	; (8008dcc <__errno+0x8>)
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	240030d8 	.word	0x240030d8

08008dd0 <std>:
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	b510      	push	{r4, lr}
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dde:	6083      	str	r3, [r0, #8]
 8008de0:	8181      	strh	r1, [r0, #12]
 8008de2:	6643      	str	r3, [r0, #100]	; 0x64
 8008de4:	81c2      	strh	r2, [r0, #14]
 8008de6:	6183      	str	r3, [r0, #24]
 8008de8:	4619      	mov	r1, r3
 8008dea:	2208      	movs	r2, #8
 8008dec:	305c      	adds	r0, #92	; 0x5c
 8008dee:	f000 f934 	bl	800905a <memset>
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <std+0x38>)
 8008df4:	6263      	str	r3, [r4, #36]	; 0x24
 8008df6:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <std+0x3c>)
 8008df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <std+0x40>)
 8008dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <std+0x44>)
 8008e00:	6224      	str	r4, [r4, #32]
 8008e02:	6323      	str	r3, [r4, #48]	; 0x30
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	bf00      	nop
 8008e08:	080092b9 	.word	0x080092b9
 8008e0c:	080092db 	.word	0x080092db
 8008e10:	08009313 	.word	0x08009313
 8008e14:	08009337 	.word	0x08009337

08008e18 <_cleanup_r>:
 8008e18:	4901      	ldr	r1, [pc, #4]	; (8008e20 <_cleanup_r+0x8>)
 8008e1a:	f000 b8af 	b.w	8008f7c <_fwalk_reent>
 8008e1e:	bf00      	nop
 8008e20:	08009515 	.word	0x08009515

08008e24 <__sfmoreglue>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	2268      	movs	r2, #104	; 0x68
 8008e28:	1e4d      	subs	r5, r1, #1
 8008e2a:	4355      	muls	r5, r2
 8008e2c:	460e      	mov	r6, r1
 8008e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e32:	f000 f93b 	bl	80090ac <_malloc_r>
 8008e36:	4604      	mov	r4, r0
 8008e38:	b140      	cbz	r0, 8008e4c <__sfmoreglue+0x28>
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e40:	300c      	adds	r0, #12
 8008e42:	60a0      	str	r0, [r4, #8]
 8008e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e48:	f000 f907 	bl	800905a <memset>
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}

08008e50 <__sfp_lock_acquire>:
 8008e50:	4801      	ldr	r0, [pc, #4]	; (8008e58 <__sfp_lock_acquire+0x8>)
 8008e52:	f000 b8f2 	b.w	800903a <__retarget_lock_acquire_recursive>
 8008e56:	bf00      	nop
 8008e58:	240081a9 	.word	0x240081a9

08008e5c <__sfp_lock_release>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__sfp_lock_release+0x8>)
 8008e5e:	f000 b8ed 	b.w	800903c <__retarget_lock_release_recursive>
 8008e62:	bf00      	nop
 8008e64:	240081a9 	.word	0x240081a9

08008e68 <__sinit_lock_acquire>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__sinit_lock_acquire+0x8>)
 8008e6a:	f000 b8e6 	b.w	800903a <__retarget_lock_acquire_recursive>
 8008e6e:	bf00      	nop
 8008e70:	240081aa 	.word	0x240081aa

08008e74 <__sinit_lock_release>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__sinit_lock_release+0x8>)
 8008e76:	f000 b8e1 	b.w	800903c <__retarget_lock_release_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	240081aa 	.word	0x240081aa

08008e80 <__sinit>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	4604      	mov	r4, r0
 8008e84:	f7ff fff0 	bl	8008e68 <__sinit_lock_acquire>
 8008e88:	69a3      	ldr	r3, [r4, #24]
 8008e8a:	b11b      	cbz	r3, 8008e94 <__sinit+0x14>
 8008e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e90:	f7ff bff0 	b.w	8008e74 <__sinit_lock_release>
 8008e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e98:	6523      	str	r3, [r4, #80]	; 0x50
 8008e9a:	4b13      	ldr	r3, [pc, #76]	; (8008ee8 <__sinit+0x68>)
 8008e9c:	4a13      	ldr	r2, [pc, #76]	; (8008eec <__sinit+0x6c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ea2:	42a3      	cmp	r3, r4
 8008ea4:	bf04      	itt	eq
 8008ea6:	2301      	moveq	r3, #1
 8008ea8:	61a3      	streq	r3, [r4, #24]
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 f820 	bl	8008ef0 <__sfp>
 8008eb0:	6060      	str	r0, [r4, #4]
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 f81c 	bl	8008ef0 <__sfp>
 8008eb8:	60a0      	str	r0, [r4, #8]
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f818 	bl	8008ef0 <__sfp>
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	60e0      	str	r0, [r4, #12]
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	6860      	ldr	r0, [r4, #4]
 8008ec8:	f7ff ff82 	bl	8008dd0 <std>
 8008ecc:	68a0      	ldr	r0, [r4, #8]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	2109      	movs	r1, #9
 8008ed2:	f7ff ff7d 	bl	8008dd0 <std>
 8008ed6:	68e0      	ldr	r0, [r4, #12]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	2112      	movs	r1, #18
 8008edc:	f7ff ff78 	bl	8008dd0 <std>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	61a3      	str	r3, [r4, #24]
 8008ee4:	e7d2      	b.n	8008e8c <__sinit+0xc>
 8008ee6:	bf00      	nop
 8008ee8:	0800aea8 	.word	0x0800aea8
 8008eec:	08008e19 	.word	0x08008e19

08008ef0 <__sfp>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	4607      	mov	r7, r0
 8008ef4:	f7ff ffac 	bl	8008e50 <__sfp_lock_acquire>
 8008ef8:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <__sfp+0x84>)
 8008efa:	681e      	ldr	r6, [r3, #0]
 8008efc:	69b3      	ldr	r3, [r6, #24]
 8008efe:	b913      	cbnz	r3, 8008f06 <__sfp+0x16>
 8008f00:	4630      	mov	r0, r6
 8008f02:	f7ff ffbd 	bl	8008e80 <__sinit>
 8008f06:	3648      	adds	r6, #72	; 0x48
 8008f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	d503      	bpl.n	8008f18 <__sfp+0x28>
 8008f10:	6833      	ldr	r3, [r6, #0]
 8008f12:	b30b      	cbz	r3, 8008f58 <__sfp+0x68>
 8008f14:	6836      	ldr	r6, [r6, #0]
 8008f16:	e7f7      	b.n	8008f08 <__sfp+0x18>
 8008f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f1c:	b9d5      	cbnz	r5, 8008f54 <__sfp+0x64>
 8008f1e:	4b16      	ldr	r3, [pc, #88]	; (8008f78 <__sfp+0x88>)
 8008f20:	60e3      	str	r3, [r4, #12]
 8008f22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f26:	6665      	str	r5, [r4, #100]	; 0x64
 8008f28:	f000 f886 	bl	8009038 <__retarget_lock_init_recursive>
 8008f2c:	f7ff ff96 	bl	8008e5c <__sfp_lock_release>
 8008f30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f38:	6025      	str	r5, [r4, #0]
 8008f3a:	61a5      	str	r5, [r4, #24]
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f44:	f000 f889 	bl	800905a <memset>
 8008f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f50:	4620      	mov	r0, r4
 8008f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f54:	3468      	adds	r4, #104	; 0x68
 8008f56:	e7d9      	b.n	8008f0c <__sfp+0x1c>
 8008f58:	2104      	movs	r1, #4
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	f7ff ff62 	bl	8008e24 <__sfmoreglue>
 8008f60:	4604      	mov	r4, r0
 8008f62:	6030      	str	r0, [r6, #0]
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d1d5      	bne.n	8008f14 <__sfp+0x24>
 8008f68:	f7ff ff78 	bl	8008e5c <__sfp_lock_release>
 8008f6c:	230c      	movs	r3, #12
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	e7ee      	b.n	8008f50 <__sfp+0x60>
 8008f72:	bf00      	nop
 8008f74:	0800aea8 	.word	0x0800aea8
 8008f78:	ffff0001 	.word	0xffff0001

08008f7c <_fwalk_reent>:
 8008f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f80:	4606      	mov	r6, r0
 8008f82:	4688      	mov	r8, r1
 8008f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f88:	2700      	movs	r7, #0
 8008f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8008f92:	d505      	bpl.n	8008fa0 <_fwalk_reent+0x24>
 8008f94:	6824      	ldr	r4, [r4, #0]
 8008f96:	2c00      	cmp	r4, #0
 8008f98:	d1f7      	bne.n	8008f8a <_fwalk_reent+0xe>
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa0:	89ab      	ldrh	r3, [r5, #12]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d907      	bls.n	8008fb6 <_fwalk_reent+0x3a>
 8008fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008faa:	3301      	adds	r3, #1
 8008fac:	d003      	beq.n	8008fb6 <_fwalk_reent+0x3a>
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	47c0      	blx	r8
 8008fb4:	4307      	orrs	r7, r0
 8008fb6:	3568      	adds	r5, #104	; 0x68
 8008fb8:	e7e9      	b.n	8008f8e <_fwalk_reent+0x12>
	...

08008fbc <__libc_init_array>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	4d0d      	ldr	r5, [pc, #52]	; (8008ff4 <__libc_init_array+0x38>)
 8008fc0:	4c0d      	ldr	r4, [pc, #52]	; (8008ff8 <__libc_init_array+0x3c>)
 8008fc2:	1b64      	subs	r4, r4, r5
 8008fc4:	10a4      	asrs	r4, r4, #2
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	42a6      	cmp	r6, r4
 8008fca:	d109      	bne.n	8008fe0 <__libc_init_array+0x24>
 8008fcc:	4d0b      	ldr	r5, [pc, #44]	; (8008ffc <__libc_init_array+0x40>)
 8008fce:	4c0c      	ldr	r4, [pc, #48]	; (8009000 <__libc_init_array+0x44>)
 8008fd0:	f000 ff8e 	bl	8009ef0 <_init>
 8008fd4:	1b64      	subs	r4, r4, r5
 8008fd6:	10a4      	asrs	r4, r4, #2
 8008fd8:	2600      	movs	r6, #0
 8008fda:	42a6      	cmp	r6, r4
 8008fdc:	d105      	bne.n	8008fea <__libc_init_array+0x2e>
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe4:	4798      	blx	r3
 8008fe6:	3601      	adds	r6, #1
 8008fe8:	e7ee      	b.n	8008fc8 <__libc_init_array+0xc>
 8008fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fee:	4798      	blx	r3
 8008ff0:	3601      	adds	r6, #1
 8008ff2:	e7f2      	b.n	8008fda <__libc_init_array+0x1e>
 8008ff4:	0800af0c 	.word	0x0800af0c
 8008ff8:	0800af0c 	.word	0x0800af0c
 8008ffc:	0800af0c 	.word	0x0800af0c
 8009000:	0800af10 	.word	0x0800af10

08009004 <__itoa>:
 8009004:	1e93      	subs	r3, r2, #2
 8009006:	2b22      	cmp	r3, #34	; 0x22
 8009008:	b510      	push	{r4, lr}
 800900a:	460c      	mov	r4, r1
 800900c:	d904      	bls.n	8009018 <__itoa+0x14>
 800900e:	2300      	movs	r3, #0
 8009010:	700b      	strb	r3, [r1, #0]
 8009012:	461c      	mov	r4, r3
 8009014:	4620      	mov	r0, r4
 8009016:	bd10      	pop	{r4, pc}
 8009018:	2a0a      	cmp	r2, #10
 800901a:	d109      	bne.n	8009030 <__itoa+0x2c>
 800901c:	2800      	cmp	r0, #0
 800901e:	da07      	bge.n	8009030 <__itoa+0x2c>
 8009020:	232d      	movs	r3, #45	; 0x2d
 8009022:	700b      	strb	r3, [r1, #0]
 8009024:	4240      	negs	r0, r0
 8009026:	2101      	movs	r1, #1
 8009028:	4421      	add	r1, r4
 800902a:	f000 f989 	bl	8009340 <__utoa>
 800902e:	e7f1      	b.n	8009014 <__itoa+0x10>
 8009030:	2100      	movs	r1, #0
 8009032:	e7f9      	b.n	8009028 <__itoa+0x24>

08009034 <itoa>:
 8009034:	f7ff bfe6 	b.w	8009004 <__itoa>

08009038 <__retarget_lock_init_recursive>:
 8009038:	4770      	bx	lr

0800903a <__retarget_lock_acquire_recursive>:
 800903a:	4770      	bx	lr

0800903c <__retarget_lock_release_recursive>:
 800903c:	4770      	bx	lr

0800903e <memcpy>:
 800903e:	440a      	add	r2, r1
 8009040:	4291      	cmp	r1, r2
 8009042:	f100 33ff 	add.w	r3, r0, #4294967295
 8009046:	d100      	bne.n	800904a <memcpy+0xc>
 8009048:	4770      	bx	lr
 800904a:	b510      	push	{r4, lr}
 800904c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009054:	4291      	cmp	r1, r2
 8009056:	d1f9      	bne.n	800904c <memcpy+0xe>
 8009058:	bd10      	pop	{r4, pc}

0800905a <memset>:
 800905a:	4402      	add	r2, r0
 800905c:	4603      	mov	r3, r0
 800905e:	4293      	cmp	r3, r2
 8009060:	d100      	bne.n	8009064 <memset+0xa>
 8009062:	4770      	bx	lr
 8009064:	f803 1b01 	strb.w	r1, [r3], #1
 8009068:	e7f9      	b.n	800905e <memset+0x4>
	...

0800906c <sbrk_aligned>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	4e0e      	ldr	r6, [pc, #56]	; (80090a8 <sbrk_aligned+0x3c>)
 8009070:	460c      	mov	r4, r1
 8009072:	6831      	ldr	r1, [r6, #0]
 8009074:	4605      	mov	r5, r0
 8009076:	b911      	cbnz	r1, 800907e <sbrk_aligned+0x12>
 8009078:	f000 f90e 	bl	8009298 <_sbrk_r>
 800907c:	6030      	str	r0, [r6, #0]
 800907e:	4621      	mov	r1, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 f909 	bl	8009298 <_sbrk_r>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d00a      	beq.n	80090a0 <sbrk_aligned+0x34>
 800908a:	1cc4      	adds	r4, r0, #3
 800908c:	f024 0403 	bic.w	r4, r4, #3
 8009090:	42a0      	cmp	r0, r4
 8009092:	d007      	beq.n	80090a4 <sbrk_aligned+0x38>
 8009094:	1a21      	subs	r1, r4, r0
 8009096:	4628      	mov	r0, r5
 8009098:	f000 f8fe 	bl	8009298 <_sbrk_r>
 800909c:	3001      	adds	r0, #1
 800909e:	d101      	bne.n	80090a4 <sbrk_aligned+0x38>
 80090a0:	f04f 34ff 	mov.w	r4, #4294967295
 80090a4:	4620      	mov	r0, r4
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
 80090a8:	240081b0 	.word	0x240081b0

080090ac <_malloc_r>:
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	1ccd      	adds	r5, r1, #3
 80090b2:	f025 0503 	bic.w	r5, r5, #3
 80090b6:	3508      	adds	r5, #8
 80090b8:	2d0c      	cmp	r5, #12
 80090ba:	bf38      	it	cc
 80090bc:	250c      	movcc	r5, #12
 80090be:	2d00      	cmp	r5, #0
 80090c0:	4607      	mov	r7, r0
 80090c2:	db01      	blt.n	80090c8 <_malloc_r+0x1c>
 80090c4:	42a9      	cmp	r1, r5
 80090c6:	d905      	bls.n	80090d4 <_malloc_r+0x28>
 80090c8:	230c      	movs	r3, #12
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	2600      	movs	r6, #0
 80090ce:	4630      	mov	r0, r6
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	4e2e      	ldr	r6, [pc, #184]	; (8009190 <_malloc_r+0xe4>)
 80090d6:	f000 fa6b 	bl	80095b0 <__malloc_lock>
 80090da:	6833      	ldr	r3, [r6, #0]
 80090dc:	461c      	mov	r4, r3
 80090de:	bb34      	cbnz	r4, 800912e <_malloc_r+0x82>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4638      	mov	r0, r7
 80090e4:	f7ff ffc2 	bl	800906c <sbrk_aligned>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	4604      	mov	r4, r0
 80090ec:	d14d      	bne.n	800918a <_malloc_r+0xde>
 80090ee:	6834      	ldr	r4, [r6, #0]
 80090f0:	4626      	mov	r6, r4
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	d140      	bne.n	8009178 <_malloc_r+0xcc>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	4631      	mov	r1, r6
 80090fa:	4638      	mov	r0, r7
 80090fc:	eb04 0803 	add.w	r8, r4, r3
 8009100:	f000 f8ca 	bl	8009298 <_sbrk_r>
 8009104:	4580      	cmp	r8, r0
 8009106:	d13a      	bne.n	800917e <_malloc_r+0xd2>
 8009108:	6821      	ldr	r1, [r4, #0]
 800910a:	3503      	adds	r5, #3
 800910c:	1a6d      	subs	r5, r5, r1
 800910e:	f025 0503 	bic.w	r5, r5, #3
 8009112:	3508      	adds	r5, #8
 8009114:	2d0c      	cmp	r5, #12
 8009116:	bf38      	it	cc
 8009118:	250c      	movcc	r5, #12
 800911a:	4629      	mov	r1, r5
 800911c:	4638      	mov	r0, r7
 800911e:	f7ff ffa5 	bl	800906c <sbrk_aligned>
 8009122:	3001      	adds	r0, #1
 8009124:	d02b      	beq.n	800917e <_malloc_r+0xd2>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	442b      	add	r3, r5
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	e00e      	b.n	800914c <_malloc_r+0xa0>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	1b52      	subs	r2, r2, r5
 8009132:	d41e      	bmi.n	8009172 <_malloc_r+0xc6>
 8009134:	2a0b      	cmp	r2, #11
 8009136:	d916      	bls.n	8009166 <_malloc_r+0xba>
 8009138:	1961      	adds	r1, r4, r5
 800913a:	42a3      	cmp	r3, r4
 800913c:	6025      	str	r5, [r4, #0]
 800913e:	bf18      	it	ne
 8009140:	6059      	strne	r1, [r3, #4]
 8009142:	6863      	ldr	r3, [r4, #4]
 8009144:	bf08      	it	eq
 8009146:	6031      	streq	r1, [r6, #0]
 8009148:	5162      	str	r2, [r4, r5]
 800914a:	604b      	str	r3, [r1, #4]
 800914c:	4638      	mov	r0, r7
 800914e:	f104 060b 	add.w	r6, r4, #11
 8009152:	f000 fa33 	bl	80095bc <__malloc_unlock>
 8009156:	f026 0607 	bic.w	r6, r6, #7
 800915a:	1d23      	adds	r3, r4, #4
 800915c:	1af2      	subs	r2, r6, r3
 800915e:	d0b6      	beq.n	80090ce <_malloc_r+0x22>
 8009160:	1b9b      	subs	r3, r3, r6
 8009162:	50a3      	str	r3, [r4, r2]
 8009164:	e7b3      	b.n	80090ce <_malloc_r+0x22>
 8009166:	6862      	ldr	r2, [r4, #4]
 8009168:	42a3      	cmp	r3, r4
 800916a:	bf0c      	ite	eq
 800916c:	6032      	streq	r2, [r6, #0]
 800916e:	605a      	strne	r2, [r3, #4]
 8009170:	e7ec      	b.n	800914c <_malloc_r+0xa0>
 8009172:	4623      	mov	r3, r4
 8009174:	6864      	ldr	r4, [r4, #4]
 8009176:	e7b2      	b.n	80090de <_malloc_r+0x32>
 8009178:	4634      	mov	r4, r6
 800917a:	6876      	ldr	r6, [r6, #4]
 800917c:	e7b9      	b.n	80090f2 <_malloc_r+0x46>
 800917e:	230c      	movs	r3, #12
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	4638      	mov	r0, r7
 8009184:	f000 fa1a 	bl	80095bc <__malloc_unlock>
 8009188:	e7a1      	b.n	80090ce <_malloc_r+0x22>
 800918a:	6025      	str	r5, [r4, #0]
 800918c:	e7de      	b.n	800914c <_malloc_r+0xa0>
 800918e:	bf00      	nop
 8009190:	240081ac 	.word	0x240081ac

08009194 <iprintf>:
 8009194:	b40f      	push	{r0, r1, r2, r3}
 8009196:	4b0a      	ldr	r3, [pc, #40]	; (80091c0 <iprintf+0x2c>)
 8009198:	b513      	push	{r0, r1, r4, lr}
 800919a:	681c      	ldr	r4, [r3, #0]
 800919c:	b124      	cbz	r4, 80091a8 <iprintf+0x14>
 800919e:	69a3      	ldr	r3, [r4, #24]
 80091a0:	b913      	cbnz	r3, 80091a8 <iprintf+0x14>
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff fe6c 	bl	8008e80 <__sinit>
 80091a8:	ab05      	add	r3, sp, #20
 80091aa:	9a04      	ldr	r2, [sp, #16]
 80091ac:	68a1      	ldr	r1, [r4, #8]
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fa7f 	bl	80096b4 <_vfiprintf_r>
 80091b6:	b002      	add	sp, #8
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091bc:	b004      	add	sp, #16
 80091be:	4770      	bx	lr
 80091c0:	240030d8 	.word	0x240030d8

080091c4 <cleanup_glue>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	460c      	mov	r4, r1
 80091c8:	6809      	ldr	r1, [r1, #0]
 80091ca:	4605      	mov	r5, r0
 80091cc:	b109      	cbz	r1, 80091d2 <cleanup_glue+0xe>
 80091ce:	f7ff fff9 	bl	80091c4 <cleanup_glue>
 80091d2:	4621      	mov	r1, r4
 80091d4:	4628      	mov	r0, r5
 80091d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091da:	f000 b9f5 	b.w	80095c8 <_free_r>
	...

080091e0 <_reclaim_reent>:
 80091e0:	4b2c      	ldr	r3, [pc, #176]	; (8009294 <_reclaim_reent+0xb4>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4283      	cmp	r3, r0
 80091e6:	b570      	push	{r4, r5, r6, lr}
 80091e8:	4604      	mov	r4, r0
 80091ea:	d051      	beq.n	8009290 <_reclaim_reent+0xb0>
 80091ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091ee:	b143      	cbz	r3, 8009202 <_reclaim_reent+0x22>
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d14a      	bne.n	800928c <_reclaim_reent+0xac>
 80091f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091f8:	6819      	ldr	r1, [r3, #0]
 80091fa:	b111      	cbz	r1, 8009202 <_reclaim_reent+0x22>
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 f9e3 	bl	80095c8 <_free_r>
 8009202:	6961      	ldr	r1, [r4, #20]
 8009204:	b111      	cbz	r1, 800920c <_reclaim_reent+0x2c>
 8009206:	4620      	mov	r0, r4
 8009208:	f000 f9de 	bl	80095c8 <_free_r>
 800920c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800920e:	b111      	cbz	r1, 8009216 <_reclaim_reent+0x36>
 8009210:	4620      	mov	r0, r4
 8009212:	f000 f9d9 	bl	80095c8 <_free_r>
 8009216:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009218:	b111      	cbz	r1, 8009220 <_reclaim_reent+0x40>
 800921a:	4620      	mov	r0, r4
 800921c:	f000 f9d4 	bl	80095c8 <_free_r>
 8009220:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009222:	b111      	cbz	r1, 800922a <_reclaim_reent+0x4a>
 8009224:	4620      	mov	r0, r4
 8009226:	f000 f9cf 	bl	80095c8 <_free_r>
 800922a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800922c:	b111      	cbz	r1, 8009234 <_reclaim_reent+0x54>
 800922e:	4620      	mov	r0, r4
 8009230:	f000 f9ca 	bl	80095c8 <_free_r>
 8009234:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009236:	b111      	cbz	r1, 800923e <_reclaim_reent+0x5e>
 8009238:	4620      	mov	r0, r4
 800923a:	f000 f9c5 	bl	80095c8 <_free_r>
 800923e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009240:	b111      	cbz	r1, 8009248 <_reclaim_reent+0x68>
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f9c0 	bl	80095c8 <_free_r>
 8009248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800924a:	b111      	cbz	r1, 8009252 <_reclaim_reent+0x72>
 800924c:	4620      	mov	r0, r4
 800924e:	f000 f9bb 	bl	80095c8 <_free_r>
 8009252:	69a3      	ldr	r3, [r4, #24]
 8009254:	b1e3      	cbz	r3, 8009290 <_reclaim_reent+0xb0>
 8009256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009258:	4620      	mov	r0, r4
 800925a:	4798      	blx	r3
 800925c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800925e:	b1b9      	cbz	r1, 8009290 <_reclaim_reent+0xb0>
 8009260:	4620      	mov	r0, r4
 8009262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009266:	f7ff bfad 	b.w	80091c4 <cleanup_glue>
 800926a:	5949      	ldr	r1, [r1, r5]
 800926c:	b941      	cbnz	r1, 8009280 <_reclaim_reent+0xa0>
 800926e:	3504      	adds	r5, #4
 8009270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009272:	2d80      	cmp	r5, #128	; 0x80
 8009274:	68d9      	ldr	r1, [r3, #12]
 8009276:	d1f8      	bne.n	800926a <_reclaim_reent+0x8a>
 8009278:	4620      	mov	r0, r4
 800927a:	f000 f9a5 	bl	80095c8 <_free_r>
 800927e:	e7ba      	b.n	80091f6 <_reclaim_reent+0x16>
 8009280:	680e      	ldr	r6, [r1, #0]
 8009282:	4620      	mov	r0, r4
 8009284:	f000 f9a0 	bl	80095c8 <_free_r>
 8009288:	4631      	mov	r1, r6
 800928a:	e7ef      	b.n	800926c <_reclaim_reent+0x8c>
 800928c:	2500      	movs	r5, #0
 800928e:	e7ef      	b.n	8009270 <_reclaim_reent+0x90>
 8009290:	bd70      	pop	{r4, r5, r6, pc}
 8009292:	bf00      	nop
 8009294:	240030d8 	.word	0x240030d8

08009298 <_sbrk_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_sbrk_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f9 fc12 	bl	8002acc <_sbrk>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_sbrk_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_sbrk_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	240081b4 	.word	0x240081b4

080092b8 <__sread>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	460c      	mov	r4, r1
 80092bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c0:	f000 fcbc 	bl	8009c3c <_read_r>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	bfab      	itete	ge
 80092c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092ca:	89a3      	ldrhlt	r3, [r4, #12]
 80092cc:	181b      	addge	r3, r3, r0
 80092ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092d2:	bfac      	ite	ge
 80092d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80092d6:	81a3      	strhlt	r3, [r4, #12]
 80092d8:	bd10      	pop	{r4, pc}

080092da <__swrite>:
 80092da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	461f      	mov	r7, r3
 80092e0:	898b      	ldrh	r3, [r1, #12]
 80092e2:	05db      	lsls	r3, r3, #23
 80092e4:	4605      	mov	r5, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	4616      	mov	r6, r2
 80092ea:	d505      	bpl.n	80092f8 <__swrite+0x1e>
 80092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f0:	2302      	movs	r3, #2
 80092f2:	2200      	movs	r2, #0
 80092f4:	f000 f94a 	bl	800958c <_lseek_r>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	4628      	mov	r0, r5
 800930a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800930e:	f000 b859 	b.w	80093c4 <_write_r>

08009312 <__sseek>:
 8009312:	b510      	push	{r4, lr}
 8009314:	460c      	mov	r4, r1
 8009316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931a:	f000 f937 	bl	800958c <_lseek_r>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	bf15      	itete	ne
 8009324:	6560      	strne	r0, [r4, #84]	; 0x54
 8009326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800932a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800932e:	81a3      	strheq	r3, [r4, #12]
 8009330:	bf18      	it	ne
 8009332:	81a3      	strhne	r3, [r4, #12]
 8009334:	bd10      	pop	{r4, pc}

08009336 <__sclose>:
 8009336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933a:	f000 b855 	b.w	80093e8 <_close_r>
	...

08009340 <__utoa>:
 8009340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009342:	4c1f      	ldr	r4, [pc, #124]	; (80093c0 <__utoa+0x80>)
 8009344:	b08b      	sub	sp, #44	; 0x2c
 8009346:	4605      	mov	r5, r0
 8009348:	460b      	mov	r3, r1
 800934a:	466e      	mov	r6, sp
 800934c:	f104 0c20 	add.w	ip, r4, #32
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	6861      	ldr	r1, [r4, #4]
 8009354:	4637      	mov	r7, r6
 8009356:	c703      	stmia	r7!, {r0, r1}
 8009358:	3408      	adds	r4, #8
 800935a:	4564      	cmp	r4, ip
 800935c:	463e      	mov	r6, r7
 800935e:	d1f7      	bne.n	8009350 <__utoa+0x10>
 8009360:	7921      	ldrb	r1, [r4, #4]
 8009362:	7139      	strb	r1, [r7, #4]
 8009364:	1e91      	subs	r1, r2, #2
 8009366:	6820      	ldr	r0, [r4, #0]
 8009368:	6038      	str	r0, [r7, #0]
 800936a:	2922      	cmp	r1, #34	; 0x22
 800936c:	f04f 0100 	mov.w	r1, #0
 8009370:	d904      	bls.n	800937c <__utoa+0x3c>
 8009372:	7019      	strb	r1, [r3, #0]
 8009374:	460b      	mov	r3, r1
 8009376:	4618      	mov	r0, r3
 8009378:	b00b      	add	sp, #44	; 0x2c
 800937a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800937c:	1e58      	subs	r0, r3, #1
 800937e:	4684      	mov	ip, r0
 8009380:	fbb5 f7f2 	udiv	r7, r5, r2
 8009384:	fb02 5617 	mls	r6, r2, r7, r5
 8009388:	3628      	adds	r6, #40	; 0x28
 800938a:	446e      	add	r6, sp
 800938c:	460c      	mov	r4, r1
 800938e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009392:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009396:	462e      	mov	r6, r5
 8009398:	42b2      	cmp	r2, r6
 800939a:	f101 0101 	add.w	r1, r1, #1
 800939e:	463d      	mov	r5, r7
 80093a0:	d9ee      	bls.n	8009380 <__utoa+0x40>
 80093a2:	2200      	movs	r2, #0
 80093a4:	545a      	strb	r2, [r3, r1]
 80093a6:	1919      	adds	r1, r3, r4
 80093a8:	1aa5      	subs	r5, r4, r2
 80093aa:	42aa      	cmp	r2, r5
 80093ac:	dae3      	bge.n	8009376 <__utoa+0x36>
 80093ae:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80093b2:	780e      	ldrb	r6, [r1, #0]
 80093b4:	7006      	strb	r6, [r0, #0]
 80093b6:	3201      	adds	r2, #1
 80093b8:	f801 5901 	strb.w	r5, [r1], #-1
 80093bc:	e7f4      	b.n	80093a8 <__utoa+0x68>
 80093be:	bf00      	nop
 80093c0:	0800aeac 	.word	0x0800aeac

080093c4 <_write_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d07      	ldr	r5, [pc, #28]	; (80093e4 <_write_r+0x20>)
 80093c8:	4604      	mov	r4, r0
 80093ca:	4608      	mov	r0, r1
 80093cc:	4611      	mov	r1, r2
 80093ce:	2200      	movs	r2, #0
 80093d0:	602a      	str	r2, [r5, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	f7f8 fdfe 	bl	8001fd4 <_write>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_write_r+0x1e>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_write_r+0x1e>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	240081b4 	.word	0x240081b4

080093e8 <_close_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d06      	ldr	r5, [pc, #24]	; (8009404 <_close_r+0x1c>)
 80093ec:	2300      	movs	r3, #0
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7f9 fb5c 	bl	8002ab0 <_close>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_close_r+0x1a>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_close_r+0x1a>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	240081b4 	.word	0x240081b4

08009408 <__sflush_r>:
 8009408:	898a      	ldrh	r2, [r1, #12]
 800940a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940e:	4605      	mov	r5, r0
 8009410:	0710      	lsls	r0, r2, #28
 8009412:	460c      	mov	r4, r1
 8009414:	d458      	bmi.n	80094c8 <__sflush_r+0xc0>
 8009416:	684b      	ldr	r3, [r1, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc05      	bgt.n	8009428 <__sflush_r+0x20>
 800941c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800941e:	2b00      	cmp	r3, #0
 8009420:	dc02      	bgt.n	8009428 <__sflush_r+0x20>
 8009422:	2000      	movs	r0, #0
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800942a:	2e00      	cmp	r6, #0
 800942c:	d0f9      	beq.n	8009422 <__sflush_r+0x1a>
 800942e:	2300      	movs	r3, #0
 8009430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009434:	682f      	ldr	r7, [r5, #0]
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	d032      	beq.n	80094a0 <__sflush_r+0x98>
 800943a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	075a      	lsls	r2, r3, #29
 8009440:	d505      	bpl.n	800944e <__sflush_r+0x46>
 8009442:	6863      	ldr	r3, [r4, #4]
 8009444:	1ac0      	subs	r0, r0, r3
 8009446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009448:	b10b      	cbz	r3, 800944e <__sflush_r+0x46>
 800944a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800944c:	1ac0      	subs	r0, r0, r3
 800944e:	2300      	movs	r3, #0
 8009450:	4602      	mov	r2, r0
 8009452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009454:	6a21      	ldr	r1, [r4, #32]
 8009456:	4628      	mov	r0, r5
 8009458:	47b0      	blx	r6
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	d106      	bne.n	800946e <__sflush_r+0x66>
 8009460:	6829      	ldr	r1, [r5, #0]
 8009462:	291d      	cmp	r1, #29
 8009464:	d82c      	bhi.n	80094c0 <__sflush_r+0xb8>
 8009466:	4a2a      	ldr	r2, [pc, #168]	; (8009510 <__sflush_r+0x108>)
 8009468:	40ca      	lsrs	r2, r1
 800946a:	07d6      	lsls	r6, r2, #31
 800946c:	d528      	bpl.n	80094c0 <__sflush_r+0xb8>
 800946e:	2200      	movs	r2, #0
 8009470:	6062      	str	r2, [r4, #4]
 8009472:	04d9      	lsls	r1, r3, #19
 8009474:	6922      	ldr	r2, [r4, #16]
 8009476:	6022      	str	r2, [r4, #0]
 8009478:	d504      	bpl.n	8009484 <__sflush_r+0x7c>
 800947a:	1c42      	adds	r2, r0, #1
 800947c:	d101      	bne.n	8009482 <__sflush_r+0x7a>
 800947e:	682b      	ldr	r3, [r5, #0]
 8009480:	b903      	cbnz	r3, 8009484 <__sflush_r+0x7c>
 8009482:	6560      	str	r0, [r4, #84]	; 0x54
 8009484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009486:	602f      	str	r7, [r5, #0]
 8009488:	2900      	cmp	r1, #0
 800948a:	d0ca      	beq.n	8009422 <__sflush_r+0x1a>
 800948c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009490:	4299      	cmp	r1, r3
 8009492:	d002      	beq.n	800949a <__sflush_r+0x92>
 8009494:	4628      	mov	r0, r5
 8009496:	f000 f897 	bl	80095c8 <_free_r>
 800949a:	2000      	movs	r0, #0
 800949c:	6360      	str	r0, [r4, #52]	; 0x34
 800949e:	e7c1      	b.n	8009424 <__sflush_r+0x1c>
 80094a0:	6a21      	ldr	r1, [r4, #32]
 80094a2:	2301      	movs	r3, #1
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b0      	blx	r6
 80094a8:	1c41      	adds	r1, r0, #1
 80094aa:	d1c7      	bne.n	800943c <__sflush_r+0x34>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0c4      	beq.n	800943c <__sflush_r+0x34>
 80094b2:	2b1d      	cmp	r3, #29
 80094b4:	d001      	beq.n	80094ba <__sflush_r+0xb2>
 80094b6:	2b16      	cmp	r3, #22
 80094b8:	d101      	bne.n	80094be <__sflush_r+0xb6>
 80094ba:	602f      	str	r7, [r5, #0]
 80094bc:	e7b1      	b.n	8009422 <__sflush_r+0x1a>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	e7ad      	b.n	8009424 <__sflush_r+0x1c>
 80094c8:	690f      	ldr	r7, [r1, #16]
 80094ca:	2f00      	cmp	r7, #0
 80094cc:	d0a9      	beq.n	8009422 <__sflush_r+0x1a>
 80094ce:	0793      	lsls	r3, r2, #30
 80094d0:	680e      	ldr	r6, [r1, #0]
 80094d2:	bf08      	it	eq
 80094d4:	694b      	ldreq	r3, [r1, #20]
 80094d6:	600f      	str	r7, [r1, #0]
 80094d8:	bf18      	it	ne
 80094da:	2300      	movne	r3, #0
 80094dc:	eba6 0807 	sub.w	r8, r6, r7
 80094e0:	608b      	str	r3, [r1, #8]
 80094e2:	f1b8 0f00 	cmp.w	r8, #0
 80094e6:	dd9c      	ble.n	8009422 <__sflush_r+0x1a>
 80094e8:	6a21      	ldr	r1, [r4, #32]
 80094ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094ec:	4643      	mov	r3, r8
 80094ee:	463a      	mov	r2, r7
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b0      	blx	r6
 80094f4:	2800      	cmp	r0, #0
 80094f6:	dc06      	bgt.n	8009506 <__sflush_r+0xfe>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	e78e      	b.n	8009424 <__sflush_r+0x1c>
 8009506:	4407      	add	r7, r0
 8009508:	eba8 0800 	sub.w	r8, r8, r0
 800950c:	e7e9      	b.n	80094e2 <__sflush_r+0xda>
 800950e:	bf00      	nop
 8009510:	20400001 	.word	0x20400001

08009514 <_fflush_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	690b      	ldr	r3, [r1, #16]
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	b913      	cbnz	r3, 8009524 <_fflush_r+0x10>
 800951e:	2500      	movs	r5, #0
 8009520:	4628      	mov	r0, r5
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	b118      	cbz	r0, 800952e <_fflush_r+0x1a>
 8009526:	6983      	ldr	r3, [r0, #24]
 8009528:	b90b      	cbnz	r3, 800952e <_fflush_r+0x1a>
 800952a:	f7ff fca9 	bl	8008e80 <__sinit>
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <_fflush_r+0x6c>)
 8009530:	429c      	cmp	r4, r3
 8009532:	d11b      	bne.n	800956c <_fflush_r+0x58>
 8009534:	686c      	ldr	r4, [r5, #4]
 8009536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0ef      	beq.n	800951e <_fflush_r+0xa>
 800953e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009540:	07d0      	lsls	r0, r2, #31
 8009542:	d404      	bmi.n	800954e <_fflush_r+0x3a>
 8009544:	0599      	lsls	r1, r3, #22
 8009546:	d402      	bmi.n	800954e <_fflush_r+0x3a>
 8009548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800954a:	f7ff fd76 	bl	800903a <__retarget_lock_acquire_recursive>
 800954e:	4628      	mov	r0, r5
 8009550:	4621      	mov	r1, r4
 8009552:	f7ff ff59 	bl	8009408 <__sflush_r>
 8009556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009558:	07da      	lsls	r2, r3, #31
 800955a:	4605      	mov	r5, r0
 800955c:	d4e0      	bmi.n	8009520 <_fflush_r+0xc>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	059b      	lsls	r3, r3, #22
 8009562:	d4dd      	bmi.n	8009520 <_fflush_r+0xc>
 8009564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009566:	f7ff fd69 	bl	800903c <__retarget_lock_release_recursive>
 800956a:	e7d9      	b.n	8009520 <_fflush_r+0xc>
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <_fflush_r+0x70>)
 800956e:	429c      	cmp	r4, r3
 8009570:	d101      	bne.n	8009576 <_fflush_r+0x62>
 8009572:	68ac      	ldr	r4, [r5, #8]
 8009574:	e7df      	b.n	8009536 <_fflush_r+0x22>
 8009576:	4b04      	ldr	r3, [pc, #16]	; (8009588 <_fflush_r+0x74>)
 8009578:	429c      	cmp	r4, r3
 800957a:	bf08      	it	eq
 800957c:	68ec      	ldreq	r4, [r5, #12]
 800957e:	e7da      	b.n	8009536 <_fflush_r+0x22>
 8009580:	0800ae68 	.word	0x0800ae68
 8009584:	0800ae88 	.word	0x0800ae88
 8009588:	0800ae48 	.word	0x0800ae48

0800958c <_lseek_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d07      	ldr	r5, [pc, #28]	; (80095ac <_lseek_r+0x20>)
 8009590:	4604      	mov	r4, r0
 8009592:	4608      	mov	r0, r1
 8009594:	4611      	mov	r1, r2
 8009596:	2200      	movs	r2, #0
 8009598:	602a      	str	r2, [r5, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	f7f9 fa94 	bl	8002ac8 <_lseek>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_lseek_r+0x1e>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_lseek_r+0x1e>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	240081b4 	.word	0x240081b4

080095b0 <__malloc_lock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <__malloc_lock+0x8>)
 80095b2:	f7ff bd42 	b.w	800903a <__retarget_lock_acquire_recursive>
 80095b6:	bf00      	nop
 80095b8:	240081a8 	.word	0x240081a8

080095bc <__malloc_unlock>:
 80095bc:	4801      	ldr	r0, [pc, #4]	; (80095c4 <__malloc_unlock+0x8>)
 80095be:	f7ff bd3d 	b.w	800903c <__retarget_lock_release_recursive>
 80095c2:	bf00      	nop
 80095c4:	240081a8 	.word	0x240081a8

080095c8 <_free_r>:
 80095c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ca:	2900      	cmp	r1, #0
 80095cc:	d044      	beq.n	8009658 <_free_r+0x90>
 80095ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095d2:	9001      	str	r0, [sp, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f1a1 0404 	sub.w	r4, r1, #4
 80095da:	bfb8      	it	lt
 80095dc:	18e4      	addlt	r4, r4, r3
 80095de:	f7ff ffe7 	bl	80095b0 <__malloc_lock>
 80095e2:	4a1e      	ldr	r2, [pc, #120]	; (800965c <_free_r+0x94>)
 80095e4:	9801      	ldr	r0, [sp, #4]
 80095e6:	6813      	ldr	r3, [r2, #0]
 80095e8:	b933      	cbnz	r3, 80095f8 <_free_r+0x30>
 80095ea:	6063      	str	r3, [r4, #4]
 80095ec:	6014      	str	r4, [r2, #0]
 80095ee:	b003      	add	sp, #12
 80095f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095f4:	f7ff bfe2 	b.w	80095bc <__malloc_unlock>
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d908      	bls.n	800960e <_free_r+0x46>
 80095fc:	6825      	ldr	r5, [r4, #0]
 80095fe:	1961      	adds	r1, r4, r5
 8009600:	428b      	cmp	r3, r1
 8009602:	bf01      	itttt	eq
 8009604:	6819      	ldreq	r1, [r3, #0]
 8009606:	685b      	ldreq	r3, [r3, #4]
 8009608:	1949      	addeq	r1, r1, r5
 800960a:	6021      	streq	r1, [r4, #0]
 800960c:	e7ed      	b.n	80095ea <_free_r+0x22>
 800960e:	461a      	mov	r2, r3
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	b10b      	cbz	r3, 8009618 <_free_r+0x50>
 8009614:	42a3      	cmp	r3, r4
 8009616:	d9fa      	bls.n	800960e <_free_r+0x46>
 8009618:	6811      	ldr	r1, [r2, #0]
 800961a:	1855      	adds	r5, r2, r1
 800961c:	42a5      	cmp	r5, r4
 800961e:	d10b      	bne.n	8009638 <_free_r+0x70>
 8009620:	6824      	ldr	r4, [r4, #0]
 8009622:	4421      	add	r1, r4
 8009624:	1854      	adds	r4, r2, r1
 8009626:	42a3      	cmp	r3, r4
 8009628:	6011      	str	r1, [r2, #0]
 800962a:	d1e0      	bne.n	80095ee <_free_r+0x26>
 800962c:	681c      	ldr	r4, [r3, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	6053      	str	r3, [r2, #4]
 8009632:	4421      	add	r1, r4
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	e7da      	b.n	80095ee <_free_r+0x26>
 8009638:	d902      	bls.n	8009640 <_free_r+0x78>
 800963a:	230c      	movs	r3, #12
 800963c:	6003      	str	r3, [r0, #0]
 800963e:	e7d6      	b.n	80095ee <_free_r+0x26>
 8009640:	6825      	ldr	r5, [r4, #0]
 8009642:	1961      	adds	r1, r4, r5
 8009644:	428b      	cmp	r3, r1
 8009646:	bf04      	itt	eq
 8009648:	6819      	ldreq	r1, [r3, #0]
 800964a:	685b      	ldreq	r3, [r3, #4]
 800964c:	6063      	str	r3, [r4, #4]
 800964e:	bf04      	itt	eq
 8009650:	1949      	addeq	r1, r1, r5
 8009652:	6021      	streq	r1, [r4, #0]
 8009654:	6054      	str	r4, [r2, #4]
 8009656:	e7ca      	b.n	80095ee <_free_r+0x26>
 8009658:	b003      	add	sp, #12
 800965a:	bd30      	pop	{r4, r5, pc}
 800965c:	240081ac 	.word	0x240081ac

08009660 <__sfputc_r>:
 8009660:	6893      	ldr	r3, [r2, #8]
 8009662:	3b01      	subs	r3, #1
 8009664:	2b00      	cmp	r3, #0
 8009666:	b410      	push	{r4}
 8009668:	6093      	str	r3, [r2, #8]
 800966a:	da08      	bge.n	800967e <__sfputc_r+0x1e>
 800966c:	6994      	ldr	r4, [r2, #24]
 800966e:	42a3      	cmp	r3, r4
 8009670:	db01      	blt.n	8009676 <__sfputc_r+0x16>
 8009672:	290a      	cmp	r1, #10
 8009674:	d103      	bne.n	800967e <__sfputc_r+0x1e>
 8009676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800967a:	f000 baf1 	b.w	8009c60 <__swbuf_r>
 800967e:	6813      	ldr	r3, [r2, #0]
 8009680:	1c58      	adds	r0, r3, #1
 8009682:	6010      	str	r0, [r2, #0]
 8009684:	7019      	strb	r1, [r3, #0]
 8009686:	4608      	mov	r0, r1
 8009688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800968c:	4770      	bx	lr

0800968e <__sfputs_r>:
 800968e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009690:	4606      	mov	r6, r0
 8009692:	460f      	mov	r7, r1
 8009694:	4614      	mov	r4, r2
 8009696:	18d5      	adds	r5, r2, r3
 8009698:	42ac      	cmp	r4, r5
 800969a:	d101      	bne.n	80096a0 <__sfputs_r+0x12>
 800969c:	2000      	movs	r0, #0
 800969e:	e007      	b.n	80096b0 <__sfputs_r+0x22>
 80096a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a4:	463a      	mov	r2, r7
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ffda 	bl	8009660 <__sfputc_r>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d1f3      	bne.n	8009698 <__sfputs_r+0xa>
 80096b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096b4 <_vfiprintf_r>:
 80096b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	460d      	mov	r5, r1
 80096ba:	b09d      	sub	sp, #116	; 0x74
 80096bc:	4614      	mov	r4, r2
 80096be:	4698      	mov	r8, r3
 80096c0:	4606      	mov	r6, r0
 80096c2:	b118      	cbz	r0, 80096cc <_vfiprintf_r+0x18>
 80096c4:	6983      	ldr	r3, [r0, #24]
 80096c6:	b90b      	cbnz	r3, 80096cc <_vfiprintf_r+0x18>
 80096c8:	f7ff fbda 	bl	8008e80 <__sinit>
 80096cc:	4b89      	ldr	r3, [pc, #548]	; (80098f4 <_vfiprintf_r+0x240>)
 80096ce:	429d      	cmp	r5, r3
 80096d0:	d11b      	bne.n	800970a <_vfiprintf_r+0x56>
 80096d2:	6875      	ldr	r5, [r6, #4]
 80096d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d6:	07d9      	lsls	r1, r3, #31
 80096d8:	d405      	bmi.n	80096e6 <_vfiprintf_r+0x32>
 80096da:	89ab      	ldrh	r3, [r5, #12]
 80096dc:	059a      	lsls	r2, r3, #22
 80096de:	d402      	bmi.n	80096e6 <_vfiprintf_r+0x32>
 80096e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096e2:	f7ff fcaa 	bl	800903a <__retarget_lock_acquire_recursive>
 80096e6:	89ab      	ldrh	r3, [r5, #12]
 80096e8:	071b      	lsls	r3, r3, #28
 80096ea:	d501      	bpl.n	80096f0 <_vfiprintf_r+0x3c>
 80096ec:	692b      	ldr	r3, [r5, #16]
 80096ee:	b9eb      	cbnz	r3, 800972c <_vfiprintf_r+0x78>
 80096f0:	4629      	mov	r1, r5
 80096f2:	4630      	mov	r0, r6
 80096f4:	f000 fb06 	bl	8009d04 <__swsetup_r>
 80096f8:	b1c0      	cbz	r0, 800972c <_vfiprintf_r+0x78>
 80096fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096fc:	07dc      	lsls	r4, r3, #31
 80096fe:	d50e      	bpl.n	800971e <_vfiprintf_r+0x6a>
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	b01d      	add	sp, #116	; 0x74
 8009706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970a:	4b7b      	ldr	r3, [pc, #492]	; (80098f8 <_vfiprintf_r+0x244>)
 800970c:	429d      	cmp	r5, r3
 800970e:	d101      	bne.n	8009714 <_vfiprintf_r+0x60>
 8009710:	68b5      	ldr	r5, [r6, #8]
 8009712:	e7df      	b.n	80096d4 <_vfiprintf_r+0x20>
 8009714:	4b79      	ldr	r3, [pc, #484]	; (80098fc <_vfiprintf_r+0x248>)
 8009716:	429d      	cmp	r5, r3
 8009718:	bf08      	it	eq
 800971a:	68f5      	ldreq	r5, [r6, #12]
 800971c:	e7da      	b.n	80096d4 <_vfiprintf_r+0x20>
 800971e:	89ab      	ldrh	r3, [r5, #12]
 8009720:	0598      	lsls	r0, r3, #22
 8009722:	d4ed      	bmi.n	8009700 <_vfiprintf_r+0x4c>
 8009724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009726:	f7ff fc89 	bl	800903c <__retarget_lock_release_recursive>
 800972a:	e7e9      	b.n	8009700 <_vfiprintf_r+0x4c>
 800972c:	2300      	movs	r3, #0
 800972e:	9309      	str	r3, [sp, #36]	; 0x24
 8009730:	2320      	movs	r3, #32
 8009732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009736:	f8cd 800c 	str.w	r8, [sp, #12]
 800973a:	2330      	movs	r3, #48	; 0x30
 800973c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009900 <_vfiprintf_r+0x24c>
 8009740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009744:	f04f 0901 	mov.w	r9, #1
 8009748:	4623      	mov	r3, r4
 800974a:	469a      	mov	sl, r3
 800974c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009750:	b10a      	cbz	r2, 8009756 <_vfiprintf_r+0xa2>
 8009752:	2a25      	cmp	r2, #37	; 0x25
 8009754:	d1f9      	bne.n	800974a <_vfiprintf_r+0x96>
 8009756:	ebba 0b04 	subs.w	fp, sl, r4
 800975a:	d00b      	beq.n	8009774 <_vfiprintf_r+0xc0>
 800975c:	465b      	mov	r3, fp
 800975e:	4622      	mov	r2, r4
 8009760:	4629      	mov	r1, r5
 8009762:	4630      	mov	r0, r6
 8009764:	f7ff ff93 	bl	800968e <__sfputs_r>
 8009768:	3001      	adds	r0, #1
 800976a:	f000 80aa 	beq.w	80098c2 <_vfiprintf_r+0x20e>
 800976e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009770:	445a      	add	r2, fp
 8009772:	9209      	str	r2, [sp, #36]	; 0x24
 8009774:	f89a 3000 	ldrb.w	r3, [sl]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 80a2 	beq.w	80098c2 <_vfiprintf_r+0x20e>
 800977e:	2300      	movs	r3, #0
 8009780:	f04f 32ff 	mov.w	r2, #4294967295
 8009784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009788:	f10a 0a01 	add.w	sl, sl, #1
 800978c:	9304      	str	r3, [sp, #16]
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009794:	931a      	str	r3, [sp, #104]	; 0x68
 8009796:	4654      	mov	r4, sl
 8009798:	2205      	movs	r2, #5
 800979a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979e:	4858      	ldr	r0, [pc, #352]	; (8009900 <_vfiprintf_r+0x24c>)
 80097a0:	f7f6 fda6 	bl	80002f0 <memchr>
 80097a4:	9a04      	ldr	r2, [sp, #16]
 80097a6:	b9d8      	cbnz	r0, 80097e0 <_vfiprintf_r+0x12c>
 80097a8:	06d1      	lsls	r1, r2, #27
 80097aa:	bf44      	itt	mi
 80097ac:	2320      	movmi	r3, #32
 80097ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b2:	0713      	lsls	r3, r2, #28
 80097b4:	bf44      	itt	mi
 80097b6:	232b      	movmi	r3, #43	; 0x2b
 80097b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097bc:	f89a 3000 	ldrb.w	r3, [sl]
 80097c0:	2b2a      	cmp	r3, #42	; 0x2a
 80097c2:	d015      	beq.n	80097f0 <_vfiprintf_r+0x13c>
 80097c4:	9a07      	ldr	r2, [sp, #28]
 80097c6:	4654      	mov	r4, sl
 80097c8:	2000      	movs	r0, #0
 80097ca:	f04f 0c0a 	mov.w	ip, #10
 80097ce:	4621      	mov	r1, r4
 80097d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d4:	3b30      	subs	r3, #48	; 0x30
 80097d6:	2b09      	cmp	r3, #9
 80097d8:	d94e      	bls.n	8009878 <_vfiprintf_r+0x1c4>
 80097da:	b1b0      	cbz	r0, 800980a <_vfiprintf_r+0x156>
 80097dc:	9207      	str	r2, [sp, #28]
 80097de:	e014      	b.n	800980a <_vfiprintf_r+0x156>
 80097e0:	eba0 0308 	sub.w	r3, r0, r8
 80097e4:	fa09 f303 	lsl.w	r3, r9, r3
 80097e8:	4313      	orrs	r3, r2
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	46a2      	mov	sl, r4
 80097ee:	e7d2      	b.n	8009796 <_vfiprintf_r+0xe2>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	1d19      	adds	r1, r3, #4
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	9103      	str	r1, [sp, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bfbb      	ittet	lt
 80097fc:	425b      	neglt	r3, r3
 80097fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009802:	9307      	strge	r3, [sp, #28]
 8009804:	9307      	strlt	r3, [sp, #28]
 8009806:	bfb8      	it	lt
 8009808:	9204      	strlt	r2, [sp, #16]
 800980a:	7823      	ldrb	r3, [r4, #0]
 800980c:	2b2e      	cmp	r3, #46	; 0x2e
 800980e:	d10c      	bne.n	800982a <_vfiprintf_r+0x176>
 8009810:	7863      	ldrb	r3, [r4, #1]
 8009812:	2b2a      	cmp	r3, #42	; 0x2a
 8009814:	d135      	bne.n	8009882 <_vfiprintf_r+0x1ce>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	1d1a      	adds	r2, r3, #4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	9203      	str	r2, [sp, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	bfb8      	it	lt
 8009822:	f04f 33ff 	movlt.w	r3, #4294967295
 8009826:	3402      	adds	r4, #2
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009910 <_vfiprintf_r+0x25c>
 800982e:	7821      	ldrb	r1, [r4, #0]
 8009830:	2203      	movs	r2, #3
 8009832:	4650      	mov	r0, sl
 8009834:	f7f6 fd5c 	bl	80002f0 <memchr>
 8009838:	b140      	cbz	r0, 800984c <_vfiprintf_r+0x198>
 800983a:	2340      	movs	r3, #64	; 0x40
 800983c:	eba0 000a 	sub.w	r0, r0, sl
 8009840:	fa03 f000 	lsl.w	r0, r3, r0
 8009844:	9b04      	ldr	r3, [sp, #16]
 8009846:	4303      	orrs	r3, r0
 8009848:	3401      	adds	r4, #1
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009850:	482c      	ldr	r0, [pc, #176]	; (8009904 <_vfiprintf_r+0x250>)
 8009852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009856:	2206      	movs	r2, #6
 8009858:	f7f6 fd4a 	bl	80002f0 <memchr>
 800985c:	2800      	cmp	r0, #0
 800985e:	d03f      	beq.n	80098e0 <_vfiprintf_r+0x22c>
 8009860:	4b29      	ldr	r3, [pc, #164]	; (8009908 <_vfiprintf_r+0x254>)
 8009862:	bb1b      	cbnz	r3, 80098ac <_vfiprintf_r+0x1f8>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	3307      	adds	r3, #7
 8009868:	f023 0307 	bic.w	r3, r3, #7
 800986c:	3308      	adds	r3, #8
 800986e:	9303      	str	r3, [sp, #12]
 8009870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009872:	443b      	add	r3, r7
 8009874:	9309      	str	r3, [sp, #36]	; 0x24
 8009876:	e767      	b.n	8009748 <_vfiprintf_r+0x94>
 8009878:	fb0c 3202 	mla	r2, ip, r2, r3
 800987c:	460c      	mov	r4, r1
 800987e:	2001      	movs	r0, #1
 8009880:	e7a5      	b.n	80097ce <_vfiprintf_r+0x11a>
 8009882:	2300      	movs	r3, #0
 8009884:	3401      	adds	r4, #1
 8009886:	9305      	str	r3, [sp, #20]
 8009888:	4619      	mov	r1, r3
 800988a:	f04f 0c0a 	mov.w	ip, #10
 800988e:	4620      	mov	r0, r4
 8009890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009894:	3a30      	subs	r2, #48	; 0x30
 8009896:	2a09      	cmp	r2, #9
 8009898:	d903      	bls.n	80098a2 <_vfiprintf_r+0x1ee>
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0c5      	beq.n	800982a <_vfiprintf_r+0x176>
 800989e:	9105      	str	r1, [sp, #20]
 80098a0:	e7c3      	b.n	800982a <_vfiprintf_r+0x176>
 80098a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a6:	4604      	mov	r4, r0
 80098a8:	2301      	movs	r3, #1
 80098aa:	e7f0      	b.n	800988e <_vfiprintf_r+0x1da>
 80098ac:	ab03      	add	r3, sp, #12
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4b16      	ldr	r3, [pc, #88]	; (800990c <_vfiprintf_r+0x258>)
 80098b4:	a904      	add	r1, sp, #16
 80098b6:	4630      	mov	r0, r6
 80098b8:	f3af 8000 	nop.w
 80098bc:	4607      	mov	r7, r0
 80098be:	1c78      	adds	r0, r7, #1
 80098c0:	d1d6      	bne.n	8009870 <_vfiprintf_r+0x1bc>
 80098c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c4:	07d9      	lsls	r1, r3, #31
 80098c6:	d405      	bmi.n	80098d4 <_vfiprintf_r+0x220>
 80098c8:	89ab      	ldrh	r3, [r5, #12]
 80098ca:	059a      	lsls	r2, r3, #22
 80098cc:	d402      	bmi.n	80098d4 <_vfiprintf_r+0x220>
 80098ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098d0:	f7ff fbb4 	bl	800903c <__retarget_lock_release_recursive>
 80098d4:	89ab      	ldrh	r3, [r5, #12]
 80098d6:	065b      	lsls	r3, r3, #25
 80098d8:	f53f af12 	bmi.w	8009700 <_vfiprintf_r+0x4c>
 80098dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098de:	e711      	b.n	8009704 <_vfiprintf_r+0x50>
 80098e0:	ab03      	add	r3, sp, #12
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	462a      	mov	r2, r5
 80098e6:	4b09      	ldr	r3, [pc, #36]	; (800990c <_vfiprintf_r+0x258>)
 80098e8:	a904      	add	r1, sp, #16
 80098ea:	4630      	mov	r0, r6
 80098ec:	f000 f880 	bl	80099f0 <_printf_i>
 80098f0:	e7e4      	b.n	80098bc <_vfiprintf_r+0x208>
 80098f2:	bf00      	nop
 80098f4:	0800ae68 	.word	0x0800ae68
 80098f8:	0800ae88 	.word	0x0800ae88
 80098fc:	0800ae48 	.word	0x0800ae48
 8009900:	0800aed1 	.word	0x0800aed1
 8009904:	0800aedb 	.word	0x0800aedb
 8009908:	00000000 	.word	0x00000000
 800990c:	0800968f 	.word	0x0800968f
 8009910:	0800aed7 	.word	0x0800aed7

08009914 <_printf_common>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	4616      	mov	r6, r2
 800991a:	4699      	mov	r9, r3
 800991c:	688a      	ldr	r2, [r1, #8]
 800991e:	690b      	ldr	r3, [r1, #16]
 8009920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009924:	4293      	cmp	r3, r2
 8009926:	bfb8      	it	lt
 8009928:	4613      	movlt	r3, r2
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009930:	4607      	mov	r7, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b10a      	cbz	r2, 800993a <_printf_common+0x26>
 8009936:	3301      	adds	r3, #1
 8009938:	6033      	str	r3, [r6, #0]
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	0699      	lsls	r1, r3, #26
 800993e:	bf42      	ittt	mi
 8009940:	6833      	ldrmi	r3, [r6, #0]
 8009942:	3302      	addmi	r3, #2
 8009944:	6033      	strmi	r3, [r6, #0]
 8009946:	6825      	ldr	r5, [r4, #0]
 8009948:	f015 0506 	ands.w	r5, r5, #6
 800994c:	d106      	bne.n	800995c <_printf_common+0x48>
 800994e:	f104 0a19 	add.w	sl, r4, #25
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	6832      	ldr	r2, [r6, #0]
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	42ab      	cmp	r3, r5
 800995a:	dc26      	bgt.n	80099aa <_printf_common+0x96>
 800995c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009960:	1e13      	subs	r3, r2, #0
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	bf18      	it	ne
 8009966:	2301      	movne	r3, #1
 8009968:	0692      	lsls	r2, r2, #26
 800996a:	d42b      	bmi.n	80099c4 <_printf_common+0xb0>
 800996c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009970:	4649      	mov	r1, r9
 8009972:	4638      	mov	r0, r7
 8009974:	47c0      	blx	r8
 8009976:	3001      	adds	r0, #1
 8009978:	d01e      	beq.n	80099b8 <_printf_common+0xa4>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	68e5      	ldr	r5, [r4, #12]
 800997e:	6832      	ldr	r2, [r6, #0]
 8009980:	f003 0306 	and.w	r3, r3, #6
 8009984:	2b04      	cmp	r3, #4
 8009986:	bf08      	it	eq
 8009988:	1aad      	subeq	r5, r5, r2
 800998a:	68a3      	ldr	r3, [r4, #8]
 800998c:	6922      	ldr	r2, [r4, #16]
 800998e:	bf0c      	ite	eq
 8009990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009994:	2500      	movne	r5, #0
 8009996:	4293      	cmp	r3, r2
 8009998:	bfc4      	itt	gt
 800999a:	1a9b      	subgt	r3, r3, r2
 800999c:	18ed      	addgt	r5, r5, r3
 800999e:	2600      	movs	r6, #0
 80099a0:	341a      	adds	r4, #26
 80099a2:	42b5      	cmp	r5, r6
 80099a4:	d11a      	bne.n	80099dc <_printf_common+0xc8>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e008      	b.n	80099bc <_printf_common+0xa8>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4652      	mov	r2, sl
 80099ae:	4649      	mov	r1, r9
 80099b0:	4638      	mov	r0, r7
 80099b2:	47c0      	blx	r8
 80099b4:	3001      	adds	r0, #1
 80099b6:	d103      	bne.n	80099c0 <_printf_common+0xac>
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c0:	3501      	adds	r5, #1
 80099c2:	e7c6      	b.n	8009952 <_printf_common+0x3e>
 80099c4:	18e1      	adds	r1, r4, r3
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	2030      	movs	r0, #48	; 0x30
 80099ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099ce:	4422      	add	r2, r4
 80099d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099d8:	3302      	adds	r3, #2
 80099da:	e7c7      	b.n	800996c <_printf_common+0x58>
 80099dc:	2301      	movs	r3, #1
 80099de:	4622      	mov	r2, r4
 80099e0:	4649      	mov	r1, r9
 80099e2:	4638      	mov	r0, r7
 80099e4:	47c0      	blx	r8
 80099e6:	3001      	adds	r0, #1
 80099e8:	d0e6      	beq.n	80099b8 <_printf_common+0xa4>
 80099ea:	3601      	adds	r6, #1
 80099ec:	e7d9      	b.n	80099a2 <_printf_common+0x8e>
	...

080099f0 <_printf_i>:
 80099f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f4:	7e0f      	ldrb	r7, [r1, #24]
 80099f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099f8:	2f78      	cmp	r7, #120	; 0x78
 80099fa:	4691      	mov	r9, r2
 80099fc:	4680      	mov	r8, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	469a      	mov	sl, r3
 8009a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a06:	d807      	bhi.n	8009a18 <_printf_i+0x28>
 8009a08:	2f62      	cmp	r7, #98	; 0x62
 8009a0a:	d80a      	bhi.n	8009a22 <_printf_i+0x32>
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	f000 80d8 	beq.w	8009bc2 <_printf_i+0x1d2>
 8009a12:	2f58      	cmp	r7, #88	; 0x58
 8009a14:	f000 80a3 	beq.w	8009b5e <_printf_i+0x16e>
 8009a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a20:	e03a      	b.n	8009a98 <_printf_i+0xa8>
 8009a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a26:	2b15      	cmp	r3, #21
 8009a28:	d8f6      	bhi.n	8009a18 <_printf_i+0x28>
 8009a2a:	a101      	add	r1, pc, #4	; (adr r1, 8009a30 <_printf_i+0x40>)
 8009a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a30:	08009a89 	.word	0x08009a89
 8009a34:	08009a9d 	.word	0x08009a9d
 8009a38:	08009a19 	.word	0x08009a19
 8009a3c:	08009a19 	.word	0x08009a19
 8009a40:	08009a19 	.word	0x08009a19
 8009a44:	08009a19 	.word	0x08009a19
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009a19 	.word	0x08009a19
 8009a50:	08009a19 	.word	0x08009a19
 8009a54:	08009a19 	.word	0x08009a19
 8009a58:	08009a19 	.word	0x08009a19
 8009a5c:	08009ba9 	.word	0x08009ba9
 8009a60:	08009acd 	.word	0x08009acd
 8009a64:	08009b8b 	.word	0x08009b8b
 8009a68:	08009a19 	.word	0x08009a19
 8009a6c:	08009a19 	.word	0x08009a19
 8009a70:	08009bcb 	.word	0x08009bcb
 8009a74:	08009a19 	.word	0x08009a19
 8009a78:	08009acd 	.word	0x08009acd
 8009a7c:	08009a19 	.word	0x08009a19
 8009a80:	08009a19 	.word	0x08009a19
 8009a84:	08009b93 	.word	0x08009b93
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	602a      	str	r2, [r5, #0]
 8009a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e0a3      	b.n	8009be4 <_printf_i+0x1f4>
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	6829      	ldr	r1, [r5, #0]
 8009aa0:	0606      	lsls	r6, r0, #24
 8009aa2:	f101 0304 	add.w	r3, r1, #4
 8009aa6:	d50a      	bpl.n	8009abe <_printf_i+0xce>
 8009aa8:	680e      	ldr	r6, [r1, #0]
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	2e00      	cmp	r6, #0
 8009aae:	da03      	bge.n	8009ab8 <_printf_i+0xc8>
 8009ab0:	232d      	movs	r3, #45	; 0x2d
 8009ab2:	4276      	negs	r6, r6
 8009ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab8:	485e      	ldr	r0, [pc, #376]	; (8009c34 <_printf_i+0x244>)
 8009aba:	230a      	movs	r3, #10
 8009abc:	e019      	b.n	8009af2 <_printf_i+0x102>
 8009abe:	680e      	ldr	r6, [r1, #0]
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ac6:	bf18      	it	ne
 8009ac8:	b236      	sxthne	r6, r6
 8009aca:	e7ef      	b.n	8009aac <_printf_i+0xbc>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	6820      	ldr	r0, [r4, #0]
 8009ad0:	1d19      	adds	r1, r3, #4
 8009ad2:	6029      	str	r1, [r5, #0]
 8009ad4:	0601      	lsls	r1, r0, #24
 8009ad6:	d501      	bpl.n	8009adc <_printf_i+0xec>
 8009ad8:	681e      	ldr	r6, [r3, #0]
 8009ada:	e002      	b.n	8009ae2 <_printf_i+0xf2>
 8009adc:	0646      	lsls	r6, r0, #25
 8009ade:	d5fb      	bpl.n	8009ad8 <_printf_i+0xe8>
 8009ae0:	881e      	ldrh	r6, [r3, #0]
 8009ae2:	4854      	ldr	r0, [pc, #336]	; (8009c34 <_printf_i+0x244>)
 8009ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ae6:	bf0c      	ite	eq
 8009ae8:	2308      	moveq	r3, #8
 8009aea:	230a      	movne	r3, #10
 8009aec:	2100      	movs	r1, #0
 8009aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009af2:	6865      	ldr	r5, [r4, #4]
 8009af4:	60a5      	str	r5, [r4, #8]
 8009af6:	2d00      	cmp	r5, #0
 8009af8:	bfa2      	ittt	ge
 8009afa:	6821      	ldrge	r1, [r4, #0]
 8009afc:	f021 0104 	bicge.w	r1, r1, #4
 8009b00:	6021      	strge	r1, [r4, #0]
 8009b02:	b90e      	cbnz	r6, 8009b08 <_printf_i+0x118>
 8009b04:	2d00      	cmp	r5, #0
 8009b06:	d04d      	beq.n	8009ba4 <_printf_i+0x1b4>
 8009b08:	4615      	mov	r5, r2
 8009b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b12:	5dc7      	ldrb	r7, [r0, r7]
 8009b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b18:	4637      	mov	r7, r6
 8009b1a:	42bb      	cmp	r3, r7
 8009b1c:	460e      	mov	r6, r1
 8009b1e:	d9f4      	bls.n	8009b0a <_printf_i+0x11a>
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d10b      	bne.n	8009b3c <_printf_i+0x14c>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	07de      	lsls	r6, r3, #31
 8009b28:	d508      	bpl.n	8009b3c <_printf_i+0x14c>
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	4299      	cmp	r1, r3
 8009b30:	bfde      	ittt	le
 8009b32:	2330      	movle	r3, #48	; 0x30
 8009b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b3c:	1b52      	subs	r2, r2, r5
 8009b3e:	6122      	str	r2, [r4, #16]
 8009b40:	f8cd a000 	str.w	sl, [sp]
 8009b44:	464b      	mov	r3, r9
 8009b46:	aa03      	add	r2, sp, #12
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	f7ff fee2 	bl	8009914 <_printf_common>
 8009b50:	3001      	adds	r0, #1
 8009b52:	d14c      	bne.n	8009bee <_printf_i+0x1fe>
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	b004      	add	sp, #16
 8009b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5e:	4835      	ldr	r0, [pc, #212]	; (8009c34 <_printf_i+0x244>)
 8009b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b64:	6829      	ldr	r1, [r5, #0]
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b6c:	6029      	str	r1, [r5, #0]
 8009b6e:	061d      	lsls	r5, r3, #24
 8009b70:	d514      	bpl.n	8009b9c <_printf_i+0x1ac>
 8009b72:	07df      	lsls	r7, r3, #31
 8009b74:	bf44      	itt	mi
 8009b76:	f043 0320 	orrmi.w	r3, r3, #32
 8009b7a:	6023      	strmi	r3, [r4, #0]
 8009b7c:	b91e      	cbnz	r6, 8009b86 <_printf_i+0x196>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	f023 0320 	bic.w	r3, r3, #32
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	2310      	movs	r3, #16
 8009b88:	e7b0      	b.n	8009aec <_printf_i+0xfc>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	f043 0320 	orr.w	r3, r3, #32
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	2378      	movs	r3, #120	; 0x78
 8009b94:	4828      	ldr	r0, [pc, #160]	; (8009c38 <_printf_i+0x248>)
 8009b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b9a:	e7e3      	b.n	8009b64 <_printf_i+0x174>
 8009b9c:	0659      	lsls	r1, r3, #25
 8009b9e:	bf48      	it	mi
 8009ba0:	b2b6      	uxthmi	r6, r6
 8009ba2:	e7e6      	b.n	8009b72 <_printf_i+0x182>
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	e7bb      	b.n	8009b20 <_printf_i+0x130>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	6826      	ldr	r6, [r4, #0]
 8009bac:	6961      	ldr	r1, [r4, #20]
 8009bae:	1d18      	adds	r0, r3, #4
 8009bb0:	6028      	str	r0, [r5, #0]
 8009bb2:	0635      	lsls	r5, r6, #24
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	d501      	bpl.n	8009bbc <_printf_i+0x1cc>
 8009bb8:	6019      	str	r1, [r3, #0]
 8009bba:	e002      	b.n	8009bc2 <_printf_i+0x1d2>
 8009bbc:	0670      	lsls	r0, r6, #25
 8009bbe:	d5fb      	bpl.n	8009bb8 <_printf_i+0x1c8>
 8009bc0:	8019      	strh	r1, [r3, #0]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	6123      	str	r3, [r4, #16]
 8009bc6:	4615      	mov	r5, r2
 8009bc8:	e7ba      	b.n	8009b40 <_printf_i+0x150>
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	602a      	str	r2, [r5, #0]
 8009bd0:	681d      	ldr	r5, [r3, #0]
 8009bd2:	6862      	ldr	r2, [r4, #4]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f7f6 fb8a 	bl	80002f0 <memchr>
 8009bdc:	b108      	cbz	r0, 8009be2 <_printf_i+0x1f2>
 8009bde:	1b40      	subs	r0, r0, r5
 8009be0:	6060      	str	r0, [r4, #4]
 8009be2:	6863      	ldr	r3, [r4, #4]
 8009be4:	6123      	str	r3, [r4, #16]
 8009be6:	2300      	movs	r3, #0
 8009be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bec:	e7a8      	b.n	8009b40 <_printf_i+0x150>
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	47d0      	blx	sl
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d0ab      	beq.n	8009b54 <_printf_i+0x164>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	079b      	lsls	r3, r3, #30
 8009c00:	d413      	bmi.n	8009c2a <_printf_i+0x23a>
 8009c02:	68e0      	ldr	r0, [r4, #12]
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	4298      	cmp	r0, r3
 8009c08:	bfb8      	it	lt
 8009c0a:	4618      	movlt	r0, r3
 8009c0c:	e7a4      	b.n	8009b58 <_printf_i+0x168>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	4632      	mov	r2, r6
 8009c12:	4649      	mov	r1, r9
 8009c14:	4640      	mov	r0, r8
 8009c16:	47d0      	blx	sl
 8009c18:	3001      	adds	r0, #1
 8009c1a:	d09b      	beq.n	8009b54 <_printf_i+0x164>
 8009c1c:	3501      	adds	r5, #1
 8009c1e:	68e3      	ldr	r3, [r4, #12]
 8009c20:	9903      	ldr	r1, [sp, #12]
 8009c22:	1a5b      	subs	r3, r3, r1
 8009c24:	42ab      	cmp	r3, r5
 8009c26:	dcf2      	bgt.n	8009c0e <_printf_i+0x21e>
 8009c28:	e7eb      	b.n	8009c02 <_printf_i+0x212>
 8009c2a:	2500      	movs	r5, #0
 8009c2c:	f104 0619 	add.w	r6, r4, #25
 8009c30:	e7f5      	b.n	8009c1e <_printf_i+0x22e>
 8009c32:	bf00      	nop
 8009c34:	0800aee2 	.word	0x0800aee2
 8009c38:	0800aef3 	.word	0x0800aef3

08009c3c <_read_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	; (8009c5c <_read_r+0x20>)
 8009c40:	4604      	mov	r4, r0
 8009c42:	4608      	mov	r0, r1
 8009c44:	4611      	mov	r1, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	602a      	str	r2, [r5, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f7f8 ff22 	bl	8002a94 <_read>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_read_r+0x1e>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_read_r+0x1e>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	240081b4 	.word	0x240081b4

08009c60 <__swbuf_r>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	460e      	mov	r6, r1
 8009c64:	4614      	mov	r4, r2
 8009c66:	4605      	mov	r5, r0
 8009c68:	b118      	cbz	r0, 8009c72 <__swbuf_r+0x12>
 8009c6a:	6983      	ldr	r3, [r0, #24]
 8009c6c:	b90b      	cbnz	r3, 8009c72 <__swbuf_r+0x12>
 8009c6e:	f7ff f907 	bl	8008e80 <__sinit>
 8009c72:	4b21      	ldr	r3, [pc, #132]	; (8009cf8 <__swbuf_r+0x98>)
 8009c74:	429c      	cmp	r4, r3
 8009c76:	d12b      	bne.n	8009cd0 <__swbuf_r+0x70>
 8009c78:	686c      	ldr	r4, [r5, #4]
 8009c7a:	69a3      	ldr	r3, [r4, #24]
 8009c7c:	60a3      	str	r3, [r4, #8]
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	071a      	lsls	r2, r3, #28
 8009c82:	d52f      	bpl.n	8009ce4 <__swbuf_r+0x84>
 8009c84:	6923      	ldr	r3, [r4, #16]
 8009c86:	b36b      	cbz	r3, 8009ce4 <__swbuf_r+0x84>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	6820      	ldr	r0, [r4, #0]
 8009c8c:	1ac0      	subs	r0, r0, r3
 8009c8e:	6963      	ldr	r3, [r4, #20]
 8009c90:	b2f6      	uxtb	r6, r6
 8009c92:	4283      	cmp	r3, r0
 8009c94:	4637      	mov	r7, r6
 8009c96:	dc04      	bgt.n	8009ca2 <__swbuf_r+0x42>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7ff fc3a 	bl	8009514 <_fflush_r>
 8009ca0:	bb30      	cbnz	r0, 8009cf0 <__swbuf_r+0x90>
 8009ca2:	68a3      	ldr	r3, [r4, #8]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	6022      	str	r2, [r4, #0]
 8009cae:	701e      	strb	r6, [r3, #0]
 8009cb0:	6963      	ldr	r3, [r4, #20]
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	4283      	cmp	r3, r0
 8009cb6:	d004      	beq.n	8009cc2 <__swbuf_r+0x62>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	07db      	lsls	r3, r3, #31
 8009cbc:	d506      	bpl.n	8009ccc <__swbuf_r+0x6c>
 8009cbe:	2e0a      	cmp	r6, #10
 8009cc0:	d104      	bne.n	8009ccc <__swbuf_r+0x6c>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f7ff fc25 	bl	8009514 <_fflush_r>
 8009cca:	b988      	cbnz	r0, 8009cf0 <__swbuf_r+0x90>
 8009ccc:	4638      	mov	r0, r7
 8009cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <__swbuf_r+0x9c>)
 8009cd2:	429c      	cmp	r4, r3
 8009cd4:	d101      	bne.n	8009cda <__swbuf_r+0x7a>
 8009cd6:	68ac      	ldr	r4, [r5, #8]
 8009cd8:	e7cf      	b.n	8009c7a <__swbuf_r+0x1a>
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <__swbuf_r+0xa0>)
 8009cdc:	429c      	cmp	r4, r3
 8009cde:	bf08      	it	eq
 8009ce0:	68ec      	ldreq	r4, [r5, #12]
 8009ce2:	e7ca      	b.n	8009c7a <__swbuf_r+0x1a>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 f80c 	bl	8009d04 <__swsetup_r>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d0cb      	beq.n	8009c88 <__swbuf_r+0x28>
 8009cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8009cf4:	e7ea      	b.n	8009ccc <__swbuf_r+0x6c>
 8009cf6:	bf00      	nop
 8009cf8:	0800ae68 	.word	0x0800ae68
 8009cfc:	0800ae88 	.word	0x0800ae88
 8009d00:	0800ae48 	.word	0x0800ae48

08009d04 <__swsetup_r>:
 8009d04:	4b32      	ldr	r3, [pc, #200]	; (8009dd0 <__swsetup_r+0xcc>)
 8009d06:	b570      	push	{r4, r5, r6, lr}
 8009d08:	681d      	ldr	r5, [r3, #0]
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	b125      	cbz	r5, 8009d1a <__swsetup_r+0x16>
 8009d10:	69ab      	ldr	r3, [r5, #24]
 8009d12:	b913      	cbnz	r3, 8009d1a <__swsetup_r+0x16>
 8009d14:	4628      	mov	r0, r5
 8009d16:	f7ff f8b3 	bl	8008e80 <__sinit>
 8009d1a:	4b2e      	ldr	r3, [pc, #184]	; (8009dd4 <__swsetup_r+0xd0>)
 8009d1c:	429c      	cmp	r4, r3
 8009d1e:	d10f      	bne.n	8009d40 <__swsetup_r+0x3c>
 8009d20:	686c      	ldr	r4, [r5, #4]
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d28:	0719      	lsls	r1, r3, #28
 8009d2a:	d42c      	bmi.n	8009d86 <__swsetup_r+0x82>
 8009d2c:	06dd      	lsls	r5, r3, #27
 8009d2e:	d411      	bmi.n	8009d54 <__swsetup_r+0x50>
 8009d30:	2309      	movs	r3, #9
 8009d32:	6033      	str	r3, [r6, #0]
 8009d34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3e:	e03e      	b.n	8009dbe <__swsetup_r+0xba>
 8009d40:	4b25      	ldr	r3, [pc, #148]	; (8009dd8 <__swsetup_r+0xd4>)
 8009d42:	429c      	cmp	r4, r3
 8009d44:	d101      	bne.n	8009d4a <__swsetup_r+0x46>
 8009d46:	68ac      	ldr	r4, [r5, #8]
 8009d48:	e7eb      	b.n	8009d22 <__swsetup_r+0x1e>
 8009d4a:	4b24      	ldr	r3, [pc, #144]	; (8009ddc <__swsetup_r+0xd8>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	bf08      	it	eq
 8009d50:	68ec      	ldreq	r4, [r5, #12]
 8009d52:	e7e6      	b.n	8009d22 <__swsetup_r+0x1e>
 8009d54:	0758      	lsls	r0, r3, #29
 8009d56:	d512      	bpl.n	8009d7e <__swsetup_r+0x7a>
 8009d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d5a:	b141      	cbz	r1, 8009d6e <__swsetup_r+0x6a>
 8009d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d60:	4299      	cmp	r1, r3
 8009d62:	d002      	beq.n	8009d6a <__swsetup_r+0x66>
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff fc2f 	bl	80095c8 <_free_r>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	2300      	movs	r3, #0
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f043 0308 	orr.w	r3, r3, #8
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	b94b      	cbnz	r3, 8009d9e <__swsetup_r+0x9a>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d94:	d003      	beq.n	8009d9e <__swsetup_r+0x9a>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f000 f847 	bl	8009e2c <__smakebuf_r>
 8009d9e:	89a0      	ldrh	r0, [r4, #12]
 8009da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da4:	f010 0301 	ands.w	r3, r0, #1
 8009da8:	d00a      	beq.n	8009dc0 <__swsetup_r+0xbc>
 8009daa:	2300      	movs	r3, #0
 8009dac:	60a3      	str	r3, [r4, #8]
 8009dae:	6963      	ldr	r3, [r4, #20]
 8009db0:	425b      	negs	r3, r3
 8009db2:	61a3      	str	r3, [r4, #24]
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	b943      	cbnz	r3, 8009dca <__swsetup_r+0xc6>
 8009db8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dbc:	d1ba      	bne.n	8009d34 <__swsetup_r+0x30>
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	0781      	lsls	r1, r0, #30
 8009dc2:	bf58      	it	pl
 8009dc4:	6963      	ldrpl	r3, [r4, #20]
 8009dc6:	60a3      	str	r3, [r4, #8]
 8009dc8:	e7f4      	b.n	8009db4 <__swsetup_r+0xb0>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	e7f7      	b.n	8009dbe <__swsetup_r+0xba>
 8009dce:	bf00      	nop
 8009dd0:	240030d8 	.word	0x240030d8
 8009dd4:	0800ae68 	.word	0x0800ae68
 8009dd8:	0800ae88 	.word	0x0800ae88
 8009ddc:	0800ae48 	.word	0x0800ae48

08009de0 <__swhatbuf_r>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	460e      	mov	r6, r1
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	2900      	cmp	r1, #0
 8009dea:	b096      	sub	sp, #88	; 0x58
 8009dec:	4614      	mov	r4, r2
 8009dee:	461d      	mov	r5, r3
 8009df0:	da08      	bge.n	8009e04 <__swhatbuf_r+0x24>
 8009df2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	602a      	str	r2, [r5, #0]
 8009dfa:	061a      	lsls	r2, r3, #24
 8009dfc:	d410      	bmi.n	8009e20 <__swhatbuf_r+0x40>
 8009dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e02:	e00e      	b.n	8009e22 <__swhatbuf_r+0x42>
 8009e04:	466a      	mov	r2, sp
 8009e06:	f000 f851 	bl	8009eac <_fstat_r>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	dbf1      	blt.n	8009df2 <__swhatbuf_r+0x12>
 8009e0e:	9a01      	ldr	r2, [sp, #4]
 8009e10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e18:	425a      	negs	r2, r3
 8009e1a:	415a      	adcs	r2, r3
 8009e1c:	602a      	str	r2, [r5, #0]
 8009e1e:	e7ee      	b.n	8009dfe <__swhatbuf_r+0x1e>
 8009e20:	2340      	movs	r3, #64	; 0x40
 8009e22:	2000      	movs	r0, #0
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	b016      	add	sp, #88	; 0x58
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e2c <__smakebuf_r>:
 8009e2c:	898b      	ldrh	r3, [r1, #12]
 8009e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e30:	079d      	lsls	r5, r3, #30
 8009e32:	4606      	mov	r6, r0
 8009e34:	460c      	mov	r4, r1
 8009e36:	d507      	bpl.n	8009e48 <__smakebuf_r+0x1c>
 8009e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	2301      	movs	r3, #1
 8009e42:	6163      	str	r3, [r4, #20]
 8009e44:	b002      	add	sp, #8
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	ab01      	add	r3, sp, #4
 8009e4a:	466a      	mov	r2, sp
 8009e4c:	f7ff ffc8 	bl	8009de0 <__swhatbuf_r>
 8009e50:	9900      	ldr	r1, [sp, #0]
 8009e52:	4605      	mov	r5, r0
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7ff f929 	bl	80090ac <_malloc_r>
 8009e5a:	b948      	cbnz	r0, 8009e70 <__smakebuf_r+0x44>
 8009e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e60:	059a      	lsls	r2, r3, #22
 8009e62:	d4ef      	bmi.n	8009e44 <__smakebuf_r+0x18>
 8009e64:	f023 0303 	bic.w	r3, r3, #3
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	e7e3      	b.n	8009e38 <__smakebuf_r+0xc>
 8009e70:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <__smakebuf_r+0x7c>)
 8009e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	6020      	str	r0, [r4, #0]
 8009e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	9b00      	ldr	r3, [sp, #0]
 8009e80:	6163      	str	r3, [r4, #20]
 8009e82:	9b01      	ldr	r3, [sp, #4]
 8009e84:	6120      	str	r0, [r4, #16]
 8009e86:	b15b      	cbz	r3, 8009ea0 <__smakebuf_r+0x74>
 8009e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f000 f81f 	bl	8009ed0 <_isatty_r>
 8009e92:	b128      	cbz	r0, 8009ea0 <__smakebuf_r+0x74>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	f023 0303 	bic.w	r3, r3, #3
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	89a0      	ldrh	r0, [r4, #12]
 8009ea2:	4305      	orrs	r5, r0
 8009ea4:	81a5      	strh	r5, [r4, #12]
 8009ea6:	e7cd      	b.n	8009e44 <__smakebuf_r+0x18>
 8009ea8:	08008e19 	.word	0x08008e19

08009eac <_fstat_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d07      	ldr	r5, [pc, #28]	; (8009ecc <_fstat_r+0x20>)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	602b      	str	r3, [r5, #0]
 8009eba:	f7f8 fdfd 	bl	8002ab8 <_fstat>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	d102      	bne.n	8009ec8 <_fstat_r+0x1c>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	b103      	cbz	r3, 8009ec8 <_fstat_r+0x1c>
 8009ec6:	6023      	str	r3, [r4, #0]
 8009ec8:	bd38      	pop	{r3, r4, r5, pc}
 8009eca:	bf00      	nop
 8009ecc:	240081b4 	.word	0x240081b4

08009ed0 <_isatty_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4d06      	ldr	r5, [pc, #24]	; (8009eec <_isatty_r+0x1c>)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	602b      	str	r3, [r5, #0]
 8009edc:	f7f8 fdf2 	bl	8002ac4 <_isatty>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_isatty_r+0x1a>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_isatty_r+0x1a>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	240081b4 	.word	0x240081b4

08009ef0 <_init>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	bf00      	nop
 8009ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef6:	bc08      	pop	{r3}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	4770      	bx	lr

08009efc <_fini>:
 8009efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efe:	bf00      	nop
 8009f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f02:	bc08      	pop	{r3}
 8009f04:	469e      	mov	lr, r3
 8009f06:	4770      	bx	lr
